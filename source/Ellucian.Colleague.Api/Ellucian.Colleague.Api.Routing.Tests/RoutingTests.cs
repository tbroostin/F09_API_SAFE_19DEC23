// Copyright 2014-2022 Ellucian Company L.P. and its affiliates.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Collections.Specialized;
using System.Net.Http;
using System.Web;
using System.Web.Routing;

namespace Ellucian.Colleague.Api.Routing.Tests
{
    [TestClass]
    [System.Runtime.InteropServices.Guid("0A0EF901-E9E6-4593-ACE4-1962D0F97E49")]
    public class RoutingTests
    {
        /**** Instructions for maintaining this test class **************************

            1.	Each entry in RouteConfig.cs must have a corresponding test in RoutingTests.cs

            2.	The naming convention for the tests:
                a.	Current (default) version: DefaultRoute_<RouteName>_<http verb> 
                    i.	Example: DefaultRoute_AcademicStandings_Get
                b.	All other version(s): Route_<RouteName>_<http verb>_<version number> 
                    i.	Example: Route_AcademicStandings_Get_1

            3.	When a new version of a route is created:
                a.	Update the DefaultRoute _<RouteName>_<http verb> test to point to the new route 
                    (assuming the new route is now the default, if not, follow just perform the next step)
                b.	Create a new test named Route_<RouteName>_<http verb>_<version number> to cover 
                    testing the now previous version (or in the case of the new route not being default, the new version number)
                c.	For the new test in step b, specify the correct constraint 
                    (i.e. the correct media type string) that represents the version being tested. 
                    Note that only non-default route tests require the constraint to be specified.
          
         *****************************************************************************/

        private static RouteCollection routes = new RouteCollection();

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        {
            RouteConfig.RegisterRoutes(routes);
        }


        #region AcademicCatalog

        [TestMethod]
        public void DefaultRoute_GetAcademicCatalog()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCatalogs2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_GetAcademicCatalogs_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCatalogs2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_GetAcademicCatalogs_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCatalogs2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicCatalog_GetAcademicCatalogById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCatalogById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_GetAcademicCatalogByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCatalogById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_GetAcademicCatalogByGuid_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCatalogById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalogById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-catalogs/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_PutAcademicCatalog_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-catalogs/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicCatalogs", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_PutAcademicCatalog_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-catalogs/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicCatalogs", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_PostAcademicCatalog_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-catalogs", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicCatalogs", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_PostAcademicCatalog_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-catalogs", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicCatalogs", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCatalog_DeleteAcademicCatalog()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-catalogs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-catalogs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCatalog", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicCatalogs", routeData.Values["Action"]);
        }

        #endregion AcademicCatalog

        #region AcademicCredentials

        [TestMethod]
        public void DefaultRoute_GetAcademicCredentials()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-credentials");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCredentials_GetAcademicCredentials_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-credentials", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCredentials_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-credentials", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicCredentials_GetAcademicCredentialByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-credentials/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCredentialByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCredentials_GetAcademicCredentialByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-credentials/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicCredentialByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCredentialById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-credentials/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicCredentials_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-credentials/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicCredentialAsync", routeData.Values["Action"]);
        }

        public void Route_AcademicCredentials_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-credentials", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicCredentials_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-credentials/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicCredentialAsync", routeData.Values["Action"]);
        }

        #endregion Academic Credentials

        #region AcademicDisciplines

        [TestMethod]
        public void DefaultRoute_GetAcademicDisciplines()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDisciplines3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplines_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDisciplinesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplines_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDisciplines2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplines_10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDisciplines2Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplines_15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDisciplines3Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_AcademicDisciplines_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicDisciplines_GetAcademicDisciplineByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDiscipline2ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplineByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDisciplineByIdAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplineByGuid_10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines/id", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDiscipline2ByIdAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_AcademicDisciplines_GetAcademicDisciplineByGuid_15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines/id", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicDiscipline2ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplineById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-disciplines/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_PutAcademicDisciplines_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-disciplines/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicDisciplines", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_PostAcademicDisciplines_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-disciplines", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicDisciplines", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicDisciplines_DeleteAcademicDisciplines()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-disciplines/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-disciplines/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicDisciplines", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicDisciplines", routeData.Values["Action"]);
        }

        #endregion AcademicDisciplines

        #region AcademicHistory

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryAcademicHistory()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-history", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicHistoryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryAcademicHistory2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-history");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicHistory2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryAcademicHistoryLevel1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-history-levels", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-history-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicHistoryLevelAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryAcademicHistoryLevel2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-history-levels", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-history-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicHistoryLevel2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryAcademicHistoryLevel3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-history-levels");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-history-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicHistoryLevel3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_AcademicHistory_GetInvalidStudentEnrollment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/invalid-student-enrollments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/invalid-student-enrollments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("GetInvalidStudentEnrollmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryByPostAcademicCredits()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-credits", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicCreditsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryByPostAcademicCredits2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-credits");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicCredits2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHistory_QueryByPostAcademicCreditsWithInvalidKeys()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/academic-credits", _mediaTypeHeaderEllucianInvalidKeysFormatVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAcademicCreditsWithInvalidKeysAsync", routeData.Values["Action"]);
        }

        #endregion AcademicHistory

        #region Academic Honors

        [TestMethod]
        public void DefaultRoute_GetAcademicHonorTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-honors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("GetOtherHonorAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicHonorTypes_GetOtherHonors_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-honors", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("GetOtherHonorAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHonorTypes_GetOtherHonorsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-honors/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("GetOtherHonorByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicHonorTypes_GetOtherHonorsByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-honors/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("GetOtherHonorByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicHonorTypes_PutOtherHonors_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-honors/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("PutOtherHonors", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicHonorTypes_PostOtherHonors_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-honors", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("PostOtherHonors", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicHonorTypes_DeleteOtherHonors()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-honors/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-honors/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OtherHonors", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteOtherHonors", routeData.Values["Action"]);
        }
        #endregion Academic Honors

        #region AcademicLevels

        [TestMethod]
        public void Route_AcademicLevels_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_GetAcademicLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicLevels3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_GetAcademicLevels_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicLevels3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicLevels_GetAcademicLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicLevels3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_GetAcademicLevelById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicLevelById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_GetAcademicLevelById_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicLevelById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicLevels_GetAcademicLevelById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-levels/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicLevelById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_PostAcademicLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-levels", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicLevels2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_PostAcademicLevels_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-levels", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicLevels2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_PutAcademicLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-levels/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicLevels2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_PutAcademicLevels_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-levels/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicLevels2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicLevels_DeleteAcademicLevels()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-levels/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicLevels", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicLevels2Async", routeData.Values["Action"]);
        }

        #endregion AcademicLevels

        #region Academic Periods

        [TestMethod]
        public void Route_AcademicPeriods_GetAcademicPeriods_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriods2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_GetAcademicPeriodByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriodByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_GetAcademicPeriods_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriods3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_GetAcademicPeriodByGuid_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriodByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_GetAcademicPeriods_16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriods4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_GetAcademicPeriodByGuid_16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods/id", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriodByGuid4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicPeriods_GetAcademicPeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriods4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicPeriods_GetAcademicPeriodByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPeriodByGuid4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriodById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-periods/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_PostAcademicPeriods_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-periods", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicPeriodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPeriods_PutAcademicPeriods_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-periods/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicPeriodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicPeriods_DeleteAcademicPeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-periods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicPeriodByIdAsync", routeData.Values["Action"]);
        }


        #endregion Academic Periods

        #region AcademicPrograms

        [TestMethod]
        public void DefaultRoute_AcademicPrograms_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPrograms4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_GetAcademicPrograms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgramsV6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_GetAcademicPrograms_1520()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs", "application/vnd.hedtech.integration.v15.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPrograms4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_GetAcademicProgramById_1520()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs/id", "application/vnd.hedtech.integration.v15.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgramById4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_PostAcademicProgram_1520()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-programs", "application/vnd.hedtech.integration.v15.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicProgram", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_PutAcademicPrograms_1520()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-programs/id", "application/vnd.hedtech.integration.v15.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicProgram", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_GetAcademicPrograms_10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicPrograms3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_GetAcademicProgramById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgramByIdV6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_GetAcademicProgramById_10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs/id", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgramById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicPrograms_GetAcademicProgramById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-programs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgramById4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_PostAcademicProgram_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-programs", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicProgram", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicPrograms_PutAcademicPrograms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-programs/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicProgram", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicPrograms_DeleteAcademicProgram()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-programs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicProgram", routeData.Values["Action"]);
        }


        #endregion AcademicPrograms

        #region AcademicProgressAppealCodes

        [TestMethod]
        public void RouteDefault_AcademicProgressAppealCodes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-progress-appeal-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-progress-appeal-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicProgressAppealCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgressAppealCodesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region AcademicProgressEvaluations

        [TestMethod]
        public void Route_StudentAcademicProgressEvaluations_Get1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/{studentId}/academic-progress-evaluations", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-progress-evaluations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicProgressEvaluations", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgressEvaluationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentAcademicProgressEvaluations_Get2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/{studentId}/academic-progress-evaluations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-progress-evaluations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicProgressEvaluations", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgressEvaluations2Async", routeData.Values["Action"]);
        }

        #endregion

        #region AcademicProgressStatuses

        [TestMethod]
        public void RouteDefault_AcademicProgressStatuses_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-progress-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-progress-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicProgressStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AcademicStandings

        [TestMethod]
        public void Route_AcademicStandings_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-standings", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetAcademicStandings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-standings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicStandingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicStandings_GetAcademicStandingsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-standings", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicStandingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AcademicStandings_GetAcademicStandingByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-standings/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicStandingByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicStandings_GetAcademicStandingByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/academic-standings/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicStandingByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicStandings_PutAcademicStandingAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/academic-standings/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("PutAcademicStandingAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicStandings_PostAcademicStandingAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/academic-standings", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcademicStandingAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AcademicStandings_DeleteAcademicStandingAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/academic-standings/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("academic-standings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAcademicStandingAsync", routeData.Values["Action"]);
        }

        #endregion AcademicStandings

        #region AccountActivity

        [TestMethod]
        public void DefaultRoute_AccountActivity_GetAccountActivityPeriodsForStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-activity/admin/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-activity/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountActivity", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountActivityPeriodsForStudent", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountActivity_PostAccountActivityByPeriodForStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/account-activity/period/admin/studentId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-activity/period/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountActivity", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route!!!  See PostAccountActivityByPeriodForStudent2 in AccountActivity
            Assert.AreEqual("PostAccountActivityByPeriodForStudent", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_AccountActivity_PostAccountActivityByPeriodForStudent2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/account-activity/period/admin/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-activity/period/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountActivity", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountActivityByPeriodForStudent2", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountActivity_GetAccountActivityByTermForStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-activity/term/admin/studentId?termId=termId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-activity/term/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountActivity", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route!!!  See GetAccountActivityByTermForStudent2 in AccountActivity
            Assert.AreEqual("GetAccountActivityByTermForStudent", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AccountActivity_GetAccountActivityByTermForStudent2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-activity/term/admin/studentId?termId=termId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-activity/term/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountActivity", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountActivityByTermForStudent2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AccountActivity_GetStudentAwardDisbursementInfoAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/disbursements/awardYear/awardId", _mediaTypeHeaderStudentFinanceDisbursementsVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/disbursements/{awardYear}/{awardId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountActivity", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardDisbursementInfoAsync", routeData.Values["Action"]);
        }

        #endregion AccountActivity

        #region AccountingCodes
        [TestMethod]
        public void Default_Route_GetAccountingCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodes_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetAccountingCodesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetAccountingCodesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodesById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodesById_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-codes/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingCodes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-codes/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingCode", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingCodes_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-codes/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingCode", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingCodes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-codes", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingCode", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingCodes_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-codes", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingCode", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-codes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingCode", routeData.Values["Action"]);
        }
        #endregion

        #region AccountingCodeCategories

        [TestMethod]
        public void Default_Route_AccountingCodeCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-code-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodeCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-code-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingCodeCategories_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-code-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingCodeCategoryByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-code-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeCategoryByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingCodeCategoryByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-code-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingCodeCategoryByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-code-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingCodeCategoryByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountingCodeCategory_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-code-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingCodeCategoryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingCodeCategory_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-code-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingCodeCategoryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingCodeCategory_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-code-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-code-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingCodeCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingCodeCategoryAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountDue

        [TestMethod]
        public void DefaultRoute_AccountDue_GetAccountDuePeriodForStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-due/period/admin/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-due/period/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountDue", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountDuePeriodForStudent", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_AccountDue_GetAccountDueForStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-due/term/admin/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-due/term/admin/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountDue", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountDueForStudent", routeData.Values["Action"]);
        }

        #endregion AccountDue

        #region AccountingStrings

        [TestMethod]
        public void DefaultRoute_AccountingStrings_GetAccountingStrings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringByFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStrings_GetAccountingStrings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStrings_GetAccountingStrings_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringByFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AccountingStrings_GetAccountingStringsByType()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings?accountingString=accountingString");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringByFilterAsync", routeData.Values["Action"]);
        }



        [TestMethod]
        public void Route_AccountingStrings_GetAccountingStringsByType_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings?accountingString=accountingString", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringByFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringsByGuid_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStrings_PostAccountingStrings_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-strings", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingStringsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStrings_PutAccountingStrings_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-strings/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingStringsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStrings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-strings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-strings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingStringsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStrings_GetAccountingStringsByType_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-strings?accountingString=accountingString", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        #endregion

        #region AccountingStringComponents

        [TestMethod]
        public void Default_Route_AccountingStringComponents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-components");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringComponents_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-components", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringComponents_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-components", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringComponentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-components/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringComponentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-components/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringComponentsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-components/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountingStringComponents_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-string-components/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingStringComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringComponents_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-string-components", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingStringComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringComponents_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-string-components/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingStringComponentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountingStringComponentValues

        [TestMethod]
        public void Default_Route_AccountingStringComponentValues()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-component-values");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentValues3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringComponentValues_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-component-values", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringComponentValues_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-component-values", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringComponentValuesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-component-values/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentValues3ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringComponentValuesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-component-values/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringComponentValuesByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-component-values/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringComponentValuesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountingStringComponentValues_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-string-component-values/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingStringComponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringComponentValues_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-string-component-values", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingStringComponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringComponentValues_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-string-component-values/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-component-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingStringComponentValuesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountingStringSubcomponents

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponents");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringSubcomponents_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponents", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringSubcomponents_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponents", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponents/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponents/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringSubcomponentsByGuid_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponents/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountingStringSubcomponents_Put_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-string-subcomponents/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingStringSubcomponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringSubcomponents_Post_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-string-subcomponents", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingStringSubcomponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponents_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-string-subcomponents/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponents/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponents", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingStringSubcomponentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountingStringSubcomponentValues

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponentValues()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponent-values");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringSubcomponentValues_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponent-values", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringSubcomponentValues_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponent-values", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponentValuesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponent-values/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentValuesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponentValuesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponent-values/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringSubcomponentValuesByGuid_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-subcomponent-values/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringSubcomponentValuesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountingStringSubcomponentValues_Put_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-string-subcomponent-values/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingStringSubcomponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringSubcomponentValues_Post_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-string-subcomponent-values", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingStringSubcomponentValuesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringSubcomponentValues_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-string-subcomponent-values/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-subcomponent-values/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStringSubcomponentValues", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingStringSubcomponentValuesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountingStringFormats

        [TestMethod]
        public void Default_Route_AccountingStringFormats()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-formats");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringFormatsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringFormats_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-formats", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAccountingStringFormats_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-formats", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringFormatsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringFormatsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-formats/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringFormatsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringFormatsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-formats/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringFormatsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounting-string-formats/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountingStringFormatsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AccountingStringFormats_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounting-string-formats/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountingStringFormatsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountingStringFormats_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounting-string-formats", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountingStringFormatsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AccountingStringFormats_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounting-string-formats/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounting-string-formats/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountingStrings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountingStringFormatsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountFundsAvailable

        [TestMethod]
        public void DefaultRoute_AccountFundsAvailable_GetAccountFundsAvailable()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailableAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_GetAccountFundsAvailable()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailableAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AccountFundsAvailable_GetAccountFundsAvailableByCriteria()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailableAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_PutAccountFundsAvailable()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/account-funds-available/{guid}", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountFundsAvailableAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_PostAccountFundsAvailable()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/account-funds-available", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountFundsAvailableAsync", routeData.Values["Action"]);
        }

        #endregion 

        #region AccountFundsAvailable_Transactions

        [TestMethod]
        public void DefaultRoute_AccountFundsAvailable_Transaction_GetAccountFundsAvailable()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_GetAccountFundsAvailablev8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available_transactions", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available_transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_GetAccountFundsAvailablev11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_GetAccountFundsAvailablev1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AccountFundsAvailable_Transaction_GetAccountFundsAvailableByID()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_UnsupportedVersionGetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions/guid", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_GetAccountFundsAvailablev8ByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available_transactions/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available_transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_GetAccountFundsAvailablev11ById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_GetAccountFundsAvailablev1110ById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-funds-available-transactions/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountFundsAvailable_TransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_PutAccountFundsAvailablev8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/account-funds-available_transactions/{guid}", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available_transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_PutAccountFundsAvailablev11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/account-funds-available-transactions/{guid}", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_PutAccountFundsAvailablev1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/account-funds-available-transactions/{guid}", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_PostAccountFundsAvailablev8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/account-funds-available_transactions", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available_transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_Delete_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/account-funds-available-transactions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-funds-available-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_QueryAccountFundsAvailable_TransactionsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/account-funds-available_transactions", "application/vnd.hedtech.integration.afa_transactions.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/account-funds-available_transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountFundsAvailable_TransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_QueryAccountFundsAvailable_TransactionsAsyncV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/account-funds-available-transactions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/account-funds-available-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountFundsAvailable_Transactions2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountFundsAvailable_Transaction_QueryAccountFundsAvailable_TransactionsAsyncV1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/account-funds-available-transactions", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/account-funds-available-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountFundsAvailable", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountFundsAvailable_Transactions2Async", routeData.Values["Action"]);
        }

        #endregion

        #region AccountReceivableTypes

        [TestMethod]
        public void Route_AccountReceivableTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-receivable-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountReceivableTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-receivable-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypes_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-receivable-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountReceivableTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypesById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-receivable-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountReceivableTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypesById_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-receivable-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountReceivableTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-receivable-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/account-receivable-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountReceivableTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/account-receivable-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountReceivableTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountReceivableTypes_Delete_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/account-receivable-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-receivable-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountReceivableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountReceivableTypeAsync", routeData.Values["Action"]);
        }

        #endregion

        #region AccountsPayableSources
        [TestMethod]
        public void DefaultRoute_GetAccountsPayableSources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableSourcesV8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-sources", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_DefaultGetAccountsPayableSourcesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-sources/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableSourcesByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableSourcesByGuidV8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-sources/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableSourcesByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PutAccountsPayableSourcesV8Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounts-payable-sources/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountsPayableSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PostAccountsPayableSourcesV8Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounts-payable-sources", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountsPayableSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_DefaultDeleteAccountsPayableSourcesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounts-payable-sources/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableSources", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountsPayableSourcesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountsPayableInvoices
        [TestMethod]
        public void DefaultRoute_GetAccountsPayableInvoices()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoicesV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoicesV11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoicesV11_2_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoices_UnSupporteddVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_DefaultGetAccountsPayableInvoicesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoicesByGuidV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoicesByGuidV11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_GetAccountsPayableInvoicesByGuidV11_2_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-invoices/id", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableInvoices2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PutAccountsPayableInvoicesV11Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounts-payable-invoices/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PutAccountsPayableInvoicesV11_1_0_Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounts-payable-invoices/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PutAccountsPayableInvoicesV11_2_0_Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/accounts-payable-invoices/id", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PutAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PostAccountsPayableInvoicesV11Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PostAccountsPayableInvoicesV11_1_0_Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_PostAccountsPayableInvoicesV11_2_0_Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/accounts-payable-invoices", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PostAccountsPayableInvoices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AccountsPayableSources_DefaultDeleteAccountsPayableInvoicesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/accounts-payable-invoices/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-invoices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAccountsPayableInvoicesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AccountsPayableTaxes

        [TestMethod]
        public void DefaultRoute_AccountsPayableTaxes_GetAccountsPayableTaxes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-taxes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-taxes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableTaxes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableTaxesAsync", routeData.Values["Action"]);
        }

        #endregion AccountsPayableTaxes

        #region AccountsPayableTypes

        [TestMethod]
        public void DefaultRoute_AccountsPayableTypes_GetAccountsPayableTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/accounts-payable-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("accounts-payable-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AccountsPayableTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountsPayableTypesAsync", routeData.Values["Action"]);
        }

        #endregion AccountsPayableTypes

        #region AddAuthorizations
        [TestMethod]
        public void DefaultRoute_AddAuthorizations_PUT()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/add-authorizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("PutAddAuthorizationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AddAuthorizations_Put_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/add-authorizations", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("PutAddAuthorizationAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_GetSectionAddAuthorizations_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/{sectionId}/add-authorizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionAddAuthorizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionAddAuthorizations_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/{sectionId}/add-authorizations", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionAddAuthorizationsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_GetAddAuthorization_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/add-authorizations/[id]");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("add-authorizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_GetAddAuthorization_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/add-authorizations/{id}", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("add-authorizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }
        public void DefaultRoute_AddAuthorizations_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/add-authorizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("PostAddAuthorizationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AddAuthorizations_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/add-authorizations", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("PostAddAuthorizationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Addresses

        [TestMethod]
        public void DefaultRoute_Addresses_GetAddresses_Guid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Addresses_GetAddresses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddresses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_GetAddresses_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddresses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_GetAddresses_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_GetAddresses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Addresses_QueryAddresses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/addresses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/addresses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAddressesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_GetPersonAddressesV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_GetPersonAddressesV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses/guid", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/addresses", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("PostAddressAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/addresses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("PostAddressAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/addresses/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("PutAddress2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Addresses_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/addresses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("PutAddressAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Addresses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/addresses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAddressAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonAddresses2Async_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/addresses/personId", "application/vnd.ellucian.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("addresses/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Addresses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonAddresses2Async", routeData.Values["Action"]);
        }

        #endregion Addresses

        #region AddressTypes

        [TestMethod]
        public void DefaultRoute_GetAddressTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/address-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("address-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressTypesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AddressTypes_GetAddressTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/address-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("address-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressTypesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_AddressTypes_GetAddressTypeById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/address-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("address-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAddressTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AddressTypes_PutAddressTypeById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/address-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("address-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAddressTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AddressTypes_PostAddressTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/address-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("address-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAddressTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AddressTypes_DeleteAddressTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/address-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("address-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAddressTypesAsync", routeData.Values["Action"]);
        }


        #endregion AddressTypes

        #region AdministrativeInstructionalMethods

        [TestMethod]
        public void Default_Route_AdministrativeInstructionalMethods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-instructional-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativeInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdministrativeInstructionalMethods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-instructional-methods", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdministrativeInstructionalMethods_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-instructional-methods", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativeInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdministrativeInstructionalMethodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-instructional-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativeInstructionalMethodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdministrativeInstructionalMethodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-instructional-methods/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdministrativeInstructionalMethodsByGuid_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-instructional-methods/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativeInstructionalMethodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdministrativeInstructionalMethods_Put_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/administrative-instructional-methods/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdministrativeInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdministrativeInstructionalMethods_Post_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/administrative-instructional-methods", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdministrativeInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdministrativeInstructionalMethods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/administrative-instructional-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-instructional-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativeInstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdministrativeInstructionalMethodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdministrativePeriods

        [TestMethod]
        public void Default_Route_AdministrativePeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativePeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdministrativePeriods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-periods", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdministrativePeriods_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-periods", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativePeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdministrativePeriodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativePeriodByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdministrativePeriodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-periods/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdministrativePeriodsByGuid_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/administrative-periods/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdministrativePeriodByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdministrativePeriods_Put_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/administrative-periods/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdministrativePeriodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdministrativePeriods_Post_V20()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/administrative-periods", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdministrativePeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdministrativePeriods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/administrative-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("administrative-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdministrativePeriods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdministrativePeriodAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionApplications

        //Addmission applications default routes
        [TestMethod]
        public void Default_Route_AdmissionApplications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplications3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        //Addmission Applications V6
        [TestMethod]
        public void Route_GetAdmissionApplications_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationsByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-applications/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-applications", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        //Addmission Applications V11
        [TestMethod]
        public void Route_GetAdmissionApplications_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplications2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-applications/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplications2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-applications", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplications2Async", routeData.Values["Action"]);
        }

        //Addmission Applications V16.0.0
        [TestMethod]
        public void Route_GetAdmissionApplications_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplications3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationsByGuid_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Put_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-applications/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Post_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-applications", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        //Addmission Applications V16.1.0
        [TestMethod]
        public void Route_GetAdmissionApplications_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplications3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationsByGuid_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications/guid", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Put_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-applications/guid", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Post_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-applications", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        //Addmission Applications Submissions
        [TestMethod]
        public void Route_AdmissionApplications_Submissions_Put_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-applications/guid", "application/vnd.hedtech.integration.v16.0.0+json",
                "application/vnd.hedtech.integration.admission-applications-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationsSubmissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Post_Submissions_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-applications", "application/vnd.hedtech.integration.v16.0.0+json",
                "application/vnd.hedtech.integration.admission-applications-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationsSubmissionsAsync", routeData.Values["Action"]);
        }

        //Addmission Applications Delete
        [TestMethod]
        public void Default_Route_AdmissionApplications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-applications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplications", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Submissions_16_1_0_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v16.1.0+json",
                "application/vnd.hedtech.integration.admission-applications-submissions.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplications_Submissions_16_0_0_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-applications", "application/vnd.hedtech.integration.v16.0.0+json",
                "application/vnd.hedtech.integration.admission-applications-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionApplicationSources

        [TestMethod]
        public void Default_Route_AdmissionApplicationSources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSources_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-sources", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSources_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationSourcesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSourcesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationSourcesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-sources/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationSourcesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSourcesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdmissionApplicationSources_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-application-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationSources_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-application-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationSources_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-application-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionApplicationSourcesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionApplicationSupportingItems

        [TestMethod]
        public void Default_Route_GetAdmissionApplicationSupportingItemsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-items");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-items", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSupportingItemsAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-items", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSupportingItemsAsync_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-items", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-items", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetAdmissionApplicationSupportingItemsByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-items/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-items/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetAdmissionApplicationSupportingItemsByGuidAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-items/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSupportingItemsByGuidAsync_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-items/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-items/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemsByGuidAsync", routeData.Values["Action"]);
        }

        #endregion

        #region AdmissionApplicationSupportingItemStatuses

        [TestMethod]
        public void Default_Route_AdmissionApplicationSupportingItemStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-item-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSupportingItemStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-item-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationSupportingItemStatuses_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-item-statuses", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationSupportingItemStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-item-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemStatusByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationSupportingItemStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-item-statuses/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationSupportingItemStatusesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-supporting-item-statuses/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationSupportingItemStatusByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdmissionApplicationSupportingItemStatuses_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-application-supporting-item-statuses/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationSupportingItemStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationSupportingItemStatuses_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-application-supporting-item-statuses", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationSupportingItemStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationSupportingItemStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-application-supporting-item-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-supporting-item-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationSupportingItemStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionApplicationSupportingItemStatusAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionApplicationWithdrawalReasons

        [TestMethod]
        public void Default_Route_AdmissionApplicationWithdrawalReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-withdrawal-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationWithdrawalReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationWithdrawalReasons_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-withdrawal-reasons", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationWithdrawalReasons_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-withdrawal-reasons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationWithdrawalReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationWithdrawalReasonsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-withdrawal-reasons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationWithdrawalReasonsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationWithdrawalReasonsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-withdrawal-reasons/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationWithdrawalReasonsByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-withdrawal-reasons/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationWithdrawalReasonsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdmissionApplicationWithdrawalReasons_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-application-withdrawal-reasons/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationWithdrawalReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationWithdrawalReasons_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-application-withdrawal-reasons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationWithdrawalReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationWithdrawalReasons_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-application-withdrawal-reasons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-withdrawal-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionApplicationWithdrawalReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionApplicationWithdrawalReasonsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionDecisionTypes

        [TestMethod]
        public void Default_Route_AdmissionDecisionTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decision-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionTypes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionDecisionTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decision-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionDecisionTypes_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decision-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionTypes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionDecisionTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decision-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionTypeByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionDecisionTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decision-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisionTypesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decision-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionTypeByGuid2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdmissionDecisionTypes_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-decision-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionDecisionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisionTypes_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-decision-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionDecisionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionDecisionTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-decision-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decision-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionDecisionTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionDecisions

        [TestMethod]
        public void Default_Route_AdmissionDecisions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionDecisions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionDecisions_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionDecisions_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionDecisionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionDecisionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisionsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisionsByGuid_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-decisions/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionDecisionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisions_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-decisions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisions_Put_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-decisions/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisions_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-decisions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionDecisions_Post_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-decisions", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionDecisionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionDecisions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-decisions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-decisions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionDecisions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionDecisionsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmissionResidencyTypes

        [TestMethod]
        public void Default_Route_AdmissionResidencyType()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-residency-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionResidencyType_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-residency-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionResidencyType_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-residency-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionResidencyTypeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-residency-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionResidencyTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionResidencyTypeyById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-residency-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionResidencyTypeById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-residency-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionResidencyTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionResidencyType_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-residency-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundClassificatioin_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-residency-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionResidencyType_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-residency-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmissionResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionResidencyTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AdmittedStatuses

        [TestMethod]
        public void DefaultRoute_AdmittedStatuses_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admitted-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admitted-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdmittedStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion AdmittedStatuses

        #region Advisees

        [TestMethod]
        public void DefaultRoute_Advisees_QueryAdviseesByPost2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/advisees?pageSize=1&pageIndex=1");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/advisees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisees", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAdviseesByPost2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Advisees_QueryAdviseesForExactMatchByPostAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/advisees?pageSize=1&pageIndex=1", _mediaTypeHeaderEllucianPersonSearchFormatVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/advisees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisees", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAdviseesForExactMatchByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Advisees_QueryAdviseesByPostAsync_Version1_DoesNotExist()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/advisees?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // Did not find a route, returns the default route template
            Assert.AreEqual("{controller}/{action}/{id}", GetRouteTemplate(routeData.Route));
        }

        [TestMethod]
        public void DefaultRoute_PostAdvisementComplete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/completed-advisements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/completed-advisements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisementsComplete", routeData.Values["Controller"]);
            Assert.AreEqual("PostCompletedAdvisementAsync", routeData.Values["Action"]);
        }

        #endregion Advisees

        #region Advisors

        [TestMethod]
        public void DefaultRoute_Advisors_GetAdvisee2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/{advisorId}/adviseeId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisors/{advisorId}/{adviseeId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisee2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Advisors_GetAdviseeAsync_Version1_DoesNotExist()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/{advisorId}/adviseeId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // Did not find a route, returns the default route template
            Assert.AreEqual("{controller}/{action}/{id}", GetRouteTemplate(routeData.Route));
        }

        [TestMethod]
        public void DefaultRoute_Advisors_GetAdvisees2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/advisorId/advisees?pageSize=1&pageIndex=1");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisors/{advisorId}/advisees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisees2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Advisors_GetAdviseesAsync_Version1_DoesNotExist()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/advisorId/advisees?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // Did not find a route, returns the default route template
            Assert.AreEqual("{controller}/{action}/{id}", GetRouteTemplate(routeData.Route));
        }

        [TestMethod]
        public void DefaultRoute_Advisors_GetAdvisor()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisors/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisorAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Advisors_GetPermissions_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/permissions", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisors/permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetPermissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Advisors_GetPermissions_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/permissions", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisors/permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisingPermissions2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Advisors_GetPermissions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisors/permissions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisors/permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisingPermissions2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Advisors_PostSearch_1_DoesNotExist()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/advisors/search?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // Did not find a route, returns the default route template
            Assert.AreEqual("{controller}/{action}/{id}", GetRouteTemplate(routeData.Route));
        }


        [TestMethod]
        public void Route_Advisors_PostSearch2_2_DoesNotExist()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/advisors/search?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // Did not find a route, returns the default route template
            Assert.AreEqual("{controller}/{action}/{id}", GetRouteTemplate(routeData.Route));
        }


        [TestMethod]
        public void Route_Advisors_QueryAdvisorsByPostAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/advisors", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/advisors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAdvisorsByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Advisors_QueryAdvisorsByPost2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/advisors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/advisors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Advisors", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAdvisorsByPost2Async", routeData.Values["Action"]);
        }

        #endregion Advisors

        #region AdvisorTypes

        [TestMethod]
        public void Default_Route_AdvisorTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisor-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisorTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdvisorTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisor-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdvisorTypes_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisor-types", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisorTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdvisorTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisor-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisorTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdvisorTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisor-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdvisorTypesByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/advisor-types/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdvisorTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdvisorTypes_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/advisor-types/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdvisorTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdvisorTypes_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/advisor-types", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdvisorTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdvisorTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/advisor-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("advisor-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AdvisorTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdvisorTypesAsync", routeData.Values["Action"]);
        }

        #endregion AdvisorTypes

        #region Affiliations

        [TestMethod]
        public void DefaultRoute_Affiliations_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/affiliations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("affiliations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Affiliations", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Affiliations

        #region AgreementPeriods

        [TestMethod]
        public void DefaultRoute_AgreementPeriods_GetAgreementPeriodsAsync_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/agreement-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("agreement-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AgreementPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAgreementPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AgreementPeriods_GetAgreementPeriodsAsync_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/agreement-periods", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("agreement-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AgreementPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAgreementPeriodsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Applicants

        [TestMethod]
        public void DefaultRoute_Applicants_GetApplicant()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/applicants/applicantId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("applicants/{applicantId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Applicants", routeData.Values["Controller"]);
            Assert.AreEqual("GetApplicantAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Applicants_GetApplicant_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/applicants/applicantId", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("applicants/{applicantId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Applicants", routeData.Values["Controller"]);
            Assert.AreEqual("GetApplicantAsync", routeData.Values["Action"]);
        }
        #endregion Applicants

        #region ApplicationInfluences

        [TestMethod]
        public void DefaultRoute_ApplicationInfluences_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/application-influences");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("application-influences", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationInfluences()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-influences");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationInfluencesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationInfluences_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-influences", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAdmissionApplicationInfluences_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-influences", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationInfluencesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationInfluencesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-influences/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationInfluencesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationInfluencesByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-influences/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationInfluencesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/admission-application-influences/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("GetAdmissionApplicationInfluencesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AdmissionApplicationInfluences_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/admission-application-influences/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("PutAdmissionApplicationInfluencesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AdmissionApplicationInfluences_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/admission-application-influences", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("PostAdmissionApplicationInfluencesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AdmissionApplicationInfluences_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/admission-application-influences/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("admission-application-influences/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationInfluences", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAdmissionApplicationInfluencesAsync", routeData.Values["Action"]);
        }

        #endregion ApplicationInfluences

        #region ApplicationStatusCategories

        [TestMethod]
        public void DefaultRoute_ApplicationStatusCategories_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/application-status-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("application-status-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationStatusCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion ApplicationStatusCategories

        #region ApplicationStatuses

        [TestMethod]
        public void DefaultRoute_ApplicationStatuses_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/application-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("application-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion ApplicationStatuses

        #region Approvals

        [TestMethod]
        public void DefaultRoute_Approvals_GetApprovalDocument()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/approvals/document/documentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("approvals/document/{documentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Approvals", routeData.Values["Controller"]);
            Assert.AreEqual("GetApprovalDocument", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Approvals_GetApprovalResponse()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/approvals/response/responseId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("approvals/response/{responseId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Approvals", routeData.Values["Controller"]);
            Assert.AreEqual("GetApprovalResponse", routeData.Values["Action"]);
        }

        #endregion Approvals

        #region AptitudeAssessments

        [TestMethod]
        public void Default_Route_AptitudeAssessments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAptitudeAssessments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAptitudeAssessments_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessments", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessments/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AptitudeAssessmentsByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessments/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AptitudeAssessments_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/aptitude-assessments/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PutAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AptitudeAssessments_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/aptitude-assessments", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PostAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/aptitude-assessments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AptitudeAssessmentSources

        [TestMethod]
        public void Default_Route_AptitudeAssessmentSources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAptitudeAssessmentSources_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-sources", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAptitudeAssessmentSources_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentSourcesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentSourcesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentSourcesByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-sources/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AptitudeAssessmentSourcesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentSourcesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AptitudeAssessmentSources_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/aptitude-assessment-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("PutAptitudeAssessmentSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AptitudeAssessmentSources_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/aptitude-assessment-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("PostAptitudeAssessmentSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentSources_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/aptitude-assessment-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentSources", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAptitudeAssessmentSourcesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AptitudeAssessmentTypes

        [TestMethod]
        public void Default_Route_AptitudeAssessmentTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAptitudeAssessmentTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAptitudeAssessmentTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AptitudeAssessmentTypesByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/aptitude-assessment-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAptitudeAssessmentTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AptitudeAssessmentTypes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/aptitude-assessment-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAptitudeAssessmentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AptitudeAssessmentTypes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/aptitude-assessment-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAptitudeAssessmentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AptitudeAssessmentTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/aptitude-assessment-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("aptitude-assessment-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AptitudeAssessmentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAptitudeAssessmentTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AssessmentCalculationMethods

        [TestMethod]
        public void Default_Route_AssessmentCalculationMethods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-calculation-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAssessmentCalculationMethods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-calculation-methods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAssessmentCalculationMethods_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-calculation-methods", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentCalculationMethodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-calculation-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentCalculationMethodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentCalculationMethodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-calculation-methods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AssessmentCalculationMethodsByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-calculation-methods/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentCalculationMethodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AssessmentCalculationMethods_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/assessment-calculation-methods/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutAssessmentCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AssessmentCalculationMethods_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/assessment-calculation-methods", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostAssessmentCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentCalculationMethods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/assessment-calculation-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAssessmentCalculationMethodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AssessmentPercentileTypes

        [TestMethod]
        public void Default_Route_AssessmentPercentileTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-percentile-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentPercentileTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAssessmentPercentileTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-percentile-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAssessmentPercentileTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-percentile-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentPercentileTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentPercentileTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-percentile-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentPercentileTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentPercentileTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-percentile-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AssessmentPercentileTypesByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-percentile-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentPercentileTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AssessmentPercentileTypes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/assessment-percentile-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutAssessmentPercentileTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AssessmentPercentileTypes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/assessment-percentile-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostAssessmentPercentileTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentPercentileTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/assessment-percentile-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-percentile-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentPercentileTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAssessmentPercentileTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AssessmentSpecialCircumstances

        [TestMethod]
        public void Default_Route_AssessmentSpecialCircumstance()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-special-circumstances");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentSpecialCircumstancesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAssessmentSpecialCircumstance_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-special-circumstances", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAssessmentSpecialCircumstance_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-special-circumstances", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentSpecialCircumstancesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentSpecialCircumstanceById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-special-circumstances/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentSpecialCircumstanceByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentSpecialCircumstanceById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-special-circumstances/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AssessmentSpecialCircumstanceById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/assessment-special-circumstances/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("GetAssessmentSpecialCircumstanceByIdAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AssessmentSpecialCircumstance_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/assessment-special-circumstances/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("PutAssessmentSpecialCircumstanceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AssessmentSpecialCircumstance_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/assessment-special-circumstances", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("PostAssessmentSpecialCircumstanceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AssessmentSpecialCircumstance_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/assessment-special-circumstances/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("assessment-special-circumstances/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AssessmentSpecialCircumstances", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAssessmentSpecialCircumstanceAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Attachment Collections

        [TestMethod]
        public void DefaultRoute_AttachmentCollections_GetAttachmentCollectionsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attachment-collections/test");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachment-collections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttachmentCollections", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttachmentCollectionByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AttachmentCollections_GetAttachmentCollectionsByUser()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attachment-collections");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachment-collections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttachmentCollections", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttachmentCollectionsByUserAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AttachmentCollections_PostAttachmentCollection()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/attachment-collections");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachment-collections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttachmentCollections", routeData.Values["Controller"]);
            Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AttachmentCollections_PutAttachmentCollection()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/attachment-collections/test");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachment-collections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttachmentCollections", routeData.Values["Controller"]);
            Assert.AreEqual("PutAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AttachmentCollections_GetAttachmentCollectionEffectivePermissions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attachment-collections/test/effective-permissions");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachment-collections/{id}/effective-permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttachmentCollections", routeData.Values["Controller"]);
            Assert.AreEqual("GetEffectivePermissionsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Attachments

        [TestMethod]
        public void DefaultRoute_Attachments_GetAttachmentsByFilter()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attachments?owner=0009999&collectionid=test-collection");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Attachments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttachmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Attachments_GetAttachments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attachments");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Attachments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttachmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Attachments_QueryAttachmentsByPost()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/attachments");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/attachments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Attachments", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAttachmentsByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Attachments_PostAttachment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/attachments");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Attachments", routeData.Values["Controller"]);
            Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Attachments_PutAttachment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/attachments/test");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Attachments", routeData.Values["Controller"]);
            Assert.AreEqual("PutAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Attachments_DeleteAttachment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/attachments/test");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attachments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Attachments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }

        #endregion

        #region AttendanceCategories

        [TestMethod]
        public void Default_Route_AttendanceCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attendance-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttendanceCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAttendanceCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attendance-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAttendanceCategories_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attendance-categories", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttendanceCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AttendanceCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attendance-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttendanceCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AttendanceCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attendance-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AttendanceCategoriesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/attendance-categories/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAttendanceCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AttendanceCategories_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/attendance-categories/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutAttendanceCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AttendanceCategories_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/attendance-categories", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostAttendanceCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_AttendanceCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/attendance-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("attendance-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AttendanceCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAttendanceCategoriesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region AuthenticationScheme

        [TestMethod]
        public void DefaultRoute_AuthenticationScheme_GetAuthenticationSchemeAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/authentication-scheme?username=user");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("authentication-scheme", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AuthenticationScheme", routeData.Values["Controller"]);
            Assert.AreEqual("GetAuthenticationSchemeAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_AuthenticationScheme_GetAuthenticationSchemeAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/authentication-scheme?username=user", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("authentication-scheme", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AuthenticationScheme", routeData.Values["Controller"]);
            Assert.AreEqual("GetAuthenticationSchemeAsync", routeData.Values["Action"]);
        }

        #endregion

        #region AverageAwardPackages

        [TestMethod]
        public void DefaultRoute_AverageAwardPackages_GetAverageAwardPackagesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/average-award-packages");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/average-award-packages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AverageAwardPackages", routeData.Values["Controller"]);
            Assert.AreEqual("GetAverageAwardPackagesAsync", routeData.Values["Action"]);
        }

        #endregion AverageAwardPackages

        #region AwardCategories

        [TestMethod]
        public void Route_AwardCategories_Get_1()
        {
            //This is an obsolete route
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-categories", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardCategories", routeData.Values["Action"]);
        }

        //[TestMethod]
        //public void DefaultRoute_AwardCategories_Get()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-categories");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("award-categories", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("AwardCategories", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetAwardCategories2", routeData.Values["Action"]);
        //}

        [TestMethod]
        public void DefaultRoute_GetAwardCategoriesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardCategories2Async", routeData.Values["Action"]);
        }

        #endregion AwardCategories

        #region AwardLetters

        [TestMethod]
        public void Route_AwardLetters_Get_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetters2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetters", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AwardLetters_GetAwardLetterReportAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardLetterId", _mediaTypeHeaderPdfVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardLetterId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetterReport4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetterReport_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardLetterId", _mediaTypeHeaderPdfVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardLetterId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetterReport3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetterReport_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardYear", _mediaTypeHeaderPdfVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetterReport2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetterReport_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardYear", _mediaTypeHeaderPdfVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetterReport", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetter_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardYear", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetter2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetter_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardYear", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetter", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetter_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardYear", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetter3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AwardLetters_GetAwardLetter4Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters/awardYear");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetter4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_GetAwardLetters_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetters3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AwardLetters_GetAwardLetters4Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-letters");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetters4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AwardLetters_UpdateAwardLetter()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/award-letters/awardYear");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreNotEqual("UpdateAwardLetter", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AwardLetters_UpdateAwardLetter2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/award-letters/awardYear", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAwardLetter2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AwardLetters_UpdateAwardLetter3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/award-letters/awardYear");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-letters/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetters", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAwardLetter3Async", routeData.Values["Action"]);
        }

        #endregion AwardLetters

        #region AwardLetterConfigurations

        [TestMethod]
        public void DefaultRoute_AwardLetterConfigurations_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-letter-configurations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-letter-configurations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardLetterConfigurations", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardLetterConfigurationsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region AwardPackageChangeRequests

        [TestMethod]
        public void DefaultRoute_AwardPackageChangeRequests_GetAwardPackageChangeRequestsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-package-change-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-package-change-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardPackageChangeRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardPackageChangeRequestsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_AwardPackageChangeRequests_PostAwardPackageChangeRequestAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/award-package-change-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-package-change-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardPackageChangeRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PostAwardPackageChangeRequestAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_AwardPackageChangeRequests_GetAwardPackageChangeRequestAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-package-change-requests/requestId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-package-change-requests/{requestId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardPackageChangeRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardPackageChangeRequestAsync", routeData.Values["Action"]);
        }

        #endregion AwardPackageChangeRequests

        #region AwardPeriods

        [TestMethod]
        public void DefaultRoute_AwardPeriods_GetAwardPeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardPeriods", routeData.Values["Action"]);
        }

        #endregion AwardPeriods

        #region Awards

        [TestMethod]
        public void Route_Awards_Get_1()
        {
            //This is an obsolete route
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/awards", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Awards", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwards", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Awards_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/awards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Awards", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwards3", routeData.Values["Action"]);
        }

        #endregion Awards

        #region AwardStatuses

        [TestMethod]
        public void DefaultRoute_AwardStatuses_GetAwardStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardStatuses", routeData.Values["Action"]);
        }

        #endregion AwardStatuses

        #region AwardTypes

        [TestMethod]
        public void DefaultRoute_AwardTypes_GetAwardTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardTypes", routeData.Values["Action"]);
        }

        #endregion AwardTypes

        #region AwardYears

        [TestMethod]
        public void DefaultRoute_AwardYears_GetAwardYears()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/award-years");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("award-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetAwardYears", routeData.Values["Action"]);
        }

        #endregion AwardYears

        #region BankingInformationConfiguration
        [TestMethod]
        public void DefaultRoute_BankingInformationConfiguration_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/banking-information-configuration");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.AreEqual("banking-information-configuration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BankingInformationConfigurations", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Banks
        [TestMethod]
        public void DefaultRoute_Banks_get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/banks/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("banks/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Banks", routeData.Values["Controller"]);
            Assert.AreEqual("GetBankAsync", routeData.Values["Action"]);
        }
        #endregion

        #region BillingOverrideReasons

        [TestMethod]
        public void Default_Route_BillingOverrideReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/billing-override-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("billing-override-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BillingOverrideReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetBillingOverrideReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBillingOverrideReasons_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/billing-override-reasons", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("billing-override-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BillingOverrideReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetBillingOverrideReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BillingOverrideReasonsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/billing-override-reasons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("billing-override-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BillingOverrideReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetBillingOverrideReasonsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BillingOverrideReasons_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/billing-override-reasons/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("billing-override-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BillingOverrideReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutBillingOverrideReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BillingOverrideReasons_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/billing-override-reasons", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("billing-override-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BillingOverrideReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostBillingOverrideReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BillingOverrideReasons_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/billing-override-reasons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("billing-override-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BillingOverrideReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBillingOverrideReasonsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region BargainingUnit

        [TestMethod]
        public void DefaultRoute_GetBargainingUnit()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/bargaining-units");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetBargainingUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnit_GetBargainingUnits()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/bargaining-units", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetBargainingUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnit_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/bargaining-units", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BargainingUnit_GetBargainingUnitById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/bargaining-units/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetBargainingUnitByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnit_GetBargainingUnitByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/bargaining-units/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetBargainingUnitByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnitById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/bargaining-units/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnit_PutBargainingUnit()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/bargaining-units/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PutBargainingUnitAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnit_PostBargainingUnit()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/bargaining-units", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PostBargainingUnitAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BargainingUnit_DeleteBargainingUnit()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/bargaining-units/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("bargaining-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BargainingUnits", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBargainingUnitAsync", routeData.Values["Action"]);
        }

        #endregion BargainingUnits

        #region BeneficiaryPreferenceTypes

        [TestMethod]
        public void Default_Route_BeneficiaryPreferenceTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/beneficiary-preference-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBeneficiaryPreferenceTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBeneficiaryPreferenceTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/beneficiary-preference-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBeneficiaryPreferenceTypes_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/beneficiary-preference-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBeneficiaryPreferenceTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BeneficiaryPreferenceTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/beneficiary-preference-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBeneficiaryPreferenceTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BeneficiaryPreferenceTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/beneficiary-preference-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BeneficiaryPreferenceTypesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/beneficiary-preference-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBeneficiaryPreferenceTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_BeneficiaryPreferenceTypes_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/beneficiary-preference-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutBeneficiaryPreferenceTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BeneficiaryPreferenceTypes_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/beneficiary-preference-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostBeneficiaryPreferenceTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BeneficiaryPreferenceTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/beneficiary-preference-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("beneficiary-preference-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BeneficiaryPreferenceTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBeneficiaryPreferenceTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region BlanketPurchaseOrders

        [TestMethod]
        public void DefaultRoute_BlanketPurchaseOrders_GetBlanketPurchaseOrder()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetBlanketPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBlanketPurchaseOrders_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBlanketPurchaseOrders_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetBlanketPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BlanketPurchaseOrdersByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetBlanketPurchaseOrdersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BlanketPurchaseOrdersByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BlanketPurchaseOrdersByGuid_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders/id", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetBlanketPurchaseOrdersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BlanketPurchaseOrders_Put_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/blanket-purchase-orders/id", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PutBlanketPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BlanketPurchaseOrders_Post_V16_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/blanket-purchase-orders", "application/vnd.hedtech.integration.v16.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PostBlanketPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BlanketPurchaseOrders_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/blanket-purchase-orders/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBlanketPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BlanketPurchaseOrders_GetSelfServiceById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/blanket-purchase-orders/blanketPurchaseOrderId", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blanket-purchase-orders/{blanketPurchaseOrderId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BlanketPurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetBlanketPurchaseOrderAsync", routeData.Values["Action"]);
        }

        #endregion BlanketPurchaseOrders

        #region Books

        [TestMethod]
        public void DefaultRoute_Books_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/books/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("books/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Books", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Books_Query()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/books");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/books", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Books", routeData.Values["Controller"]);
            Assert.AreEqual("QueryBooksByPostAsync", routeData.Values["Action"]);
        }

        #region BookOptions

        [TestMethod]
        public void DefaultRoute_BookOptions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/book-options");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("book-options", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BookOptions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }


        #endregion

        #endregion Books

        #region BookSummary
        [TestMethod]
        public void DefaultRoute_BookSummary_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/book-spending", _mediaTypeHeaderFALinkBookSpendingVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/book-spending", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BookSpending", routeData.Values["Controller"]);
            Assert.AreEqual("GetBookSpendingAsync", routeData.Values["Action"]);
        }
        #endregion

        #region BudgetCodes

        [TestMethod]
        public void Default_Route_BudgetCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBudgetCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-codes", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBudgetCodes_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-codes", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BudgetCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetCodesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BudgetCodesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-codes/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BudgetCodesByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-codes/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetCodesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_BudgetCodes_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/budget-codes/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutBudgetCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BudgetCodes_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/budget-codes", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostBudgetCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BudgetCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/budget-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBudgetCodesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Budget Development

        [TestMethod]
        public void DefaultRoute_Configuration_GetBudgetDevelopmentConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/budget-development");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/budget-development", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetDevelopmentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetDevelopmentConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetBudgetDevelopmentWorkingBudget()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-development/working-budget/startPosition/recordCount");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-development/working-budget/{startPosition}/{recordCount}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetDevelopment", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetDevelopmentWorkingBudgetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryWorkingBudget()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/working-budget", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/working-budget", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetDevelopment", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.25. Use QueryWorkingBudgetByPost2Async route.
            Assert.AreEqual("QueryWorkingBudgetByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryWorkingBudget2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/working-budget", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/working-budget", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetDevelopment", routeData.Values["Controller"]);
            Assert.AreEqual("QueryWorkingBudgetByPost2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UpdateBudgetDevelopmentWorkingBudget()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/budget-development/working-budget");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-development/working-budget", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetDevelopment", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateBudgetDevelopmentWorkingBudgetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetBudgetOfficersAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/Budget-officers/?isInWorkingBudget=True");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-officers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetOfficer", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetOfficersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetReportingUnitsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-reporting-units/?isInWorkingBudget=True");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-reporting-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetReportingUnit", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetReportingUnitsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Budget adjustments
        [TestMethod]
        public void DefaultRoute_BudgetAdjustment_CreateBudgetAdjustment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/budget-adjustments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetAdjustment_UpdateBudgetAdjustment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/budget-adjustments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("PutAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetAdjustment_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-adjustments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetAdjustmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetAdjustmentSummary_GetBudgetAdjustmentsSummaryAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-adjustments-summary");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments-summary", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetAdjustmentsSummaryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetAdjustmentPendingApprovalSummary_GetBudgetAdjustmentsPendingApprovalSummaryAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-adjustments-pending-approval-summary");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments-pending-approval-summary", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetAdjustmentsPendingApprovalSummaryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetAdjustmentPendingApprovalDetail_GetBudgetAdjustmentsPendingApprovalDetailAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-adjustments-pending-approval-detail/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments-pending-approval-detail/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetAdjustmentPendingApprovalDetailAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetAdjustment_CreateBudgetAdjustmentApprovalAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/budget-adjustments/id/approvals");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-adjustments/{id}/approvals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("PostBudgetAdjustmentApprovalAsync", routeData.Values["Action"]);
        }

        #endregion

        #region BudgetPhaseLineItems

        [TestMethod]
        public void DefaultRoute_BudgetPhaseLineItems_GetBudgetPhaseLineItems()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-phase-line-items");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetPhaseLineItemsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BudgetPhaseLineItems_GetBudgetPhaseLineItems_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-phase-line-items", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetPhaseLineItemsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BudgetPhaseLineItems_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-phase-line-items", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetPhaseLineItems_GetBudgetPhaseLineItemsGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-phase-line-items/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetPhaseLineItemsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BudgetPhaseLineItems_GetBudgetPhaseLineItemsGuid_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-phase-line-items/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetPhaseLineItemsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BudgetPhaseLineItems_GetBudgetPhaseLineItemsGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/budget-phase-line-items/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetPhaseLineItems_PostBudgetPhaseLineItemsAsync_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/budget-phase-line-items", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("PostBudgetPhaseLineItemsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetPhaseLineItems_PutBudgetPhaseLineItemsAsync_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/budget-phase-line-items/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("PutBudgetPhaseLineItemsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BudgetPhaseLineItems_DeleteBudgetPhaseLineItemsAsync_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/budget-phase-line-items/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("budget-phase-line-items/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BudgetPhaseLineItems", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBudgetPhaseLineItemsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Buildings

        [TestMethod]
        public void DefaultRoute_Buildings_GetBuildings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buildings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmBuildings3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_GetHedmBuildings_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buildings", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmBuildings3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_GetHedmBuildings_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buildings", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmBuildings2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Buildings_GetBuildingById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buildings/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmBuildingById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_GetBuildingById_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buildings/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmBuildingById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_GetBuildingById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buildings/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmBuildingByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Buildings_GetBuildingTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuildingTypes", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_PutBuildingV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/buildings/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("PutBuildingAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_PutBuildingV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/buildings/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("PutBuildingAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_PostBuildingV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/buildings", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("PostBuildingAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_PostBuildingV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/buildings", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("PostBuildingAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buildings_DeleteBuilding()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/buildings/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buildings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buildings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBuildingAsync", routeData.Values["Action"]);
        }


        #endregion Buildings

        #region Building-Wings

        [TestMethod]
        public void DefaultRoute_GetBuildingWings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-wings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuildingWingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBuildingWings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-wings", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BuildingWings_GetBuildingWings_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-wings", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuildingWingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BuildingWings_GetBuildingWingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-wings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuildingWingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBuildingWingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-wings/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BuildingWings_GetBuildingWingsByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/building-wings/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuildingWingsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_BuildingWings_PutBuildingWings_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/building-wings/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("PutBuildingWingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BuildingWings_PostBuildingWings_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/building-wings", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("PostBuildingWingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_BuildingWings_DeleteBuildingWings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/building-wings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("building-wings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBuildingWingsAsync", routeData.Values["Action"]);
        }
        #endregion Building Wings

        #region Buyers

        [TestMethod]
        public void Default_Route_Buyers()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buyers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuyersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBuyers_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buyers", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBuyers_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buyers", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuyersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BuyersByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buyers/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuyersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_BuyersByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buyers/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_BuyersByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/buyers/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("GetBuyersByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Buyers_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/buyers/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("PutBuyersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Buyers_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/buyers", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("PostBuyersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Buyers_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/buyers/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("buyers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Buyers", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteBuyersAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CampusInvolvements

        [TestMethod]
        public void Default_Route_GetCampusInvolvements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvements", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvements_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvements", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetCampusInvolvementById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvements/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvementById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvements/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvementsById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvements/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusInvolvement_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/campus-involvements/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("PutCampusInvolvementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusInvolvement_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/campus-involvements", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("PostCampusInvolvementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CampusInvolvement_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/campus-involvements/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvements", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCampusInvolvementAsync", routeData.Values["Action"]);
        }

        #endregion

        #region CampusInvolvementRoles
        [TestMethod]
        public void Default_Route_GetCampusInvolvementRoles()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvement-roles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementRolesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvementRoles_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvement-roles", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvementRoles()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvement-roles", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementRolesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetCampusInvolvementRolesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvement-roles/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementRoleByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetCampusInvolvementRolesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvement-roles/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusInvolvementRolesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-involvement-roles/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusInvolvementRoleByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusInvolvementRoles_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/campus-involvement-roles/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("PutCampusInvolvementRoleAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusInvolvementRoles_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/campus-involvement-roles", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("PostCampusInvolvementRoleAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CampusInvolvementRoles_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/campus-involvement-roles/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-involvement-roles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusInvolvementRoles", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCampusInvolvementRoleAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CampusOrganizations

        [TestMethod]
        public void Default_Route_GetCampusOrganizations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusOrganizations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organizations", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_QAPI_GetCampusOrganizations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/campus-organization");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/campus-organization", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizations2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetGetCampusOrganizationsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organizations/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusOrganizationById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organizations/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusOrganization_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/campus-organizations/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("PutCampusOrganizationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusOrganization_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/campus-organizations", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("PostCampusOrganizationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CampusOrganization_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/campus-organizations/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCampusOrganizationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region CampusOrganizationTypes
        [TestMethod]
        public void Default_Route_GetCampusOrganizationTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organization-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusOrganizationTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organization-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusOrganizationTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organization-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetCampusOrganizationTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organization-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetCampusOrganizationTypesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organization-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCampusOrganizationTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/campus-organization-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCampusOrganizationTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusOrganizationTypes_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/campus-organization-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutCampusOrganizationTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CampusOrganizationTypes_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/campus-organization-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostCampusOrganizationTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CampusOrganizationTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/campus-organization-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("campus-organization-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CampusOrganizationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCampusOrganizationTypeAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CapSizes

        [TestMethod]
        public void DefaultRoute_CapSizes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cap-sizes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cap-sizes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CapSizes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion CareerGoals

        #region CareerGoals

        [TestMethod]
        public void Route_CareerGoals_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Default_Route_CareerGoals()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetCareerGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCareerGoals_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCareerGoals_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetCareerGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CareerGoalsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetCareerGoalsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CareerGoalsByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CareerGoalsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/career-goals/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetCareerGoalsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CareerGoals_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/career-goals/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("PutCareerGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CareerGoals_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/career-goals", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("PostCareerGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CareerGoals_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/career-goals/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("career-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CareerGoals", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCareerGoalsAsync", routeData.Values["Action"]);
        }
        #endregion CareerGoals

        #region Ccds

        [TestMethod]
        public void DefaultRoute_Ccds_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ccds");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ccds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ccds", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Ccds

        #region ChargeAssessmentMethods

        [TestMethod]
        public void Default_Route_ChargeAssessmentMethods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/charge-assessment-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetChargeAssessmentMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetChargeAssessmentMethods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/charge-assessment-methods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetChargeAssessmentMethods_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/charge-assessment-methods", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetChargeAssessmentMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ChargeAssessmentMethodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/charge-assessment-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetChargeAssessmentMethodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ChargeAssessmentMethodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/charge-assessment-methods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ChargeAssessmentMethodsByGuid_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/charge-assessment-methods/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetChargeAssessmentMethodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ChargeAssessmentMethods_Put_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/charge-assessment-methods/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutChargeAssessmentMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ChargeAssessmentMethods_Post_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/charge-assessment-methods", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostChargeAssessmentMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ChargeAssessmentMethods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/charge-assessment-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("charge-assessment-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ChargeAssessmentMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteChargeAssessmentMethodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CipCodes

        [TestMethod]
        public void Default_Route_CipCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cip-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCipCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCipCodes_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cip-codes", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCipCodes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cip-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCipCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CipCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cip-codes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCipCodeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CipCodesByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cip-codes/id", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CipCodesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cip-codes/id", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCipCodeByIdAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CipCodes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/cip-codes/id", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutCipCodeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CipCodes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/cip-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostCipCodeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CipCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/cip-codes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cip-codes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CipCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCipCodeAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CitizenshipStatuses

        [TestMethod]
        public void DefaultRoute_GetCitizenshipStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizenship-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCitizenshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatuses_GetCitizenshipStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizenship-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCitizenshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizenship-statuses", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CitizenshipStatuses_GetCitizenshipStatusByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizenship-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCitizenshipStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatuses_GetCitizenshipStatusByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizenship-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCitizenshipStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatusById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizenship-statuses/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatuses_PutCitizenshipStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/citizenship-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutCitizenshipStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatuses_PostCitizenshipStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/citizenship-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostCitizenshipStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CitizenshipStatuses_DeleteCitizenshipStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/citizenship-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizenship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCitizenshipStatusAsync", routeData.Values["Action"]);
        }

        #endregion CitizenshipStatuses

        #region CitizenTypes

        [TestMethod]
        public void DefaultRoute_CitizenTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/citizen-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("citizen-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CitizenTypes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion CitizenTypes

        #region ClassLevels

        [TestMethod]
        public void DefaultRoute_ClassLevels_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/class-levels");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("class-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ClassLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion ClassLevels

        #region Colleague Finance Web Configurations

        [TestMethod]
        public void DefaultRoute_ColleagueFinanceWebConfigurations_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cf-web-configurations", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cf-web-configurations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceWebConfigurations", routeData.Values["Controller"]);
            Assert.AreEqual("GetColleagueFinanceWebConfigurationsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region CollectionConfigurationSettings

        [TestMethod]
        public void Default_Route_CollectionConfigurationSettings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCollectionConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCollectionConfigurationSettings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCollectionConfigurationSettingsOptions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings", "application/vnd.hedtech.integration.collection-configuration-settings-options.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCollectionConfigurationSettings_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCollectionConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCollectionConfigurationSettingsOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings", "application/vnd.hedtech.integration.collection-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCollectionConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CollectionConfigurationSettingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCollectionConfigurationSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CollectionConfigurationSettingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CollectionConfigurationSettingsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCollectionConfigurationSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CollectionConfigurationSettingsOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/collection-configuration-settings/guid", "application/vnd.hedtech.integration.collection-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCollectionConfigurationSettingsOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CollectionConfigurationSettings_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/collection-configuration-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CollectionConfigurationSettingsOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/collection-configuration-settings/guid", "application/vnd.hedtech.integration.collection-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CollectionConfigurationSettings_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/collection-configuration-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostCollectionConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CollectionConfigurationSettingsOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/collection-configuration-settings", "application/vnd.hedtech.integration.collection-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostCollectionConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CollectionConfigurationSettings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/collection-configuration-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("collection-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CollectionConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCollectionConfigurationSettingsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CommencementSites
        [TestMethod]
        public void DefaultRoute_CommencementSites_GetCommencementSites()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commencement-sites");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commencement-sites", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommencementSites", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Comments

        [TestMethod]
        public void DefaultRoute_Comments_GetComments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Comments_GetComments_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comments", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Comments_GetComments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comments", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Comments_GetCommentsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Comments_GetCommentsById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comments/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Comments_GetCommentsById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comments/id", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Comments_PutComments_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/comments/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("PutCommentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Comments_PostComments_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/comments", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("PostCommentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Comments_DeleteComments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/comments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Comments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCommentByGuidAsync", routeData.Values["Action"]);
        }

        #endregion Comments

        #region CommentSubjectArea

        [TestMethod]
        public void DefaultRoute_CommentSubjectArea_GetCommentSubjectArea()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comment-subject-area");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentSubjectAreaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommentSubjectArea_GetCommentSubjectArea_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comment-subject-area", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentSubjectAreaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommentSubjectArea_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comment-subject-area", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CommentSubjectArea_GetCommentSubjectAreaById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comment-subject-area/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentSubjectAreaByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommentSubjectArea_GetCommentSubjectAreaById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comment-subject-area/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommentSubjectAreaByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommentSubjectAreaById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/comment-subject-area/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommentSubjectArea_PutCommentSubjectArea_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/comment-subject-area/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("PutCommentSubjectAreaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommentSubjectArea_PostCommentSubjectArea_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/comment-subject-area", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("PostCommentSubjectAreaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CommentSubjectArea_DeleteCommentSubjectArea()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/comment-subject-area/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment-subject-area/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommentSubjectArea", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCommentSubjectAreaAsync", routeData.Values["Action"]);
        }

        #endregion CommentSubjectArea

        #region CommerceTaxCodeRates

        [TestMethod]
        public void Default_Route_CommerceTaxCodeRates()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-code-rates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodeRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCommerceTaxCodeRates_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-code-rates", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCommerceTaxCodeRates_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-code-rates", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodeRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CommerceTaxCodeRatesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-code-rates/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodeRatesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CommerceTaxCodeRatesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-code-rates/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCodeRatesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-code-rates/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodeRatesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CommerceTaxCodeRates_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/commerce-tax-code-rates/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutCommerceTaxCodeRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCodeRates_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/commerce-tax-code-rates", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostCommerceTaxCodeRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CommerceTaxCodeRates_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/commerce-tax-code-rates/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-code-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCommerceTaxCodeRatesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CommerceTaxCode

        [TestMethod]
        public void DefaultRoute_GetCommerceTaxCode()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCode_GetCommerceTaxCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-codes", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCode_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-codes", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CommerceTaxCode_GetCommerceTaxCodeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCode_GetCommerceTaxCodeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-codes/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommerceTaxCodeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCodeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commerce-tax-codes/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCode_PutCommerceTaxCode()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/commerce-tax-codes/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutCommerceTaxCodeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCode_PostCommerceTaxCode()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/commerce-tax-codes", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostCommerceTaxCodeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommerceTaxCode_DeleteCommerceTaxCode()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/commerce-tax-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commerce-tax-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommerceTaxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCommerceTaxCodeAsync", routeData.Values["Action"]);
        }

        #endregion CommerceTaxCodes

        #region CommodityCodes
        [TestMethod]
        public void Route_CommodityCodes_GetAllCommodityCodesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commodity-codes", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commodity-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommodityCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllCommodityCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CommodityCodes_GetCommodityCodeAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/commodity-codes/{commodityCode}", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("commodity-codes/{commodityCode}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommodityCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommodityCodeAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CommunicationCodes

        [TestMethod]
        public void Route_CommunicationCodes_CommunicationCodes_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/communication-codes", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("communication-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommunicationCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommunicationCodes", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CommunicationCodes_CommunicationCodes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/communication-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("communication-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CommunicationCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCommunicationCodes2", routeData.Values["Action"]);
        }

        #endregion CommunicationCodes

        #region CompoundConfigurationSettings

        [TestMethod]
        public void Default_Route_CompoundConfigurationSettings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCompoundConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCompoundConfigurationSettings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCompoundConfigurationSettingsOptions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings", "application/vnd.hedtech.integration.compound-configuration-settings-options.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCompoundConfigurationSettings_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCompoundConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCompoundConfigurationSettingsOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings", "application/vnd.hedtech.integration.compound-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCompoundConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CompoundConfigurationSettingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCompoundConfigurationSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CompoundConfigurationSettingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CompoundConfigurationSettingsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCompoundConfigurationSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CompoundConfigurationSettingsOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/compound-configuration-settings/guid", "application/vnd.hedtech.integration.compound-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetCompoundConfigurationSettingsOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CompoundConfigurationSettings_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/compound-configuration-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutCompoundConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CompoundConfigurationSettingsOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/compound-configuration-settings/guid", "application/vnd.hedtech.integration.compound-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutCompoundConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CompoundConfigurationSettings_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/compound-configuration-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostCompoundConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CompoundConfigurationSettingsOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/compound-configuration-settings", "application/vnd.hedtech.integration.compound-configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostCompoundConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CompoundConfigurationSettings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/compound-configuration-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("compound-configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CompoundConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCompoundConfigurationSettingsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Configuration

        [TestMethod]
        public void DefaultRoute_Configuration_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/ems/configId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/ems/{configId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetGraduationConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/student-graduation", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/student-graduation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetGraduationConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetMyProgressConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/my-progress", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/my-progress", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetMyProgressConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetProxyConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/proxy", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/proxy", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetProxyConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetStudentRequestConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/student-request", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/student-request", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRequestConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetStudentProfileConfigurationAsync_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/student-profile", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/student-profile", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentProfileConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetUserProfileConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/user-profile", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/user-profile", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetUserProfileConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetUserProfileConfiguration_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/user-profile", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/user-profile", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetUserProfileConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetUserProfileConfiguration_v2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/user-profile", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/user-profile", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetUserProfileConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetEmergencyInformationConfiguration_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/emergency-information", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformationConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetEmergencyInformationConfiguration_v2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/emergency-information", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformationConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetEmergencyInformationConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/emergency-information", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformationConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetGeneralLedgerConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/general-ledger", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/general-ledger", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeneralLedgerConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetBudgetAdjustmentConfigurationAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/budget-adjustment-validation", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/budget-adjustment-validation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetAdjustmentConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetBudgetAdjustmentEnabledConfigurationAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/budget-adjustment-enabled", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/budget-adjustment-enabled", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetAdjustmentsEnabledAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetPrivacyConfigurationAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/privacy", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/privacy", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetPrivacyConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetCourseCatalogConfiguration()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/course-catalog", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/course-catalog", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCatalogConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetCourseCatalogConfiguration2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/course-catalog", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/course-catalog", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCatalogConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetCourseCatalogConfiguration2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/course-catalog", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/course-catalog", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCatalogConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetCourseCatalogConfiguration3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/course-catalog", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/course-catalog", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCatalogConfiguration3Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_Configuration_GetCourseCatalogConfiguration4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/course-catalog", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/course-catalog", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCatalogConfiguration4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetCourseCatalogConfiguration4Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/course-catalog");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/course-catalog", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCatalogConfiguration4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetOrganizationalRelationshipConfigurationAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/organizational-relationships", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/organizational-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationalRelationshipConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Configuration_GetOrganizationalRelationshipConfigurationAsync_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/organizational-relationships", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/organizational-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationalRelationshipConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetRegistrationConfigurationAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/registration", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PostBackupApiConfigData_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/configuration/backup-api-config", _mediaTypeHeaderEllucianConfigurationVersion1);
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.AreEqual("configuration/backup-api-config", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("PostBackupApiConfigAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PostRestoreApiConfigData_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/configuration/restore-api-config", _mediaTypeHeaderEllucianConfigurationVersion1);
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.AreEqual("configuration/restore-api-config", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("PostRestoreApiConfigAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PostBackupConfigData_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/configuration", _mediaTypeHeaderEllucianConfigurationVersion1);
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.AreEqual("configuration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("PostConfigBackupDataAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryBackupConfigDataByPost_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/configuration", _mediaTypeHeaderEllucianConfigurationVersion1);
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.AreEqual("qapi/configuration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            var test = routeData.Values["Action"];
            Assert.AreEqual("QueryBackupConfigDataByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetBackupConfigData_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/6d0cefa1-2e96-4bc0-98f3-0d202d3b1a6d", _mediaTypeHeaderEllucianConfigurationVersion1);
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.AreEqual("configuration/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigBackupDataAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetSelfServiceConfigurationAsync_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/self-service");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/self-service", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSelfServiceConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSelfServiceConfigurationAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/self-service", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/self-service", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSelfServiceConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetRequiredDocumentConfiguration_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/required-document", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/required-document", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequiredDocumentConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetSessionConfigurationAsync_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/session");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/session", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSessionConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSessionConfigurationAsync_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/session", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/session", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSessionConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetInstantEnrollmentConfigurationAsync_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/instant-enrollment");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/instant-enrollment", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstantEnrollmentConfigurationAsync_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/instant-enrollment", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/instant-enrollment", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetFacultyGradingConfiguration_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/faculty-grading");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/faculty-grading", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyGradingConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetFacultyGradingConfiguration_GET_V2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/faculty-grading", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/faculty-grading", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyGradingConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetFacultyGradingConfiguration_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/faculty-grading", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/faculty-grading", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyGradingConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetSectionCensusConfigurationAsync_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/section-census");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/section-census", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionCensusConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionCensusConfigurationAsync_GET_V2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/section-census", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/section-census", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionCensusConfiguration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionCensusConfigurationAsync_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/section-census", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/section-census", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionCensusConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetAcademicRecordConfigurationAsync_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/academic-record");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/academic-record", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicRecordConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetAcademicRecordConfigurationAsync_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/academic-record", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/academic-record", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicRecordConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetSectionAvailabilityInformationConfigurationAsync_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/section-availability-information");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/section-availability-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionAvailabilityInformationConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionAvailabilityInformationConfigurationAsync_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/section-availability-information", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/section-availability-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionAvailabilityInformationConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetFacultyAttendanceConfiguration_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/faculty-attendance");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/faculty-attendance", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyAttendanceConfigurationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Configuration_GetFacultyAttendanceConfiguration_GET_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/faculty-attendance", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/faculty-attendance", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyAttendanceConfigurationAsync", routeData.Values["Action"]);
        }

        #endregion Configuration

        #region ConfigurationSettings

        [TestMethod]
        public void Default_Route_ConfigurationSettings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetConfigurationSettings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetConfigurationSettingsOptions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings", "application/vnd.hedtech.integration.configuration-settings-options.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetConfigurationSettings_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetConfigurationSettingsOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings", "application/vnd.hedtech.integration.configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ConfigurationSettingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigurationSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ConfigurationSettingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ConfigurationSettingsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigurationSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ConfigurationSettingsOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration-settings/guid", "application/vnd.hedtech.integration.configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetConfigurationSettingsOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ConfigurationSettings_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/configuration-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ConfigurationSettingsOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/configuration-settings/guid", "application/vnd.hedtech.integration.configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ConfigurationSettings_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/configuration-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostConfigurationSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ConfigurationSettingsOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/configuration-settings", "application/vnd.hedtech.integration.configuration-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostConfigurationSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ConfigurationSettings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/configuration-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ConfigurationSettings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteConfigurationSettingsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ContractTypes

        [TestMethod]
        public void Default_Route_ContractTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contract-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetContractTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetContractTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contract-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetContractTypes_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contract-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetContractTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ContractTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contract-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetContractTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ContractTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contract-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContractTypesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contract-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetContractTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ContractTypes_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/contract-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutContractTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContractTypes_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/contract-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostContractTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ContractTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/contract-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contract-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContractTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteContractTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ContributionPayrollDeductions

        [TestMethod]
        public void DefaultRoute_ContributionPayrollDeductions_GetContributionPayrollDeductions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contribution-payroll-deductions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("GetContributionPayrollDeductionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContributionPayrollDeductions_GetContributionPayrollDeductions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contribution-payroll-deductions", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContributionPayrollDeductions_GetContributionPayrollDeductions_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contribution-payroll-deductions", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("GetContributionPayrollDeductionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_ContributionPayrollDeductions_GetContributionPayrollDeductionsByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contribution-payroll-deductions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("GetContributionPayrollDeductionsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContributionPayrollDeductions_GetContributionPayrollDeductionsByGuidAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contribution-payroll-deductions/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContributionPayrollDeductions_GetContributionPayrollDeductionsByGuidAsync_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/contribution-payroll-deductions/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("GetContributionPayrollDeductionsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContributionPayrollDeductions_PutContributionPayrollDeductions_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/contribution-payroll-deductions/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("PutContributionPayrollDeductionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ContributionPayrollDeductions_PostContributionPayrollDeductions_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/contribution-payroll-deductions", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("PostContributionPayrollDeductionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_ContributionPayrollDeductions_DeleteContributionPayrollDeductionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/contribution-payroll-deductions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("contribution-payroll-deductions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ContributionPayrollDeductions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteContributionPayrollDeductionsAsync", routeData.Values["Action"]);
        }

        #endregion ContributionPayrollDeductions

        #region CorrespondenceRequests
        [TestMethod]
        public void Default_Route_GetCorrespondenceRequests()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/correspondence-requests?personId=personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("correspondence-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CorrespondenceRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetCorrespondenceRequestsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PutAttachmentNotification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/correspondence-requests/attachment-notification");
            var routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("correspondence-requests/attachment-notification", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CorrespondenceRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PutAttachmentNotificationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CostCalculationMethods

        [TestMethod]
        public void Default_Route_CostCalculationMethods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-calculation-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetCostCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCostCalculationMethods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-calculation-methods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCostCalculationMethods_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-calculation-methods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetCostCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CostCalculationMethodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-calculation-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetCostCalculationMethodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CostCalculationMethodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-calculation-methods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CostCalculationMethodsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-calculation-methods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetCostCalculationMethodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CostCalculationMethods_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/cost-calculation-methods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutCostCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CostCalculationMethods_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/cost-calculation-methods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostCostCalculationMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CostCalculationMethods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/cost-calculation-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-calculation-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCalculationMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCostCalculationMethodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Cost Centers

        [TestMethod]
        public void DefaultRoute_CostCenters_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-centers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-centers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCenters", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CostCenters_QueryCostCenters()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/cost-centers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/cost-centers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCenters", routeData.Values["Controller"]);
            Assert.AreEqual("QueryCostCentersByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CostCenter_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/cost-centers/costCenterId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("cost-centers/{costCenterId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CostCenters", routeData.Values["Controller"]);
            Assert.AreEqual("GetCostCenterAsync", routeData.Values["Action"]);
        }

        #endregion Cost Centers

        #region Counties

        [TestMethod]
        public void DefaultRoute_Counties_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/counties");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("counties", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Counties", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Counties_GetAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/counties", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("counties", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Counties", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Countries

        [TestMethod]
        public void Route_Countries_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Countries()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCountries_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCountries_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CountriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CountriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CountriesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/countries/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Countries_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/countries/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("PutCountriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Countries_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/countries", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("PostCountriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Countries_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/countries/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("countries/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCountriesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CountryIsoCodes

        [TestMethod]
        public void Default_Route_CountryIsoCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/country-iso-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountryIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCountryIsoCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/country-iso-codes", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCountryIsoCodes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/country-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountryIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CountryIsoCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/country-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountryIsoCodesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CountryIsoCodesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/country-iso-codes/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CountryIsoCodesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/country-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("GetCountryIsoCodesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CountryIsoCodes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/country-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("PutCountryIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CountryIsoCodes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/country-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("PostCountryIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CountryIsoCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/country-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("country-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Countries", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCountryIsoCodesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CourseCategories

        [TestMethod]
        public void Default_Route_CourseCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseCategories_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseCategoriesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CourseCategories_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/course-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourseCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseCategories_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/course-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourseCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/course-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCourseCategoriesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region CourseLevels

        [TestMethod]
        public void DefaultRoute_CourseLevels_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-levels");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseLevels2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseLevels_GetCourseLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-levels", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseLevels2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CourseLevels_GetCourseLevelById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-levels/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseLevelById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CourseLevels_GetCourseLevelById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-levels/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseLevelById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseLevels_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-levels", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseLevelById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-levels/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseLevels_PostCourseLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/course-levels", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourseLevelsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseLevels_PutCourseLevels_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/course-levels/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourseLevelsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CourseLevels_DeleteCourseLevels()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/course-levels/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-levels/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseLevels", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCourseLevelsAsync", routeData.Values["Action"]);
        }

        #endregion CourseLevels

        #region Courses

        [TestMethod]
        public void DefaultRoute_GetHedmCourses3Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllAndFilteredCourses3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetHedmCourses4Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllAndFilteredCourses4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PostCourse3Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/courses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourse3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PostCourse4Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/courses", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourse4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Courses_GetHedmCourse3ById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmCourse3ByIdAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_Courses_GetHedmCourse4ById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmCourse4ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PutCourse3Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/courses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourse3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PutCourse4Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/courses/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourse4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Courses_PostSearch_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/courses/search?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PostSearchAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Courses_PostSearch2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/courses/search?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PostSearch2Async", routeData.Values["Action"]);
        }




        [TestMethod]
        public void Route_Courses_GetCourseSections_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses/sections?courseIds=courseIds", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseSectionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Courses_GetCourseSections2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses/sections?courseIds=courseIds", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseSections2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Courses_GetCourseSections3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses/sections?courseIds=courseIds");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseSections3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Courses_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses?id=id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Courses_GetCourse2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses?courseId=courseId", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Courses_GetCourse3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/courses?courseId=courseId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourse2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Courses_QueryCoursesByPost2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/courses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("QueryCoursesByPost2Async", routeData.Values["Action"]);
        }

        #endregion Courses

        #region CoursePlaceholders

        [TestMethod]
        public void DefaultRoute_CoursePlaceholders_QueryByPost()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/course-placeholders");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/course-placeholders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CoursePlaceholders", routeData.Values["Controller"]);
            Assert.AreEqual("QueryCoursePlaceholdersByIdsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CoursePlaceholders_QueryByPost_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/course-placeholders", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/course-placeholders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CoursePlaceholders", routeData.Values["Controller"]);
            Assert.AreEqual("QueryCoursePlaceholdersByIdsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region CourseStatuses

        [TestMethod]
        public void Default_Route_CourseStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-statuses", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseStatuses_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-statuses", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-statuses/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseStatusesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-statuses/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CourseStatuses_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/course-statuses/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourseStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseStatuses_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/course-statuses", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourseStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/course-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCourseStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CourseTitleTypes

        [TestMethod]
        public void Default_Route_CourseTitleTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-title-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTitleTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseTitleTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-title-types", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseTitleTypes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-title-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTitleTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTitleTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-title-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTitleTypeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTitleTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-title-types/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseTitleTypesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-title-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTitleTypeByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CourseTitleTypes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/course-title-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourseTitleTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseTitleTypes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/course-title-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourseTitleTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTitleTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/course-title-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCourseTitleTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CourseTopics

        [TestMethod]
        public void Default_Route_CourseTopics()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-topics");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTopicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseTopics_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-topics", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseTopics_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-topics", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTopicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTopicsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-topics/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTopicsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTopicsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-topics/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseTopicsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-topics/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTopicsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseTopics_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/course-topics/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourseTopicsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CourseTopics_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/course-topics", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourseTopicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTopics_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/course-topics/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-topics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTopics", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCourseTopicsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CourseTransferStatuses

        [TestMethod]
        public void Default_Route_CourseTransferStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-transfer-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTransferStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseTransferStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-transfer-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCourseTransferStatuses_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-transfer-statuses", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTransferStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTransferStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-transfer-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTransferStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTransferStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-transfer-statuses/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseTransferStatusesByGuid_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-transfer-statuses/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetCourseTransferStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CourseTransferStatuses_Put_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/course-transfer-statuses/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutCourseTransferStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CourseTransferStatuses_Post_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/course-transfer-statuses", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostCourseTransferStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CourseTransferStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/course-transfer-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-transfer-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCourseTransferStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CourseTypes

        [TestMethod]
        public void DefaultRoute_CourseTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/course-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("course-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CourseTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion CourseTypes

        #region CreditCategories

        [TestMethod]
        public void DefaultRoute_CreditCategories_GetCreditCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/credit-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("credit-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CreditCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetCreditCategories3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CreditCategories_GetCreditCategoryByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/credit-categories/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("credit-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CreditCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetCreditCategoryByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CreditCategories_PostCreditCategoryAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/credit-categories", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("credit-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CreditCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostCreditCategoryV6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CreditCategories_PutCreditCategoryAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/credit-categories/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("credit-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CreditCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutCreditCategoryV6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CreditCategories_GetCreditCategoryV6ByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/credit-categories/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("credit-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CreditCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetCreditCategoryByGuid3Async", routeData.Values["Action"]);
        }

        #endregion CreditCategories

        #region CreditTypes

        [TestMethod]
        public void DefaultRoute_CreditTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/credit-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("credit-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CreditTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion CreditTypes

        #region Currencies

        [TestMethod]
        public void Default_Route_Currencies()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currencies");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCurrencies_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currencies", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCurrencies_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currencies", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CurrenciesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currencies/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrenciesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CurrenciesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currencies/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CurrenciesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currencies/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrenciesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Currencies_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/currencies/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("PutCurrenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Currencies_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/currencies", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("PostCurrenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Currencies_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/currencies/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCurrenciesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region CurrencyIsoCodes

        [TestMethod]
        public void Default_Route_CurrencyIsoCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currency-iso-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrencyIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCurrencyIsoCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currency-iso-codes", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetCurrencyIsoCodes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currency-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrencyIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CurrencyIsoCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currency-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrencyIsoCodesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CurrencyIsoCodesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currency-iso-codes/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CurrencyIsoCodesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/currency-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetCurrencyIsoCodesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_CurrencyIsoCodes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/currency-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("PutCurrencyIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CurrencyIsoCodes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/currency-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("PostCurrencyIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_CurrencyIsoCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/currency-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("currency-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Currencies", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteCurrencyIsoCodesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Curriculum Tracks (Sample Plans)
        [TestMethod]
        public void Route_DegreePlans_QueryCurriculumTracksForStudentByProgram()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/curriculum-tracks", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/curriculum-tracks", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("QueryCurriculumTracksForStudentByProgramAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_QueryCurriculumTracksForStudentByProgram()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/curriculum-tracks");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/curriculum-tracks", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("QueryCurriculumTracksForStudentByProgramAsync", routeData.Values["Action"]);
        }
        #endregion

        #region DeductionCategories

        [TestMethod]
        public void Default_Route_DeductionCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDeductionCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDeductionCategories_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_DeductionCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_DeductionCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionCategoriesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DeductionCategories_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/deduction-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutDeductionCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionCategories_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/deduction-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostDeductionCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_DeductionCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/deduction-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteDeductionCategoriesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region DeductionTypes
        [TestMethod]
        public void DefaultRoute_GetDeductionTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllDeductionTypes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_GetAllDeductionTypesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllDeductionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_GetAllDeductionTypesAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllDeductionTypes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DeductionTypes_GetDeductionTypeByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionTypeById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_GetDeductionTypeByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_GetDeductionTypeByIdAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deduction-types/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetDeductionTypeById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_PutDeductionTypeAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/deduction-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutDeductionTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_PutDeductionTypeAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/deduction-types/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutDeductionType2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_PostDeductionTypeAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/deduction-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostDeductionTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_PostDeductionTypeAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/deduction-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostDeductionType2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeductionTypes_DeleteDeductionTypeAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/deduction-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deduction-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DeductionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteDeductionTypeAsync", routeData.Values["Action"]);
        }
        #endregion

        #region DefaultSettings

        [TestMethod]
        public void Default_Route_DefaultSettings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDefaultSettings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDefaultSettingsOptions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings", "application/vnd.hedtech.integration.default-settings-options.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDefaultSettingsAdvancedSearchOptions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings", "application/vnd.hedtech.integration.default-settings-advanced-search-options.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDefaultSettings_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDefaultSettingsOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings", "application/vnd.hedtech.integration.default-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetDefaultSettingsAdvancedSearchOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings", "application/vnd.hedtech.integration.default-settings-advanced-search-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsAdvancedSearchOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_DefaultSettingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_DefaultSettingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings/guid", "application/vnd.hedtech.integration.default-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsAdvancedSearchOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/default-settings/guid", "application/vnd.hedtech.integration.default-settings-advanced-search-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetDefaultSettingsAdvancedSearchOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettings_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/default-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutDefaultSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/default-settings/guid", "application/vnd.hedtech.integration.default-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutDefaultSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsAdvancedSearchOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/default-settings/guid", "application/vnd.hedtech.integration.default-settings-advanced-search-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutDefaultSettingsAdvancedSearchOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettings_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/default-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostDefaultSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/default-settings", "application/vnd.hedtech.integration.default-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostDefaultSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DefaultSettingsAdvancedSearchOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/default-settings", "application/vnd.hedtech.integration.default-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostDefaultSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_DefaultSettings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/default-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("default-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DefaultSettings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteDefaultSettingsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region DegreePlans

        [TestMethod]
        public void DefaultRoute_DegreePlans_GetPlanArchive()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plan-archives/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plan-archives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetPlanArchiveAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Post_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.3. Use CreateDegreePlan4 route
            Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Post2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.5. Use CreateDegreePlan4 route
            Assert.AreEqual("Post2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Post3_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.6. Use CreateDegreePlan4 route
            Assert.AreEqual("Post3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_DegreePlans_Post4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.11. Use CreateDegreePlan4 route
            Assert.AreEqual("Post4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_Post5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.18. Use CreateDegreePlan4 route
            Assert.AreEqual("Post5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_Post6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Post6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_Put_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.3. Use UpdatePlan4 route
            Assert.AreEqual("PutAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Put2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.5. Use UpdatePlan4 route
            Assert.AreEqual("Put2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Put3_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.6. Use UpdatePlan4 route
            Assert.AreEqual("Put3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Put4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.11. Use UpdatePlan5 route
            Assert.AreEqual("Put4Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Put5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.18. Use UpdatePlan6 route
            Assert.AreEqual("Put5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_Put6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Put6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_PostArchive_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans/degreePlanId/archive", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/archive", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.5. Use PostArchive3 route.
            Assert.AreEqual("PostArchiveAsync", routeData.Values["Action"]);

        }


        [TestMethod]
        public void Route_DegreePlans_PostArchive2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans/degreePlanId/archive", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/archive", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.7. Use PostArchive3 route.
            Assert.AreEqual("PostArchive2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_DegreePlans_PostArchive3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/degree-plans/degreePlanId/archive");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/archive", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostArchive3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_GetDegreePlanArchives_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/archives", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/archives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.5. Use GetPlanArchives2 route.
            Assert.AreEqual("GetDegreePlanArchivesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_DegreePlans_GetDegreePlanArchives2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/archives");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/archives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetDegreePlanArchives2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?programCode=programCode", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of API 1.6. See the GetSamplePlanPreview4 route.
            Assert.AreEqual("GetSamplePlanPreviewAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?programCode=programCode&firstTermCode=firstTermCode", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of API 1.6. See the GetSamplePlanPreview4 route.
            Assert.AreEqual("GetSamplePlanPreview2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview3_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?programCode=programCode&firstTermCode=firstTermCode", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of API 1.6. See the GetSamplePlanPreview4 route.
            Assert.AreEqual("GetSamplePlanPreview3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?programCode=programCode&firstTermCode=firstTermCode", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of API 1.11. See the GetSamplePlanPreview5 route.
            Assert.AreEqual("GetSamplePlanPreview4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?programCode=programCode&firstTermCode=firstTermCode", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of API 1.18. See the GetSamplePlanPreview6 route.
            Assert.AreEqual("GetSamplePlanPreview5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?programCode=programCode&firstTermCode=firstTermCode", _mediaTypeHeaderVersion6);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of API 1.32. See the GetSamplePlanPreview7 route.
            Assert.AreEqual("GetSamplePlanPreview6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?curriculumTrackCode=curriculumTrackCode&firstTermCode=firstTermCode", _mediaTypeHeaderVersion7);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetSamplePlanPreview7Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_GetSamplePlanPreview8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?curriculumTrackCode=curriculumTrackCode&firstTermCode=firstTermCode&programCode=programCode", _mediaTypeHeaderVersion8);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetSamplePlanPreview8Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_GetSamplePlanPreview8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/degreePlanId/preview-sample?curriculumTrackCode=curriculumTrackCode&firstTermCode=firstTermCode&programCode=programCode");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/preview-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetSamplePlanPreview8Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_PutRegistration_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans/degreePlanId/registration?termId=termId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route!!!  See Register route.
            Assert.AreEqual("PutRegistrationAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_DegreePlans_PutRegistration2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans/degreePlanId/registration?termId=termId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutRegistration2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_PutSectionRegistration_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans/degreePlanId/section-registration", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/section-registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route!!!  See Register route.
            Assert.AreEqual("PutSectionRegistrationAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_DegreePlans_PutSectionRegistration2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans/degreePlanId/section-registration");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{degreePlanId}/section-registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionRegistration2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DegreePlans_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.6. Use GetDegreePlan4 route
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Get2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.6. Use GetDegreePlan4 route
            Assert.AreEqual("Get2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_DegreePlans_Get3_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            // WARNING: This is an obsolete route as of Api version 1.6. Use GetDegreePlan4 route
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_Get4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            // WARNING: This is an obsolete route as of Api version 1.11. Use GetDegreePlan5 route
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get4Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void RouteDefault_DegreePlans_Get4_ValidateTrue()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id?validate=true", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // WARNING: This is an obsolete route as of Api version 1.11. Use GetDegreePlan5 route
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RouteDefault_DegreePlans_Get4_ValidateFalse()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id?validate=false", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            // WARNING: This is an obsolete route as of Api version 1.11. Use GetDegreePlan5 route
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_Get5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RouteDefault_DegreePlans_Get5_ValidateTrue()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id?validate=true", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RouteDefault_DegreePlans_Get5_ValidateFalse()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id?validate=false", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_Get6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RouteDefault_DegreePlans_Get6_ValidateTrue()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id?validate=true");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RouteDefault_DegreePlans_Get6_ValidateFalse()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-plans/id?validate=false");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("Get6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DegreePlans_PutApplySample()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/degree-plans/apply-sample");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-plans/apply-sample", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutApplySampleAsync", routeData.Values["Action"]);
        }

        #endregion DegreePlans

        #region DegreePlansReviewRequests

        [TestMethod]
        public void DefaultRoute_DegreePlanReviewRequests_QueryDegreePlanReviewRequestsForExactMatch()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/degree-plans", _mediaTypeHeaderEllucianPersonSearchFormatVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/degree-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreePlanReviewRequests", routeData.Values["Controller"]);
            Assert.AreEqual("QueryDegreePlanReviewRequestsForExactMatchAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Degrees

        [TestMethod]
        public void DefaultRoute_Degrees_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degrees");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degrees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Degrees", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Degrees

        #region DegreeTypes

        [TestMethod]
        public void DefaultRoute_DegreeTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/degree-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("degree-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DegreeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion DegreeTypes

        #region Denominations

        [TestMethod]
        public void DefaultRoute_Denominations_GetDenominations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/denominations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("denominations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Denominations", routeData.Values["Controller"]);
            Assert.AreEqual("GetDenominations", routeData.Values["Action"]);
        }

        #endregion Denominations

        #region Departments

        [TestMethod]
        public void DefaultRoute_Departments_GetDepartments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/departments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("departments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Departments", routeData.Values["Controller"]);
            Assert.AreEqual("GetDepartmentsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Departments_GetActiveDepartments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/departments/active");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("departments/active", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Departments", routeData.Values["Controller"]);
            Assert.AreEqual("GetActiveDepartmentsAsync", routeData.Values["Action"]);
        }

        #endregion Departments

        #region Deposits

        [TestMethod]
        public void DefaultRoute_Deposits_GetDepositsDueObs()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-holders/studentId/deposits-due");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-holders/{studentId}/deposits-due", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Deposits", routeData.Values["Controller"]);
            Assert.AreEqual("GetDepositsDue", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Deposits_GetDepositsDue()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deposits/deposits-due/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deposits/deposits-due/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Deposits", routeData.Values["Controller"]);
            Assert.AreEqual("GetDepositsDue", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Deposits_GetDepositTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deposits/deposit-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deposits/deposit-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Deposits", routeData.Values["Controller"]);
            Assert.AreEqual("GetDepositTypes", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Deposits_GetDepositTypesObs()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/deposit-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deposit-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Deposits", routeData.Values["Controller"]);
            Assert.AreEqual("GetDepositTypes", routeData.Values["Action"]);
        }

        #endregion Deposits

        #region DisabilityTypes

        [TestMethod]
        public void DefaultRoute_DisabilityTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/disability-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("disability-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DisabilityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion DisabilityTypes

        #region Divisions

        [TestMethod]
        public void DefaultRoute_Divisions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/divisions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("divisions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Divisions", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion Divisions

        #region Document approvals
        [TestMethod]
        public void DefaultRoute_DocumentApproval_GetDocumentApproval()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/document-approval");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("document-approval", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DocumentApproval", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_DocumentApproval_PostDocumentApproval()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/document-approval");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("document-approval", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DocumentApproval", routeData.Values["Controller"]);
            Assert.AreEqual("PostDocumentApprovalAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_DocumentApproved_QueryApprovedDocuments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/approved-documents");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/approved-documents", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DocumentApproval", routeData.Values["Controller"]);
            Assert.AreEqual("QueryApprovedDocumentsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Draft budget adjustments

        [TestMethod]
        public void DefaultRoute_DraftBudgetAdjustment_CreateDraftBudgetAdjustment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/draft-budget-adjustments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("draft-budget-adjustments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DraftBudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DraftBudgetAdjustment_UpdateDraftBudgetAdjustment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/draft-budget-adjustments/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("draft-budget-adjustments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DraftBudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DraftBudgetAdjustment_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/draft-budget-adjustments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("draft-budget-adjustments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DraftBudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DraftBudgetAdjustment_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/draft-budget-adjustments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("draft-budget-adjustments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DraftBudgetAdjustments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region DropReasons
        [TestMethod]
        public void DefaultRoute_DropReasons_GetDropReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/drop-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("drop-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("DropReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ECommerce

        [TestMethod]
        public void DefaultRoute_ECommerce_GetConvenienceFees()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ecommerce/convenience-fees");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ecommerce/convenience-fees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ECommerce", routeData.Values["Controller"]);
            Assert.AreEqual("GetConvenienceFees", routeData.Values["Action"]);
        }

        #endregion ECommerce

        #region EducationGoals

        [TestMethod]
        public void DefaultRoute_EducationGoals_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/education-goals");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("education-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationGoals_GetAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/education-goals", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("education-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationGoalsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region EducationalGoals

        [TestMethod]
        public void Default_Route_EducationalGoals()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-goals");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEducationalGoals_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-goals", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEducationalGoals_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-goals", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EducationalGoalsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-goals/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalGoalsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EducationalGoalsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-goals/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalGoalsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-goals/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalGoalsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EducationalGoals_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/educational-goals/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("PutEducationalGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalGoals_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/educational-goals", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("PostEducationalGoalsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EducationalGoals_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/educational-goals/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-goals/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalGoals", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEducationalGoalsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EducationalInstitutions

        [TestMethod]
        public void DefaultRoute_EducationalInstitutions_GetEducationalInstitutions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutions_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutions_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutionsByType_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions?type=type", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EducationalInstitutions_GetEducationalInstitutionsByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutionsByGuidAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutionsByGuidAsync_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_GetEducationalInstitutionsByGuidAsync_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institutions/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_PutEducationalInstitutions_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/educational-institutions/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("PutEducationalInstitutionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_PutEducationalInstitutions_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/educational-institutions/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("PutEducationalInstitutionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_PostEducationalInstitutions_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/educational-institutions", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("PostEducationalInstitutionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutions_PostEducationalInstitutions_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/educational-institutions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("PostEducationalInstitutionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EducationalInstitutions_DeleteEducationalInstitutionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/educational-institutions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institutions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEducationalInstitutionByGuidAsync", routeData.Values["Action"]);
        }

        #endregion EducationalInstitutionUnits

        #region EducationalInstitutionUnits


        [TestMethod]
        public void DefaultRoute_EducationalInstitutionUnits_GetEducationalInstitutionUnits()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionUnits3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_GetEducationalInstitutionUnits_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_GetEducationalInstitutionUnits_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_GetEducationalInstitutionUnits_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionUnits3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EducationalInstitutionUnits_GetEducationalInstitutionUnitsByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionUnitsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_GetEducationalInstitutionUnitsByGuidAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_GetEducationalInstitutionUnitsByGuidAsync_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionUnitsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_GetEducationalInstitutionUnitsByGuidAsync_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/educational-institution-units/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEducationalInstitutionUnitsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_PutEducationalInstitutionUnits_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/educational-institution-units/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PutEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_PutEducationalInstitutionUnits_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/educational-institution-units/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PutEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_PutEducationalInstitutionUnits_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/educational-institution-units/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PutEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_PostEducationalInstitutionUnits_12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/educational-institution-units", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PostEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_PostEducationalInstitutionUnits_7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/educational-institution-units", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PostEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EducationalInstitutionUnits_PostEducationalInstitutionUnits_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/educational-institution-units", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("PostEducationalInstitutionUnitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EducationalInstitutionUnits_DeleteEducationalInstitutionUnitsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/educational-institution-units/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("educational-institution-units/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationalInstitutionUnits", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEducationalInstitutionUnitsByGuidAsync", routeData.Values["Action"]);
        }

        #endregion EducationalInstitutionUnits

        #region EarningsTypes

        [TestMethod]
        public void Default_Route_EarningTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earning-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEarningTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEarningTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earning-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEarningTypes_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earning-types", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEarningTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EarningTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earning-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEarningTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EarningTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earning-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EarningTypesByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earning-types/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEarningTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EarningTypes_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/earning-types/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutEarningTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EarningTypes_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/earning-types", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostEarningTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EarningTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/earning-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earning-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEarningTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EarningsTypeGroups

        [TestMethod]
        public void Default_Route_EarningsTypeGroups()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/earnings-type-groups");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("earnings-type-groups", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EarningsTypeGroups", routeData.Values["Controller"]);
            Assert.AreEqual("GetEarningsTypeGroupsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region EducationHistory

        [TestMethod]
        public void DefaultRoute_EducationHistory_QueryEducationHistory()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/education-history");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/education-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EducationHistory", routeData.Values["Controller"]);
            Assert.AreEqual("QueryEducationHistoryAsync", routeData.Values["Action"]);
        }

        #endregion EducationHistory

        #region EmailTypes

        [TestMethod]
        public void DefaultRoute_GetEmailTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/email-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("email-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmailTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmailTypesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmailTypes_GetEMailTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/email-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("email-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmailTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmailTypesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_EmailTypes_GetEmailTypeById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/email-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("email-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmailTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmailTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmailTypes_PutEmailTypeById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/email-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("email-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmailTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmailTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmailTypes_PostEmailTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/email-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("email-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmailTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmailTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmailTypes_DeleteEmailTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/email-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("email-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmailTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmailTypesAsync", routeData.Values["Action"]);
        }


        #endregion EmailTypes

        #region EmergencyContactPhoneAvailabilities
        [TestMethod]
        public void Default_Route_EmergencyContactPhoneAvailabilities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-phone-availabilities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactPhoneAvailabilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmergencyContactPhoneAvailabilities_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-phone-availabilities", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmergencyContactPhoneAvailabilities_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-phone-availabilities", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactPhoneAvailabilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmergencyContactPhoneAvailabilitiesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-phone-availabilities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactPhoneAvailabilitiesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmergencyContactPhoneAvailabilitiesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-phone-availabilities/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmergencyContactPhoneAvailabilitiesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-phone-availabilities/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactPhoneAvailabilitiesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmergencyContactPhoneAvailabilities_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/emergency-contact-phone-availabilities/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmergencyContactPhoneAvailabilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmergencyContactPhoneAvailabilities_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/emergency-contact-phone-availabilities", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmergencyContactPhoneAvailabilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmergencyContactPhoneAvailabilities_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/emergency-contact-phone-availabilities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-phone-availabilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactPhoneAvailabilities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmergencyContactPhoneAvailabilitiesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region EmergencyContactTypes
        [TestMethod]
        public void Default_Route_EmergencyContactTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmergencyContactTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-types", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmergencyContactTypes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmergencyContactTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmergencyContactTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-types/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmergencyContactTypesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/emergency-contact-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyContactTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmergencyContactTypes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/emergency-contact-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmergencyContactTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmergencyContactTypes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/emergency-contact-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmergencyContactTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmergencyContactTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/emergency-contact-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("emergency-contact-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmergencyContactTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmergencyContactTypesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Employee Benefits Enrollment

        [TestMethod]
        public void DefaultRoute_GetEmployeeBenefitsEnrollmentEligibilityAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/{employeeId}/benefits-enrollment-eligibility");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeBenefitsEnrollmentEligibilityAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmployeeBenefitsEnrollmentEligibilityAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/{employeeId}/benefits-enrollment-eligibility", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeBenefitsEnrollmentEligibilityAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetEmployeeBenefitsEnrollmentPoolAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/{employeeId}/benefits-enrollment-pool");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-pool", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeBenefitsEnrollmentPoolAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmployeeBenefitsEnrollmentPoolAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/{employeeId}/benefits-enrollment-pool", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-pool", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeBenefitsEnrollmentPoolAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetEmployeeBenefitsEnrollmentPackageAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/{employeeId}/benefits-enrollment-package");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-package", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeBenefitsEnrollmentPackageAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_AddEmployeeBenefitsEnrollmentPoolAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employees/{employeeId}/benefits-enrollment-pool");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-pool", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("AddEmployeeBenefitsEnrollmentPoolAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_AddEmployeeBenefitsEnrollmentPoolAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employees/{employeeId}/benefits-enrollment-pool", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-pool", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("AddEmployeeBenefitsEnrollmentPoolAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UpdateEmployeeBenefitsEnrollmentPoolAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employees/{employeeId}/benefits-enrollment-pool");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-pool", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateEmployeeBenefitsEnrollmentPoolAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_UpdateEmployeeBenefitsEnrollmentPoolAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employees/{employeeId}/benefits-enrollment-pool", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{employeeId}/benefits-enrollment-pool", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateEmployeeBenefitsEnrollmentPoolAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryEnrollmentPeriodBenefitsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/benefits-enrollment-period-benefits");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/benefits-enrollment-period-benefits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("QueryEnrollmentPeriodBenefitsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SubmitOrReOpenBenefitElectionsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employees/benefit-elections");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/benefit-elections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("SubmitOrReOpenBenefitElectionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SubmitOrReOpenBenefitElectionsAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employees/benefit-elections", "application/vnd.ellucian.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/benefit-elections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("SubmitOrReOpenBenefitElectionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetBeneficiaryCategoriesAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/beneficiary-category");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/beneficiary-category", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("BenefitsEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetBeneficiaryCategoriesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Employees

        [TestMethod]
        public void DefaultRoute_GetEmployee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployees3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Employee_GetEmployees()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeV11_GetEmployees()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployees2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeV12_GetEmployees()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployees3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Employee_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Employee_GetEmployeeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployee3ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Employee_GetEmployeeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeV11_GetEmployeeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployee2ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeV12_GetEmployeeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployee3ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employees/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Employee_PutEmployee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employees/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmployeeAsync", routeData.Values["Action"]);
        }
        /*
        [TestMethod]
        public void Route_EmployeeV11_PutEmployee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employees/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmployee2Async", routeData.Values["Action"]);
        }
        */
        [TestMethod]
        public void Route_Employee_PostEmployee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employees", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmployeeAsync", routeData.Values["Action"]);
        }
        /*
        [TestMethod]
        public void Route_EmployeeV11_PostEmployee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employees", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmployee2Async", routeData.Values["Action"]);
        }
        */
        [TestMethod]
        public void Route_Employee_DeleteEmployee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employees/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employees/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Employees", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmployeeAsync", routeData.Values["Action"]);
        }

        #endregion Employees

        #region EmployeeLeavePlans

        [TestMethod]
        public void Default_Route_EmployeeLeavePlans()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmployeeLeavePlans_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmployeeLeavePlans_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmployeeLeavePlansByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeavePlansByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmployeeLeavePlansByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeLeavePlansByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeavePlansByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmployeeLeavePlans_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employee-leave-plans/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmployeeLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeLeavePlans_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employee-leave-plans", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmployeeLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmployeeLeavePlans_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employee-leave-plans/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmployeeLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeLeavePlans_Get_V2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-plans", "application/vnd.ellucian.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeavePlansV2Async", routeData.Values["Action"]);
        }
        #endregion

        #region Employee Compensation
        [TestMethod]
        public void Route_EmployeeCompensation_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-compensation");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-compensation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeCompensation", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeCompensationAsync", routeData.Values["Action"]);

        }
        #endregion

        #region Employee Current Benefits
        [TestMethod]
        public void Route_EmployeeCurrentBenefits_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-current-benefits");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-current-benefits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("CurrentBenefits", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeCurrentBenefitsAsync", routeData.Values["Action"]);

        }
        #endregion

        #region EmployeeLeaveTransactions

        [TestMethod]
        public void Default_Route_EmployeeLeaveTransactions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-transactions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeaveTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmployeeLeaveTransactions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-transactions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmployeeLeaveTransactions_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-transactions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeaveTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmployeeLeaveTransactionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-transactions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeaveTransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmployeeLeaveTransactionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-transactions/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeLeaveTransactionsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employee-leave-transactions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmployeeLeaveTransactionsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmployeeLeaveTransactions_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employee-leave-transactions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmployeeLeaveTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmployeeLeaveTransactions_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employee-leave-transactions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmployeeLeaveTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmployeeLeaveTransactions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employee-leave-transactions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employee-leave-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmployeeLeaveTransactionsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentClassifications

        [TestMethod]
        public void DefaultRoute_GetEmploymentClassification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassification_GetEmploymentClassifications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-classifications", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassification_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-classifications", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmploymentClassification_GetEmploymentClassificationById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-classifications/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentClassificationByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassification_GetEmploymentClassificationByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-classifications/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentClassificationByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassificationById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-classifications/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassification_PutEmploymentClassification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-classifications/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentClassificationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassification_PostEmploymentClassification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-classifications", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentClassificationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentClassification_DeleteEmploymentClassification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-classifications/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentClassificationAsync", routeData.Values["Action"]);
        }

        #endregion EmploymentClassifications

        #region EmploymentDepartments

        [TestMethod]
        public void Default_Route_EmploymentDepartments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-departments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentDepartmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentDepartments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-departments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentDepartments_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-departments", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentDepartmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentDepartmentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-departments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentDepartmentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentDepartmentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-departments/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentDepartmentsByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-departments/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentDepartmentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentDepartments_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-departments/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentDepartmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentDepartments_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-departments", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentDepartmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentDepartments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-departments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-departments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentDepartments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentDepartmentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentFrequencies

        [TestMethod]
        public void Default_Route_EmploymentFrequencies()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-frequencies");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentFrequenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentFrequencies_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-frequencies", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentFrequencies_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-frequencies", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentFrequenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentFrequenciesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-frequencies/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentFrequenciesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentFrequenciesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-frequencies/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentFrequenciesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-frequencies/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentFrequenciesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentFrequencies_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-frequencies/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentFrequenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentFrequencies_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-frequencies", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentFrequenciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentFrequencies_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-frequencies/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-frequencies/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentFrequencies", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentFrequenciesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentLeaveOfAbsence
        [TestMethod]
        public void DefaultRoute_GetEmploymentLeaveOfAbsenceReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-leave-of-absence-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllEmploymentLeaveOfAbsenceReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentLeaveOfAbsenceReasons_GetAllEmploymentLeaveOfAbsenceReasonsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-leave-of-absence-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllEmploymentLeaveOfAbsenceReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmploymentLeaveOfAbsenceReasons_GetEmploymentLeaveOfAbsenceReasonByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-leave-of-absence-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentLeaveOfAbsenceReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentLeaveOfAbsenceReasons_GetEmploymentLeaveOfAbsenceReasonByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-leave-of-absence-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentLeaveOfAbsenceReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentLeaveOfAbsenceReasons_PutEmploymentLeaveOfAbsenceReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-leave-of-absence-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentLeaveOfAbsenceReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentLeaveOfAbsenceReasons_PostEmploymentLeaveOfAbsenceReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-leave-of-absence-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentLeaveOfAbsenceReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentLeaveOfAbsenceReasons_DeleteEmploymentLeaveOfAbsenceReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-leave-of-absence-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-leave-of-absence-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentLeaveOfAbsenceReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentLeaveOfAbsenceReasonAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentOrganizations

        [TestMethod]
        public void Default_Route_EmploymentOrganizations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentOrganizations_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentOrganizations_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentOrganizations_V1210()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentOrganizationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentOrganizationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentOrganizationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentOrganizationsByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentOrganizationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentOrganizationsByGuid_V1210()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-organizations/guid", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentOrganizationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentOrganizations_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-organizations/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentOrganizations_Put_V1210()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-organizations/guid", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentOrganizations_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-organizations", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentOrganizations_Post_V1210()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-organizations", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentOrganizations_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-organizations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-organizations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentOrganizations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentOrganizationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentPerformanceReviews

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviews()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-reviews");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentPerformanceReviews_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-reviews", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentPerformanceReviews_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-reviews", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-reviews/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-reviews/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentPerformanceReviewsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-reviews/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentPerformanceReviews_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-performance-reviews/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentPerformanceReviewsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentPerformanceReviews_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-performance-reviews", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentPerformanceReviewsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviews_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-performance-reviews/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-reviews/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviews", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentPerformanceReviewsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentPerformanceReviewRatings

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewRatings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-ratings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewRatingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentPerformanceReviewRatings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-ratings", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentPerformanceReviewRatings_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-ratings", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewRatingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewRatingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-ratings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewRatingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewRatingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-ratings/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentPerformanceReviewRatingsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-ratings/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewRatingsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentPerformanceReviewRatings_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-performance-review-ratings/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentPerformanceReviewRatingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentPerformanceReviewRatings_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-performance-review-ratings", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentPerformanceReviewRatingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewRatings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-performance-review-ratings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-ratings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewRatings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentPerformanceReviewRatingsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentPerformanceReviewTypes

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentPerformanceReviewTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentPerformanceReviewTypes_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentPerformanceReviewTypesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-performance-review-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentPerformanceReviewTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentPerformanceReviewTypes_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-performance-review-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentPerformanceReviewTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentPerformanceReviewTypes_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-performance-review-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentPerformanceReviewTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentPerformanceReviewTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-performance-review-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-performance-review-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentPerformanceReviewTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentPerformanceReviewTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentProficiencies

        [TestMethod]
        public void DefaultRoute_GetEmploymentProficiency()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiencies");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficienciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiency_GetEmploymentProficiencies()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiencies", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficienciesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiency_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiencies", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmploymentProficiency_GetEmploymentProficiencyById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiencies/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficiencyByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiency_GetEmploymentProficiencyByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiencies/id", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficiencyByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiencyById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiencies/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiency_PutEmploymentProficiency()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-proficiencies/id", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentProficiencyAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiency_PostEmploymentProficiency()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-proficiencies", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentProficiencyAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiency_DeleteEmploymentProficiency()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-proficiencies/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiencies/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencies", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentProficiencyAsync", routeData.Values["Action"]);
        }

        #endregion EmploymentProficiencies

        #region EmploymentProficiencyLevels

        [TestMethod]
        public void Default_Route_EmploymentProficiencyLevels()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiency-levels");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficiencyLevelsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentProficiencyLevels_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiency-levels", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentProficiencyLevels_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiency-levels", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficiencyLevelsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentProficiencyLevelsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiency-levels/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficiencyLevelByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentProficiencyLevelsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiency-levels/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiencyLevelsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-proficiency-levels/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentProficiencyLevelByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentProficiencyLevels_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-proficiency-levels/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentProficiencyLevelAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentProficiencyLevels_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-proficiency-levels", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentProficiencyLevelAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentProficiencyLevels_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-proficiency-levels/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-proficiency-levels/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentProficiencyLevels", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentProficiencyLevelAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentTerminationReasons
        [TestMethod]
        public void DefaultRoute_GetEmploymentTerminationReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-termination-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentTerminationReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentTerminationReasons_GetEmploymentTerminationReasonsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-termination-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentTerminationReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmploymentTerminationReasons_GetEmploymentTerminationReasonByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-termination-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentTerminationReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentTerminationReasons_GetEmploymentTerminationReasonByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-termination-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentTerminationReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentTerminationReasons_PutEmploymentTerminationReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-termination-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentTerminationReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentTerminationReasons_PostEmploymentTerminationReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-termination-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentTerminationReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentTerminationReasons_DeleteEmploymentTerminationReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-termination-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-termination-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentTerminationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentTerminationReasonAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EmploymentVocations

        [TestMethod]
        public void Default_Route_EmploymentVocations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-vocations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentVocationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEmploymentVocations_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-vocations", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentVocationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentVocationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-vocations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentVocationByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentVocationsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/employment-vocations/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmploymentVocationByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_EmploymentVocations_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/employment-vocations/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmploymentVocationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EmploymentVocations_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/employment-vocations", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("PostEmploymentVocationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_EmploymentVocations_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/employment-vocations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("employment-vocations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmploymentVocations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEmploymentVocationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region EnrollmentStatuses

        [TestMethod]
        public void Default_Route_GetEnrollmentStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/enrollment-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetEnrollmentStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEnrollmentStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/enrollment-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEnrollmentStatuses_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/enrollment-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetEnrollmentStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetEnrollmentStatusesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/enrollment-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetEnrollmentStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetEnrollmentStatusesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/enrollment-statuses/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetEnrollmentStatusesById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/enrollment-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetEnrollmentStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EnrollmentStatuses_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/enrollment-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutEnrollmentStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_EnrollmentStatuses_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/enrollment-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostEnrollmentStatusAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Default_Route_EnrollmentStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/enrollment-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("enrollment-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EnrollmentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEnrollmentStatusAsync", routeData.Values["Action"]);
        }

        #endregion EnrollmentStatuses

        #region Ethnicities

        [TestMethod]
        public void DefaultRoute_Ethnicities_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ethnicities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEthnicities2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Ethnicities_GetCdmEthnicities2_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ethnicities", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEthnicities2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Ethnicities_GetEthnicityByGuid2_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ethnicities/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEthnicityById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Ethnicities_GetEthnicityByGuid2_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ethnicities/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("GetEthnicityById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Ethnicities_PutEthnicities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/ethnicities/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("PutEthnicitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Ethnicities_PostEthnicities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/ethnicities", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("PostEthnicitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Ethnicities_DeleteEthnicities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/ethnicities/{id}", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEthnicitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Ethnicities_DeleteEthnicities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/ethnicities/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ethnicities/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Ethnicities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteEthnicitiesAsync", routeData.Values["Action"]);
        }

        #endregion Ethnicities

        #region Events

        [TestMethod]
        public void DefaultRoute_Events_GetFacultyEvents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/calendar?startDate=startDate&endDate=endDate");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/calendar", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Events", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyEvents", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Events_GetSectionEvents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/calendar?startDate=startDate&endDate=endDate");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/calendar", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Events", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionEvents", routeData.Values["Action"]);
        }

        #endregion Events

        #region ExternalEducation

        [TestMethod]
        public void Default_Route_GetExternalEducation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-education");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEducationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetExternalEducation_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-education", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetExternalEducation_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-education", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEducationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetExternalEducationByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-education/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEducationByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetExternalEducationByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-education/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetExternalEducationByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-education/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEducationByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ExternalEducation_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/external-education/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("PutExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ExternalEducation_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/external-education", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("PostExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEducation_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/external-education/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-education/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteExternalEducationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ExternalEmployments

        [TestMethod]
        public void Default_Route_ExternalEmployments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetExternalEmployments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetExternalEmployments_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employments", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEmploymentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEmploymentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employments/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ExternalEmploymentsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employments/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ExternalEmployments_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/external-employments/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("PutExternalEmploymentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ExternalEmployments_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/external-employments", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("PostExternalEmploymentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEmployments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/external-employments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmployments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteExternalEmploymentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ExternalEmploymentPositions

        [TestMethod]
        public void Default_Route_ExternalEmploymentPositions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employment-positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetExternalEmploymentPositions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employment-positions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetExternalEmploymentPositions_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employment-positions", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEmploymentPositionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employment-positions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentPositionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEmploymentPositionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employment-positions/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ExternalEmploymentPositionsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-employment-positions/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetExternalEmploymentPositionsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ExternalEmploymentPositions_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/external-employment-positions/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("PutExternalEmploymentPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ExternalEmploymentPositions_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/external-employment-positions", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("PostExternalEmploymentPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ExternalEmploymentPositions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/external-employment-positions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-employment-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalEmploymentPositions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteExternalEmploymentPositionsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ExternalTranscriptStatuses

        [TestMethod]
        public void DefaultRoute_ExternalTranscriptStatuses_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/external-transcript-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("external-transcript-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ExternalTranscriptStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion ExternalTranscriptStatuses

        #region Faculty

        [TestMethod]
        public void DefaultRoute_Faculty_PostFaculty()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/faculty");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("PostFacultyAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Faculty_GetFacultyRestrictions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/restrictions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyRestrictionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Faculty_GetFacultySections_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/sections?startDate=startDate&endDate=endDate&bestFit=bestFit", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultySectionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Faculty_GetFacultySections2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/sections?startDate=startDate&endDate=endDate&bestFit=bestFit", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultySections2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Faculty_GetFacultySections3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/sections?startDate=startDate&endDate=endDate&bestFit=bestFit", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultySections3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Faculty_GetFacultySections4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/sections?startDate=startDate&endDate=endDate&bestFit=bestFit", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultySections4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Faculty_GetFacultySections5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/sections?startDate=startDate&endDate=endDate&bestFit=bestFit", _mediaTypeHeaderVersion5);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultySections5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Faculty_GetFacultySections5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/facultyId/sections?startDate=startDate&endDate=endDate&bestFit=bestFit");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{facultyId}/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultySections5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Faculty_GetFaculty()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Faculty_GetPermissions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/permissions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyPermissions2Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_Faculty_GetPermissions_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/permissions", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetPermissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Faculty_GetFacultyPermissions_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/faculty/permissions", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("faculty/permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("GetFacultyPermissions2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Faculty_QueryFacultyByPost()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/faculty");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/faculty", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("QueryFacultyByPostAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Faculty_PostFacultyIds()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/query-faculty-ids");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/query-faculty-ids", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Faculty", routeData.Values["Controller"]);
            Assert.AreEqual("PostFacultyIdsAsync", routeData.Values["Action"]);
        }

        #endregion Faculty

        #region FALink

        [TestMethod]
        public void DefaultRoute_FALink_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/fa-link");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fa-link", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FALink", routeData.Values["Controller"]);
            Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        }

        #endregion 

        #region Fafsa

        [TestMethod]
        public void DefaultRoute_Fafsa_QueryFafsaByPostAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/fafsa");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/fafsa", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Fafsa", routeData.Values["Controller"]);
            Assert.AreEqual("QueryFafsaByPostAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Fafsa_GetStudentFafsasAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/fafsas");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/fafsas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Fafsa", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFafsasAsync", routeData.Values["Action"]);
        }

        #endregion Fafsa

        #region FederalCourseClassifications

        [TestMethod]
        public void DefaultRoute_FederalCourseClassifications_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/federal-course-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("federal-course-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FederalCourseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion FederalCourseClassifications

        #region FinanceConfiguration

        [TestMethod]
        public void DefaultRoute_FinanceConfiguration_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinanceConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_FinanceConfiguration_GetImmediatePaymentControl()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/ipc", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/ipc", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinanceConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetImmediatePaymentControl", routeData.Values["Action"]);
        }

        #endregion FinanceConfiguration

        #region FinancialAidApplications

        [TestMethod]
        public void Route_FinancialAidApplications_GetFinancialAidApplications_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/financial-aid-applications", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/financial-aid-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplications", routeData.Values["Action"]);
        }

        #endregion FinancialAidApplications

        #region FinancialAidAcademicProgressTypes

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidAcademicProgressTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidAcademicProgressTypes_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-types", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidAcademicProgressTypesByGuid_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-types/guid", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialAidAcademicProgressTypes_Put_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-academic-progress-types/guid", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidAcademicProgressTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidAcademicProgressTypes_Post_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-academic-progress-types", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidAcademicProgressTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-academic-progress-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidAcademicProgressTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidAcademicProgressStatuses

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidAcademicProgressStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidAcademicProgressStatuses_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-statuses", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-statuses/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidAcademicProgressStatusesByGuid_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-academic-progress-statuses/guid", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAcademicProgressStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialAidAcademicProgressStatuses_Put_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-academic-progress-statuses/guid", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidAcademicProgressStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidAcademicProgressStatuses_Post_V15()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-academic-progress-statuses", "application/vnd.hedtech.integration.v15+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidAcademicProgressStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAcademicProgressStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-academic-progress-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-academic-progress-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAcademicProgressStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidAcademicProgressStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidApplicationOutcomes

        [TestMethod]
        public void Default_Route_FinancialAidApplicationOutcomes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplicationOutcomesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidApplicationOutcomes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidApplicationOutcomes_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplicationOutcomesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidApplicationOutcomes_V9_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes", "application/vnd.hedtech.integration.v9.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplicationOutcomesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidApplicationOutcomesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplicationOutcomesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidApplicationOutcomesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidApplicationOutcomesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes/id", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplicationOutcomesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidApplicationOutcomesByGuid_V9_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-application-outcomes/id", "application/vnd.hedtech.integration.v9.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidApplicationOutcomesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidApplicationOutcomes_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-application-outcomes/id", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidApplicationOutcomes_Put_V9_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-application-outcomes/id", "application/vnd.hedtech.integration.v9.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidApplicationOutcomes_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-application-outcomes", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidApplicationOutcomes_Post_V9_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-application-outcomes", "application/vnd.hedtech.integration.v9.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidApplicationOutcomes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-application-outcomes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-application-outcomes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidApplicationOutcomes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidAwardPeriods

        [TestMethod]
        public void Default_Route_FinancialAidAwardPeriod()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-award-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAwardPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidAwardPeriod_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-award-periods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidAwardPeriod_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-award-periods", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAwardPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAwardPeriodById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-award-periods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAwardPeriodByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAwardPeriodById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-award-periods/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidAwardPeriodById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-award-periods/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidAwardPeriodByIdAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialAidAwardPeriod_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-award-periods/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidAwardPeriodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidAwardPeriod_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-award-periods", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidAwardPeriodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidAwardPeriod_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-award-periods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-award-periods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidAwardPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidAwardPeriodAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidBudgetComponents

        [TestMethod]
        public void DefaultRoute_FinancialAidBudgetComponents_GetBudgetComponents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-budget-components");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-budget-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidBudgetComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetBudgetComponents", routeData.Values["Action"]);
        }

        #endregion FinancialAidBudgetComponents

        #region FinancialAidChecklistItems

        [TestMethod]
        public void DefaultRoute_FinancialAidChecklistItems_GetChecklistItems()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-checklist-items");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-checklist-items", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidChecklistItems", routeData.Values["Controller"]);
            Assert.AreEqual("GetChecklistItems", routeData.Values["Action"]);
        }

        #endregion FinancialAidChecklistItems

        #region FinancialAidCounselors

        [TestMethod]
        public void DefaultRoute_FinancialAidCounselors_GetCounselor()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-counselors/counselorId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-counselors/{counselorId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidCounselors", routeData.Values["Controller"]);
            Assert.AreEqual("GetCounselor", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryFinancialAidCounselors_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/financial-aid-counselors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/financial-aid-counselors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidCounselors", routeData.Values["Controller"]);
            Assert.AreEqual("QueryFinancialAidCounselorsAsync", routeData.Values["Action"]);
        }

        #endregion FinancialAidCounselors

        #region FinancialAidExplanations

        [TestMethod]
        public void DefaultRoute_GetFinancialAidExplanationsAsync_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-explanations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-explanations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidExplanations", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidExplanationsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region FinancialAidFundCategories

        [TestMethod]
        public void Default_Route_FinancialAidFundCategory()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidFundCategory_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidFundCategory_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-categories", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundCategoryById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-categories/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundCategoryByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundCategoryById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-categories/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundCategoryById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-categories/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundCategoryByIdAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialAidFundCategory_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-fund-categories/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidFundCategoryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundCategory_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-fund-categories", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidFundCategoryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundCategory_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-fund-categories/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-categories/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidFundCategoryAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidFundClassifications

        [TestMethod]
        public void Default_Route_FinancialAidFundClassification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidFundClassification_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-classifications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidFundClassification_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-classifications", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundClassificationById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundClassificationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundClassificationyById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-classifications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundClassificationById_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-fund-classifications/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundClassificationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundClassification_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-fund-classifications/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidFundClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundClassificatioin_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-fund-classifications", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidFundClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundClassification_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-fund-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-fund-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFundClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidFundClassificationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidFunds

        [TestMethod]
        public void Default_Route_FinancialAidFund()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-funds");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidFund_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-funds", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidFund_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-funds", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-funds/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFundById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-funds/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFundById_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-funds/id", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidFundsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialAidFund_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-funds/id", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidFundsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidFund_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-funds", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidFundsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidFund_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-funds/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-funds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidFunds", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidFundsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidLinks

        [TestMethod]
        public void DefaultRoute_FinancialAidLinks_GetLinks()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-links");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-links", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidLinks", routeData.Values["Controller"]);
            Assert.AreEqual("GetLinks", routeData.Values["Action"]);
        }

        #endregion FinancialAidLinks

        #region FinancialAidOffices

        [TestMethod]
        public void Route_FinancialAidOffices_GetFinancialAidOffices1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidOffices", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidOffices_GetFinancialAidOffices2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidOffices2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_FinancialAidOffices_GetFinancialAidOffices3Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidOffices3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentFinancialAidOffices_GetFinancialAidOfficesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetEedmFinancialAidOfficesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidOffice_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidOffice_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetEedmFinancialAidOfficesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidOfficeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidOfficeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidOfficeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidOfficeById_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-offices/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidOfficeByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentFinancialAidOffice_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-offices/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidOfficeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidOffice_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-offices", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidOfficeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidOffice_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-offices/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-offices/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidOffices", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidOfficeAsync", routeData.Values["Action"]);
        }

        #endregion FinancialAidOffices

        #region FinancialAidYears

        [TestMethod]
        public void Default_Route_FinancialAidYear()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-years");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidYearsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidYear_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-years", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialAidYear_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-years", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidYearsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidYearById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-years/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidYearByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidYearById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-years/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidYearById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-aid-years/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialAidYearByIdAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialAidYear_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-aid-years/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialAidYearAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialAidYear_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-aid-years", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialAidYearAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialAidYear_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-aid-years/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-aid-years/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidYears", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialAidYearAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FinancialAidPersons

        [TestMethod]
        public void DefaultRoute_FinancialAidPersons_QueryByPostAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/financial-aid-persons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/financial-aid-persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialAidPerson", routeData.Values["Controller"]);
            Assert.AreEqual("QueryFinancialAidPersonsByPostAsync", routeData.Values["Action"]);
        }

        #endregion

        #region FinancialDocumentTypes

        [TestMethod]
        public void Default_Route_FinancialDocumentTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-document-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialDocumentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialDocumentTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-document-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFinancialDocumentTypes_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-document-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialDocumentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialDocumentTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-document-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialDocumentTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialDocumentTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-document-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialDocumentTypesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/financial-document-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFinancialDocumentTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FinancialDocumentTypes_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/financial-document-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutFinancialDocumentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FinancialDocumentTypes_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/financial-document-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostFinancialDocumentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FinancialDocumentTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/financial-document-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("financial-document-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinancialDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFinancialDocumentTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Finance query
        [TestMethod]
        public void Default_Route_QueryFinanceQuerySelectionByPostAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/finance-query");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/finance-query", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FinanceQuery", routeData.Values["Controller"]);
            Assert.AreEqual("QueryFinanceQuerySelectionByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Configuration_GetGlFiscalYearConfigurationAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/gl-fiscal-year-configuration", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/gl-fiscal-year-configuration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetGlFiscalYearConfigurationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FiscalPeriods

        [TestMethod]
        public void Default_Route_FiscalPeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFiscalPeriods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-periods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFiscalPeriods_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-periods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalPeriodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalPeriodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalPeriodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-periods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FiscalPeriodsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-periods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalPeriodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FiscalPeriods_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/fiscal-periods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PutFiscalPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FiscalPeriods_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/fiscal-periods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PostFiscalPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalPeriods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/fiscal-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFiscalPeriodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FiscalYears

        [TestMethod]
        public void Route_FiscalYearForToday_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years/today", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years/today", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalYearForTodayAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalYears()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalYearsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFiscalYears_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFiscalYears_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalYearsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalYearsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalYearsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalYearsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FiscalYearsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fiscal-years/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetFiscalYearsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FiscalYears_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/fiscal-years/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("PutFiscalYearsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FiscalYears_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/fiscal-years", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("PostFiscalYearsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FiscalYears_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/fiscal-years/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fiscal-years/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FiscalYears", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFiscalYearsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FixedAssetCategories

        [TestMethod]
        public void Default_Route_FixedAssetCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFixedAssetCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFixedAssetCategories_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-categories", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FixedAssetCategoriesByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-categories/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FixedAssetCategories_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/fixed-asset-categories/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutFixedAssetCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FixedAssetCategories_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/fixed-asset-categories", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostFixedAssetCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/fixed-asset-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFixedAssetCategoriesAsync", routeData.Values["Action"]);
        }
        #endregion


        #region FixedAssetDesignations

        [TestMethod]
        public void Default_Route_FixedAssetDesignations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-designations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetDesignationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFixedAssetDesignations_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-designations", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFixedAssetDesignations_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-designations", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetDesignationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetDesignationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-designations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetDesignationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetDesignationsByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-designations/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FixedAssetDesignationsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-designations/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetDesignationsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FixedAssetDesignations_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/fixed-asset-designations/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("PutFixedAssetDesignationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FixedAssetDesignations_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/fixed-asset-designations", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("PostFixedAssetDesignationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetDesignations_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/fixed-asset-designations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-designations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetDesignations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFixedAssetDesignationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FixedAssetTransferFlags
        [TestMethod]
        public void DefaultRoute_FixedAssetTransferFlags_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-transfer-flags");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-transfer-flags", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssets", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetTransferFlagsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FixedAssetTypes

        [TestMethod]
        public void Default_Route_FixedAssetTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFixedAssetTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFixedAssetTypes_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-types", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FixedAssetTypesByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/fixed-asset-types/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFixedAssetTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FixedAssetTypes_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/fixed-asset-types/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutFixedAssetTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FixedAssetTypes_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/fixed-asset-types", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostFixedAssetTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FixedAssetTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/fixed-asset-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("fixed-asset-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FixedAssetTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFixedAssetTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FloorCharacteristics

        [TestMethod]
        public void Default_Route_FloorCharacteristics()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/floor-characteristics");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetFloorCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFloorCharacteristics_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/floor-characteristics", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFloorCharacteristics_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/floor-characteristics", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetFloorCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FloorCharacteristicsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/floor-characteristics/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetFloorCharacteristicsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FloorCharacteristicsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/floor-characteristics/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FloorCharacteristicsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/floor-characteristics/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetFloorCharacteristicsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FloorCharacteristics_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/floor-characteristics/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PutFloorCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FloorCharacteristics_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/floor-characteristics", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PostFloorCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FloorCharacteristics_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/floor-characteristics/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("floor-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FloorCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFloorCharacteristicsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FreeOnBoardTypes

        [TestMethod]
        public void Default_Route_FreeOnBoardTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/free-on-board-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFreeOnBoardTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFreeOnBoardTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/free-on-board-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetFreeOnBoardTypes_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/free-on-board-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFreeOnBoardTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FreeOnBoardTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/free-on-board-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFreeOnBoardTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FreeOnBoardTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/free-on-board-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FreeOnBoardTypesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/free-on-board-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetFreeOnBoardTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_FreeOnBoardTypes_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/free-on-board-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutFreeOnBoardTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_FreeOnBoardTypes_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/free-on-board-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostFreeOnBoardTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_FreeOnBoardTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/free-on-board-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("free-on-board-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FreeOnBoardTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteFreeOnBoardTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region FrequencyCodes

        [TestMethod]
        public void DefaultRoute_FrequencyCodes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/frequency-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("frequency-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("FrequencyCodes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion FrequencyCodes

        #region GenderIdentities

        [TestMethod]
        public void Default_Route_GenderIdentities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGenderIdentitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetGenderIdentities_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identities", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetGenderIdentities_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identities", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGenderIdentitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GenderIdentitiesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGenderIdentitiesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GenderIdentitiesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identities/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GenderIdentitiesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identities/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGenderIdentitiesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GenderIdentities_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/gender-identities/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutGenderIdentitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GenderIdentities_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/gender-identities", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostGenderIdentitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GenderIdentities_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/gender-identities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGenderIdentitiesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region GenderIdentityTypes

        [TestMethod]
        public void DefaultRoute_GenderIdentityTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gender-identity-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gender-identity-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GenderIdentityTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion FrequencyCodes

        #region GeneralLedgerAccounts

        [TestMethod]
        public void DefaultRoute_GeneralLedgerAccounts_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-accounts/generalLedgerAccountId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-accounts/{generalLedgerAccountId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerAccounts", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GeneralLedgerAccountValidation_GetGlAccountValidation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-account-validation/generalLedgerAccountId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-account-validation/{generalLedgerAccountId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerAccounts", routeData.Values["Controller"]);
            Assert.AreEqual("GetGlAccountValidationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region GeneralLedgerTransaction

        [TestMethod]
        public void Default_Route_GeneralLedgerTransaction()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetGeneralLedgerTransaction_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetGeneralLedgerTransaction_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetGeneralLedgerTransaction_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetGeneralLedgerTransaction_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GeneralLedgerTransactionById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GeneralLedgerTransactionById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransactionById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransactionById_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransactionById_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransaction_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransaction_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Update3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransaction_Put_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/general-ledger-transactions/id", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Update3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransaction_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransaction_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Create3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeneralLedgerTransaction_Post_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/general-ledger-transactions", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("Create3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GeneralLedgerTransaction_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/general-ledger-transactions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("general-ledger-transactions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region GeneralLedgerActivityDetails

        [TestMethod]
        public void DefaultRoute_GeneralLedgerActivityDetails_QueryGeneralLedgerActivityDetails()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/general-ledger-activity-details");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/general-ledger-activity-details", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeneralLedgerActivityDetails", routeData.Values["Controller"]);
            Assert.AreEqual("QueryGeneralLedgerActivityDetailsByPostAsync", routeData.Values["Action"]);
        }
        #endregion

        #region GlAccountBalances

        [TestMethod]
        public void DefaultRoute_GlAccountBalances_QueryGlAccountBalancesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/general-ledger-account-balances", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/general-ledger-account-balances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GlAccountBalances", routeData.Values["Controller"]);
            Assert.AreEqual("QueryGlAccountBalancesAsync", routeData.Values["Action"]);
        }

        #endregion
        #region GeographicAreas

        [TestMethod]
        public void DefaultRoute_GetGeographicAreas()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-areas");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreas_GetGeographicAreas_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-areas", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreas_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-areas", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GeographicAreas_GetGeographicAreaByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-areas/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreaByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GeographicAreas_GetGeographicAreaByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-areas/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreaByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-areas/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreas_PutGeographicAreas_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/geographic-areas/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("PutGeographicAreaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreas_PostGeographicAreas_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/geographic-areas", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("PostGeographicAreaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreas_DeleteGeographicAreas()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/geographic-areas/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreas", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGeographicAreaAsync", routeData.Values["Action"]);
        }

        #endregion GeographicAreas

        #region GeographicAreaTypes

        [TestMethod]
        public void DefaultRoute_GetGeographicAreaTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-area-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreaTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaTypes_GetGeographicAreaTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-area-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreaTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-area-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GeographicAreaTypes_GetGeographicAreaTypeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-area-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreaTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GeographicAreaTypes_GetGeographicAreaTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-area-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGeographicAreaTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/geographic-area-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaTypes_PutGeographicAreaTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/geographic-area-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutGeographicAreaTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaTypes_PostGeographicAreaTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/geographic-area-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostGeographicAreaTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GeographicAreaTypes_DeleteGeographicAreaTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/geographic-area-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("geographic-area-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GeographicAreaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGeographicAreaTypeAsync", routeData.Values["Action"]);
        }

        #endregion GeographicAreaTypes

        #region GownSizes
        [TestMethod]
        public void DefaultRoute_GownSizes_GetGownSizes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/gown-sizes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("gown-sizes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GownSizes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Grades

        [TestMethod]
        public void DefaultRoute_Grades_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grades");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GradeDefinitions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-definitions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_GetV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-definitions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_GetByIdV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-definitions/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Grades_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-definitions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_PostV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/grade-definitions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("PostGradeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_PutV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/grade-definitions/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("PutGradeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Grades_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/grade-definitions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGradeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_QueryAnonymousGradingIdsAsync_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/anonymous-grading-ids", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/anonymous-grading-ids", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAnonymousGradingIdsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryAnonymousGradingIdsAsync_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/anonymous-grading-ids");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/anonymous-grading-ids", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAnonymousGradingIdsAsync", routeData.Values["Action"]);
        }
        #endregion Grades

        #region GradeChangeReasons

        [TestMethod]
        public void DefaultRoute_GetGradeChangeReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-change-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeChangeReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasons_GetGradeChangeReasons_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-change-reasons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeChangeReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasons_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-change-reasons", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GradeChangeReasons_GetGradeChangeReasonByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-change-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasons_GetGradeChangeReasonByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-change-reasons/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasonById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-change-reasons/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasons_PutGradeChangeReasons_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/grade-change-reasons/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutGradeChangeReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasons_PostGradeChangeReasons_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/grade-change-reasons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostGradeChangeReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeChangeReasons_DeleteGradeChangeReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/grade-change-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGradeChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        #endregion GradeChangeReasons

        #region GradeDefinitionsMaximum

        [TestMethod]
        public void Route_Grades_GetGradeDefinitionsMaximumV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-definitions", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeDefinitionsMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_GetGradeDefinitionsMaximumByIdV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-definitions/id", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeDefinitionsMaximumByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_PostGradeDefinitionsMaximumV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/grade-definitions", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("PostGradeDefinitionsMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Grades_PutGradeDefinitionsMaximumV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/grade-definitions/id", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("PutGradeDefinitionsMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Grades_DeleteGradeDefinitionsMaximumById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/grade-definitions/id", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-definitions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Grades", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGradeDefinitionsMaximumByIdAsync", routeData.Values["Action"]);
        }

        #endregion GradeDefinitionsMaximum

        #region GradeModes

        [TestMethod]
        public void DefaultRoute_GetGradeModes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-modes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeModes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeModes_GetGradeModes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-modes", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeModes2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GradeModes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-modes", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GradeModes_GetGradeModeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-modes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeModeById2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GradeModes_GetGradeModeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-modes/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeModeById2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GradeModeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-modes/id", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GradeModes_PutGradeModes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/grade-modes/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("PutGradeModeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeModes_PostGradeModes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/grade-modes", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("PostGradeModeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeModes_DeleteGradeModes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/grade-modes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-modes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeModes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGradeModeByIdAsync", routeData.Values["Action"]);
        }

        #endregion GradeModes

        #region GradeSchemes

        [TestMethod]
        public void Route_GradeSchemes_GetNonEthosGradeSchemeByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-schemes/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetNonEthosGradeSchemeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GradeSchemes_GetGradeSchemes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-schemes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeSchemes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GradeSchemes_GetGradeSchemeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-schemes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeSchemeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeSchemes_GetGradeSchemes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-schemes", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeSchemes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeSchemes_GetGradeSchemeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-schemes/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeSchemeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeSchemes_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/grade-schemes/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("PutGradeSchemeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeSchemes_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/grade-schemes", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("PostGradeSchemeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GradeSchemes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/grade-schemes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-schemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSchemes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteGradeSchemeAsync", routeData.Values["Action"]);
        }


        #endregion GradeSchemes

        #region GradeSubschemes

        [TestMethod]
        public void Route_GradeSubschemes_GetGradeSubschemeByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-subschemes/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-subschemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSubschemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeSubschemeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GradeSubschemes_GetGradeSubschemeByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/grade-subschemes/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("grade-subschemes/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GradeSubschemes", routeData.Values["Controller"]);
            Assert.AreEqual("GetGradeSubschemeByIdAsync", routeData.Values["Action"]);
        }

        #endregion

        #region GraduationApplication
        [TestMethod]
        public void DefaultRoute_GraduationApplication_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/programs/programCode/graduation-application");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/programs/{programCode}/graduation-application", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GraduationApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetGraduationApplicationAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_GraduationApplication_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/programs/programCode/graduation-application");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/programs/{programCode}/graduation-application", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GraduationApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostGraduationApplicationAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_GraduationApplications_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/graduation-applications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/graduation-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GraduationApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetGraduationApplicationsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_GraduationApplication_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/programs/programCode/graduation-application");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/programs/{programCode}/graduation-application", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GraduationApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutGraduationApplicationAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_GraduationApplicationEligibility_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/graduation-application-eligibility");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/graduation-application-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GraduationApplications", routeData.Values["Controller"]);
            Assert.AreEqual("QueryGraduationApplicationEligibilityAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Health

        [TestMethod]
        public void DefaultRoute_Health_GetApplicationHealth()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/health");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("health", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Health", routeData.Values["Controller"]);
            Assert.AreEqual("GetApplicationHealthCheckAsync", routeData.Values["Action"]);
        }

        #endregion

        #region HealthCheck

        [TestMethod]
        public void DefaultRoute_HealthCheck_GetHealthCheck()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/healthcheck");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("healthcheck", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HealthCheck", routeData.Values["Controller"]);
            Assert.AreEqual("GetHealthCheckAsync", routeData.Values["Action"]);
        }

        #endregion

        #region HealthConditions

        [TestMethod]
        public void DefaultRoute_HealthConditions_GetHealthConditions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/health-conditions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("health-conditions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HealthConditions", routeData.Values["Controller"]);
            Assert.AreEqual("GetHealthConditions", routeData.Values["Action"]);
        }

        #endregion HealthConditions

        #region HoldRequestTypes

        [TestMethod]
        public void DefaultRoute_HoldRequestTypes_GetHoldRequestTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/hold-request-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("hold-request-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HoldRequestTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetHoldRequestTypesAsync", routeData.Values["Action"]);
        }

        #endregion HoldRequestTypes

        #region HumanResourceDemographics

        [TestMethod]
        public void DefaultRoute_HumanResourceDemographics_GET_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/human-resources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("human-resources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResources", routeData.Values["Controller"]);
            Assert.AreEqual("GetHumanResourceDemographics2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void HumanResourceDemographics_GET_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/human-resources", "application/vnd.ellucian-human-resource-demographics.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("human-resources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResources", routeData.Values["Controller"]);
            Assert.AreEqual("GetHumanResourceDemographicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_HumanResourceDemographics_GetSpecificHumanResourceDemographicsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/human-resources/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("human-resources/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResources", routeData.Values["Controller"]);
            Assert.AreEqual("GetSpecificHumanResourceDemographicsAsync", routeData.Values["Action"]);
        }

        #endregion HumanResourceDemographics

        #region HousingAssignments

        [TestMethod]
        public void Route_HousingAssignments_PostHousingAssignment_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/housing-assignments", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PostHousingAssignmentAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_HousingAssignments_PutHousingAssignment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/housing-assignments", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PutHousingAssignmentAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_HousingAssignments_GetHousingAssignment_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignments_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignments_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignments_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignments2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_HousingAssignments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignments2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignmentByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignmentByGuid_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments/guid", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignmentByGuid_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetById_HousingAssignments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingAssignmentByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/housing-assignments/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("PutHousingAssignmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Put_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/housing-assignments/guid", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("PutHousingAssignmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Put_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/housing-assignments/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("PutHousingAssignment2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/housing-assignments", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("PostHousingAssignmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Post_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/housing-assignments", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("PostHousingAssignmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Post_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/housing-assignments", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("PostHousingAssignment2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingAssignments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/housing-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingAssignment", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHousingAssignmentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingAssignments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-assignments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        #endregion HousingAssignments

        #region HousingRequests

        [TestMethod]
        public void Default_Route_GetHousingRequest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-requests", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingRequest_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-requests", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetHousingRequestByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-requests/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingRequestByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingRequestByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-requests/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingRequestByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingRequests_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-requests", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_HousingRequestsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-requests/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        #endregion

        #region HousingResidentTypes

        [TestMethod]
        public void Default_Route_HousingResidentTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-resident-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingResidentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingResidentTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-resident-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetHousingResidentTypes_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-resident-types", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingResidentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_HousingResidentTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-resident-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingResidentTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_HousingResidentTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-resident-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingResidentTypesByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/housing-resident-types/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetHousingResidentTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_HousingResidentTypes_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/housing-resident-types/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutHousingResidentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_HousingResidentTypes_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/housing-resident-types", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostHousingResidentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_HousingResidentTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/housing-resident-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("housing-resident-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HousingResidentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHousingResidentTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region IdentityDocumentTypes

        [TestMethod]
        public void DefaultRoute_IdentityDocumentTypes_GetIdentityDocumentTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/identity-document-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetIdentityDocumentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_IdentityDocumentTypes_GetIdentityDocumentTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/identity-document-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetIdentityDocumentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_IdentityDocumentTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/identity-document-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_IdentityDocumentTypes_GetIdentityDocumentTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/identity-document-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetIdentityDocumentTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_IdentityDocumentTypes_GetIdentityDocumentTypesById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/identity-document-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetIdentityDocumentTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_IdentityDocumentTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/identity-document-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_IdentityDocumentTypes_PutIdentityDocumentTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/identity-document-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutIdentityDocumentTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_IdentityDocumentTypes_PostIdentityDocumentTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/identity-document-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostIdentityDocumentTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_IdentityDocumentTypes_DeleteIdentityDocumentTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/identity-document-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("identity-document-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IdentityDocumentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteIdentityDocumentTypeAsync", routeData.Values["Action"]);
        }
        #endregion IdentityDocumentTypes

        #region ImportantNumbers

        [TestMethod]
        public void DefaultRoute_ImportantNumbers_GetImportantNumberCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/important-number-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("important-number-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ImportantNumbers", routeData.Values["Controller"]);
            Assert.AreEqual("GetImportantNumberCategories", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_ImportantNumbers_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/important-numbers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("important-numbers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ImportantNumbers", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion ImportantNumbers

        #region Initiator
        [TestMethod]
        public void DefaultRoute_Initiator_GetInitiatorByKeywordAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/initiator/queryKeyword", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("initiator/{queryKeyword}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Initiator", routeData.Values["Controller"]);
            Assert.AreEqual("GetInitiatorByKeywordAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Initiator_QueryInitiatorByKeywordAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/initiator", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/initiator", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Initiator", routeData.Values["Controller"]);
            Assert.AreEqual("QueryInitiatorByKeywordAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Institutions

        [TestMethod]
        public void DefaultRoute_Institutions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institutions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Institutions", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion Institutions

        #region InstitutionJobs

        [TestMethod]
        public void DefaultRoute_GetInstitutionJobs()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobs3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_GetInstitutionJobs_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_GetInstitutionJobs_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobs2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_GetInstitutionJobs_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobs3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstitutionJobs_GetInstitutionJobById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_GetInstitutionJobByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_GetInstitutionJobByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_GetInstitutionJobByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs/id", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-jobs/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        /*
        [TestMethod]
        public void Route_InstitutionJobs_PutInstitutionJob_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/institution-jobs/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstitutionJobsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_PostInstitutionJob_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/institution-jobs", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstitutionJobsAsync", routeData.Values["Action"]);
        }
        */

        [TestMethod]
        public void Route_InstitutionJobs_DeleteInstitutionJob()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/institution-jobs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstitutionJobsAsync", routeData.Values["Action"]);
        }
        /*
        [TestMethod]
        public void Route_InstitutionJobs_PutInstitutionJob_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/institution-jobs/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstitutionJobs2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobs_PostInstitutionJob_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/institution-jobs", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-jobs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobs", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstitutionJobs2Async", routeData.Values["Action"]);
        }
        */
        #endregion InstitutionJobs

        #region InstitutionJobSupervisors

        [TestMethod]
        public void DefaultRoute_GetInstitutionJobSupervisors()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-job-supervisors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobSupervisors2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobSupervisors_GetInstitutionJobSupervisors()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-job-supervisors", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobSupervisorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobSupervisors_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-job-supervisors", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstitutionJobSupervisors_GetInstitutionJobSupervisorById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-job-supervisors/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobSupervisorsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobSupervisors_GetInstitutionJobSupervisorByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-job-supervisors/id", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionJobSupervisorsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobSupervisorById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-job-supervisors/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobSupervisors_PutInstitutionJobSupervisor_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/institution-job-supervisors/id", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstitutionJobSupervisorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionJobSupervisors_PostInstitutionJobSupervisor_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/institution-job-supervisors", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstitutionJobSupervisorsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_InstitutionJobSupervisors_DeleteInstitutionJobSupervisor()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/institution-job-supervisors/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-job-supervisors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionJobSupervisors", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstitutionJobSupervisorsAsync", routeData.Values["Action"]);
        }

        #endregion InstitutionJobSupervisors

        #region InstitutionPositions

        [TestMethod]
        public void DefaultRoute_GetInstitutionPositions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionPositions3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionPositions_GetAllInstitutionPositionsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-positions", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstitutionPositions_GetInstitutionPositionByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-positions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionPositionsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionPositions_GetInstitutionPositionByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-positions/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstitutionPositionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionPositions_PutInstitutionPositionAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/institution-positions/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateInstitutionPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionPositions_PostInstitutionPositionAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/institution-positions", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("CreateInstitutionPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstitutionPositions_DeleteInstitutionPositionAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/institution-positions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-positions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionPositions", routeData.Values["Controller"]);
            Assert.AreEqual("DefaultDeleteInstitutionPositions", routeData.Values["Action"]);
        }
        #endregion

        #region InstitutionTypes

        [TestMethod]
        public void DefaultRoute_InstitutionTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/institution-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("institution-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstitutionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion InstitutionTypes

        #region InstructorCategories

        [TestMethod]
        public void Default_Route_InstructorCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorCategories_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorCategories_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorCategoriesByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorCategoriesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-categories/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_InstructorCategories_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructor-categories/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorCategories_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructor-categories/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorCategories_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructor-categories", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorCategories_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructor-categories", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructor-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructorCategoriesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Instructors

        [TestMethod]
        public void Default_Route_Instructors()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructors2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructors_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructors_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructors_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructors2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorsByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructors/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorsByGuid2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Instructors_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructors/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Instructors_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructors/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Instructors_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructors", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Instructors_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructors", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Instructors_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructors/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Instructors", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructorsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region InstructorStaffTypes

        [TestMethod]
        public void Default_Route_InstructorStaffTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorStaffTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorStaffTypes_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorStaffTypes_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorStaffTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorStaffTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorStaffTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorStaffTypesByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorStaffTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorStaffTypesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-staff-types/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorStaffTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorStaffTypes_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructor-staff-types/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorStaffTypes_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructor-staff-types/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorStaffTypes_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructor-staff-types", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorStaffTypes_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructor-staff-types", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorStaffTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorStaffTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructor-staff-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-staff-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorStaffTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructorStaffTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region InstructorTenureTypes

        [TestMethod]
        public void Default_Route_InstructorTenureTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-tenure-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorTenureTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorTenureTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-tenure-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructorTenureTypes_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-tenure-types", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorTenureTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorTenureTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-tenure-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorTenureTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorTenureTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-tenure-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorTenureTypesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructor-tenure-types/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructorTenureTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_InstructorTenureTypes_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructor-tenure-types/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructorTenureTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructorTenureTypes_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructor-tenure-types", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructorTenureTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructorTenureTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructor-tenure-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructor-tenure-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructorTenureTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructorTenureTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region InstructionalDeliveryMethods

        [TestMethod]
        public void Default_Route_InstructionalDeliveryMethods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-delivery-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalDeliveryMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructionalDeliveryMethods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-delivery-methods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructionalDeliveryMethods_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-delivery-methods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalDeliveryMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructionalDeliveryMethodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-delivery-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalDeliveryMethodByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructionalDeliveryMethodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-delivery-methods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalDeliveryMethodsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-delivery-methods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalDeliveryMethodByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_InstructionalDeliveryMethods_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructional-delivery-methods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructionalDeliveryMethodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalDeliveryMethods_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructional-delivery-methods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructionalDeliveryMethodAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_InstructionalDeliveryMethods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-delivery-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-delivery-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalDeliveryMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructionalDeliveryMethodAsync", routeData.Values["Action"]);
        }

        #endregion

        #region InstructionalEvents

        [TestMethod]
        public void InstructionalEvents_GetByIdV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void InstructionalEvents_GetByIdV8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalEvent3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void InstructionalEvents_GetByIdV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalEvent4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultInstructionalEvents_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalEvent4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_PutV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructional-events/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_PutV8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructional-events/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructionalEvent3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_PutV11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructional-events/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructionalEvent4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalEvents_GetInstructionalEvents_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalEvents3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalEvents_GetInstructionalEvents_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalEvents4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_GetInstructionalEventById_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-events/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_DeleteInstructionalMethodsAsyncV4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-events/{id}", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_PostV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructional-events", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_PostV8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructional-events", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructionalEvent3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_Post11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructional-events", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructionalEvent4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_DeleteV4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-events/id", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_DeleteV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-events/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalEvents_DeleteV8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-events/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-events/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalEvents", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmAsync", routeData.Values["Action"]);
        }

        #endregion InstructionalEvents

        #region InstructionalMethods

        [TestMethod]
        public void DefaultRoute_InstructionalMethods_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalMethods2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_GetAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        //[TestMethod]
        //public void Route_InstructionalMethods_GetInstructionalMethods_1()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods", "application/vnd.hedtech.integration.v1+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetInstructionalMethodsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_InstructionalMethods_GetInstructionalMethods_3()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods", "application/vnd.hedtech.integration.v3+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetInstructionalMethodsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_InstructionalMethods_GetInstructionalMethods_4()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods", "application/vnd.hedtech.integration.v4+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetInstructionalMethods2Async", routeData.Values["Action"]);
        //}

        [TestMethod]
        public void Route_InstructionalMethods_GetInstructionalMethods_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalMethods2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_GetInstructionalMethods_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalMethods_GetInstructionalMethodById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalMethodById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_GetInstructionalMethodByIdV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalMethodById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_GetInstructionalMethodById_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalMethods_GetInstructionalMethodById_4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-methods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalMethodById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_PutInstructionalMethodsAsyncV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructional-methods/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalMethods_PostInstructionalMethodsAsyncV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructional-methods", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstructionalMethods_DeleteInstructionalMethodsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-methods/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-methods/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructionalMethodsAsync", routeData.Values["Action"]);
        }

        #endregion InstructionalMethods

        #region InstructionalPlatforms

        [TestMethod]
        public void DefaultRoute_GetInstructionalPlatforms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-platforms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalPlatformsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructionalPlatforms_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-platforms", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructionalPlatforms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-platforms", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalPlatformsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_GetInstructionalPlatformsById_4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-platforms/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalPlatformsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructionalPlatformsById_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-platforms/id", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstructionalPlatformsById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/instructional-platforms/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstructionalPlatformsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PostInstructionalPlatforms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instructional-platforms", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstructionalPlatformsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstructionalPlatforms_PutInstructionalPlatforms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/instructional-platforms/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("PutInstructionalPlatformsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DeleteInstructionalPlatforms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/instructional-platforms/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instructional-platforms/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstructionalPlatforms", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInstructionalPlatformsAsync", routeData.Values["Action"]);
        }

        #endregion InstructionalPlatforms

        #region Interests

        [TestMethod]
        public void DefaultRoute_Interests_GetHedmInterests()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmInterestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_GetInterests_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetInterests", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_GetHedmInterests_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmInterestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Interests_GetHedmInterestById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmInterestByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_GetHedmInterestById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmInterestByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InterestById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interests/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_PutHedmInterest_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/interests/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmInterestAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_PostHedmInterest_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/interests", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmInterestAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Interests_DeleteHedmInterest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/interests/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interests/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmInterestAsync", routeData.Values["Action"]);
        }

        #endregion Interests

        #region InterestAreas

        [TestMethod]
        public void DefaultRoute_InterestAreas_GetInterestAreas()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interest-areas");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetInterestAreasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InterestAreas_GetInterestAreas_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interest-areas", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetInterestAreasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InterestAreas_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interest-areas", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InterestAreas_GetInterestAreasById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interest-areas/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetInterestAreasByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InterestAreas_GetInterestAreasById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interest-areas/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("GetInterestAreasByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InterestAreaById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/interest-areas/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_PutInterestAreas_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/interest-areas/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("PutInterestAreasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Interests_PostInterestAreas_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/interest-areas", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("PostInterestAreasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Interests_DeleteInterestAreas()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/interest-areas/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("interest-areas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Interests", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteInterestAreasAsync", routeData.Values["Action"]);
        }
        #endregion InterestAreas

        #region InstantEnrollment
        [TestMethod]
        public void Route_Courses_PostInstantEnrollmentCourseSearchAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/courses/search", "application/vnd.ellucian-instant-enrollment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("courses/search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Courses", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstantEnrollmentCourseSearchAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Courses_PostInstantEnrollmentCourseSearch2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instant-enrollment/sections/search", "application/vnd.ellucian-instant-enrollment.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instant-enrollment/sections/search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("PostInstantEnrollmentCourseSearch2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_InstantEnrollment_PostZeroCostRegistrationForClassesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instant-enrollment/zero-cost-registration");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instant-enrollment/zero-cost-registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("PostZeroCostRegistrationForClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstantEnrollment_PostZeroCostRegistrationForClassesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/instant-enrollment/zero-cost-registration", "application/vnd.ellucian-instant-enrollment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("instant-enrollment/zero-cost-registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("PostZeroCostRegistrationForClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetInstantEnrollmentPaymentAcknowledgementParagraphTextAsync_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/instant-enrollment/payment-acknowledgement-paragraph-text");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/instant-enrollment/payment-acknowledgement-paragraph-text", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentPaymentAcknowledgementParagraphTextAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstantEnrollmentPaymentAcknowledgementParagraphTextAsync_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/instant-enrollment/payment-acknowledgement-paragraph-text", "application/vnd.ellucian-instant-enrollment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/instant-enrollment/payment-acknowledgement-paragraph-text", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentPaymentAcknowledgementParagraphTextAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetInstantEnrollmentCashReceiptAcknowledgementAsync_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/instant-enrollment/cash-receipt-acknowledgement");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/instant-enrollment/cash-receipt-acknowledgement", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentCashReceiptAcknowledgementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstantEnrollmentCashReceiptAcknowledgementAsync_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/instant-enrollment/cash-receipt-acknowledgement", "application/vnd.ellucian-instant-enrollment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/instant-enrollment/cash-receipt-acknowledgement", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentCashReceiptAcknowledgementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetInstantEnrollmentStudentPrograms2Async_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/programs?currentOnly=currentOnly", "application/vnd.ellucian-instant-enrollment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("GetInstantEnrollmentStudentPrograms2Async", routeData.Values["Action"]);
        }

        #endregion

        #region IpedsInstitutions

        [TestMethod]
        public void DefaultRoute_IpedsInstitutions_QueryByPostIpedsInstitutionsByOpeIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/ipeds-institutions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/ipeds-institutions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("IpedsInstitutions", routeData.Values["Controller"]);
            Assert.AreEqual("QueryByPostIpedsInstitutionsByOpeIdAsync", routeData.Values["Action"]);
        }

        #endregion IpedsInstitutions

        #region JobApplications

        [TestMethod]
        public void Default_Route_JobApplications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-applications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetJobApplications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-applications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetJobApplications_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-applications", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-applications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-applications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobApplicationsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-applications/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_JobApplications_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/job-applications/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PutJobApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobApplications_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/job-applications", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("PostJobApplicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/job-applications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-applications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplications", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteJobApplicationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region JobApplicationSources

        [TestMethod]
        public void Default_Route_JobApplicationSources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetJobApplicationSources_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-sources", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetJobApplicationSources_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-sources", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationSourcesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationSourcesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationSourcesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-sources/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobApplicationSourcesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-sources/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationSourcesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_JobApplicationSources_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/job-application-sources/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("PutJobApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobApplicationSources_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/job-application-sources", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("PostJobApplicationSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationSources_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/job-application-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationSources", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteJobApplicationSourcesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region JobApplicationStatuses

        [TestMethod]
        public void Default_Route_JobApplicationStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetJobApplicationStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetJobApplicationStatuses_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-statuses", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-statuses/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobApplicationStatusesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-application-statuses/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobApplicationStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_JobApplicationStatuses_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/job-application-statuses/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutJobApplicationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobApplicationStatuses_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/job-application-statuses", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostJobApplicationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_JobApplicationStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/job-application-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-application-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobApplicationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteJobApplicationStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region JobChangeReasons

        [TestMethod]
        public void DefaultRoute_GetJobChangeReason()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-change-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobChangeReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReason_GetJobChangeReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-change-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobChangeReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReason_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-change-reasons", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_JobChangeReason_GetJobChangeReasonById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-change-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReason_GetJobChangeReasonByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-change-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetJobChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReasonById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/job-change-reasons/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReason_PutJobChangeReason()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/job-change-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutJobChangeReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReason_PostJobChangeReason()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/job-change-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostJobChangeReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_JobChangeReason_DeleteJobChangeReason()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/job-change-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("job-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JobChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteJobChangeReasonAsync", routeData.Values["Action"]);
        }

        #endregion JobChangeReasons

        #region JournalEntries

        [TestMethod]
        public void DefaultRoute_JournalEntries_GetJournalEntry()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/journal-entries/journalEntryId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("journal-entries/{journalEntryId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("JournalEntries", routeData.Values["Controller"]);
            Assert.AreEqual("GetJournalEntryAsync", routeData.Values["Action"]);
        }

        #endregion JournalEntries

        #region Languages

        [TestMethod]
        public void Route_Languages_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/languages", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Languages_GetLanguagesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/languages");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetLanguages()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/languages");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Languages_GetLanguagesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/languages", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Languages_GetLanguagesByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/languages/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguagesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Languages_GetLanguagesByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/languages/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguagesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Languages_PutLanguagesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/languages/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("PutLanguagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Languages_PostLanguagesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/languages", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("PostLanguagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Languages_DeleteLanguagesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/languages/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("languages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteLanguagesAsync", routeData.Values["Action"]);
        }

        #endregion Languages

        #region LanguageIsoCodes

        [TestMethod]
        public void Default_Route_LanguageIsoCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/language-iso-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguageIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLanguageIsoCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/language-iso-codes", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLanguageIsoCodes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/language-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguageIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LanguageIsoCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/language-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguageIsoCodesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LanguageIsoCodesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/language-iso-codes/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LanguageIsoCodesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/language-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("GetLanguageIsoCodesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_LanguageIsoCodes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/language-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("PutLanguageIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LanguageIsoCodes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/language-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("PostLanguageIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LanguageIsoCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/language-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("language-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Languages", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteLanguageIsoCodesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region LeavePlans

        [TestMethod]
        public void Default_Route_LeavePlans()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-plans");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLeavePlans_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-plans", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLeavePlans_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-plans", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeavePlansByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-plans/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeavePlansByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeavePlansByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-plans/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LeavePlansByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-plans/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeavePlansByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_LeavePlans_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/leave-plans/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LeavePlans_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/leave-plans", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostLeavePlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeavePlans_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/leave-plans/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeavePlans", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteLeavePlansAsync", routeData.Values["Action"]);
        }
        #endregion

        #region LeaveCategories

        [TestMethod]
        public void Default_Route_LeaveCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLeaveCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLeaveCategories_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeaveCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeaveCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LeaveCategoriesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_LeaveCategories_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/leave-categories/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutLeaveCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LeaveCategories_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/leave-categories", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostLeaveCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeaveCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/leave-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteLeaveCategoriesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region LeaveRequest

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-requests/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-requests/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveRequestInfoByLeaveRequestIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/leave-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("CreateLeaveRequestAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/leave-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateLeaveRequestAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_Post_LeaveRequestStatus()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/leave-request-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-request-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("CreateLeaveRequestStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_GetSupervisorsByPositionId()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/position-supervisors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-supervisors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("GetSupervisorsByPositionIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_EmployeeLeaveRequest_GetSuperviseesByPrimaryPositionForSupervisor()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-approval-supervisees");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-approval-supervisees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("GetSuperviseesByPrimaryPositionForSupervisorAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_EmployeeLeaveRequest_GetLeaveRequestsForTimeEntryAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-requests-timeentry");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-requests-timeentry", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EmployeeLeaveRequest", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveRequestsForTimeEntryAsync", routeData.Values["Action"]);
        }

        #endregion

        #region LeaveTypes

        [TestMethod]
        public void Default_Route_LeaveTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLeaveTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLeaveTypes_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeaveTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeaveTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LeaveTypesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/leave-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetLeaveTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_LeaveTypes_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/leave-types/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutLeaveTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LeaveTypes_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/leave-types", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostLeaveTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LeaveTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/leave-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("leave-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LeaveTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteLeaveTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region LedgerActivities

        [TestMethod]
        public void Default_Route_LedgerActivities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ledger-activities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("GetLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLedgerActivities_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ledger-activities", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetLedgerActivities_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ledger-activities", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("GetLedgerActivitiesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetLedgerActivities_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ledger-activities", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("GetLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LedgerActivitiesByGuid_UnSupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ledger-activities/guid", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_LedgerActivitiesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ledger-activities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("GetLedgerActivitiesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LedgerActivities_PostLedgerActivitiesAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/ledger-activities", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("PostLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LedgerActivities_PostLedgerActivitiesAsync_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/ledger-activities", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("PostLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LedgerActivities_PutLedgerActivitiesAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/ledger-activities/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("PutLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LedgerActivities_PutLedgerActivitiesAsync_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/ledger-activities/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("PutLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_LedgerActivities_DeleteLedgerActivitiesAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/ledger-activities/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ledger-activities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LedgerActivities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteLedgerActivitiesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region LoanRequests

        [TestMethod]
        public void DefaultRoute_LoanRequests_CreateLoanRequestAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/loan-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("loan-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LoanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("CreateLoanRequestAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_LoanRequests_GetLoanRequestAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/loan-requests/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("loan-requests/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LoanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetLoanRequestAsync", routeData.Values["Action"]);
        }

        #endregion LoanRequests

        #region LocalCourseClassifications

        [TestMethod]
        public void DefaultRoute_LocalCourseClassifications_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/local-course-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("local-course-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("LocalCourseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion LocalCourseClassifications

        #region Locations

        [TestMethod]
        public void DefaultRoute_Locations_GetLocations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/locations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("locations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Locations", routeData.Values["Controller"]);
            Assert.AreEqual("GetLocations", routeData.Values["Action"]);
        }

        #endregion Locations

        #region Majors

        [TestMethod]
        public void DefaultRoute_Majors_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/majors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("majors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Majors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Majors

        #region MappingSettings

        [TestMethod]
        public void Default_Route_MappingSettings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetMappingSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMappingSettings_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMappingSettingsOptions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings", "application/vnd.hedtech.integration.mapping-settings-options.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMappingSettings_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetMappingSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMappingSettingsOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings", "application/vnd.hedtech.integration.mapping-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetMappingSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MappingSettingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetMappingSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MappingSettingsByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MappingSettingsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetMappingSettingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MappingSettingsOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/mapping-settings/guid", "application/vnd.hedtech.integration.mapping-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("GetMappingSettingsOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MappingSettings_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/mapping-settings/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutMappingSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MappingSettingsOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/mapping-settings/guid", "application/vnd.hedtech.integration.mapping-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PutMappingSettingsOptionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MappingSettings_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/mapping-settings", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostMappingSettingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MappingSettingsOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/mapping-settings", "application/vnd.hedtech.integration.mapping-settings-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("PostMappingSettingsOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MappingSettings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/mapping-settings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("mapping-settings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MappingSettings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteMappingSettingsAsync", routeData.Values["Action"]);
        }

        #endregion MappingSettings

        #region MaritalStatuses

        [TestMethod]
        public void Route_MaritalStatuses_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_GetMaritalStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetMaritalStatuses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_GetMaritalStatuses_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetMaritalStatuses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_MaritalStatuses_GetMaritalStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetMaritalStatuses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_GetMaritalStatusByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetMaritalStatusById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_GetMaritalStatusByGuid_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses/guid", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetMaritalStatusById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_MaritalStatuses_GetMaritalStatusByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetMaritalStatusById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatusesByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/marital-statuses/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_PutMartitalStatuses_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/marital-statuses/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutMaritalStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_PutMartitalStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/marital-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutMaritalStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_PostMaritalStatuses_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/marital-statuses", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostMaritalStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MaritalStatuses_PostMaritalStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/marital-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostMaritalStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_MaritalStatuses_DeleteMaritalStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/marital-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("marital-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MaritalStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteMaritalStatusesAsync", routeData.Values["Action"]);
        }
        #endregion MaritalStatuses

        #region MealPlanAssignments

        [TestMethod]
        public void Route_MealPlanAssignments_PostMealPlanAssignment_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-plan-assignments", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PostMealPlanAssignment", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MealPlanAssignments_PutMealPlanAssignment_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-plan-assignments", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PutMealPlanAssignment", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MealPlanAssignments_GetMealPlanAssignment_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);

            Assert.AreEqual("meal-plan-assignments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanAssignment", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentMealPlans()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentMealPlans2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentMealPlans_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentMealPlans_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentMealPlans_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentMealPlansByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentMealPlansByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentMealPlansByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentMealPlansByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentMealPlansByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentMealPlansByGuid_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-assignments/guid", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentMealPlansByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentMealPlans_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-plan-assignments/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentMealPlans_Put_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-plan-assignments/guid", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentMealPlans_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-plan-assignments", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentMealPlans_Post_V1010()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-plan-assignments", "application/vnd.hedtech.integration.v10.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentMealPlans_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/meal-plan-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentMealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentMealPlansAsync", routeData.Values["Action"]);
        }
        #endregion MealPlanAssignments

        #region MealPlanRates

        [TestMethod]
        public void Default_Route_MealPlanRates()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-rates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealPlanRates_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-rates", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealPlanRates_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-rates", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlanRatesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-rates/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRatesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlanRatesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-rates/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealPlanRatesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-rates/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRatesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MealPlanRates_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-plan-rates/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("PutMealPlanRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealPlanRates_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-plan-rates", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("PostMealPlanRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlanRates_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/meal-plan-rates/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRates", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteMealPlanRatesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region MealPlans

        [TestMethod]
        public void Default_Route_MealPlans()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plans");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealPlans_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plans", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealPlans_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plans", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlansByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plans/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlansByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlansByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plans/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealPlansByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plans/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlansByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MealPlans_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-plans/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PutMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealPlans_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-plans", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostMealPlansAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlans_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/meal-plans/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plans/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlans", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteMealPlansAsync", routeData.Values["Action"]);
        }
        #endregion

        #region MealPlanRequests

        [TestMethod]
        public void Default_Route_MealPlanRequests()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealPlanRequests_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-requests", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealPlanRequests_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-requests", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlanRequestsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-requests/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRequestsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlanRequestsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-requests/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealPlanRequestsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-plan-requests/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealPlanRequestsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MealPlanRequests_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-plan-requests/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PutMealPlanRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealPlanRequests_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-plan-requests", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PostMealPlanRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealPlanRequests_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/meal-plan-requests/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-plan-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealPlanRequests", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteMealPlanRequestsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region MealTypes

        [TestMethod]
        public void Default_Route_MealTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetMealTypes_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealTypesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/meal-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetMealTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_MealTypes_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/meal-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutMealTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_MealTypes_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/meal-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostMealTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_MealTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/meal-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("meal-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("MealTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteMealTypesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Minors

        [TestMethod]
        public void DefaultRoute_Minors_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/minors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("minors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Minors", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Minors

        #region Next Approvers

        [TestMethod]
        public void DefaultRoute_NextApproversValidation_GetNextApproverValidation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/next-approvers/nextApproverId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("next-approvers/{nextApproverId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Approvers", routeData.Values["Controller"]);
            Assert.AreEqual("GetNextApproverValidationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_NextApprovers_GetNextApproverByKeywordAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/next-approvers-search/queryKeyword", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("next-approvers-search/{queryKeyword}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Approvers", routeData.Values["Controller"]);
            Assert.AreEqual("GetNextApproverByKeywordAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_NextApprovers_QueryNextApproverByKeywordAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/next-approvers-search", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/next-approvers-search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Approvers", routeData.Values["Controller"]);
            Assert.AreEqual("QueryNextApproverByKeywordAsync", routeData.Values["Action"]);
        }

        #endregion

        #region NonAcademicAttendance

        [TestMethod]
        public void DefaultRoute_NonAcademicAttendance_NonAcademicAttendanceEventTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonacademic-attendance-event-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("nonacademic-attendance-event-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("NonAcademicAttendanceEventTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_NonAcademicAttendance_NonAcademicAttendanceRequirements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/nonacademic-attendance-requirements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/nonacademic-attendance-requirements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("NonAcademicAttendanceRequirements", routeData.Values["Controller"]);
            Assert.AreEqual("GetNonAcademicAttendanceRequirementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_NonAcademicAttendance_QueryByPostNonAcademicEvents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/nonacademic-events");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/nonacademic-events", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("NonAcademicEvents", routeData.Values["Controller"]);
            Assert.AreEqual("QueryNonAcademicEventsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region NoncourseStatuses

        [TestMethod]
        public void DefaultRoute_NoncourseStatuses_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/noncourse-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("noncourse-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("NoncourseStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion NoncourseStatuses

        #region NonpersonRelationships

        //[TestMethod]
        //public void Default_Route_NonpersonRelationships()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonperson-relationships");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetNonpersonRelationshipsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_GetNonpersonRelationships_UnsupportedVersion()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonperson-relationships", "application/vnd.hedtech.integration.v1+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("Index", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_GetNonpersonRelationships_V13()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonperson-relationships", "application/vnd.hedtech.integration.v13+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetNonpersonRelationshipsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Default_Route_NonpersonRelationshipsByGuid()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonperson-relationships/guid");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetNonpersonRelationshipsByGuidAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Default_Route_NonpersonRelationshipsByGuid_UnsupportedVersion()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonperson-relationships/guid", "application/vnd.hedtech.integration.v2+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("guid", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_NonpersonRelationshipsByGuid_V13()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/nonperson-relationships/guid", "application/vnd.hedtech.integration.v13+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetNonpersonRelationshipsByGuidAsync", routeData.Values["Action"]);
        //}


        //[TestMethod]
        //public void Route_NonpersonRelationships_Put_V13()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/nonperson-relationships/guid", "application/vnd.hedtech.integration.v13+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("PutNonpersonRelationshipsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_NonpersonRelationships_Post_V13()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/nonperson-relationships", "application/vnd.hedtech.integration.v13+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("PostNonpersonRelationshipsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Default_Route_NonpersonRelationships_Delete()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/nonperson-relationships/guid");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("nonperson-relationships/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("NonpersonRelationships", routeData.Values["Controller"]);
        //    Assert.AreEqual("DeleteNonpersonRelationshipsAsync", routeData.Values["Action"]);
        //}
        #endregion

        #region OfficeCodes

        [TestMethod]
        public void DefaultRoute_OfficeCodes_GetOfficeCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/office-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("office-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OfficeCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetOfficeCodes", routeData.Values["Action"]);
        }

        #endregion OfficeCodes

        #region OrganizationalPersonPositions

        [TestMethod]
        public void DefaultRoute_GetOrganizationalPersonPosition_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizational-person-positions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-person-positions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPersonPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationalPersonPositionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetOrganizationalPersonPosition_GET_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizational-person-positions/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-person-positions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPersonPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationalPersonPositionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_OrganizationalPersonPositions_QueryOrganizationalPersonPositionsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/organizational-person-positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/organizational-person-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPersonPositions", routeData.Values["Controller"]);
            Assert.AreEqual("QueryOrganizationalPersonPositionAsync", routeData.Values["Action"]);
        }

        #endregion

        #region OrganizationalRelationships

        [TestMethod]
        public void DefaultRoute_CreateOrganizationalRelationship_POST()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/organizational-relationships");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("CreateOrganizationalRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void CreateOrganizationalRelationship_POST_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/organizational-relationships", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("CreateOrganizationalRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UpdateOrganizationalRelationship_POST()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/organizational-relationships/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateOrganizationalRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void UpdateOrganizationalRelationship_POST_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/organizational-relationships/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateOrganizationalRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_DeleteOrganizationalRelationship_DELETE()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/organizational-relationships/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteOrganizationalRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DeleteOrganizationalRelationship_DELETE_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/organizational-relationships/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteOrganizationalRelationshipAsync", routeData.Values["Action"]);
        }

        #endregion

        #region OrganizationalPositions

        [TestMethod]
        public void DefaultRoute_GetOrganizationalPosition_GET()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizational-positions/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-positions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPosition", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationalPositionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetOrganizationalPosition_GET_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizational-positions/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizational-positions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPosition", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationalPositionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryOrganizationalPositions_PUT()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/organizational-positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/organizational-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPosition", routeData.Values["Controller"]);
            Assert.AreEqual("QueryOrganizationalPositionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void QueryOrganizationalPositions_PUT_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/organizational-positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/organizational-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OrganizationalPosition", routeData.Values["Controller"]);
            Assert.AreEqual("QueryOrganizationalPositionsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Organizations

        [TestMethod]
        public void DefaultRoute_Organizations_GetOrganizations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizations2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Organizations_GetOrganizationByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Organizations_GetOrganizations_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Organizations_GetOrganizations_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizations2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Organizations_GetOrganizationsByType_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations?type=type", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Organizations_GetOrganizationsByGuidAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Organizations_GetOrganizationsByGuidAsync_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/organizations/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetOrganizationByGuid2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Organizations_PutOrganizations_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/organizations/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("PutOrganizationAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Organizations_PostOrganizations_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/organizations", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("PostOrganizationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Organizations_DeleteOrganizationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/organizations/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("organizations/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Organizations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteOrganizationByGuidAsync", routeData.Values["Action"]);
        }

        #endregion Organizations

        #region PayableDeposits

        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_GetPayableDepositDirectives()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payable-deposit-directives");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayableDepositDirectivesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_GetPayableDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payable-deposit-directives/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayableDepositDirectiveAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_CreatePayableDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payable-deposit-directives");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("CreatePayableDepositDirectiveAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_UpdatePayableDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payable-deposit-directives/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("UpdatePayableDepositDirectiveAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_DeletePayableDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/payable-deposit-directives/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayableDepositDirectiveAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_AuthenticatePayableDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payable-deposit-directives/{id}", "application/vnd.ellucian-step-up-authentication.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("AuthenticatePayableDepositDirectiveAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PayableDepositDirectives_AuthenticatePayableDepositDirectives()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payable-deposit-directives", "application/vnd.ellucian-step-up-authentication.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payable-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayableDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("AuthenticatePayableDepositDirectiveAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PayClasses

        [TestMethod]
        public void Default_Route_PayClasses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClasses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayClasses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayClasses_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayClasses_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClasses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayClassesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassesByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayClassesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassesByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classes/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassesByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClasses_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-classes/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClasses_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-classes/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClasses_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-classes", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClasses_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-classes", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayClassesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayClasses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/pay-classes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClasses", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayClassesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PayClassifications

        [TestMethod]
        public void Default_Route_PayClassifications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassifications2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayClassifications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayClassifications_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayClassifications_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassifications2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayClassificationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassificationsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayClassificationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassificationsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassificationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassificationsByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-classifications/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayClassificationsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassifications_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-classifications/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassifications_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-classifications/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassifications_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-classifications", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayClassifications_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-classifications", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayClassifications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/pay-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayClassificationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PayCycles

        [TestMethod]
        public void Default_Route_PayCycles()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-cycles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayCycles2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayCycles_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-cycles", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayCycles_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-cycles", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayCycles2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayCyclesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-cycles/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayCyclesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayCyclesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-cycles/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayCyclesByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-cycles/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayCyclesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PayCycles_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-cycles/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayCyclesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayCycles_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-cycles", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayCyclesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayCycles_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/pay-cycles/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-cycles/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayCycles", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayCyclesAsync", routeData.Values["Action"]);
        }
        #endregion  

        #region PayrollDirectDeposits

        [TestMethod]
        public void DefaultRoute_PayrollDirectDeposits_GetPayrollDepositDirectives()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deposit-directives");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayrollDepositDirectivesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDirectDeposits_GetPayrollDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deposit-directives/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayrollDepositDirectiveAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDirectDeposits_UpdatePayrollDepositDirectives()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payroll-deposit-directives");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("UpdatePayrollDepositDirectivesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDirectDeposits_UpdatePayrollDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payroll-deposit-directives/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("UpdatePayrollDepositDirectiveAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDirectDeposits_CreatePayrollDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payroll-deposit-directives");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("CreatePayrollDepositDirectiveAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDirectDeposits_DeletePayrollDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/payroll-deposit-directives/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayrollDepositDirectiveAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDepositDirectives_AuthenticatePayrollDepositDirectives()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payroll-deposit-directives", "application/vnd.ellucian-step-up-authentication.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayrollDepositDirectivesAuthenticationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDepositDirectives_AuthenticatePayrollDepositDirective()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payroll-deposit-directives/{id}", "application/vnd.ellucian-step-up-authentication.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deposit-directives/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDepositDirectives", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayrollDepositDirectiveAuthenticationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PayrollDeductionArrangements

        [TestMethod]
        public void DefaultRoute_GetPayrollDeductionArrangements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            // Assert.AreEqual("GetPayrollDeductionArrangements2Async", routeData.Values["Action"]);
            Assert.AreEqual("GetPayrollDeductionArrangementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_GetPayrollDeductionArrangements_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangements", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_GetPayrollDeductionArrangementsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangements", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayrollDeductionArrangementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDeductionArrangements_GetPayrollDeductionArrangementByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangements/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            // Assert.AreEqual("GetPayrollDeductionArrangements2ByIdAsync", routeData.Values["Action"]);
            Assert.AreEqual("GetPayrollDeductionArrangementByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_GetPayrollDeductionArrangementById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangements/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_GetPayrollDeductionArrangementByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangements/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayrollDeductionArrangementByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_PutPayrollDeductionArrangementAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payroll-deduction-arrangements/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayrollDeductionArrangementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_PostPayrollDeductionArrangementAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payroll-deduction-arrangements", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayrollDeductionArrangementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangements_DeletePayrollDeductionArrangementAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/payroll-deduction-arrangements/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayrollDeductionArrangementAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PayrollDeductionArrangementChangeReasons
        [TestMethod]
        public void DefaultRoute_GetPayrollDeductionArrangementChangeReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangement-change-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllPayrollDeductionArrangementChangeReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangementChangeReasons_GetAllPayrollDeductionArrangementChangeReasonsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangement-change-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllPayrollDeductionArrangementChangeReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PayrollDeductionArrangementChangeReasons_GetPayrollDeductionArrangementChangeReasonByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangement-change-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayrollDeductionArrangementChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangementChangeReasons_GetPayrollDeductionArrangementChangeReasonByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payroll-deduction-arrangement-change-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayrollDeductionArrangementChangeReasonByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangementChangeReasons_PutPayrollDeductionArrangementChangeReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payroll-deduction-arrangement-change-reasons/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayrollDeductionArrangementChangeReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangementChangeReasons_PostPayrollDeductionArrangementChangeReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payroll-deduction-arrangement-change-reasons", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayrollDeductionArrangementChangeReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayrollDeductionArrangementChangeReasons_DeletePayrollDeductionArrangementChangeReasonAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/payroll-deduction-arrangement-change-reasons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payroll-deduction-arrangement-change-reasons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayrollDeductionArrangementChangeReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayrollDeductionArrangementChangeReasonAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Payment

        [TestMethod]
        public void DefaultRoute_Payment_GetPaymentConfirmation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment/confirm?distribution=distribution&paymentMethod=paymentMethod&amountToPay=amountToPay");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment/confirm", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Payment", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentConfirmation", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Payment_GetPaymentDistributions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment/distributions/studentId?accountTypes=accountTypes&paymentProcess=paymentProcess");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment/distributions/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Payment", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentDistributions", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Payment_PostProcessElectronicCheck()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment/echeck");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment/echeck", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Payment", routeData.Values["Controller"]);
            Assert.AreEqual("PostProcessElectronicCheck", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Payment_GetCheckPayerInformation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment/echeck/payer/personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment/echeck/payer/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Payment", routeData.Values["Controller"]);
            Assert.AreEqual("GetCheckPayerInformation", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Payment_PostPaymentProvider()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment/process");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment/process", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Payment", routeData.Values["Controller"]);
            Assert.AreEqual("PostPaymentProvider", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Payment_GetPaymentReceipt()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment/receipt?transactionId=transactionId&cashReceiptId=cashReceiptId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment/receipt", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Payment", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentReceipt", routeData.Values["Action"]);
        }

        #endregion Payment

        #region PaymentControls

        [TestMethod]
        public void DefaultRoute_PaymentControls_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payment-controls");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("Put", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_GetDocument()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/id?documentId=documentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetDocument", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PaymentControls_PostAcceptTerms_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment-controls/accept-terms", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/accept-terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcceptTerms", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_PostAcceptTerms2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment-controls/accept-terms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/accept-terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcceptTerms2", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_GetOptions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/options/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/options/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetOptions", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_GetProposedPaymentPlan()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/proposed-plan/payControlId/receivableType");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/proposed-plan/{payControlId}/{receivableType}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetProposedPaymentPlan", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_PostStartPayment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment-controls/start-payment");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/start-payment", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("PostStartPayment", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_GetStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/student/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/student/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudent", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_GetSummary()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/summary/id?payMethod=payMethod&amount=amount");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/summary/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetSummary", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PaymentControls_GetTermsApproval_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/terms-approval/id", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/terms-approval/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetTermsApproval", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentControls_GetTermsApproval2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-controls/terms-approval/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-controls/terms-approval/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentControls", routeData.Values["Controller"]);
            Assert.AreEqual("GetTermsApproval2", routeData.Values["Action"]);
        }

        #endregion PaymentControls

        #region PaymentPlans

        [TestMethod]
        public void DefaultRoute_PaymentPlans_GetPaymentPlan()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-plans/paymentPlanId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/{paymentPlanId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentPlan", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentPlans_GetPlanPaymentSummary()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-plans/planId/payment-summary?payMethod=payMethod&amount=amount&payControlId=payControlId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/{planId}/payment-summary", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetPlanPaymentSummary", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentPlans_PostAcceptTerms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment-plans/accept-terms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/accept-terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcceptTerms", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentPlans_GetPaymentPlanApproval()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-plans/approvals/approvalId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/approvals/{approvalId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentPlanApproval", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentPlans_GetPaymentPlanTemplates()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-plans/templates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/templates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentPlanTemplates", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PaymentPlans_GetPaymentPlanTemplate()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-plans/templates/templateId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/templates/{templateId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentPlanTemplate", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PaymentPlans_GetProposedPaymentPlanAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-plans/proposed-plan/personId?termId=termId&receivableTypeCode=receivableTypeCode&planAmount=planAmount");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-plans/proposed-plan/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentPlans", routeData.Values["Controller"]);
            Assert.AreEqual("GetProposedPaymentPlanAsync", routeData.Values["Action"]);
        }

        #endregion PaymentPlans

        #region PaymentTransactions

        [TestMethod]
        public void Default_Route_PaymentTransactions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPaymentTransactions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPaymentTransactions_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPaymentTransactions_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetPaymentTransactionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentTransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PaymentTransactionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PaymentTransactionsByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentTransactionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PaymentTransactionsByGuid_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/payment-transactions/guid", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPaymentTransactionsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PaymentTransactions_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payment-transactions/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("PutPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PaymentTransactions_Put_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/payment-transactions/guid", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("PutPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PaymentTransactions_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment-transactions", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("PostPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PaymentTransactions_Post_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/payment-transactions", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("PostPaymentTransactionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PaymentTransactions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/payment-transactions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("payment-transactions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PaymentTransactions", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePaymentTransactionsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PayPeriods

        [TestMethod]
        public void Default_Route_PayPeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayPeriods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-periods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayPeriods_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-periods", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayPeriodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayPeriodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayPeriodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-periods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayPeriodsByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-periods/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayPeriodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PayPeriods_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-periods/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayPeriods_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-periods", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PayPeriods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/pay-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayPeriodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonAchievements

        [TestMethod]
        public void Default_Route_PersonAchievements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-achievements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonAchievementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonAchievements_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-achievements", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonAchievements_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-achievements", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonAchievementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonAchievementsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-achievements/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonAchievementByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonAchievementsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-achievements/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }
        #endregion

        #region PayStatements
        [TestMethod]
        public void DefaultRoute_PayStatements_GetPayStatementsSummary()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-statements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-statements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayStatementSummariesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void PdfRoute_PayStatements_GetPayStatementPdf()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-statements/{id}", _mediaTypeHeaderPdfVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-statements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayStatementPdf", routeData.Values["Action"]);
        }

        [TestMethod]
        public void PdfRoute_PayStatements_QueryPayStatementPdfs()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-statements", _mediaTypeHeaderPdfVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-statements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayStatements", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPayStatementPdfs", routeData.Values["Action"]);
        }

        #endregion

        #region PayScales

        [TestMethod]
        public void Default_Route_PayScales()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-scales");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayScalesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayScalesAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-scales", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayScalesAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-scales", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayScalesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetPayScalesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-scales/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayScalesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetPayScalesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-scales/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPayScalesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/pay-scales/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("GetPayScalesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PayScales_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/pay-scales/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("PutPayScalesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayScales_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/pay-scales", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("PostPayScalesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PayScales_Delete_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/pay-scales/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("pay-scales/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PayScales", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePayScalesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PersonalPronouns

        [TestMethod]
        public void Default_Route_PersonalPronouns()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-pronouns");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalPronounsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalPronouns_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-pronouns", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalPronouns_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-pronouns", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalPronounsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalPronounsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-pronouns/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalPronounsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalPronounsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-pronouns/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalPronounsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-pronouns/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalPronounsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonalPronouns_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-pronouns/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonalPronounsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalPronouns_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/personal-pronouns", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonalPronounsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalPronouns_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/personal-pronouns/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-pronouns/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalPronounTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonalPronounsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonalPronounTypes
        [TestMethod]
        public void Route_PersonAchievementsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-achievements/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonAchievementByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonAchievements_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-achievements/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonAchievementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonAchievements_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-achievements", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonAchievementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonAchievements_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-achievements/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-achievements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAchievements", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonAchievementAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonalRelationshipStatuses

        [TestMethod]
        public void DefaultRoute_PersonalRelationshipStatuses_GetPersonalRelationshipStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipStatuses_GetPersonalRelationshipStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-statuses", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonalRelationshipStatuses_GetPersonalRelationshipStatusById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationshipStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipStatuses_GetPersonalRelationshipStatusById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationshipStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipStatusById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-statuses/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipStatuses_PutPersonalRelationshipStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-relationship-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonalRelationshipStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipStatuses_PostPersonalRelationshipStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/personal-relationship-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonalRelationshipStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonalRelationshipStatuses_DeletePersonalRelationshipStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/personal-relationship-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonalRelationshipStatusAsync", routeData.Values["Action"]);
        }
        #endregion PersonalRelationshipStatuses

        #region PersonGuardianRelationships

        [TestMethod]
        public void DefaultRoute_GetPersonGuardianRelationships()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-guardians");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonGuardianRelationshipsAllAndFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonGuardianRelationships_GetAllPersonGuardianRelationshipsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-guardians", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonGuardianRelationshipsAllAndFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonGuardianRelationships_GetPersonGuardianRelationshipByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-guardians/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonGuardianRelationshipByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonGuardianRelationships_GetPersonGuardianRelationshipByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-guardians/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonGuardianRelationshipByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonGuardianRelationships_PutPersonGuardianRelationshipAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-guardians/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonGuardianRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonGuardianRelationships_PostPersonGuardianRelationshipAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-guardians", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonGuardianRelationshipAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonGuardianRelationships_DeletePersonGuardianRelationshipAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-guardians/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-guardians/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonGuardians", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonGuardianRelationshipAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PersonalRelationships
        [TestMethod]
        public void Route_GetPersonalRelationships()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetPersonalRelationships_Guid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationships2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalRelationships()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationships2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationships_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationships_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationships2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalRelationshipsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationships2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalRelationshipsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipsByGuid_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationships/id", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationships2ByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonalRelationships_Put_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-relationships/id", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonalRelationships2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationships_Post_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/personal-relationships", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonalRelationships2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Default_Route_PersonalRelationships_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/personal-relationships/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationships/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonalRelationshipsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonalRelationshipInitiationProcess


        [TestMethod]
        public void Route_GetPersonalRelationshipInitiationProcess_Guid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-initiation-process/id", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-initiation-process/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationshipInitiationProcess", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationshipsInitiationProcess_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-initiation-process/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonalRelationshipInitiationProcess_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-relationship-initiation-process/id", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-initiation-process/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonalRelationshipInitiationProcess", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationshipInitiationProcess_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/personal-relationship-initiation-process", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-initiation-process", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonalRelationshipInitiationProcessAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalRelationshipInitiationProcess_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/personal-relationship-initiation-process/id", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-initiation-process/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonalRelationshipInitiationProcess", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PutPersonalRelationshipsInitiationProcess_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-relationship-initiation-process/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        #endregion

        #region PersonalRelationTypes

        [TestMethod]
        public void Default_Route_GetPersonalRelationTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationTypes_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetPersonalRelationTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationTypeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetPersonalRelationTypesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationTypesById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationTypeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonalRelationTypesById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/personal-relationship-types/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonalRelationTypeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationTypes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-relationship-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonalRelationType", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationTypes_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/personal-relationship-types/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonalRelationType", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationTypes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/personal-relationship-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonalRelationType", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonalRelationTypes_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/personal-relationship-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonalRelationType", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonalRelationTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/personal-relationship-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("personal-relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonalRelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonalRelationType", routeData.Values["Action"]);
        }

        #endregion PersonalRelationTypes

        #region PersonBeneficiaries TEMPORARILY REMOVED
        // This was actually never done but when it comes back it should be here
        #endregion

        #region PersonBenefitDependents TEMPORARILY REMOVED

        //[TestMethod]
        //public void Default_Route_PersonBenefitDependents()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-benefit-dependents");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetPersonBenefitDependentsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_GetPersonBenefitDependents_UnsupportedVersion()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-benefit-dependents", "application/vnd.hedtech.integration.v1+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("Index", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_GetPersonBenefitDependents_V11()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-benefit-dependents", "application/vnd.hedtech.integration.v11+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetPersonBenefitDependentsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Default_Route_PersonBenefitDependentsByGuid()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-benefit-dependents/guid");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetPersonBenefitDependentsByGuidAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Default_Route_PersonBenefitDependentsByGuid_UnsupportedVersion()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-benefit-dependents/guid", "application/vnd.hedtech.integration.v2+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("guid", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_PersonBenefitDependentsByGuid_V11()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-benefit-dependents/guid", "application/vnd.hedtech.integration.v11+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetPersonBenefitDependentsByGuidAsync", routeData.Values["Action"]);
        //}


        //[TestMethod]
        //public void Route_PersonBenefitDependents_Put_V11()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-benefit-dependents/guid", "application/vnd.hedtech.integration.v11+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("PutPersonBenefitDependentsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_PersonBenefitDependents_Post_V11()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-benefit-dependents", "application/vnd.hedtech.integration.v11+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("PostPersonBenefitDependentsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Default_Route_PersonBenefitDependents_Delete()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-benefit-dependents/guid");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("person-benefit-dependents/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("PersonBenefitDependents", routeData.Values["Controller"]);
        //    Assert.AreEqual("DeletePersonBenefitDependentsAsync", routeData.Values["Action"]);
        //}
        #endregion

        #region PersonEmploymentReferences

        [TestMethod]
        public void Default_Route_PersonEmploymentReferences()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-references");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmploymentReferencesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonEmploymentReferences_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-references", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonEmploymentReferences_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-references", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmploymentReferencesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonEmploymentReferencesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-references/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmploymentReferencesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonEmploymentReferencesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-references/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonEmploymentReferencesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-references/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmploymentReferencesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonEmploymentReferences_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-employment-references/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonEmploymentReferenceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonEmploymentReferences_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-employment-references", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonEmploymentReferenceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonEmploymentReferences_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-employment-references/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-references/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmploymentReferences", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonEmploymentReferenceAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonExternalEducation

        [TestMethod]
        public void Default_Route_PersonExternalEducation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonExternalEducation_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonExternalEducation_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonExternalEducation_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonExternalEducationByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonExternalEducationByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationByGuid_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education/guid", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonExternalEducation_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-external-education/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducation_Put_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-external-education/guid", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducation_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-external-education", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducation_Post_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-external-education", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonExternalEducationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonExternalEducation_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-external-education/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducation", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonExternalEducationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonExternalEducationCredentials

        [TestMethod]
        public void Default_Route_PersonExternalEducationCredentials()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonExternalEducationCredentials_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonExternalEducationCredentials_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonExternalEducationCredentials_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonExternalEducationCredentialsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationCredentialsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonExternalEducationCredentialsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationCredentialsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationCredentialsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationCredentialsByGuid_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-external-education-credentials/guid", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonExternalEducationCredentialsByGuidAsync", routeData.Values["Action"]);
        }



        [TestMethod]
        public void Route_PersonExternalEducationCredentials_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-external-education-credentials/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationCredentials_Put_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-external-education-credentials/guid", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationCredentials_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-external-education-credentials", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonExternalEducationCredentials_Post_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-external-education-credentials", "application/vnd.hedtech.integration.v1.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonExternalEducationCredentials_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-external-education-credentials/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-external-education-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonExternalEducationCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonExternalEducationCredentialsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonFilters

        [TestMethod]
        public void DefaultRoute_PersonFilters_GetPersonFilters()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonFilters2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_GetPersonFilters_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonFilters2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_GetPersonFilters_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonFilters2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonFilters_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonFilters_GetPersonFilterById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonFilterByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_GetPersonFilterById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonFilterByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_GetPersonFilterById_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonFilterByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilterById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-filters/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_PutPersonFilters_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-filters/id", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_PutPersonFilters_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-filters/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_PostPersonFilters_6_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-filters", "application/vnd.hedtech.integration.v6.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonFilters_PostPersonFilters_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-filters", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonFilterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonFilters_DeletePersonFilters()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-filters/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-filters/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonFilters", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonFilterAsync", routeData.Values["Action"]);
        }
        #endregion PersonFilters

        #region PersonNameTypes

        [TestMethod]
        public void DefaultRoute_PersonNameTypes_GetPersonNameTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-name-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonNameTypes2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonNameTypes_GetPersonNameTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-name-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonNameTypes_GetPersonNameTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-name-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonNameTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonNameTypes_GetPersonNameTypeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-name-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonNameTypeById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonNameTypes_GetPersonNameTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-name-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonNameTypes_GetPersonNameTypeById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-name-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonNameTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonNameTypes_PutPersonNameType_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-name-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonNameTypes", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonNameTypes_PostPersonNameTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-name-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonNameTypes", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonNameTypes_DeletePersonNameTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-name-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-name-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonNameTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonNameTypes", routeData.Values["Action"]);
        }

        #endregion PersonNameTypes

        #region PersonHoldType

        [TestMethod]
        public void DefaultRoute_PersonHoldTypes_GetPersonHoldTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-hold-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonHoldTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonHoldTypes_GetPersonHoldTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-hold-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);

        }

        [TestMethod]
        public void Route_PersonHoldTypes_GetPersonHoldTypesV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-hold-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonHoldTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonHoldTypes_GetPersonHoldTypeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-hold-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonHoldTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonHoldTypes_GetPersonHoldTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-hold-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);

        }

        [TestMethod]
        public void Route_PersonHoldTypes_GetPersonHoldTypeByIdV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-hold-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonHoldTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonHoldTypes_PutPersonHoldTypesV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-hold-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonHoldTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonHoldTypes_PostPersonHoldTypesV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-hold-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonHoldTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonHoldTypes_DeletePersonHoldTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-hold-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-hold-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHoldTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonHoldTypesAsync", routeData.Values["Action"]);
        }

        #endregion PersonHoldType

        #region PersonMatchingRequests

        [TestMethod]
        public void Default_Route_PersonMatchingRequests()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonMatchingRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonMatchingRequests_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonMatchingRequests_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonMatchingRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonMatchingRequestsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonMatchingRequestsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonMatchingRequestsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests/guid", "application/vnd.hedtech.integration.v*+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonMatchingRequestsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonMatchingRequestsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonMatchingRequests_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-matching-requests/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonMatchingRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonMatchingRequests_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-matching-requests", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonMatchingRequestsAsync", routeData.Values["Action"]);
        }

        //Prospect Opportunities InitiationsProspects 
        [TestMethod]
        public void Route_PersonMatchingRequests_InitiationsProspects_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-matching-requests/guid", "application/vnd.hedtech.integration.v1.0.0+json",
                "application/vnd.hedtech.integration.person-matching-requests-initiations-prospects.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonMatchingRequestsInitiationsProspectsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonMatchingRequests_Post_InitiationsProspects_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-matching-requests", "application/vnd.hedtech.integration.v1.0.0+json",
                "application/vnd.hedtech.integration.person-matching-requests-initiations-prospects.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonMatchingRequestsInitiationsProspectsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonMatchingRequests_InitiationsProspects_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-matching-requests/guid", "application/vnd.hedtech.integration.v1.0.0+json",
                "application/vnd.hedtech.integration.person-matching-requests-initiations-prospects.v1.0.0+json"); RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Default_Route_PersonMatchingRequests_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-matching-requests/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-matching-requests/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonMatchingRequests", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonMatchingRequestsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonSources

        [TestMethod]
        public void Default_Route_PersonSources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonSources_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-sources", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonSources_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonSourcesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonSourcesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonSourcesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-sources/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonSourcesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonSourcesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonSources_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonSources_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonSources_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonSources", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonSourcesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonPublications

        [TestMethod]
        public void Default_Route_PersonPublications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-publications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPublicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonPublications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-publications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonPublications_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-publications", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPublicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonPublicationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-publications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPublicationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonPublicationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-publications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonPublicationsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-publications/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPublicationsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonPublications_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-publications/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonPublicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonPublications_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-publications", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonPublicationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonPublications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-publications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-publications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPublications", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonPublicationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonRestrictionTypes

        [TestMethod]
        public void Route_PersonRestrictionTypes_GetRestrictionTypes_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restriction-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restriction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonRestrictionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictionTypesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonRestrictionTypes_GetRestrictionTypeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restriction-types/guid", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restriction-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonRestrictionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictionTypeByGuidAsync", routeData.Values["Action"]);
        }

        #endregion PersonRestrictionTypes

        #region PersonStatuses
        [TestMethod]
        public void Route_PersonStatuses_GetPersonEmploymentStatusesById_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-employment-statuses?effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-employment-statuses", GetRouteTemplate(routeData.Route));

            Assert.AreEqual("PersonEmploymentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmploymentStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Persons

        #region postRoutes
        [TestMethod]
        public void Route_PostPerson2_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPerson2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PostPerson3_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPerson3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PostPerson4_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPerson5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PostPerson5_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPerson5Async", routeData.Values["Action"]);
        }
        #endregion

        #region Get All routes


        [TestMethod]
        public void Route_Persons_Get_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_Persons_Get_All()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_Get_v6_All()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_Get_v8_All()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_Get_v12_All()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_Persons_Get_v12_1_0_All()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5Async", routeData.Values["Action"]);
        }

        #endregion

        #region GetById routes

        [TestMethod]
        public void Route_Persons_Get_ById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Persons_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5ByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_Get_v6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_Get_v8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_Get_v12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5ByIdAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_Persons_Get_v12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/guid", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5ByIdAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Put routes
        [TestMethod]
        public void Route_PutPerson2_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPerson2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PutPerson3_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPerson3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PutPerson4_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPerson5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PutPerson5_V12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/guid", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPerson5Async", routeData.Values["Action"]);
        }

        #endregion

        [TestMethod]
        public void Route_DeletePerson()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/persons/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Persons_GetActivePersonRestrictionTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/guid/restriction-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{guid}/restriction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetActivePersonRestrictionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Persons_GetPersonsByFilter()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons?personFilter=personFilter");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetPersonsByFilter_v6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons?personFilter=personFilter", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetPersonsByFilter_v8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons?personFilter=personFilter", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPerson3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetMatchingPersons_v6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/persons", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPerson2ByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetMatchingPersons_v8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/persons", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPerson3ByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetMatchingPersons_v12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/persons", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPerson5ByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetMatchingPersons_v12_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/persons", "application/vnd.hedtech.integration.v12.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPerson5ByPostAsync", routeData.Values["Action"]);
        }

        public void Route_Persons_GetMatchingPersons_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/qapi/persons", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_InstantEnrollment_GetPersonMatchingResultsInstantEnrollment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/persons", "application/vnd.ellucian-instant-enrollment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/persons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("InstantEnrollment", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPersonMatchResultsInstantEnrollmentByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Persons_GetProfile()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId", "application/vnd.ellucian-person-profile.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetProfileAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Persons_PutProfile()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/{personId}", "application/vnd.ellucian-person-profile.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutProfile2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_PutProfile_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/{personId}", "application/vnd.ellucian-person-profile.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutProfileAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_PutProfile_v2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/{personId}", "application/vnd.ellucian-person-profile.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutProfile2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetEmergencyInformation_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/emergency-information", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Persons_GetEmergencyInformation_v2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/emergency-information", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformation2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Persons_GetEmergencyInformation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/emergency-information");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformation2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Persons_PutEmergencyInformation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons/personId/emergency-information");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmergencyInformation", routeData.Values["Action"]);
        }

        #endregion Persons

        #region PersonsContacts

        [TestMethod]
        public void DefaultRoute_PersonsContacts_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-contacts");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsContacts_Get_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-contacts", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsContacts_Get_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-contacts", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonsContacts_GetPersonContactsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-contacts/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsContacts_GetPersonContactsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-contacts/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsContacts_GetPersonContactsByGuid_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-contacts/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsContacts_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-contacts/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonContactAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsContacts_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-contacts", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonContactAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonsContacts_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-contacts/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-contacts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonContacts", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonContactAsync", routeData.Values["Action"]);
        }

        #endregion PersonsContacts

        #region PersonEmergencyContacts

        [TestMethod]
        public void Default_Route_PersonEmergencyContacts()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-emergency-contacts");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonEmergencyContacts_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-emergency-contacts", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonEmergencyContacts_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-emergency-contacts", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonEmergencyContactsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-emergency-contacts/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonEmergencyContactsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-emergency-contacts/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonEmergencyContactsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-emergency-contacts/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonEmergencyContactsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonEmergencyContacts_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-emergency-contacts/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonEmergencyContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonEmergencyContacts_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-emergency-contacts", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonEmergencyContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PersonEmergencyContacts_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-emergency-contacts/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-emergency-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonEmergencyContacts", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonEmergencyContactsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonAgreements

        [TestMethod]
        public void DefaultRoute_PersonAgreements_QueryPersonAgreementsByPostAsync_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/person-agreements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/person-agreements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAgreements", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPersonAgreementsByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonAgreements_GetPersonAgreementsByPersonIdAsync_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/person-agreements", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/person-agreements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAgreements", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPersonAgreementsByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonAgreements_UpdatePersonAgreementAsync_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-agreements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-agreements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAgreements", routeData.Values["Controller"]);
            Assert.AreEqual("UpdatePersonAgreementAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonAgreements_GetPersonAgreementsByPersonIdAsync_Put_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-agreements", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-agreements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonAgreements", routeData.Values["Controller"]);
            Assert.AreEqual("UpdatePersonAgreementAsync", routeData.Values["Action"]);
        }


        #endregion

        #region PersonsCredentials

        [TestMethod]
        public void DefaultRoute_PersonsCredentials_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredentials4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Get_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Get_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Get_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredentials2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Get_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredentials4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Get_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredentials4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonsCredentials_GetPersonCredentialByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredential4ByGuidAsync", routeData.Values["Action"]);
        }



        [TestMethod]
        public void Route_PersonsCredentials_GetPersonCredentialByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_GetPersonCredentialByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredentialByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_GetPersonCredential2ByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredential2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_GetPersonCredentialByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredential4ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_GetPersonCredentialByGuid_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons-credentials/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonCredential4ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons-credentials/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons-credentials/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons-credentials/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Put_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/persons-credentials/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons-credentials", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons-credentials", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons-credentials", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonsCredentials_Post_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons-credentials", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonCredentialAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonsCredentials_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/persons-credentials/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons-credentials/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Persons", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonCredentialAsync", routeData.Values["Action"]);
        }

        #endregion PersonsCredentials

        #region PersonHolds

        [TestMethod]
        public void Route_GetPersonHolds_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonsActiveHoldsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonHolds_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonHolds_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonsActiveHoldsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonsActiveHoldById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonsActiveHoldAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonsActiveHoldById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds/id", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonsActiveHoldById_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonsActiveHoldAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonsActiveHoldsByPersonIdFilter_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds?person=person", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonsActiveHoldsByPersonIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonsActiveHoldsByPersonIdFilter_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds?person=person", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPersonsActiveHoldsByPersonIdFilter_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-holds?person=person");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonsActiveHoldsByPersonIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PutPersonHoldAsync_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-holds/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonHoldAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PostPersonHoldAsync_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-holds", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonHoldAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_DeletePersonHoldAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-holds/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-holds/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonHolds", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonHoldAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PersonVisas

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaGetAll_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllPersonVisas2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaGetAll_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllPersonVisasAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaGetAll_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllPersonVisas2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaById_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonVisaById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonVisaByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaById_Default()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonVisaById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisaById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_GetPersonVisa_Filter_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-visas?person=person", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_PutPersonVisa_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-visas/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonVisaAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_PostPersonVisa_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-visas", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonVisaAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PersonVisas_PutPersonVisa_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/person-visas/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("PutPersonVisa2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_PostPersonVisa_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/person-visas", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("PostPersonVisa2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PersonVisas_DeletePersonVisaAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/person-visas/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-visas/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonVisas", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePersonVisaAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonPositions
        [TestMethod]
        public void DefaultRoute_PersonPositions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPositionsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_PersonPositions_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-positions?effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPositions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPositionsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PersonPositionWages
        [TestMethod]
        public void DefaultRoute_PersonPositionWages_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-position-wages");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-position-wages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPositionWages", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPositionWagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PersonPositionWages_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/person-position-wages?effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("person-position-wages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonPositionWages", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPositionWagesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PetitionStatuses

        [TestMethod]
        public void DefaultRoute_PetitionStatuses_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/petition-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("petition-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PetitionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion PetitionStatuses

        #region PhoneNumbers

        [TestMethod]
        public void DefaultRoute_PhoneNumbers_GetPersonPhonesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/phone-numbers/personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-numbers/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneNumbers", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPhonesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetPhoneNumbersByIdList_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/phone-numbers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/phone-numbers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneNumbers", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPhoneNumbersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPhoneNumbersByIdList_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/phone-numbers", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/phone-numbers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneNumbers", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPhoneNumbersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPilotPhoneNumbersByIdList_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/phone-numbers", _mediaTypeHeaderEllucianJsonPilotMediaTypeVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/phone-numbers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneNumbers", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPilotPhoneNumbersAsync", routeData.Values["Action"]);
        }

        #endregion PhoneNumbers

        #region PhoneTypes

        [TestMethod]
        public void DefaultRoute_PhoneTypes_GetPhoneTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/phone-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPhoneTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PhoneTypes_GetPhoneTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/phone-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPhoneTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PhoneTypes_GetPhoneTypeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/phone-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPhoneTypeByIdAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PhoneTypes_GetPhoneTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/phone-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPhoneTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PhoneTypes_PutPhoneTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/phone-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPhoneTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PhoneTypes_PostPhoneTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/phone-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPhoneTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PhoneTypes_DeletePhoneTypeByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/phone-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("phone-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PhoneTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePhoneTypesAsync", routeData.Values["Action"]);
        }
        #endregion PhoneTypes

        #region Photos

        [TestMethod]
        public void DefaultRoute_Photos_GetPersonPhoto()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/photos/people/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("photos/people/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Photos", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPhoto", routeData.Values["Action"]);
        }

        #endregion Photos

        #region PlanningConfiguration
        [TestMethod]
        public void PlanningConfiguration_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/planning", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/planning", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetPlanningConfigurationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PlanningStudents
        [TestMethod]
        public void Route_PlanningStudents_QueryPlanningStudents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students", "application/vnd.ellucian-planning-student.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPlanningStudentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_QueryEvaluations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students/id/evaluation", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("QueryEvaluationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_QueryEvaluations2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students/id/evaluation", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("QueryEvaluations2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_QueryEvaluations3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students/id/evaluation", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("QueryEvaluations3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_QueryEvaluations4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students/id/evaluation");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("QueryEvaluations4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_GetEvaluation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/id/evaluation/program");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{id}/evaluation/{program}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("GetEvaluationAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        // Renamed to avoid redundant method name
        public void DefaultRoute_PlanningStudents_GetEvaluation2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/id/evaluation?program=program", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("GetEvaluationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_GetEvaluation3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/id/evaluation?program=program", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("GetEvaluation2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_GetEvaluation4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/id/evaluation?program=program", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("GetEvaluation3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PlanningStudents_GetEvaluation5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/id/evaluation?program=program");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{id}/evaluation", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("GetEvaluation4Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PlanningStudents_GetEvaluationNotices()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/evaluation-notices/programCode");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/evaluation-notices/{programCode}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PlanningStudents", routeData.Values["Controller"]);
            Assert.AreEqual("GetEvaluationNoticesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RouteDefault_PlanningStudents_GetPlanningStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/", "application/vnd.ellucian-planning-student.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetPlanningStudentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetStudentAddAuthorizationsAsync_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/add-authorizations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAddAuthorizationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetStudentAddAuthorizationsAsync_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/add-authorizations", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/add-authorizations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("AddAuthorizations", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAddAuthorizationsAsync", routeData.Values["Action"]);
        }

        #endregion PlanningStudents

        #region Positions

        [TestMethod]
        public void DefaultRoute_Positions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/positions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("positions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Positions", routeData.Values["Controller"]);
            Assert.AreEqual("GetPositionsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region PositionClassifications

        [TestMethod]
        public void Default_Route_PositionClassifications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/position-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPositionClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPositionClassifications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/position-classifications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPositionClassifications_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/position-classifications", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPositionClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PositionClassificationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/position-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPositionClassificationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PositionClassificationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/position-classifications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PositionClassificationsByGuid_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/position-classifications/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPositionClassificationsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PositionClassifications_Put_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/position-classifications/guid", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutPositionClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PositionClassifications_Post_V12()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/position-classifications", "application/vnd.hedtech.integration.v12+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostPositionClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PositionClassifications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/position-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("position-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PositionClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePositionClassificationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PreferredSections

        [TestMethod]
        public void DefaultRoute_PreferredSections_GetPreferredSections()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/preferred-sections");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/preferred-sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PreferredSections", routeData.Values["Controller"]);
            Assert.AreEqual("GetPreferredSectionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PreferredSections_UpdatePreferredSections()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/preferred-sections");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/preferred-sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PreferredSections", routeData.Values["Controller"]);
            Assert.AreEqual("UpdatePreferredSectionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_PreferredSections_DeletePreferredSections()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/students/studentId/preferred-sections/sectionId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/preferred-sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PreferredSections", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePreferredSectionsAsync", routeData.Values["Action"]);
        }

        #endregion PreferredSections

        #region Prefixes

        [TestMethod]
        public void DefaultRoute_Prefixes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prefixes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prefixes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Prefixes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion Prefixes

        #region PrivacyStatuses

        [TestMethod]
        public void DefaultRoute_GetPrivacyStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/privacy-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPrivacyStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatuses_GetPrivacyStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/privacy-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPrivacyStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/privacy-statuses", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PrivacyStatuses_GetPrivacyStatusById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/privacy-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPrivacyStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatuses_GetPrivacyStatusByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/privacy-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetPrivacyStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatusById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/privacy-statuses/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatuses_PutPrivacyStatus_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/privacy-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutPrivacyStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatus_PostPrivacyStatus_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/privacy-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostPrivacyStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PrivacyStatuses_DeletePrivacyStatus()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/privacy-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("privacy-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PrivacyStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePrivacyStatusAsync", routeData.Values["Action"]);
        }

        #endregion PrivacyStatuses

        #region ProcurementReceipts

        [TestMethod]
        public void Default_Route_ProcurementReceipts()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReceiptsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProcurementReceipts_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProcurementReceipts_V13_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts", "application/vnd.hedtech.integration.v13.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReceiptsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProcurementReceipts_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReceiptsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProcurementReceiptsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReceiptsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProcurementReceiptsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProcurementReceiptsByGuid_V13_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts/guid", "application/vnd.hedtech.integration.v13.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReceiptsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProcurementReceiptsByGuid_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-receipts/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReceiptsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProcurementReceipts_Put_V13_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/procurement-receipts/guid", "application/vnd.hedtech.integration.v13.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("PutProcurementReceiptsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ProcurementReceipts_Put_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/procurement-receipts/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("PutProcurementReceiptsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProcurementReceipts_Post_V13_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/procurement-receipts", "application/vnd.hedtech.integration.v13.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("PostProcurementReceiptsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProcurementReceipts_Post_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/procurement-receipts", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("PostProcurementReceiptsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProcurementReceipts_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/procurement-receipts/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-receipts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReceipts", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteProcurementReceiptsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Procurement Return Reason
        [TestMethod]
        public void DefaultRoute_ProcurementReturnReason_GetProcurementReturnReasonsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/procurement-return-reasons", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("procurement-return-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProcurementReturnReason", routeData.Values["Controller"]);
            Assert.AreEqual("GetProcurementReturnReasonsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ProficiencyLicensingAuthorities
        [TestMethod]
        public void Default_Route_ProficiencyLicensingAuthorities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/proficiency-licensing-authorities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProficiencyLicensingAuthoritiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProficiencyLicensingAuthorities_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/proficiency-licensing-authorities", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProficiencyLicensingAuthorities_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/proficiency-licensing-authorities", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProficiencyLicensingAuthoritiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProficiencyLicensingAuthoritiesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/proficiency-licensing-authorities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProficiencyLicensingAuthorityByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProficiencyLicensingAuthoritiesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/proficiency-licensing-authorities/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProficiencyLicensingAuthoritiesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/proficiency-licensing-authorities/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProficiencyLicensingAuthorityByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ProficiencyLicensingAuthorities_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/proficiency-licensing-authorities/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("PutProficiencyLicensingAuthorityAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProficiencyLicensingAuthorities_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/proficiency-licensing-authorities", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("PostProficiencyLicensingAuthorityAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProficiencyLicensingAuthorities_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/proficiency-licensing-authorities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("proficiency-licensing-authorities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProficiencyLicensingAuthorities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteProficiencyLicensingAuthorityAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ProfileApplications

        [TestMethod]
        public void DefaultRoute_ProfileApplications_GetProfileApplicationsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/profile-applications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/profile-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProfileApplications", routeData.Values["Controller"]);
            Assert.AreEqual("GetProfileApplicationsAsync", routeData.Values["Action"]);
        }

        #endregion ProfileApplications

        #region Programs

        [TestMethod]
        public void DefaultRoute_Programs_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/programs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Programs", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Programs_GetRequirements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/programs/id/catalog");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("programs/{id}/{catalog}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Programs", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequirementsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Programs_GetActivePrograms_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/programs/active", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("programs/active", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Programs", routeData.Values["Controller"]);
            Assert.AreEqual("GetActiveProgramsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Programs_GetActivePrograms2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/programs/active");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("programs/active", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Programs", routeData.Values["Controller"]);
            Assert.AreEqual("GetActivePrograms2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Programs_GetQid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/programs?id=id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Programs", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Programs

        #region ProjectItemCodes

        [TestMethod]
        public void DefaultRoute_ProjectItemCodes_GetProjectItemCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/project-item-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("project-item-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProjectItemCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetProjectItemCodesAsync", routeData.Values["Action"]);
        }

        #endregion ProjectItemCodes

        #region Projects

        [TestMethod]
        public void DefaultRoute_Projects_GetProject()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/projects/projectId?summaryOnly=summaryOnly&sequenceNumber=sequenceNumber");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("projects/{projectId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Projects", routeData.Values["Controller"]);
            Assert.AreEqual("GetProjectAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Projects_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/projects?filter=filter&summaryOnly=summaryOnly");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("projects", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Projects", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }
        //[TestMethod]
        //public void DefaultRoute_Projects_GetProjectsByGlAccountIds()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/general-ledger-accounts/generalledgeraccountid/projects");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("general-ledger-accounts/{generalLedgerAccountIds}/projects", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("Projects", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetProjectsByGlAccountIdsAsync", routeData.Values["Action"]);
        //}

        #endregion Projects

        #region ProjectTypes

        [TestMethod]
        public void DefaultRoute_ProjectTypes_GetProjectTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/project-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("project-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProjectTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetProjectTypesAsync", routeData.Values["Action"]);
        }

        #endregion ProjectTypes

        #region ProspectOpportunities https://jirateams.ellucian.com/browse/HED-26962

        [TestMethod]
        public void Default_Route_ProspectOpportunities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProspectOpportunities_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProspectOpportunities_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProspectOpportunitiesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitiesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProspectOpportunitiesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities/guid", "application/vnd.hedtech.integration.v*+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProspectOpportunitiesByGuid_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitiesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ProspectOpportunities_Put_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/prospect-opportunities/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("PutProspectOpportunitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProspectOpportunities_Post_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/prospect-opportunities", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("PostProspectOpportunitiesAsync", routeData.Values["Action"]);
        }

        //Prospect Opportunities Submissions 
        [TestMethod]
        public void Route_ProspectOpportunities_Submissions_Put_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/prospect-opportunities/guid", "application/vnd.hedtech.integration.v16.0.0+json",
                "application/vnd.hedtech.integration.prospect-opportunities-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("PutProspectOpportunitiesSubmissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProspectOpportunities_Post_Submissions_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/prospect-opportunities", "application/vnd.hedtech.integration.v16.0.0+json",
                "application/vnd.hedtech.integration.prospect-opportunities-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("PostProspectOpportunitiesSubmissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProspectOpportunities_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/prospect-opportunities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteProspectOpportunitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProspectOpportunities_Submissions_16_0_0_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunities", "application/vnd.hedtech.integration.v16.0.0+json",
                "application/vnd.hedtech.integration.prospect-opportunities-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }
        #endregion

        #region ProspectOpportunitySources

        [TestMethod]
        public void Default_Route_ProspectOpportunitySources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunity-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitySourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProspectOpportunitySources_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunity-sources", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetProspectOpportunitySources_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunity-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitySourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProspectOpportunitySourcesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunity-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitySourcesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProspectOpportunitySourcesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunity-sources/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProspectOpportunitySourcesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-opportunity-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("GetProspectOpportunitySourcesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ProspectOpportunitySources_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/prospect-opportunity-sources/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("PutProspectOpportunitySourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ProspectOpportunitySources_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/prospect-opportunity-sources", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("PostProspectOpportunitySourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ProspectOpportunitySources_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/prospect-opportunity-sources/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-opportunity-sources/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectOpportunitySources", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteProspectOpportunitySourcesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ProspectSources

        [TestMethod]
        public void DefaultRoute_ProspectSources_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/prospect-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("prospect-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ProspectSources", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion ProspectSources

        #region PublicationTypes

        [TestMethod]
        public void Default_Route_PublicationTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/publication-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPublicationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPublicationTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/publication-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPublicationTypes_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/publication-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPublicationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PublicationTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/publication-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPublicationTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PublicationTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/publication-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PublicationTypesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/publication-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetPublicationTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PublicationTypes_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/publication-types/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutPublicationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PublicationTypes_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/publication-types", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostPublicationTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PublicationTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/publication-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("publication-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PublicationTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePublicationTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PurchasingArrangements

        [TestMethod]
        public void Default_Route_PurchasingArrangements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchasing-arrangements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchasingArrangementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchasingArrangements_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchasing-arrangements", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchasingArrangements_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchasing-arrangements", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchasingArrangementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchasingArrangementsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchasing-arrangements/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchasingArrangementsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchasingArrangementsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchasing-arrangements/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchasingArrangementsByGuid_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchasing-arrangements/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchasingArrangementsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PurchasingArrangements_Put_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/purchasing-arrangements/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("PutPurchasingArrangementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchasingArrangements_Post_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/purchasing-arrangements", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("PostPurchasingArrangementsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchasingArrangements_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/purchasing-arrangements/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchasing-arrangements/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchasingArrangements", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePurchasingArrangementAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PurchaseClassifications

        [TestMethod]
        public void Default_Route_PurchaseClassifications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchaseClassifications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-classifications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchaseClassifications_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-classifications", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseClassificationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseClassificationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseClassificationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-classifications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseClassificationsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-classifications/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseClassificationsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_PurchaseClassifications_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/purchase-classifications/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutPurchaseClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseClassifications_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/purchase-classifications", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostPurchaseClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseClassifications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/purchase-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePurchaseClassificationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region PurchaseOrders

        [TestMethod]
        public void Route_PurchaseOrders_GetPurchaseOrder_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders/purchaseOrderId",
                _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{purchaseOrderId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrderAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseOrders()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchaseOrders_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchaseOrders_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchaseOrders_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetPurchaseOrders_V11_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseOrdersByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseOrdersByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrdersByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrdersByGuid_11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrdersByGuid_11_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrdersByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrders_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PutPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrders_Put_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PutPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrders_Put_V11_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/purchase-orders/guid", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PutPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrders_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/purchase-orders", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PostPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrders_Post_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/purchase-orders", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PostPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PurchaseOrders_Post_V11_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/purchase-orders", "application/vnd.hedtech.integration.v11.2.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("PostPurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_PurchaseOrders_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/purchase-orders/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("DeletePurchaseOrdersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PurchaseOrders_GetPurchaseOrderSummaryByPersonIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/purchase-orders-summary/personId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders-summary/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("GetPurchaseOrderSummaryByPersonIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PurchaseOrders_VoidPurchaseOrderAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/purchase-orders-void", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("purchase-orders-void", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("VoidPurchaseOrderAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_PurchaseOrders_QueryPurchaseOrderSummariesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/purchase-order-summaries", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/purchase-order-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PurchaseOrders", routeData.Values["Controller"]);
            Assert.AreEqual("QueryPurchaseOrderSummariesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Quick Registration

        [TestMethod]
        public void Default_Route_StudentQuickRegistration_GetStudentQuickRegistrationSectionsAsync_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/quick-registration-sections");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/quick-registration-sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentQuickRegistration", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentQuickRegistrationSectionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentQuickRegistration_GetStudentQuickRegistrationSectionsAsync_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/quick-registration-sections", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/quick-registration-sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentQuickRegistration", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentQuickRegistrationSectionsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Races

        [TestMethod]
        public void DefaultRoute_Races_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/races");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("races", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Races", routeData.Values["Controller"]);
            Assert.AreEqual("GetRaces2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Races_GetRaces2_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/races", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("races", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Races", routeData.Values["Controller"]);
            Assert.AreEqual("GetRaces2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Races_GetRaceById2_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/races/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("races/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Races", routeData.Values["Controller"]);
            Assert.AreEqual("GetRaceById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Races_PutRaces()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/races/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("races/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Races", routeData.Values["Controller"]);
            Assert.AreEqual("PutRaces", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Races_PostRaces()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/races", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("races", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Races", routeData.Values["Controller"]);
            Assert.AreEqual("PostRaces", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Races_DeleteRaces()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/races/{id}", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("races/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Races", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRaces", routeData.Values["Action"]);
        }

        #endregion Races

        #region Receivables

        [TestMethod]
        public void DefaultRoute_Receivables_GetAccountHolder_Obs()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-holders/personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-holders/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountHolder", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_GetAccountHolder2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/receivables/account-holder/personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("receivables/account-holder/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("GetAccountHolder2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_GetInvoices()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/receivables/invoices?invoiceIds=invoiceIds");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("receivables/invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("GetInvoices", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_QueryReceivableInvoicePayments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/receivable-invoices", "application/vnd.ellucian-invoice-payment.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/receivable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("QueryInvoicePaymentsByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_QueryReceivableInvoices()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/receivable-invoices");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/receivable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("QueryInvoicesByPostAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_GetReceivableTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/receivables/receivable-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("receivables/receivable-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("GetReceivableTypes", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_GetChargeCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/receivables/charge-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("receivables/charge-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("GetChargeCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Receivables_QueryAccountHoldersByPost2Async_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/receivables/account-holder", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/receivables/account-holder", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountHoldersByPostAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_QueryAccountHoldersByPost3Async_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/receivables/account-holder");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/receivables/account-holder", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountHoldersByPost3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Receivables_QueryAccountHolderPaymentPlanOptionsAsync_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/receivables/account-holder/payment-plan-options", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/receivables/account-holder/payment-plan-options", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountHolderPaymentPlanOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Receivables_QueryAccountHolderPaymentPlanOptions2Async_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/receivables/account-holder/payment-plan-options");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/receivables/account-holder/payment-plan-options", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Receivables", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAccountHolderPaymentPlanOptions2Async", routeData.Values["Action"]);
        }

        #endregion Receivables

        #region Receive Procurements

        [TestMethod]
        public void DefaultRoute_ReceiveProcurements_GetReceiveProcurementsByPersonIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/receive-procurements/personId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("receive-procurements/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ReceiveProcurements", routeData.Values["Controller"]);
            Assert.AreEqual("GetReceiveProcurementsByPersonIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_ReceiveProcurements_PostAcceptOrReturnProcurementItemsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/receive-procurements", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("receive-procurements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ReceiveProcurements", routeData.Values["Controller"]);
            Assert.AreEqual("PostAcceptOrReturnProcurementItemsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Recruiter

        [TestMethod]
        public void DefaultRoute_Recruiter_PostApplication()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-applications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-applications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostApplicationAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Recruiter_PostApplicationStatus()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-application-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-application-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostApplicationStatusAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Recruiter_PostCommunicationHistory()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-communication-history");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-communication-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostCommunicationHistoryAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Recruiter_PostCommunicationHistoryRequest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-communication-history-request");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-communication-history-request", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostCommunicationHistoryRequestAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Recruiter_PostConnectionStatus()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-connection-status");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-connection-status", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostConnectionStatusAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Recruiter_PostTestScores()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-test-scores");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-test-scores", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostTestScoresAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Recruiter_PostTranscriptCourses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/recruiter-transcript-courses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recruiter-transcript-courses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Recruiter", routeData.Values["Controller"]);
            Assert.AreEqual("PostTranscriptCoursesAsync", routeData.Values["Action"]);
        }

        #endregion Recruiter

        #region RecurringVouchers

        [TestMethod]
        public void RouteDefault_RecurringVouchers_GetRecurringVoucher()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/recurring-vouchers/recurringVoucherId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("recurring-vouchers/{recurringVoucherId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RecurringVouchers", routeData.Values["Controller"]);
            Assert.AreEqual("GetRecurringVoucherAsync", routeData.Values["Action"]);
        }

        #endregion

        #region RegistrationMarketingSources

        [TestMethod]
        public void DefaultRoute_RegistrationMarketingSources_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/registration-marketing-sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("registration-marketing-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegistrationMarketingSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationMarketingSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RegistrationMarketingSources_GetAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/registration-marketing-sources", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("registration-marketing-sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegistrationMarketingSources", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationMarketingSourcesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region RegistrationOptions

        [TestMethod]
        public void DefaultRoute_RegistrationOptions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/registration-options");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/registration-options", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegistrationOptions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion RegistrationOptions

        #region RegistrationReasons

        [TestMethod]
        public void DefaultRoute_RegistrationReasons_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/registration-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("registration-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegistrationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RegistrationReasons_GetAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/registration-reasons", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("registration-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegistrationReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationReasonsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region RegionIsoCodes

        [TestMethod]
        public void Default_Route_RegionIsoCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/region-iso-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRegionIsoCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/region-iso-codes", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRegionIsoCodes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/region-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RegionIsoCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/region-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionIsoCodesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RegionIsoCodesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/region-iso-codes/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RegionIsoCodesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/region-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionIsoCodesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_RegionIsoCodes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/region-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutRegionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RegionIsoCodes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/region-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostRegionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RegionIsoCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/region-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("region-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RegionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRegionIsoCodesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Regions

        [TestMethod]
        public void Default_Route_Regions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/regions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRegions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/regions", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRegions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/regions", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RegionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/regions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RegionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/regions/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RegionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/regions/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegionsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Regions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/regions/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("PutRegionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Regions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/regions", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("PostRegionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Regions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/regions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("regions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Regions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRegionsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region RehireTypes

        [TestMethod]
        public void DefaultRoute_GetRehireType()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rehire-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRehireTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireType_GetRehireTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rehire-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRehireTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireType_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rehire-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_RehireType_GetRehireTypeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rehire-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRehireTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireType_GetRehireTypeByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rehire-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRehireTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rehire-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireType_PutRehireType()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/rehire-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutRehireTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireType_PostRehireType()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/rehire-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostRehireTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RehireType_DeleteRehireType()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/rehire-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rehire-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RehireTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRehireTypeAsync", routeData.Values["Action"]);
        }

        #endregion RehireTypes

        #region Relationships

        [TestMethod]
        public void DefaultRoute_PersonPrimaryRelationships_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/relationships");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Relationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetPersonPrimaryRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Relationships_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/persons/personId/relationships");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Relationships", routeData.Values["Controller"]);
            Assert.AreEqual("PostRelationshipAsync", routeData.Values["Action"]);
        }

        #endregion

        #region RelationshipStatuses

        [TestMethod]
        public void Default_Route_RelationshipStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRelationshipStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-statuses", "application/vnd.hedtech.integration.vx+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRelationshipStatuses_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-statuses", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RelationshipStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RelationshipStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-statuses/guid", "application/vnd.hedtech.integration.vx+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RelationshipStatusesByGuid_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-statuses/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_RelationshipStatuses_Put_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/relationship-statuses/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutRelationshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RelationshipStatuses_Post_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/relationship-statuses", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostRelationshipStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RelationshipStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/relationship-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRelationshipStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region RelationshipTypes

        [TestMethod]
        public void DefaultRoute_RelationshipTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void RelationshipTypes_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRelationshipTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRelationshipTypes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RelationshipTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipTypesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RelationshipTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RelationshipTypesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/relationship-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRelationshipTypesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_RelationshipTypes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/relationship-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutRelationshipTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RelationshipTypes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/relationship-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostRelationshipTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RelationshipTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/relationship-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("relationship-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RelationshipTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRelationshipTypesAsync", routeData.Values["Action"]);
        }

        #endregion RelationshipTypes

        #region Religions

        [TestMethod]
        public void DefaultRoute_Religions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/religions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("GetReligionsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Religions_GetReligions_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/religions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("GetReligionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Relgions_GetReligionById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/religions/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("GetReligionByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Relgions_GetReligionById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/religions/{id}", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("GetReligionByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Religions_PutReligions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/religions/{id}", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("PutReligionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Religions_PostReligions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/religions", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("PostReligionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Religions_DeleteReligions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/religions/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("religions/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Religions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteReligionsAsync", routeData.Values["Action"]);
        }

        #endregion Religions

        #region Requirements

        [TestMethod]
        public void DefaultRoute_Requirements_QueryRequirementsByPost()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/requirements");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/requirements", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requirements", routeData.Values["Controller"]);
            Assert.AreEqual("QueryRequirementsByPostAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Requirements_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requirements/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requirements/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requirements", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Requirements

        #region Requisitions

        [TestMethod]
        public void DefaultRoute_Requisitions_GetRequisition()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions/requisitionId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{requisitionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Requisitions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRequisitions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRequisitions_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRequisitions_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RequisitionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RequisitionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RequisitionsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RequisitionsByGuid_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Requisitions_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/requisitions/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("PutRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Requisitions_Put_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/requisitions/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("PutRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Requisitions_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/requisitions", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("PostRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Requisitions_Post_V11_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/requisitions", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("PostRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Requisitions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/requisitions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRequisitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Requisitions_GetRequisitionsSummaryByPersonId()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions-summary/personId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions-summary/{personId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionsSummaryByPersonIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Requisitions_GetRequisitionForModifyWithLineItemDefaults()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/requisitions-modify/requisitionId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions-modify/{requisitionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetRequisitionForModifyWithLineItemDefaultsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Requisitions_PostRequisition()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/requisitions", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("PostRequisitionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Requisitions_DeleteRequisitionAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/requisitions-delete", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("requisitions-delete", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRequisitionAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Requisitions_QueryRequisitionSummariesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/requisition-summaries", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/requisition-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Requisitions", routeData.Values["Controller"]);
            Assert.AreEqual("QueryRequisitionSummariesAsync", routeData.Values["Action"]);
        }

        #endregion Requisitions

        #region ResidenceLifeDeposits

        [TestMethod]
        public void DefaultRoute_ResidenceLifeDeposits_PostDeposit()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/residence-life-deposits");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residence-life-deposits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidenceLifeDeposits", routeData.Values["Controller"]);
            Assert.AreEqual("PostDeposit", routeData.Values["Action"]);
        }

        #endregion ResidenceLifeDeposits

        #region ResidenceLifeReceivableInvoices

        [TestMethod]
        public void DefaultRoute_ResidenceLifeReceivableInvoices_PostReceivableInvoice()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/residence-life-receivable-invoices");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residence-life-receivable-invoices", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidenceLifeReceivableInvoices", routeData.Values["Controller"]);
            Assert.AreEqual("PostReceivableInvoice", routeData.Values["Action"]);
        }

        #endregion ResidenceLifeReceivableInvoices

        #region ResidencyTypes

        [TestMethod]
        public void Default_Route_GetResidencyTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetResidencyTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetResidencyTypes_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetResidencyTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetResidencyTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetResidencyTypeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetResidencyTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetResidencyTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetResidencyTypeById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetResidencyTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetResidencyTypeById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/residency-types/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetResidencyTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ResidencyTypes_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/residency-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutResidencyTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ResidencyTypes_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/residency-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostResidencyTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ResidencyTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/residency-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("residency-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ResidencyTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteResidencyTypeAsync", routeData.Values["Action"]);
        }

        #endregion ResidencyTypes

        #region RestrictedStudentFinancialAidAwards

        [TestMethod]
        public void Default_Route_RestrictedStudentFinancialAidAwards()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestricted3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRestrictedStudentFinancialAidAward_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestricted3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRestrictedStudentFinancialAidAward_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestricted3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRestrictedStudentFinancialAidAwards_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRestrictedStudentFinancialAidAwards_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictedAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetRestrictedByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictedById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetRestrictedByIdAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAwardById_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictedById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAwardById_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictedById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRestrictedByIdAsync_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictedByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAward_Put_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAward_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAwards_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/restricted-student-financial-aid-awards/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAward_Post_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAward_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictedStudentFinancialAidAwards_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/restricted-student-financial-aid-awards", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RestrictedStudentFinancialAidAwards_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/restricted-student-financial-aid-awards/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restricted-student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region RestrictionTypes

        [TestMethod]
        public void Route_RestrictionTypes_GetRestrictionTypes_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restriction-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restriction-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonRestrictionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RestrictionTypes_GetRestrictionTypeByGuid_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/restriction-types/guid", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("restriction-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("PersonRestrictionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRestrictionTypeByGuidAsync", routeData.Values["Action"]);
        }

        #endregion RestrictionTypes

        #region RetentionAlert

        [TestMethod]
        public void Route_RetentionAlert_AddRetentionAlertCaseNote_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-case-note.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("AddRetentionAlertCaseNoteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_AddRetentionAlertCaseCommCode_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-case-comm-code.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("AddRetentionAlertCaseCommCodeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_AddRetentionAlertCaseType_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-case-type.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("AddRetentionAlertCaseTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_ChangeRetentionAlertCasePriority_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-case-priority.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("ChangeRetentionAlertCasePriorityAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_CloseRetentionAlertCase_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-case-close.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("CloseRetentionAlertCaseAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_SetRetentionAlertCaseReminder_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-case-set-reminder.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("AddRetentionAlertCaseReminderAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_PostManageRetentionAlertCaseReminders()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-cases/caseid/case-history", "application/vnd.ellucian-retention-alert-manage-reminders.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-cases/{caseid}/case-history", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("ManageRetentionAlertCaseRemindersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_GetOpenCases_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/retention-alert/open-cases");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert/open-cases", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("GetRetentionAlertOpenCasesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_GetClosedCasesByReason_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/retention-alert/closed-cases-by-reason/categoryid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert/closed-cases-by-reason/{categoryId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("GetRetentionAlertClosedCasesByReasonAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_GetRetentionAlertCaseOwnerSummaryAsync_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/retention-alert/case-owner-summary/categoryId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert/case-owner-summary/{categoryId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("GetRetentionAlertCaseOwnerSummaryAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_QueryRetentionAlertCaseCategoryOrgRoles_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/retention-alert-case-category-org-roles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/retention-alert-case-category-org-roles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("QueryRetentionAlertCaseCategoryOrgRolesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_GetRetentionAlertCaseDetail_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/retention-alert-case/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-case/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("GetRetentionAlertCaseDetailAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_GetRetentionAlertEmailPreferenceAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/retention-alert-case-worker/orgEntityId/email-preference");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-case-worker/{orgEntityId}/email-preference", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("GetRetentionAlertEmailPreferenceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RetentionAlert_SetRetentionAlertEmailPreferenceAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/retention-alert-case-worker/orgEntityId/email-preference");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);

            Assert.IsNotNull(routeData);
            Assert.AreEqual("retention-alert-case-worker/{orgEntityId}/email-preference", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RetentionAlert", routeData.Values["Controller"]);
            Assert.AreEqual("SetRetentionAlertEmailPreferenceAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Roles

        [TestMethod]
        public void DefaultRoute_Roles_GetRoles()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Roles", routeData.Values["Controller"]);
            Assert.AreEqual("GetRolesAsync", routeData.Values["Action"]);
        }

        #endregion Roles

        #region Rooms

        [TestMethod]
        public void Route_Rooms_QueryAvailableRoomsByPostV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/rooms", "application/vnd.hedtech.integration.room-availability.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/rooms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAvailableRoomsByPost3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Rooms_QueryAvailableRoomsByPostV10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/rooms", "application/vnd.hedtech.integration.room-availability.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/rooms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("QueryAvailableRoomsByPost4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Rooms_GetRooms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rooms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rooms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmRooms4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Rooms_GetHedmRoomByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/rooms/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rooms/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmRoomById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Rooms_DeleteRoom_4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/rooms/{id}", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("rooms/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRoom", routeData.Values["Action"]);
        }

        #endregion Rooms

        #region Rooms-Minimum

        [TestMethod]
        public void Route_Rooms_QueryRoomsMinimumByPost_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/rooms", "application/vnd.hedtech.integration.room-minimum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/rooms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Rooms", routeData.Values["Controller"]);
            Assert.AreEqual("QueryRoomsMinimumByPostAsync", routeData.Values["Action"]);
        }
        #endregion 

        #region RoomCharacteristcs

        [TestMethod]
        public void DefaultRoute_RoomCharacteristic_GetRoomCharacteristics()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-characteristics");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_GetRoomCharacteristics_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-characteristics", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_GetRoomCharacteristics_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-characteristics", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_RoomCharacteristic_GetRoomCharacteristicById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-characteristics/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomCharacteristicByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_GetRoomCharacteristicById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-characteristics/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomCharacteristicByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_GetRoomCharacteristicById_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-characteristics/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomCharacteristicByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_PutRoomCharacteristic_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/room-characteristics/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PutRoomCharacteristicAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_PutRoomCharacteristic_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/room-characteristics/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PutRoomCharacteristicAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_PostRoomCharacteristics_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/room-characteristics", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PostRoomCharacteristicAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomCharacteristic_PostRoomCharacteristics_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/room-characteristics", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PostRoomCharacteristicAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_RoomCharacteristic_DeleteRoomCharacteristic()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/room-characteristics/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-characteristics/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRoomCharacteristicAsync", routeData.Values["Action"]);
        }

        #endregion

        #region RoommateCharacteristics

        [TestMethod]
        public void Default_Route_RoommateCharacteristics()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roommate-characteristics");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoommateCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoommateCharacteristics_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roommate-characteristics", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoommateCharacteristics_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roommate-characteristics", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoommateCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoommateCharacteristicsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roommate-characteristics/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoommateCharacteristicsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoommateCharacteristicsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roommate-characteristics/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoommateCharacteristicsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/roommate-characteristics/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoommateCharacteristicsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_RoommateCharacteristics_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/roommate-characteristics/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PutRoommateCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoommateCharacteristics_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/roommate-characteristics", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("PostRoommateCharacteristicsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoommateCharacteristics_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/roommate-characteristics/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("roommate-characteristics/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoommateCharacteristics", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRoommateCharacteristicsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region RoomRates

        [TestMethod]
        public void Default_Route_RoomRates()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-rates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoomRates_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-rates", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoomRates_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-rates", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoomRatesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-rates/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomRatesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoomRatesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-rates/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomRatesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-rates/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomRatesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_RoomRates_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/room-rates/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("PutRoomRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomRates_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/room-rates", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("PostRoomRatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoomRates_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/room-rates/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-rates/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomRates", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRoomRatesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Room-Types

        [TestMethod]
        public void Default_Route_GetRoomTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoomTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoomTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetRoomTypeById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetRoomTypeById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomTypes_GetRoomTypeById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/room-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetRoomTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomTypes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/room-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutRoomType", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_RoomTypes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/room-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostRoomType", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_RoomTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/room-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("room-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("RoomTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteRoomType", routeData.Values["Action"]);
        }

        #endregion RoomTypes

        #region Schools

        [TestMethod]
        public void DefaultRoute_Schools_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/schools");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("schools", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Schools", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion Schools

        #region SectionAttendances

        [TestMethod]
        public void DefaultRoute_SectionAttendances_PutSectionAttendances()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-attendances");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-attendances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionAttendances", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionAttendances2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PutSectionAttendances2Async_V2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-attendances", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-attendances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionAttendances", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionAttendances2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_PutSectionAttendancesAsync_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-attendances", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-attendances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionAttendances", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionAttendancesAsync", routeData.Values["Action"]);
        }

        #endregion SectionAttendances

        #region SectionDescriptionTypes

        [TestMethod]
        public void Default_Route_SectionDescriptionTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-description-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionDescriptionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionDescriptionTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-description-types", "application/vnd.hedtech.integration.v31+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionDescriptionTypes_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-description-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionDescriptionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionDescriptionTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-description-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionDescriptionTypeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionDescriptionTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-description-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionDescriptionTypeByGuid_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-description-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionDescriptionTypeByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_SectionDescriptionTypes_Put_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-description-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionDescriptionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionDescriptionTypes_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-description-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionDescriptionTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionDescriptionTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-description-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-description-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionDescriptionTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionDescriptionTypesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionGradeTypes

        [TestMethod]
        public void Route_SectionGradeTypes_GetSectionGradeTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-grade-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionGradeTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SectionGradeTypes_GetSectionGradeTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-grade-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionGradeTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionGradeTypes_GetSectionGradeTypesById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-grade-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionGradeTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SectionGradeTypes_GetSectionGradeTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-grade-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionGradeTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionGradeTypes_PostSectionGradeTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-grade-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionGradeTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionGradeTypes_PutSectionGradeTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-grade-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionGradeTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionGradeTypes_DeleteSectionGradeTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-grade-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-grade-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionGradeTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionGradeTypesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region SectionRegistrations

        #region V16.0.0

        [TestMethod]
        public void DefaultRoute_SectionRegistrations_GetSectionRegistrations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SectionRegistrations_GetSectionRegistrations_Filter()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrations3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationsByGuid_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionRegistrationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionRegistrations_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrations3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_Put_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-registrations/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionRegistrations3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_Post_V1600()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-registrations", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionRegistrations3Async", routeData.Values["Action"]);
        }

        #endregion V16.0.0



        [TestMethod]
        public void SectionRegistrations_GetSectionRegistrations_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_GetSectionRegistrations_Filter_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_PutSectionRegistrations_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-registrations/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionRegistrationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_PostSectionRegistrations_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-registrations", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionRegistrationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrations_DeleteSectionRegistrations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-registrations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionRegistrationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region SectionRegistrationsGradeOptions

        [TestMethod]
        public void Route_GetSectionRegistrationsGradeOptions_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations", "application/vnd.hedtech.integration.section-registrations-grade-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationsGradeOptions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationsGradeOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationsGradeOptionsByGuid_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registrations/guid", "application/vnd.hedtech.integration.section-registrations-grade-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationsGradeOptions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationsGradeOptionsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_SectionRegistrationsGradeOptions_Put_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-registrations/guid", "application/vnd.hedtech.integration.section-registrations-grade-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationsGradeOptions", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionRegistrationsGradeOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationsGradeOptions_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-registrations", "application/vnd.hedtech.integration.section-registrations-grade-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationsGradeOptions", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionRegistrationsGradeOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionRegistrationsGradeOptions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-registrations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registrations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionRegistrationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionRegistrationStatuses

        [TestMethod]
        public void Route_SectionRegistrationStatuses_GetSectionRegistrationStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registration-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationStatuses2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_DefaultGetSectionRegistrationStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registration-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationStatuses3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_GetSectionRegistrationStatusesById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registration-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationStatusById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_DefaultGetSectionRegistrationStatusesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-registration-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRegistrationStatusById3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_PostSectionRegistrationStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-registration-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionRegistrationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_PostSectionRegistrationStatuses_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-registration-statuses", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionRegistrationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_PutSectionRegistrationStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-registration-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionRegistrationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_PutSectionRegistrationStatuses_8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-registration-statuses/id", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionRegistrationStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionRegistrationStatuses_DeleteSectionRegistrationStatuses_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-registration-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-registration-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionRegistrationStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionRegistrationStatusesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Sections

        #region Non-Ethos routes

        [TestMethod]
        public void Route_Sections_Get_4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSection4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Get_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSection3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Get_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSection2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionAsync", routeData.Values["Action"]);
        }


        #endregion

        #region Sections Default Routes

        [TestMethod]
        public void Default_Route_Sections()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSections6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionByGuid6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Sections_DeleteSection()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sections/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmSectionByGuid2Async", routeData.Values["Action"]);
        }

        #endregion

        #region Sections v16

        [TestMethod]
        public void Route_GetSections_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSections6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsByGuid_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionByGuid6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Put_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSection6Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Post_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSection6Async", routeData.Values["Action"]);
        }

        #endregion

        #region Sections v11

        [TestMethod]
        public void Route_GetSections_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSections5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionByGuid5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSection5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSection5Async", routeData.Values["Action"]);
        }

        #endregion

        #region Previous versions

        [TestMethod]
        public void Route_Sections_QuerySectionsByPost_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsByPostAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Sections_QuerySectionsByPost2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsByPost2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_QuerySectionsByPost3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsByPost3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_QuerySectionsByPost4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsByPost4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_QueryByPost()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsByPost4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PostSection_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSection2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_Post_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_GetSectionByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_GetSectionByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_GetSections_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSections2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_GetSections_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PutSection_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSection2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PutSection_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_GetSection_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Sections_GetSection2_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSection2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Sections_PutCollectionOfStudentGrades()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/sectionId/grades", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionOfStudentGradesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PutCollectionOfStudentGrades2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/sectionId/grades", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionOfStudentGrades2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PutCollectionOfStudentGrades3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/sectionId/grades", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionOfStudentGrades3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PutCollectionOfStudentGrades4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/sectionId/grades", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionOfStudentGrades4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PutIlpCollectionOfStudentGrades1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/sectionId/grades", _mediaTypeHeaderIlpVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutIlpCollectionOfStudentGrades1Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_PutCollectionOfStudentGrades()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/sectionId/grades");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PutCollectionOfStudentGrades5Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Sections_GetSectionRoster_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/roster", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/roster", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRosterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_GetSectionRoster()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/roster");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/roster", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionRoster2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Sections_GetSections_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections?sectionIds=sectionIds", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_QuerySectionRegistrationDates()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections/registration-dates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections/registration-dates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionRegistrationDatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_PutSectionBook()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-textbooks");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-textbooks", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTextbooks", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateSectionBookAsync", routeData.Values["Action"]);
        }

        #endregion Previous versions

        #endregion Sections

        #region SectionCensusCertification
        [TestMethod]
        public void DefaultRoute_Sections_PostSectionCensusCertification()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections/sectionId/certify-census");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/certify-census", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionCensusCertificationAsync", routeData.Values["Action"]);
        }
        #endregion

        #region sectionEventsICal
        [TestMethod]
        public void Route_Sections_QuerySectionEventsICal()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections/section-events-ical");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections/section-events-ical", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionEventsICalAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionsMaximum

        [TestMethod]
        public void Route_GetSectionsMaximum_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.maximum.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximum_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionsMaximum2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximum_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.maximum.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionsMaximum3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximum_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.maximum.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionsMaximum4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximum_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections", "application/vnd.hedtech.integration.sections-maximum.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionsMaximum5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_GetSectionMaximumById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.maximum.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximumById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionMaximumByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximumById_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.maximum.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionMaximumByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximumById_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.maximum.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionMaximumByGuid4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionsMaximumById_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/id", "application/vnd.hedtech.integration.sections-maximum.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSectionMaximumByGuid5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/id", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/id", "application/vnd.hedtech.integration.maximum.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/id", "application/vnd.hedtech.integration.maximum.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Put_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sections/id", "application/vnd.hedtech.integration.sections-maximum.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PutHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.maximum.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.maximum.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Post_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections", "application/vnd.hedtech.integration.sections-maximum.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("PostHedmSectionMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Delete_v6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sections/id", "application/vnd.hedtech.integration.maximum.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmSectionMaximumByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Delete_v8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sections/id", "application/vnd.hedtech.integration.maximum.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmSectionMaximumByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Delete_v11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sections/id", "application/vnd.hedtech.integration.maximum.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmSectionMaximumByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionsMaximum_Delete_v16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sections/id", "application/vnd.hedtech.integration.sections-maximum.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionsMaximum", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteHedmSectionMaximumByGuidAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionCrosslists

        [TestMethod]
        public void DefaultRoute_GetSectionCrosslists()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-crosslists");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("GetDataModelSectionCrosslistsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionCrosslists_GetSectionCrosslists_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-crosslists", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("GetDataModelSectionCrosslistsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SectionCrosslists_GetSectionCrosslistsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-crosslists/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("GetDataModelSectionCrosslistsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionCrosslists_GetSectionCrosslistsById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-crosslists/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("GetDataModelSectionCrosslistsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionCrosslist_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-crosslists/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("PutDataModelSectionCrosslistsAsync", routeData.Values["Action"]);
        }

        public void Route_SectionCrosslist_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-crosslists", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("PostDataModelSectionCrosslistsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SectionCrosslist_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-crosslists/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-crosslists/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionCrosslists", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteDataModelSectionCrosslistsByGuidAsync", routeData.Values["Action"]);
        }

        #endregion SectionCrosslists

        #region SectionInstructors

        [TestMethod]
        public void Default_Route_SectionInstructors()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-instructors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionInstructors_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-instructors", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionInstructors_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-instructors", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionInstructorsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-instructors/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionInstructorsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionInstructorsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-instructors/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionInstructorsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-instructors/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionInstructorsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_SectionInstructors_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-instructors/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionInstructors_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-instructors", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionInstructorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionInstructors_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-instructors/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-instructors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionInstructors", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionInstructorsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionMeetingInstances

        [TestMethod]
        public void DefaultRoute_sectionMeetingInstances_GetSectionMeetingInstancesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/section-meeting-instances");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/section-meeting-instances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionMeetingInstancesAsync", routeData.Values["Action"]);
        }
        #endregion SectionMeetingInstances

        #region SectionPermission

        [TestMethod]
        public void DefaultRoute_sectionPermission_GetSectionPermissionsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/section-permission");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/section-permission", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionPermissions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionPermissionAsync", routeData.Values["Action"]);
        }
        #endregion SectionPermission

        #region SectionStatuses

        [TestMethod]
        public void Default_Route_SectionStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionStatuses_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-statuses", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-statuses/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionStatusesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-statuses/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_SectionStatuses_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-statuses/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionStatuses_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-statuses", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionTitleTypes

        [TestMethod]
        public void Default_Route_SectionTitleTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-title-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionTitleTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionTitleTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-title-types", "application/vnd.hedtech.integration.v31+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSectionTitleTypes_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-title-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionTitleTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionTitleTypesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-title-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionTitleTypeByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionTitleTypesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-title-types/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionTitleTypeByGuid_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-title-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionTitleTypeByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_SectionTitleTypes_Put_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/section-title-types/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutSectionTitleTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SectionTitleTypes_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/section-title-types", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionTitleTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SectionTitleTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/section-title-types/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-title-types/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTitleTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSectionTitleTypeAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SectionTransferStatuses

        [TestMethod]
        public void DefaultRoute_SectionTransferStatuses_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/section-transfer-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("section-transfer-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SectionTransferStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion SectionTransferStatuses

        #region SectionGradingComplete

        [TestMethod]
        public void DefaultRoute_Sections_GetMidtermSectionGradingComplete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/midterm-grading-complete");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/midterm-grading-complete", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionMidtermGradingCompleteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_GetMidtermSectionGradingComplete_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/midterm-grading-complete", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/midterm-grading-complete", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionMidtermGradingCompleteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_PostMidtermSectionGradingComplete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections/sectionId/midterm-grading-complete");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/midterm-grading-complete", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionMidtermGradingCompleteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PostMidtermSectionGradingComplete_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections/sectionId/midterm-grading-complete", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/midterm-grading-complete", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionMidtermGradingCompleteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sections_PostSectionSearch()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections/search?pageSize=1&pageIndex=1");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionSearch2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_PostSectionSearch_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sections/search?pageSize=1&pageIndex=1", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/search", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("PostSectionSearchAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Section Seats
        [TestMethod]
        public void DefaultRoute_Sections_QuerySectionsSeatsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections-seats");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections-seats", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsSeatsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sections_QuerySectionsSeatsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/sections-seats", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/sections-seats", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sections", routeData.Values["Controller"]);
            Assert.AreEqual("QuerySectionsSeatsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Session

        [TestMethod]
        public void DefaultRoute_Session_PostNewPassword()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/change-password");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/change-password", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostNewPasswordAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Session_PostLoginAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/login", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/login", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostLoginAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Session_PostLogin2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/login");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/login", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostLogin2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Session_PostLogoutAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/logout");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/logout", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostLogoutAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Session_PostProxyLoginAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/proxy-login", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/proxy-login", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostProxyLoginAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Session_PostProxyLogin2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/proxy-login");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/proxy-login", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostProxyLogin2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Session_PostTokenAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/session/token");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/token", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PostTokenAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Session_PutProxyAccessAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/session/proxy-subjects");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/proxy-subjects", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PutSessionProxySubjectsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Session_PutSyncAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/session/sync");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session/sync", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Session", routeData.Values["Controller"]);
            Assert.AreEqual("PutSyncAsync", routeData.Values["Action"]);
        }

        #endregion Session

        #region SessionCycles

        [TestMethod]
        public void DefaultRoute_SessionCycles_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/session-cycles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("session-cycles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SessionCycles", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion

        #region ShippingMethods

        [TestMethod]
        public void Default_Route_ShippingMethods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/shipping-methods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetShippingMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetShippingMethods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/shipping-methods", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetShippingMethods_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/shipping-methods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetShippingMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ShippingMethodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/shipping-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetShippingMethodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ShippingMethodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/shipping-methods/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ShippingMethodsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/shipping-methods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetShippingMethodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ShippingMethods_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/shipping-methods/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PutShippingMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ShippingMethods_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/shipping-methods", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("PostShippingMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ShippingMethods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/shipping-methods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("shipping-methods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteShippingMethodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_ShippingMethods_GetShipViaCodesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-via-codes", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-via-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShippingMethods", routeData.Values["Controller"]);
            Assert.AreEqual("GetShipViaCodesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region ShipToDestinations

        [TestMethod]
        public void Default_Route_ShipToDestinations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-to-destinations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("GetShipToDestinationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetShipToDestinations_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-to-destinations", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetShipToDestinations_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-to-destinations", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("GetShipToDestinationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ShipToDestinationsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-to-destinations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("GetShipToDestinationsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ShipToDestinationsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-to-destinations/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ShipToDestinationsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/ship-to-destinations/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("GetShipToDestinationsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_ShipToDestinations_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/ship-to-destinations/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("PutShipToDestinationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_ShipToDestinations_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/ship-to-destinations", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("PostShipToDestinationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_ShipToDestinations_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/ship-to-destinations/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("ship-to-destinations/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShipToDestinations", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteShipToDestinationsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region ShoppingSheets

        [TestMethod]
        public void DefaultRoute_ShoppingSheets_GetShoppingSheets()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/shopping-sheets");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/shopping-sheets", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ShoppingSheets", routeData.Values["Controller"]);
            Assert.AreEqual("GetShoppingSheets3Async", routeData.Values["Action"]);
        }

        #endregion ShoppingSheets

        #region Sites

        [TestMethod]
        public void DefaultRoute_Sites_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sites");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSitesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sites_Get_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sites", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sites_GetHedmSitesAsync_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sites", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSitesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sites_GetHedmSiteByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sites/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSiteByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sites_GetHedmSiteByIdAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sites/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sites_GetHedmSiteByIdAsync_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sites/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("GetHedmSiteByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sites_PutSiteAsync_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sites/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("PutSiteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sites_PostSiteAsync_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sites", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("PostSiteAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sites_DeleteSiteAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sites/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sites/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sites", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSiteAsync", routeData.Values["Action"]);
        }

        #endregion Sites

        #region Social Media Types

        [TestMethod]
        public void DefaultRoute_GetSocialMediaTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/social-media-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSocialMediaTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SocialMediaTypes_GetSocialMediaTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/social-media-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSocialMediaTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SocialMediaTypes_GetSocialMediaTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/social-media-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSocialMediaTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SocialMediaTypes_GetSocialMediaTypesById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/social-media-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSocialMediaTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SocialMediaType_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/social-media-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutSocialMediaTypeAsync", routeData.Values["Action"]);
        }

        public void Route_SocialMediaType_Post_4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/social-media-types", "application/vnd.hedtech.integration.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostSocialMediaTypeAsync", routeData.Values["Action"]);
        }

        public void Route_SocialMediaType_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/social-media-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostSocialMediaTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SocialMediaType_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/social-media-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("social-media-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SocialMediaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSocialMediaTypeAsync", routeData.Values["Action"]);
        }

        #endregion Social Media Types

        #region SourceContext

        [TestMethod]
        public void DefaultRoute_GetSourceContext()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/source-contexts");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourceContextsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SourceContext_GetSourceContext_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/source-contexts", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SourceContext_GetSourceContext_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/source-contexts", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourceContextsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SourceContext_GetSourceContextById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/source-contexts/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourceContextsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SourceContext_GetSourceContextById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/source-contexts/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SourceContext_GetSourceContextById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/source-contexts/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourceContextsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SourceContext_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/source-contexts/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("PutSourceContextsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SourceContext_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/source-contexts", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("PostSourceContextsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_SourceContext_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/source-contexts/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("source-contexts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SourceContext", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSourceContextsAsync", routeData.Values["Action"]);
        }

        #endregion SourceContext

        #region Sources

        [TestMethod]
        public void DefaultRoute_GetSources()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sources");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sources_GetSources_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sources", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sources_GetSources_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sources", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sources_GetSourceById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sources/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourceByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sources_GetSourceById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sources/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sources_GetSourceById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sources/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("GetSourceByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sources_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/sources/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("PutSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Sources_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/sources", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("PostSourcesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Sources_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/sources/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sources/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Sources", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSourcesAsync", routeData.Values["Action"]);
        }

        #endregion Sources

        #region Specializations

        [TestMethod]
        public void DefaultRoute_Specializations_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/specializations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("specializations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Specializations", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Specializations

        #region SpecialNeeds

        [TestMethod]
        public void DefaultRoute_SpecialNeeds_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/special-needs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("special-needs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SpecialNeeds", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion SpecialNeeds

        #region Staff

        [TestMethod]
        public void DefaultRoute_Staff_GetStaffRestrictions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/staff/staffId/restrictions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("staff/{staffId}/restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Staff", routeData.Values["Controller"]);
            Assert.AreEqual("GetStaffRestrictions", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Staff_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/staff/staffId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("staff/{staffId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Staff", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Staff

        #region States

        [TestMethod]
        public void DefaultRoute_States_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/states");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("states", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("States", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentAcademicCredentials

        [TestMethod]
        public void Default_Route_StudentAcademicCredentials()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-credentials");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicCredentials_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-credentials", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicCredentials_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-credentials", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicCredentialsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-credentials/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicCredentialsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicCredentialsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-credentials/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicCredentialsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-credentials/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicCredentialsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentAcademicCredentials_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-credentials/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAcademicCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicCredentials_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-credentials", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAcademicCredentialsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicCredentials_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-academic-credentials/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-credentials/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicCredentials", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAcademicCredentialsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentAcademicPeriodProfiles

        [TestMethod]
        public void Default_Route_GetStudentAcademicPeriodProfiles2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-profiles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodProfiles2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriodProfiles2Async()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-profiles", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodProfiles2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriodProfilesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-profiles", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodProfilesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetStudentAcademicPeriodProfileByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-profiles/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodProfileByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriodProfileIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-profiles/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodProfileByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriodProfileIdAsync_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-profiles/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodProfileByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodProfile_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-period-profiles/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicPeriodProfilesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodProfile_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-period-profiles/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicPeriodProfilesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodProfile_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-period-profiles", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicPeriodProfilesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodProfile_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-period-profiles", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicPeriodProfilesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodProfile_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-academic-period-profiles/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-profiles/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodProfiles", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAcademicPeriodProfilesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentAcademicPeriods

        [TestMethod]
        public void Default_Route_StudentAcademicPeriods()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriods_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-periods", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriods_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-periods", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-periods/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-periods/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentAcademicPeriods_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-periods/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAcademicPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriods_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-periods", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAcademicPeriodsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriods_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-academic-periods/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-periods/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriods", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAcademicPeriodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentAcademicPeriodStatuses

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriodStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-statuses", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicPeriodStatuses_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-statuses", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-statuses/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodStatusesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-period-statuses/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPeriodStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentAcademicPeriodStatuses_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-period-statuses/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAcademicPeriodStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPeriodStatuses_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-period-statuses", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAcademicPeriodStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicPeriodStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-academic-period-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-period-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPeriodStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAcademicPeriodStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentAcademicPrograms

        [TestMethod]
        public void DefaultRoute_StudentAcademicPrograms_GetStudentAcademicPrograms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPrograms4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentAcademicPrograms_GetStudentAcademicProgramsByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgramsByGuid4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicPrograms_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicPrograms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgramsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicPrograms_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPrograms2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicPrograms_16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPrograms3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicPrograms_17_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs", "application/vnd.hedtech.integration.v17.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicPrograms4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicProgramsByGuidAsync_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicProgramsByGuidAsync_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgramsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicProgramsByGuidAsync_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgramsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicProgramsByGuidAsync_16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgramsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_GetStudentAcademicProgramsByGuidAsync_17_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v17.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicProgramsByGuid4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PutStudentAcademicPrograms_17_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v17.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicPrograms3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PutStudentAcademicPrograms_16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicPrograms3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PutStudentAcademicPrograms_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicPrograms2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PutStudentAcademicPrograms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicProgramsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PostStudentAcademicPrograms_17_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-programs", "application/vnd.hedtech.integration.v17.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicPrograms3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PostStudentAcademicPrograms_16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-programs", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicPrograms3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PostStudentAcademicPrograms_11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-programs", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicPrograms2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_PostStudentAcademicPrograms_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-programs", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicProgramsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentAcademicPrograms_DeleteStudentAcademicPrograms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-academic-programs/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAcademicProgramsAsync", routeData.Values["Action"]);
        }

        #endregion StudentAcademicPrograms

        #region StudentAcademicProgramsSubmissions

        [TestMethod]
        public void Route_StudentAcademicPrograms_Submissions_Put_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-programs/id", "application/vnd.hedtech.integration.v17.0.0+json",
                "application/vnd.hedtech.integration.student-academic-programs-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAcademicProgramsSubmissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_Post_Submissions_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-programs", "application/vnd.hedtech.integration.v17.0.0+json",
                "application/vnd.hedtech.integration.student-academic-programs-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicProgramsSubmissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicPrograms_Submissions_Unsupported()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-programs", "application/vnd.hedtech.integration.v17.0.0+json",
                "application/vnd.hedtech.integration.student-academic-programs-submissions.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        #endregion

        #region StudentAcademicProgramReplacements

        [TestMethod]
        public void Route_StudentAcademicPrograms_Post_Replacements_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-programs", "application/vnd.hedtech.integration.v17.0.0+json",
                "application/vnd.hedtech.integration.student-academic-programs-replacements.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentAcademicProgramsReplacementsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentAcademicStandings

        [TestMethod]
        public void Default_Route_StudentAcademicStandings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-standings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicStandingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicStandings_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-standings", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAcademicStandings_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-standings", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicStandingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicStandingsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-standings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicStandingsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicStandingsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-standings/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicStandingsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-academic-standings/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicStandingsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentAcademicStandings_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-academic-standings/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAcademicStandingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAcademicStandings_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-academic-standings", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAcademicStandingsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAcademicStandings_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-academic-standings/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-academic-standings/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAcademicStandings", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAcademicStandingsAsync", routeData.Values["Action"]);
        }
        #endregion       

        #region StudentAdvisorRelationships

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationships_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAdvisorRelationships_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAdvisorRelationships_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationshipsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationshipsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAdvisorRelationshipsByGuid_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentAdvisorRelationships_Put_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-advisor-relationships/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAdvisorRelationships_Post_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-advisor-relationships", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationships_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-advisor-relationships/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationships()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAdvisorRelationships_UnsupportedVersion_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAdvisorRelationships_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationshipsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationshipsByGuid_UnsupportedVersion_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAdvisorRelationshipsByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-advisor-relationships/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAdvisorRelationshipsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentAdvisorRelationships_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-advisor-relationships/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAdvisorRelationships_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-advisor-relationships", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAdvisorRelationships_Delete_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-advisor-relationships/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-advisor-relationships/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAdvisorRelationships", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAdvisorRelationshipsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentAffiliations

        [TestMethod]
        public void DefaultRoute_StudentAffiliations_QueryStudentAffiliations()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-affiliations");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-affiliations", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAffiliations", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentAffiliationsAsync", routeData.Values["Action"]);
        }

        #endregion StudentAffiliations

        #region StudentAttendances

        [TestMethod]
        public void DefaultRoute_StudentAttendances_QueryStudentAttendances()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-attendances");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-attendances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAttendance", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentAttendancesAsync", routeData.Values["Action"]);
        }

        public void DefaultRoute_StudentAttendances_PutStudentAttendances()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-attendances");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-attendances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAttendance", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAttendanceAsync", routeData.Values["Action"]);
        }
        #endregion StudentAttendances

        #region StudentSectionAttendances

        [TestMethod]
        public void DefaultRoute_StudentSectionAttendances_QueryStudentSectionAttendances()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-section-attendances");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-section-attendances", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentSectionAttendances", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentSectionAttendancesAsync", routeData.Values["Action"]);
        }


        #endregion StudentSectionAttendances

        #region StudentAptitudeAssessments

        [TestMethod]
        public void Default_Route_StudentAptitudeAssessments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessments3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAptitudeAssessments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAptitudeAssessments_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAptitudeAssessments_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessments2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentAptitudeAssessments_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessments3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAptitudeAssessmentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessmentsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAptitudeAssessmentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessmentsByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessmentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessmentsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessmentsByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessmentsByGuid_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAptitudeAssessmentsByGuid3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessments_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessments_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAptitudeAssessments2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessments_Put_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-aptitude-assessments/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAptitudeAssessments3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessments_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessments_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAptitudeAssessments2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAptitudeAssessments_Post_V16()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-aptitude-assessments", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAptitudeAssessments3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentAptitudeAssessments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-aptitude-assessments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-aptitude-assessments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAptitudeAssessments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentAptitudeAssessmentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentAwards

        [TestMethod]
        public void DefaultRoute_StudentAwards_QueryStudentAwardSummary()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-award-summary");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-award-summary", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentAwardSummary", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_GetAllStudentAwardsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/awards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_GetStudentAwardsForYearAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/awards/year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards/{year}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardsAsync", routeData.Values["Action"]);
        }


        //[TestMethod]
        //public void DefaultRoute_StudentAwards_GetStudentAwardsAsync()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/awards/year");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("students/{studentId}/awards/{year}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetStudentAwardsAsync", routeData.Values["Action"]);
        //}


        [TestMethod]
        public void DefaultRoute_StudentAwards_PostStudentAwards()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/awards/year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards/{year}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAwards", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_PutStudentAwardPackageAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/awards/year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards/{year}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAwardPackageAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_GetStudentAwardAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/awards/year/awardId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards/{year}/{awardId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_PostStudentAward()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/awards/year/awardId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards/{year}/{awardId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentAward", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_PutStudentAwardAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/awards/year/awardId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards/{year}/{awardId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentAwardAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwards_GetStudentAwardsForQyear()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/awards?year=year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardsAsync", routeData.Values["Action"]);
        }

        #endregion StudentAwards

        #region StudentAwardYears

        [TestMethod]
        public void DefaultRoute_StudentAwardYears_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-years");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardYears2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAwardYears_Get_1()
        {
            //This is an obsolete route
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/{studentId}/award-years", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardYears", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwardYear_UpdateAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/award-years");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAwardYear2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAwardYear_Update_1()
        {
            //This is an obsolete route
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/{studentId}/award-years", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-years", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentAwardYear", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentAwardYear_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/award-years/awardYear");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-years/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardYear2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentAwardYear_Get_1()
        {
            //This is an obsolete route
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/{studentId}/award-years/{awardYear}", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/award-years/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentAwardYears", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAwardYear", routeData.Values["Action"]);
        }

        #endregion StudentAwardYears

        #region StudentCharges

        [TestMethod]
        public void Default_Route_StudentCharges()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentChargesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentChargesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentChargesByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCharges_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCharges_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCharges_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync1", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentChargesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentChargesByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCharges_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-charges/guid", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCharges_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-charges", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentChargesByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync1", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentCharges_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-charges/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync1", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCharges_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-charges", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync1", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCharges_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentChargesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentChargesByGuid_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-charges/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentChargesByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCharges_Put_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-charges/guid", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateStudentChargesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCharges_Post_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-charges", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentChargesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentCharges_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-charges/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-charges/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCharges", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentClassifications

        [TestMethod]
        public void Default_Route_GetStudentClassificationsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentClassificationsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-classifications", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentClassificationsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetStudentClassificationByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-classifications/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentClassificationByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentClassificationByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-classifications/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentClassificationByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentClassification_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-classifications/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentClassificationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentClassification_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-classifications", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentClassificationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentClassification_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-classifications/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-classifications/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentClassificationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentCohorts

        [TestMethod]
        public void Default_Route_GetStudentCohortsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohorts");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCohortsAsync_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohorts", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCohortsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohorts", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Default_Route_GetStudentCohortByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohorts/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCohortByIdAsync_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohorts/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCohortByIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohorts/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCohorts_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-cohorts/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentCohortAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCohorts_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-cohorts/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentCohortAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCohorts_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-cohorts", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentCohortAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCohorts_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-cohorts", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentCohortAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentCohorts_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-cohorts/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohorts/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohorts", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentCohortAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentCohortAssignments

        [TestMethod]
        public void Default_Route_StudentCohortAssignments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohort-assignments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortAssignmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCohortAssignments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohort-assignments", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentCohortAssignments_v100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohort-assignments", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortAssignmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentCohortAssignmentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohort-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortAssignmentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentCohortAssignmentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohort-assignments/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCohortAssignmentsByGuid_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-cohort-assignments/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCohortAssignmentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentCohortAssignments_Put_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-cohort-assignments/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentCohortAssignmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentCohortAssignments_Post_V100()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-cohort-assignments", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentCohortAssignmentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentCohortAssignments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-cohort-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-cohort-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCohortAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentCohortAssignmentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentCourseTransfer

        [TestMethod]
        public void Default_StudentCourseTransfer_GetStudentCourseTransfersAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCourseTransfers2Async", routeData.Values["Action"]);
        }

        public void Route_StudentCourseTransfer_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_GetStudentCourseTransfersAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCourseTransfersAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_GetStudentCourseTransfersAsync_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCourseTransfers2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_StudentCourseTransfer_GetStudentCourseTransferByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCourseTransfer2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_GetStudentCourseTransferByGuidAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCourseTransferByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_GetStudentCourseTransferByGuidAsync_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-course-transfers/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentCourseTransfer2ByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_PutStudentCourseTransferAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-course-transfers/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentCourseTransferAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_PutStudentCourseTransferAsync_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-course-transfers/guid", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentCourseTransferAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_PostStudentCourseTransferAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-course-transfers", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentCourseTransferAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_PostStudentCourseTransferAsync_V13()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-course-transfers", "application/vnd.hedtech.integration.v13+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentCourseTransferAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentCourseTransfer_DeleteStudentCourseTransferAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-course-transfers/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-course-transfers/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentCourseTransfer", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentCourseTransferAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentDocuments

        [TestMethod]
        public void DefaultRoute_StudentDocuments_GetStudentDocumentsAsync()
        {
            //This is an obsolete route
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/documents");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/documents", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDocuments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentDocumentsAsync", routeData.Values["Action"]);
        }

        #endregion StudentDocuments

        #region StudentFinancialAidBudgetComponents

        [TestMethod]
        public void DefaultRoute_StudentFinancialAidBudgetComponents_GetStudentFinancialAidBudgetComponentsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/financial-aid-budget-components");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/financial-aid-budget-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidBudgetComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidBudgetComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentFinancialAidBudgetComponents_GetStudentBudgetComponentsForYearAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/financial-aid-budget-components/awardYear");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/financial-aid-budget-components/{awardYear}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidBudgetComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidBudgetComponentsForYearAsync", routeData.Values["Action"]);
        }

        #endregion StudentFinancialAidBudgetComponents

        #region StudentDefaultAwardPeriods

        [TestMethod]
        public void DefaultRoute_StudentDefaultAwardPeriod_GetStudentDefaultAwardPeriodsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/default-award-periods");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/default-award-periods", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentDefaultAwardPeriod", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentDefaultAwardPeriodsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentFinancialAidAwards

        [TestMethod]
        public void Default_Route_StudentFinancialAidAward()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidAward_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidAward_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("Get3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidAward_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidAward_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidAwardById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidAwardById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAwardById_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAwardById_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetById2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAwardById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAward_Put_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAward_Put_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAward_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-financial-aid-awards/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAward_Post_V1110()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAward_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidAward_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-financial-aid-awards", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidAward_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-financial-aid-awards/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidAwards", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentFinancialAidChecklists

        [TestMethod]
        public void DefaultRoute_StudentFinancialAidChecklists_GetAllStudentFinancialAidChecklistsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/financial-aid-checklists");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/financial-aid-checklists", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidChecklists", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllStudentFinancialAidChecklistsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentFinancialAidChecklists_GetStudentFinancialAidChecklistAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/financial-aid-checklists/year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/financial-aid-checklists/{year}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidChecklists", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidChecklistAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentFinancialAidChecklists_CreateStudentFinancialAidChecklistAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/financial-aid-checklists/year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/financial-aid-checklists/{year}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidChecklists", routeData.Values["Controller"]);
            Assert.AreEqual("CreateStudentFinancialAidChecklistAsync", routeData.Values["Action"]);
        }

        #endregion StudentFinancialAidChecklists

        #region StudentFinancialAidNeedSummaries

        [TestMethod]
        public void Default_Route_StudentFinancialAidNeedSummaries()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-need-summaries");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidNeedSummariesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidNeedSummaries_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-need-summaries", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentFinancialAidNeedSummaries_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-need-summaries", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidNeedSummariesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidNeedSummariesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-need-summaries/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidNeedSummariesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidNeedSummariesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-need-summaries/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidNeedSummariesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-financial-aid-need-summaries/id", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentFinancialAidNeedSummariesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentFinancialAidNeedSummaries_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-financial-aid-need-summaries/id", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentFinancialAidNeedSummaries_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-financial-aid-need-summaries", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentFinancialAidNeedSummaries_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-financial-aid-need-summaries/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-financial-aid-need-summaries/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentFinancialAidNeedSummaries", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentLoads

        [TestMethod]
        public void DefaultRoute_StudentLoads_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-loads");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-loads", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentLoads", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion StudentLoads

        #region StudentLoanLimitations

        [TestMethod]
        public void DefaultRoute_StudentLoanLimitations_GetStudentLoanLimitationsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/loan-limits");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/loan-limits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentLoanLimitations", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentLoanLimitationsAsync", routeData.Values["Action"]);
        }

        #endregion StudentLoanLimitations

        #region StudentLoanSummary

        [TestMethod]
        public void DefaultRoute_StudentLoanSummary_GetStudentLoanSummary()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/loan-summary");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/loan-summary", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentLoanSummary", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentLoanSummaryAsync", routeData.Values["Action"]);
        }

        #endregion StudentLoanSummary

        #region StudentNsldsInformation

        [TestMethod]
        public void DefaultRoute_StudentNsldsInformation_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/nslds-information");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/nslds-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentNsldsInformation", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentNsldsInformationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentOutsideAwards

        [TestMethod]
        public void DefaultRoute_OutsideAwards_CreateOutsideAwardAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/outside-awards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("outside-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OutsideAwards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateOutsideAwardAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_OutsideAwards_GetOutsideAwardsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/outside-awards/year");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/outside-awards/{year}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OutsideAwards", routeData.Values["Controller"]);
            Assert.AreEqual("GetOutsideAwardsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_OutsideAwards_DeleteOutsideAwardAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/students/studentId/outside-awards/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/outside-awards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OutsideAwards", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteOutsideAwardAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_OutsideAwards_UpdateOutsideAwardAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/outside-awards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("outside-awards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OutsideAwards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateOutsideAwardAsync", routeData.Values["Action"]);
        }


        #endregion

        #region StudentPayments

        [TestMethod]
        public void Default_Route_StudentPayment()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync3", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentPayments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentPayments_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentPayments_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentPayments_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync3", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentPaymentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync3", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentPaymentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentPaymentsByGuid_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentPaymentsByGuid_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments/id", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentPaymentsByGuid_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-payments/id", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("GetByIdAsync3", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentPayments_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-payments", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentPayments_Post_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-payments", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentPayments_Post_V16_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-payments", "application/vnd.hedtech.integration.v16.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("CreateAsync3", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentPayments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-payments/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-payments/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPayments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentPetitions

        [TestMethod]
        public void DefaultRoute_StudentPetitions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-petitions/studentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-petitions/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPetitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        public void DefaultRoute_StudentPetitions_PetitionId_SectionId_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-petitions/studentPetitionId/sectionId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-petitions/{studentPetitionId}/{sectionId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPetitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentPetitions_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-petitions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-petitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPetitions", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentPetitionAsync", routeData.Values["Action"]);
        }

        #endregion StudentPetitions

        #region StudentPetitionReasons

        [TestMethod]
        public void DefaultRoute_StudentPetitionReasons_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-petition-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-petition-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPetitionReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion StudentPetitionReasons

        #region StudentPrograms

        [TestMethod]
        public void DefaultRoute_StudentPrograms_QueryStudentPrograms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-programs");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentPrograms", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentProgramsAsync", routeData.Values["Action"]);
        }

        #endregion StudentPrograms

        #region StudentRegistrationEligibilities

        [TestMethod]
        public void Default_Route_StudentRegistrationEligibilities()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-registration-eligibilities");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRegistrationEligibilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentRegistrationEligibilities_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-registration-eligibilities", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]); ;
        }

        [TestMethod]
        public void Route_GetStudentRegistrationEligibilities_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-registration-eligibilities", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRegistrationEligibilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentRegistrationEligibilitiesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-registration-eligibilities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRegistrationEligibilitiesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentRegistrationEligibilitiesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-registration-eligibilities/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]); ;
        }

        [TestMethod]
        public void Route_StudentRegistrationEligibilitiesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-registration-eligibilities/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRegistrationEligibilitiesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentRegistrationEligibilities_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-registration-eligibilities/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentRegistrationEligibilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentRegistrationEligibilities_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-registration-eligibilities", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentRegistrationEligibilitiesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentRegistrationEligibilities_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-registration-eligibilities/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-registration-eligibilities/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRegistrationEligibilities", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentRegistrationEligibilitiesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentResidentialCategories

        [TestMethod]
        public void Default_Route_StudentResidentialCategories()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-residential-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentResidentialCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentResidentialCategories_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-residential-categories", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentResidentialCategories_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-residential-categories", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentResidentialCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentResidentialCategoriesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-residential-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentResidentialCategoriesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentResidentialCategoriesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-residential-categories/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentResidentialCategoriesByGuid_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-residential-categories/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentResidentialCategoriesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentResidentialCategories_Put_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-residential-categories/guid", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentResidentialCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentResidentialCategories_Post_V10()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-residential-categories", "application/vnd.hedtech.integration.v10+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentResidentialCategoriesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentResidentialCategories_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-residential-categories/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-residential-categories/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentResidentialCategories", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentResidentialCategoriesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Students

        [TestMethod]
        public void DefaultRoute_Students_PostStudentIds()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/query-student-ids");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/query-student-ids", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentIdsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_PostStudentRestrictionsQuery()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-restrictions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentRestrictionsQuery", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentsByGuid2Async", routeData.Values["Action"]);
        }

        public void DefaultRoute_Students_GetStudents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudents2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetStudent_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentsId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetStudent_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentsId", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetAcademicHistory_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/academic-credits?bestFit=bestFit&filter=filter&term=term", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicHistoryAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_GetAcademicHistory2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/academic-credits?bestFit=bestFit&filter=filter&term=term", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicHistory2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetAcademicHistory3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/academic-credits?bestFit=bestFit&filter=filter&term=term", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicHistory3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetAcademicHistory4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/academic-credits?bestFit=bestFit&filter=filter&term=term", _mediaTypeHeaderVersion4);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicHistory4Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_Students_GetAcademicHistory5()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/academic-credits?bestFit=bestFit&filter=filter&term=term");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-credits", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetAcademicHistory5Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetEmergencyInformation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/emergency-information");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetEmergencyInformationAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_PutEmergencyInformation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/emergency-information");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/emergency-information", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("PutEmergencyInformation", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_GetStudentPrograms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/programs?currentOnly=currentOnly");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/programs", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentPrograms2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_Register()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/students/studentId/register");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/register", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("RegisterAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetRegistrationEligibility_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/id/registration-eligibility", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{id}/registration-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationEligibilityAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetRegistrationEligibility_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/registration-eligibility", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/registration-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationEligibility2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Students_GetRegistrationEligibility_3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/registration-eligibility", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/registration-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationEligibility3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetRegistrationEligibility3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/registration-eligibility");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/registration-eligibility", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationEligibility3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_GetStudentRestrictions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/restrictions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRestrictions3Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Students_GetStudentRestrictions_v1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/restrictions", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRestrictionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Students_GetStudentRestrictions_v2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/restrictions", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRestrictionsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Students_GetStudentRestrictions_v3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/restrictions", _mediaTypeHeaderVersion3);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRestrictions3Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Students_GetTranscriptRestrictions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/transcript-restrictions", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/transcript-restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetTranscriptRestrictionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetTranscriptRestrictions2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/transcript-restrictions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/transcript-restrictions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetTranscriptRestrictions2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetUngradedTerms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/ungraded-terms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/ungraded-terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetUngradedTermsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_GetUnofficialTranscript()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/unofficial-transcript?transcriptGrouping=transcriptGrouping");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/unofficial-transcript", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetUnofficialTranscriptAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_PostSearchStudent()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students-query");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students-query", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("PostSearchStudentAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_PostTranscriptOrder()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/transcript-orders");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("transcript-orders", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("PostTranscriptOrderAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Students_GetTranscriptOrderStatus()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/transcript-orders/orderId/currentStatusCode");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("transcript-orders/{orderId}/{currentStatusCode}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetTranscriptOrderStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_QueryStudentByPost2_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentByPost2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_QueryStudentsById4_Post_4()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/students", "application/vnd.ellucian-batch.v4+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/students", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentsById4Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Students_GetStudentAcademicLevels()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/academic-levels");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/academic-levels", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Students", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentAcademicLevelsAsync", routeData.Values["Action"]);
        }
        #endregion Students

        #region StudentStandings

        [TestMethod]
        public void DefaultRoute_StudentStandings_QueryStudentStandings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-standings");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-standings", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStandings", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentStandingsAsync", routeData.Values["Action"]);
        }

        #endregion StudentStandings

        #region StudentStatements

        [TestMethod]
        public void DefaultRoute_StudentStatements_GetStudentStatement()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/account-holders/accountHolderId/statement/timeframeId?startDate=startDate&endDate=endDate");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("account-holders/{accountHolderId}/statement/{timeframeId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatementAsync", routeData.Values["Action"]);
        }

        #endregion StudentStatements

        #region StudentStatuses

        [TestMethod]
        public void Default_Route_GetStudentStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentStatuses_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentStatuses_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetStudentStatusesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentStatusesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentStatusesById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentStatusesById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-statuses/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentStatusByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentStatuses_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-statuses/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentStatuses_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-statuses/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentStatuses_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-statuses", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentStatuses_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-statuses", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-statuses/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-statuses/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentStatusAsync", routeData.Values["Action"]);
        }

        #endregion StudentStatuses

        #region StudentTags

        [TestMethod]
        public void Default_Route_StudentTags()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tags");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTags_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tags", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTags_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tags", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTagsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tags/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTagsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tags/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTagsByGuid_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tags/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentTags_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-tags/guid", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentTagAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTags_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-tags", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTagAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTags_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-tags/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tags/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTags", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentTagAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentTagAssignments
        [TestMethod]
        public void Default_Route_StudentTagAssignments()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tag-assignments");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagAssignmentsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_GetStudentTagAssignments_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tag-assignments", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_GetStudentTagAssignments_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tag-assignments", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagAssignmentsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Default_Route_StudentTagAssignmentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tag-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagAssignmentsByGuidAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Default_Route_StudentTagAssignmentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tag-assignments/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_StudentTagAssignmentsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-tag-assignments/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTagAssignmentsByGuidAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_StudentTagAssignments_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-tag-assignments/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentTagAssignmentsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Route_StudentTagAssignments_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-tag-assignments", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTagAssignmentsAsync", routeData.Values["Action"]);
        }
        [TestMethod]
        public void Default_Route_StudentTagAssignments_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-tag-assignments/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-tag-assignments/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTagAssignments", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentTagAssignmentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentTerms

        [TestMethod]
        public void DefaultRoute_StudentTerms_QueryStudentTerms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/student-terms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/student-terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTerms", routeData.Values["Controller"]);
            Assert.AreEqual("QueryStudentTermsAsync", routeData.Values["Action"]);
        }

        #endregion StudentTerms

        #region StudentTranscriptGrades

        [TestMethod]
        public void Default_Route_StudentTranscriptGrades()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptGradesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTranscriptGrades_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades", "application/vnd.hedtech.integration.vX+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTranscriptGrades_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptGradesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTranscriptGradesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptGradesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTranscriptGradesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTranscriptGradesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptGradesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_StudentTranscriptGrades_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-transcript-grades/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentTranscriptGradesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTranscriptGrades_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-transcript-grades", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTranscriptGradesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTranscriptGrades_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-transcript-grades/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGrades", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentTranscriptGradesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentTranscriptGradesOptions

        [TestMethod]
        public void Route_GetStudentTranscriptGradesOptions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades", "application/vnd.hedtech.integration.student-transcript-grades-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGradesOptions", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptGradesOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTranscriptGradesOptionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-transcript-grades/guid", "application/vnd.hedtech.integration.student-transcript-grades-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGradesOptions", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptGradesOptionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTranscriptGradesOptions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-transcript-grades", "application/vnd.hedtech.integration.student-transcript-grades-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGradesOptions", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTranscriptGradesOptionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTranscriptGradesOptions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-transcript-grades/guid", "application/vnd.hedtech.integration.student-transcript-grades-options.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-transcript-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTranscriptGradesOptions", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentTranscriptGradesOptionsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region StudentUnverifiedGradesSubmissions    

        //[TestMethod]
        //public void Route_StudentUnverifiedGradesSubmissions_Put_V1_0_0()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-unverified-grades/guid",
        //        "application/vnd.hedtech.integration.student-unverified-grades-submissions.v1.0.0+json",
        //            "application/vnd.hedtech.integration.v1.0.0+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("student-unverified-grades/{guid}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("StudentUnverifiedGradesSubmissions", routeData.Values["Controller"]);
        //    Assert.AreEqual("PutStudentUnverifiedGradesSubmissionsAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //public void Route_StudentUnverifiedGradesSubmissions_Post_V1_0_0()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-unverified-grades",
        //        "application/vnd.hedtech.integration.student-unverified-grades-submissions.v1.0.0+json",
        //        "application/vnd.hedtech.integration.v1.0.0+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("student-unverified-grades", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("StudentUnverifiedGradesSubmissions", routeData.Values["Controller"]);
        //    Assert.AreEqual("PostStudentUnverifiedGradesSubmissionsAsync", routeData.Values["Action"]);
        //}

        [TestMethod]
        public void Default_Route_StudentUnverifiedGradesSubmissions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-unverified-grades/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-unverified-grades/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentUnverifiedGrades", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentUnverifiedGradesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region StudentTypes

        [TestMethod]
        public void Route_StudentTypes_Get_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetStudentTypes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTypes_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTypes_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetStudentTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTypesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTypesById_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetStudentTypesById_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTypes_Put_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTypes_Put_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/student-types/id", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutStudentTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTypes_Post_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_StudentTypes_Post_V7()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/student-types", "application/vnd.hedtech.integration.v7+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_StudentTypes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/student-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteStudentTypeAsync", routeData.Values["Action"]);
        }

        #endregion StudentTypes

        #region StudentWaiverReasons

        [TestMethod]
        public void DefaultRoute_StudentWaiverReasons_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-waiver-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-waiver-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentWaiverReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion StudentWaiverReasons

        #region StudentWaivers

        [TestMethod]
        public void DefaultRoute_StudentWaivers_GetSectionStudentWaivers()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/sections/sectionId/student-waivers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("sections/{sectionId}/student-waivers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentWaivers", routeData.Values["Controller"]);
            Assert.AreEqual("GetSectionStudentWaiversAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentWaivers_PostStudentWaiver()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/student-waiver");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-waiver", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentWaivers", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentWaiverAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentWaivers_GetStudentWaivers()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/student-waivers");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-waivers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentWaivers", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentWaiversAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void StudentWaivers_GetStudentWaiver_UnSupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/student-waiver/studentWaiverId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-waiver/{studentWaiverId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentWaivers", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentWaiverAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentWaivers_GetStudentWaiver()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-waiver/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-waiver/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentWaivers", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentWaiver2Async", routeData.Values["Action"]);
        }

        #endregion StudentWaivers

        #region StudentRequests

        [TestMethod]
        public void DefaultRoute_StudentRequests_GetStudentTranscriptRequest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/student-transcript-request/requestId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/student-transcript-request/{requestId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptRequestAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentRequests_PostStudentTranscriptRequest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/student-transcript-request");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-transcript-request", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentTranscriptRequestAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentRequests_GetStudentEnrollmentRequest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/student-enrollment-request/requestId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/student-enrollment-request/{requestId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentEnrollmentRequestAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_StudentRequests_PostStudentEnrollmentRequest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/students/studentId/student-enrollment-request");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-enrollment-request", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("PostStudentEnrollmentRequestAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRequests_GetStudentEnrollmentRequests()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/student-enrollment-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-enrollment-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentEnrollmentRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRequests_GetStudentTranscriptRequests()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/student-transcript-requests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-transcript-requests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentTranscriptRequestsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRequests_GetStudentRequestFee()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/student-request/requestId/student-request-fees");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-request/{requestId}/student-request-fees", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRequests", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRequestFeeAsync", routeData.Values["Action"]);
        }
        #endregion StudentRequests

        #region Student Release Access

        [TestMethod]
        public void DefaultRoute_StudentRecordsRelease_GetStudentReleaseAccessCodesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/student-release-access-code");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("student-release-access-code", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRecordsRelease", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentReleaseAccessCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRecordsRelease_GetStudentRecordsReleaseConfigAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/student-records-release");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/student-records-release", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRecordsRelease", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRecordsReleaseConfigAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRecordsRelease_GetStudentRecordsReleaseInformation()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/{studentId}/student-records-release-info");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-records-release-info", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRecordsRelease", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRecordsReleaseInformationAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRecordsRelease_GetStudentRecordsReleaseDenyAccess()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/{studentId}/student-records-release-deny-access");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/student-records-release-deny-access", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRecordsRelease", routeData.Values["Controller"]);
            Assert.AreEqual("GetStudentRecordsReleaseDenyAccessAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_StudentRecordsRelease_DenyStudentRecordsReleaseAccess()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/deny-student-records-release-access");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("deny-student-records-release-access", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentRecordsRelease", routeData.Values["Controller"]);
            Assert.AreEqual("DenyStudentRecordsReleaseAccessAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Subjects

        [TestMethod]
        public void DefaultRoute_Subjects_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subjects");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subjects", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subjects", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubjects2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Subjects_GetSubjects_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subjects", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subjects", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subjects", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubjects2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Subjects_GetSubjectByGuid_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subjects/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subjects/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subjects", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubjectByGuid2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Subjects_PutV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/subjects/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subjects/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subjects", routeData.Values["Controller"]);
            Assert.AreEqual("PutSubject", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Subjects_PostV6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/subjects", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subjects", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subjects", routeData.Values["Controller"]);
            Assert.AreEqual("PostSubject", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Subjects_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/subjects/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subjects/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subjects", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSubject", routeData.Values["Action"]);
        }


        #endregion Subjects

        #region Subregions

        [TestMethod]
        public void Default_Route_Subregions()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSubregions_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregions", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSubregions_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregions", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SubregionsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SubregionsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregions/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SubregionsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregions/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_Subregions_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/subregions/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("PutSubregionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Subregions_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/subregions", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("PostSubregionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_Subregions_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/subregions/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregions/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Subregions", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSubregionsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region SubregionIsoCodes

        [TestMethod]
        public void Default_Route_SubregionIsoCodes()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregion-iso-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSubregionIsoCodes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregion-iso-codes", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetSubregionIsoCodes_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregion-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SubregionIsoCodesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregion-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionIsoCodesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SubregionIsoCodesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregion-iso-codes/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SubregionIsoCodesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/subregion-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetSubregionIsoCodesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_SubregionIsoCodes_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/subregion-iso-codes/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PutSubregionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_SubregionIsoCodes_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/subregion-iso-codes", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("PostSubregionIsoCodesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_SubregionIsoCodes_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/subregion-iso-codes/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("subregion-iso-codes/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("SubregionIsoCodes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteSubregionIsoCodesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Suffixes

        [TestMethod]
        public void DefaultRoute_Suffixes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/suffixes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("suffixes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Suffixes", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion Suffixes

        #region Tax Form Boxcodes

        [TestMethod]
        public void TaxFormBoxCodes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-boxcodes", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-boxcodes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormBoxCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllTaxFormBoxCodesAsync", routeData.Values["Action"]);
        }


        #endregion

        #region TaxForm Configuration

        [TestMethod]
        public void TaxFormConfiguration2_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/tax-forms/taxFormId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("configuration/tax-forms/{taxFormId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Configuration", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormConfiguration2Async", routeData.Values["Action"]);
        }

        //[TestMethod]
        //// WARNING: This is an obsolete route as of Api version 1.29.1. Use GetTaxFormConfiguration2 route.
        //public void TaxFormConfiguration_Get()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/configuration/tax-forms/taxFormId");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("configuration/tax-forms/{taxFormId}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("Configuration", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetTaxFormConfigurationAsync", routeData.Values["Action"]);
        //}
        #endregion

        #region Tax Form Consents

        [TestMethod]
        public void TaxFormConsent2_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-consents/personId/taxFormId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-consents/{personId}/{taxFormId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormConsents", routeData.Values["Controller"]);
            Assert.AreEqual("Get2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void TaxFormConsents2_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/tax-form-consents");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-consents", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormConsents", routeData.Values["Controller"]);
            Assert.AreEqual("Post2Async", routeData.Values["Action"]);
        }

        //[TestMethod]
        //// WARNING: This is an obsolete route as of Api version 1.29.1. Use GetTaxFormConsents2 route.        
        //public void TaxFormConsents_Get()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-consents/personId/taxFormId");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("tax-form-consents/{personId}/{taxFormId}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("TaxFormConsents", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        // WARNING: This is an obsolete route as of Api version 1.29.1. Use CreateTaxFormConsent2 route.        
        //public void TaxFormConsents_Post()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/tax-form-consents");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("tax-form-consents", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("TaxFormConsents", routeData.Values["Controller"]);
        //    Assert.AreEqual("PostAsync", routeData.Values["Action"]);
        //}

        #endregion

        #region Tax Form PDFs

        [TestMethod]
        public void GetTaxFormW2Pdf3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/formW2s/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/formW2s/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("GetW2TaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetTaxFormW2cPdf2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/formW2cs/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/formW2cs/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("GetW2cTaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetTaxForm1095cPdf3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/form1095cs/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/form1095cs/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("Get1095cTaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetT4TaxFormPdf2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/formT4s/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/formT4s/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("GetT4TaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Get1098TaxFormPdf3()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/form1098ts/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/form1098ts/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("Get1098TaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetT2202aTaxFormPdf2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/formT2202as/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/formT2202as/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("GetT2202aTaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetT4aTaxFormPdf2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/formT4as/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/formT4as/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("GetFormT4aPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Get1099MiscTaxFormPdf2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/form1099Miscs/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/form1099Miscs/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("Get1099MiscTaxFormPdf2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void TaxForm1099NecPdf()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/persons/personId/form1099Nec/recordId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("persons/{personId}/form1099Nec/{recordId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceTaxFormPdfs", routeData.Values["Controller"]);
            Assert.AreEqual("Get1099NecTaxFormPdfAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Tax Form Statements

        [TestMethod]
        public void GetW2TaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/FormW2");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/FormW2", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetW22Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Get1095CTaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/Form1095C");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/Form1095C", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("Get1095c2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetT4TaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/FormT4");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/FormT4", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("HumanResourcesTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetT42Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Get1098TaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/Form1098");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/Form1098", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("Get10982Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetT2202ATaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/FormT2202A");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/FormT2202A", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("StudentTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetT2202a2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void GetT4ATaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/FormT4A");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/FormT4A", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("GetT4a2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Get1099MiTaxFormStatements2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/Form1099MI");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/Form1099MI", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("Get1099Mi2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Get1099NecTaxFormStatements()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/Form1099NEC");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-statements/{personId}/Form1099NEC", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("ColleagueFinanceTaxFormStatements", routeData.Values["Controller"]);
            Assert.AreEqual("Get1099NecAsync", routeData.Values["Action"]);
        }

        #region OBSOLETE Tax Form Statements routes

        //[TestMethod]
        //// WARNING: This is an obsolete route as of Api version 1.29.1. Use GetW2TaxFormStatements3 route.   
        //public void GetW2TaxFormStatements()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/FormW2");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("tax-form-statements/{personId}/FormW2", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("HumanResourcesTaxFormStatements", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetW2Async", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //// WARNING: This is an obsolete route as of Api version 1.29.1. Use Get1095CTaxFormStatements2 route. 
        //public void Get1095CTaxFormStatements()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/Form1095C");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("tax-form-statements/{personId}/Form1095C", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("HumanResourcesTaxFormStatements", routeData.Values["Controller"]);
        //    Assert.AreEqual("Get1095cAsync", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //// WARNING: This is an obsolete route as of Api version 1.29.1. Use Get1098TaxFormStatements2 route.   
        //public void Get1098TaxFormStatements()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/Form1098");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("tax-form-statements/{personId}/Form1098", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("StudentTaxFormStatements", routeData.Values["Controller"]);
        //    Assert.AreEqual("Get1098Async", routeData.Values["Action"]);
        //}

        //[TestMethod]
        //// WARNING: This is an obsolete route as of Api version 1.14.   
        //public void GetTaxFormStatements()
        //{
        //    var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-statements/personId/taxFormId", "application/vnd.ellucian.v1+json");
        //    RouteData routeData = routes.GetRouteData(httpContextMock.Object);
        //    Assert.IsNotNull(routeData);
        //    Assert.AreEqual("tax-form-statements/{personId}/{taxFormId}", GetRouteTemplate(routeData.Route));
        //    Assert.AreEqual("TaxFormStatements", routeData.Values["Controller"]);
        //    Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        //}
        #endregion

        #endregion

        #region Tax Form Codes
        [TestMethod]
        public void DefaultRoute_TaxForms_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Tax Forms

        [TestMethod]
        public void Default_Route_TaxForms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-forms");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetTaxForms_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-forms", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetTaxForms_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-forms", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_TaxFormsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-forms/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_TaxFormsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-forms/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_TaxFormsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-forms/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_TaxForms_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/tax-forms/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("PutTaxFormsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_TaxForms_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/tax-forms", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("PostTaxFormsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_TaxForms_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/tax-forms/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-forms/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormsBase", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteTaxFormsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region TaxFormComponents

        [TestMethod]
        public void Default_Route_TaxFormComponents()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-components");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetTaxFormComponents_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-components", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetTaxFormComponents_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-components", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_TaxFormComponentsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-components/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormComponentsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_TaxFormComponentsByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-components/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_TaxFormComponentsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tax-form-components/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("GetTaxFormComponentsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_TaxFormComponents_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/tax-form-components/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("PutTaxFormComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_TaxFormComponents_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/tax-form-components", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("PostTaxFormComponentsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_TaxFormComponents_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/tax-form-components/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tax-form-components/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TaxFormComponents", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteTaxFormComponentsAsync", routeData.Values["Action"]);
        }
        #endregion

        #region Terms

        [TestMethod]
        public void DefaultRoute_Terms_GetPlanningTerms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/terms/planning");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("terms/planning", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Terms", routeData.Values["Controller"]);
            Assert.AreEqual("GetPlanningTermsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Terms_GetRegistrationTerms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/terms/registration");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("terms/registration", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Terms", routeData.Values["Controller"]);
            Assert.AreEqual("GetRegistrationTermsAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Terms_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/terms?id=id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Terms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Terms_GetAllTerms()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/terms?startsOnOrAfter=startsOnOrAfter");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("terms", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Terms", routeData.Values["Controller"]);
            Assert.AreEqual("GetAllTermsAsync", routeData.Values["Action"]);
        }

        #endregion Terms

        #region TestResults

        [TestMethod]
        public void Route_TestResults_QueryTestResults_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/test-results", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/test-results", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TestResults", routeData.Values["Controller"]);
            Assert.AreEqual("QueryTestResultsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TestResults_QueryTestResults_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/test-results");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/test-results", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TestResults", routeData.Values["Controller"]);
            Assert.AreEqual("QueryTestResults2Async", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_TestResults_Get_1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/test-results?type=type", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/test-results", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TestResults", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TestResults_Get_2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/students/studentId/test-results?type=type");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("students/{studentId}/test-results", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TestResults", routeData.Values["Controller"]);
            Assert.AreEqual("Get2Async", routeData.Values["Action"]);
        }

        #endregion TestResults

        #region Tests

        [TestMethod]
        public void DefaultRoute_Tests_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/tests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("tests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Tests", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion Tests

        #region TextDocuments

        [TestMethod]
        public void DefaultRoute_TextDocuments_GetTextDocumentAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/text-documents/documentId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("text-documents/{documentId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TextDocuments", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Timecards

        [TestMethod]
        public void DefaultRoute_Timecards_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecards2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Timecards_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecards?effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecards2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Timecard_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecards/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecard2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Timecard_V2_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/timecards", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("CreateTimecard2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Timecard_V3_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/timecards");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("BulkCreateTimecardsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Timecard_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/timecards/{id}");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateTimecard2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetTimecardsAssociatedWithLeaveRequestsAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecards-with-leaverequests");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards-with-leaverequests", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecardsAssociatedWithLeaveRequestsAsync", routeData.Values["Action"]);

        }

        [TestMethod]
        public void Default_Route_GetTimecardsForLeaveAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecards-for-leave");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards-for-leave", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Timecards", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecardsForLeaveAsync", routeData.Values["Action"]);
        }

        #endregion

        #region TimecardHistories
        [TestMethod]
        public void DefaultRoute_TimecardHistories_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecard-histories?startDate=startDate&endDate=endDate&effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecard-histories", GetRouteTemplate(routeData.Route));

            Assert.AreEqual("TimecardHistories", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecardHistories2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TimecardHistories_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecard-histories?startDate=startDate&endDate=endDate");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecard-histories", GetRouteTemplate(routeData.Route));

            Assert.AreEqual("TimecardHistories", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecardHistories2Async", routeData.Values["Action"]);
        }
        #endregion

        #region TimecardStatuses

        [TestMethod]
        public void DefaultRoute_TimecardStatus_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/timecards/{id}/timecard-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards/{id}/timecard-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TimecardStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("CreateTimecardStatusAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TimecardStatuses_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/timecard-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecard-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TimecardStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("CreateTimecardStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TimecardStatuses_GetByTimecardId()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecards/{id}/timecard-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecards/{id}/timecard-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TimecardStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimecardStatusesByTimecardIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TimecardStatuses_GetLatest()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecard-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecard-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TimecardStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetLatestTimecardStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_TimecardStatuses_GetLatestById()
        {

            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/timecard-statuses?effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("timecard-statuses", GetRouteTemplate(routeData.Route));

            Assert.AreEqual("TimecardStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetLatestTimecardStatusesAsync", routeData.Values["Action"]);
        }

        #endregion

        #region TimeEntryComments

        [TestMethod]
        public void DefaultRoute_TimeEntryComments_GetById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/time-entry-comments?effectivePersonId=effectivePersonId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("time-entry-comments", GetRouteTemplate(routeData.Route));

            Assert.AreEqual("TimeEntryComments", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimeEntryCommentsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region TimeManagementConfiguration

        [TestMethod]
        public void DefaultRoute_TimeManagementConfiguration_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/time-management-configuration");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("time-management-configuration", GetRouteTemplate(routeData.Route));

            Assert.AreEqual("TimeManagementConfiguration", routeData.Values["Controller"]);
            Assert.AreEqual("GetTimeManagementConfigurationAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Overtime

        [TestMethod]
        public void DefaultRoute_OvertimeCalculationDefinitions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/overtime-calculation-definitions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("overtime-calculation-definitions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("OvertimeCalculationDefinitions", routeData.Values["Controller"]);
            Assert.AreEqual("GetOvertimeCalculationDefinitionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_CalculateOvertime_Post_V2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/overtime", _mediaTypeHeaderVersion2);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/overtime", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Overtime", routeData.Values["Controller"]);
            Assert.AreEqual("QueryByPostOvertimes", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_CalculateOvertime_Post_V1()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/overtime", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/overtime", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Overtime", routeData.Values["Controller"]);
            Assert.AreEqual("QueryByPostOvertime", routeData.Values["Action"]);
        }

        #endregion

        #region TopicCodes

        [TestMethod]
        public void DefaultRoute_TopicCodes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/topic-codes");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("topic-codes", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TopicCodes", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion TopicCodes

        #region TranscriptCategories

        [TestMethod]
        public void DefaultRoute_TranscriptCategories_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/transcript-categories");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("transcript-categories", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TranscriptCategories", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion TranscriptCategories

        #region TranscriptGroupings

        [TestMethod]
        public void DefaultRoute_TranscriptGroupings_GetSelectableTranscriptGroupings()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/transcript-groupings/selectable");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("transcript-groupings/selectable", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("TranscriptGroupings", routeData.Values["Controller"]);
            Assert.AreEqual("GetSelectableTranscriptGroupingsAsync", routeData.Values["Action"]);
        }

        #endregion TranscriptGroupings

        #region Users

        [TestMethod]
        public void DefaultRoute_Users_GetUsers()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/users?q=q");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("GetUsers", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_GetSelfservicePreferenceAsync_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/users/personId/self-service-preferences/preferenceType");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{personId}/self-service-preferences/{preferenceType}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("GetSelfservicePreferenceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UpdateSelfservicePreferenceAsync_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/users/personId/self-service-preferences/preferenceType");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{personId}/self-service-preferences/{preferenceType}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateSelfservicePreferenceAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UserProxyPermissions_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/users/userId/proxy-permissions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{userId}/proxy-permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("PostUserProxyPermissionsV2Async", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UserProxyPermissions_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/users/userId/proxy-permissions");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{userId}/proxy-permissions", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("GetUserProxyPermissionsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UserProxySubjects_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/users/userId/proxy-subjects");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{userId}/proxy-subjects", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("GetUserProxySubjectsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UserProxyCandidate_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/users/userId/proxy-candidates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{userId}/proxy-candidates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("PostProxyCandidateAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UserProxyCandidates_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/users/userId/proxy-candidates");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/{userId}/proxy-candidates", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("GetUserProxyCandidatesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_UserProxyUser_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/users/proxy-users");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("users/proxy-users", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Users", routeData.Values["Controller"]);
            Assert.AreEqual("PostProxyUserAsync", routeData.Values["Action"]);
        }

        #endregion Users

        #region VendorAddressUsages

        [TestMethod]
        public void Default_Route_VendorAddressUsages()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-address-usages");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorAddressUsagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorAddressUsages_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-address-usages", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorAddressUsages_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-address-usages", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorAddressUsagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VendorAddressUsagesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-address-usages/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorAddressUsagesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VendorAddressUsagesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-address-usages/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorAddressUsagesByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-address-usages/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorAddressUsagesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_VendorAddressUsages_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendor-address-usages/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorAddressUsagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorAddressUsages_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendor-address-usages", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorAddressUsagesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VendorAddressUsages_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/vendor-address-usages/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-address-usages/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorAddressUsages", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVendorAddressUsagesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region VendorClassifications 

        [TestMethod]
        public void Default_Route_GetVendorClassifications()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-classifications");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorClassifications_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-classifications", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetVendorClassifications_V6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-classifications", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetVendorClassificationsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorClassificationsById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-classifications/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorClassificationsById_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-classifications/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorClassifications_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendor-classifications/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorClassifications_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendor-classifications", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_VendorClassifications_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/vendor-classifications/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-classifications/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorClassifications", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVendorTypeAsync", routeData.Values["Action"]);
        }

        #endregion VendorClassifications

        #region VendorHoldReasons

        [TestMethod]
        public void Default_Route_GetVendorHoldReasons()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-hold-reasons");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorHoldReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorHoldReasons_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-hold-reasons", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetVendorHoldReasons_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-hold-reasons", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorHoldReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetVendorHoldReasonsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-hold-reasons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorHoldReasonsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorHoldReasonsById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-hold-reasons/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorHoldReasonsById_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-hold-reasons/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorHoldReasonsByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorHoldReasons_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendor-hold-reasons/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorHoldReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorHoldReasons_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendor-hold-reasons", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorHoldReasonsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_VendorHoldReasons_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/vendor-hold-reasons/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-hold-reasons/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorHoldReasons", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVendorHoldReasonsAsync", routeData.Values["Action"]);
        }

        #endregion ResidencyTypes

        #region Vendors

        [TestMethod]
        public void Default_Route_GetVendors()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendors_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetVendors_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendors_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsAsync2", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetVendors_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_GetVendorsById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsByGuidAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorsById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorsById_V8()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorsById_V11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsByGuidAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorsById_V11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsByGuidAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Vendors_Put()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendors/guid", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Vendors_Put_v11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendors/guid", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Vendors_Put_v11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendors/guid", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Vendors_Post()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendors", "application/vnd.hedtech.integration.v8+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Vendors_Post_v11()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendors", "application/vnd.hedtech.integration.v11+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_Vendors_Post_v11_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendors", "application/vnd.hedtech.integration.v11.1.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorsAsync2", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Vendors_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/vendors/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVendorsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Vendors_QueryVendorsByPost()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/vendors");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("QueryVendorsByPostAsync", routeData.Values["Action"]);
        }



        [TestMethod]
        public void Default_Vendors_QueryVendorForVoucher()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/vendors-voucher");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/vendors-voucher", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("QueryVendorForVoucherAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Vendors_GetVendorDefaultTaxFormInfoAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/{vendorId}/default-taxform-info/?apType=apType");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{vendorId}/default-taxform-info", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorDefaultTaxFormInfoAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_GetVendorsMaximum_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors", "application/vnd.hedtech.integration.vendors-maximum.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorsMaximumById_V1_1_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendors/guid", "application/vnd.hedtech.integration.vendors-maximum.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorsMaximumByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorsMaximum_Post_v1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendors", "application/vnd.hedtech.integration.vendors-maximum.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorsMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorsMaximum_Put_v1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendors/guid", "application/vnd.hedtech.integration.vendors-maximum.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorsMaximumAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorsMaximum_Delete_v1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/vendors/guid", "application/vnd.hedtech.integration.vendors-maximum.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendors/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vendors", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVendorsMaximumAsync", routeData.Values["Action"]);
        }

        #endregion Vendors

        #region vendor-contacts
        [TestMethod]
        public void Default_Route_VendorContacts()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-contacts");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorContacts_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-contacts", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVendorContacts_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-contacts", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VendorContactsByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-contacts/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorContactsByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VendorContactsByGuid_NotAcceptedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-contacts/guid", "application/vnd.hedtech.integration.v0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("EthosApiBuilder", routeData.Values["Controller"]);
            Assert.AreEqual("GetAlternativeRouteOrNotAcceptable", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorContactsByGuid_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vendor-contacts/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("GetVendorContactsByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_VendorContacts_Put_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/vendor-contacts/guid", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("PutVendorContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VendorContacts_Post_V1_0_0()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vendor-contacts", "application/vnd.hedtech.integration.v1.0.0+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("PostVendorContactsAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VendorContacts_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/vendor-contacts/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vendor-contacts/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VendorContacts", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVendorContactsAsync", routeData.Values["Action"]);
        }

        #endregion

        #region vendor-contact-initiation-process
        // Commenting out for now.  Will eventually be released but not with Colleague Web API 1.28
        //[TestMethod]        
        //public void Route_VendorContactsInitiationProcess_Post_V1_0_0()
        //{
        //    var httpContextMock = CreateHttpContextMock( HttpMethod.Post, "~/vendor-contact-initiation-process", "application/vnd.hedtech.integration.v1.0.0+json" );
        //    RouteData routeData = routes.GetRouteData( httpContextMock.Object );
        //    Assert.IsNotNull( routeData );
        //    Assert.AreEqual( "vendor-contact-initiation-process", GetRouteTemplate( routeData.Route ) );
        //    Assert.AreEqual( "VendorContacts", routeData.Values[ "Controller" ] );
        //    Assert.AreEqual( "PostVendorContactInitiationProcessAsync", routeData.Values[ "Action" ] );
        //}

        #endregion

        #region Version

        [TestMethod]
        public void DefaultRoute_Version_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/version");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("version", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Version", routeData.Values["Controller"]);
            Assert.AreEqual("Get", routeData.Values["Action"]);
        }

        #endregion Version

        #region VeteranStatuses

        [TestMethod]
        public void Default_Route_VeteranStatuses()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/veteran-statuses");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetVeteranStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVeteranStatuses_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/veteran-statuses", "application/vnd.hedtech.integration.v1+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_GetVeteranStatuses_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/veteran-statuses", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetVeteranStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VeteranStatusesByGuid()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/veteran-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetVeteranStatusesByGuidAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VeteranStatusesByGuid_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/veteran-statuses/guid", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses", routeData.Values["Controller"]);
            Assert.AreEqual("guid", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VeteranStatusesByGuid_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/veteran-statuses/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("GetVeteranStatusesByGuidAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void Route_VeteranStatuses_Put_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/veteran-statuses/guid", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PutVeteranStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VeteranStatuses_Post_V9()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/veteran-statuses", "application/vnd.hedtech.integration.v9+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("PostVeteranStatusesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Default_Route_VeteranStatuses_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/veteran-statuses/guid");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("veteran-statuses/{guid}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VeteranStatuses", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVeteranStatusesAsync", routeData.Values["Action"]);
        }
        #endregion

        #region VisaTypes

        [TestMethod]
        public void DefaultRoute_VisaTypes_Get()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/visa-types");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetVisaTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VisaTypes_GetVisaTypes_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/visa-types", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types", routeData.Values["Controller"]);
            Assert.AreEqual("Index", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VisaTypes_GetVisaTypes_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/visa-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetVisaTypesAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_VisaTypes_GetVisaTypesById()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/visa-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetVisaTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VisaTypes_GetVisaTypesById_UnsupportedVersion()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/visa-types/id", "application/vnd.hedtech.integration.v2+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types", routeData.Values["Controller"]);
            Assert.AreEqual("id", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VisaTypes_GetVisaTypesById_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/visa-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("GetVisaTypeByIdAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VisaType_Put_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/visa-types/id", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PutVisaTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void Route_VisaType_Post_6()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/visa-types", "application/vnd.hedtech.integration.v6+json");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("PostVisaTypeAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_VisaType_Delete()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Delete, "~/visa-types/id");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("visa-types/{id}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("VisaTypes", routeData.Values["Controller"]);
            Assert.AreEqual("DeleteVisaTypeAsync", routeData.Values["Action"]);
        }

        #endregion VisaTypes

        #region Vouchers

        [TestMethod]
        public void DefaultRoute_Vouchers_GetVoucher()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vouchers/voucherId", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vouchers/{voucherId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("GetVoucherAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Vouchers_GetVoucher2()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vouchers/voucherId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vouchers/{voucherId}", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("GetVoucher2Async", routeData.Values["Action"]);
        }
        [TestMethod]
        public void DefaultRoute_Vouchers_GetVoucherSummaryByPersonIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/voucher-summaries?personId=personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("voucher-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("GetVoucherSummariesAsync", routeData.Values["Action"]);
        }


        [TestMethod]
        public void DefaultRoute_Vouchers_PostVouchers()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vouchers", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vouchers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("PostVoucherAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Vouchers_GetReimbursePersonAddressForVoucherAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/reimburse-person-address", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("reimburse-person-address", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("GetReimbursePersonAddressForVoucherAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Vouchers_VoidVoucherAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/vouchers-void", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vouchers-void", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("VoidVoucherAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Vouchers_GetVouchersByInvoiceNoAndVendorIdAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/vouchers?vendorId=vendorId&invoiceNo=invoiceNo");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("vouchers", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("GetVouchersByVendorAndInvoiceNoAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        public void DefaultRoute_Vouchers_QueryVoucherSummariesAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/qapi/voucher-summaries", _mediaTypeHeaderVersion1);
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("qapi/voucher-summaries", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Vouchers", routeData.Values["Controller"]);
            Assert.AreEqual("QueryVoucherSummariesAsync", routeData.Values["Action"]);
        }
        #endregion Vouchers

        #region WorkTasks

        [TestMethod]
        public void DefaultRoute_WorkTasks_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/work-tasks?personId=personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("work-tasks", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("WorkTasks", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        [Ignore]
        public void Message_UpdateAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Put, "~/message?personId=personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("message", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Message", routeData.Values["Controller"]);
            Assert.AreEqual("UpdateMessageWorklistAsync", routeData.Values["Action"]);
        }

        [TestMethod]
        [Ignore]
        public void Message_CreateAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Post, "~/message?personId=personId");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("message", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("Message", routeData.Values["Controller"]);
            Assert.AreEqual("CreateMessageWorklistAsync", routeData.Values["Action"]);
        }

        #endregion

        #region YearlyCycles

        [TestMethod]
        public void DefaultRoute_YearlyCycles_GetAsync()
        {
            var httpContextMock = CreateHttpContextMock(HttpMethod.Get, "~/yearly-cycles");
            RouteData routeData = routes.GetRouteData(httpContextMock.Object);
            Assert.IsNotNull(routeData);
            Assert.AreEqual("yearly-cycles", GetRouteTemplate(routeData.Route));
            Assert.AreEqual("YearlyCycles", routeData.Values["Controller"]);
            Assert.AreEqual("GetAsync", routeData.Values["Action"]);
        }

        #endregion

        #region Helper methods
        // Helper methods

        private string GetRouteTemplate(RouteBase route)
        {
            if (route != null)
            {
                try
                {
                    return (route as Route).Url.TrimEnd('/');
                }
                catch (Exception)
                {
                }
            }
            return string.Empty;
        }

        private Mock<HttpContextBase> CreateHttpContextMock(HttpMethod method, string testUrl, string mediaType = null, string contentType = null)
        {
            var httpContextMock = new Mock<HttpContextBase>();
            httpContextMock.Setup(c => c.Request.Headers).Returns(new NameValueCollection());

            // url
            var queryParms = new NameValueCollection();
            if (!string.IsNullOrEmpty(testUrl))
            {
                if (testUrl.Contains("?"))
                {
                    string[] pathAndQuery = testUrl.Split('?');
                    testUrl = pathAndQuery[0];
                    queryParms = HttpUtility.ParseQueryString(pathAndQuery[1]);
                }
            }

            // media type
            if (!string.IsNullOrEmpty(mediaType))
            {
                httpContextMock.Setup(c => c.Request.AcceptTypes).Returns(new string[] { mediaType });
            }

            // content type
            if (!string.IsNullOrEmpty(contentType))
            {
                httpContextMock.Setup(c => c.Request.ContentType).Returns(contentType);
            }

            httpContextMock.Setup(c => c.Request.AppRelativeCurrentExecutionFilePath).Returns(testUrl);
            httpContextMock.Setup(c => c.Request.QueryString).Returns(queryParms);
            httpContextMock.Setup(c => c.Request.HttpMethod).Returns(method.ToString());
            return httpContextMock;
        }

        private const string _mediaTypeHeaderVersion1 = "application/vnd.ellucian.v1+json";
        private const string _mediaTypeHeaderVersion2 = "application/vnd.ellucian.v2+json";
        private const string _mediaTypeHeaderVersion3 = "application/vnd.ellucian.v3+json";
        private const string _mediaTypeHeaderVersion4 = "application/vnd.ellucian.v4+json";
        private const string _mediaTypeHeaderVersion5 = "application/vnd.ellucian.v5+json";
        private const string _mediaTypeHeaderVersion6 = "application/vnd.ellucian.v6+json";
        private const string _mediaTypeHeaderVersion7 = "application/vnd.ellucian.v7+json";
        private const string _mediaTypeHeaderVersion8 = "application/vnd.ellucian.v8+json";

        private const string _mediaTypeHeaderPdfVersion1 = "application/vnd.ellucian.v1+pdf";
        private const string _mediaTypeHeaderPdfVersion2 = "application/vnd.ellucian.v2+pdf";
        private const string _mediaTypeHeaderPdfVersion3 = "application/vnd.ellucian.v3+pdf";
        private const string _mediaTypeHeaderPdfVersion4 = "application/vnd.ellucian.v4+pdf";

        private static readonly string _mediaTypeHeaderIlpVersion1 = "application/vnd.ellucian-ilp.v1+json";

        private const string _mediaTypeHeaderEllucianConfigurationVersion1 = "application/vnd.ellucian-configuration.v1+json";
        private const string _mediaTypeHeaderStudentFinanceDisbursementsVersion1 = "application/vnd.ellucian-student-finance-disbursements.v1+json";
        private const string _mediaTypeHeaderFALinkBookSpendingVersion1 = "application/vnd.ellucian-falink-book-spending.v1+json";
        private const string _mediaTypeHeaderEllucianInvalidKeysFormatVersion1 = "application/vnd.ellucian-with-invalid-keys.v1+json";
        private const string _mediaTypeHeaderEllucianPersonSearchFormatVersion1 = "application/vnd.ellucian-person-search-exact-match.v1+json";

        private const string _mediaTypeHeaderEllucianJsonPilotMediaTypeVersion1 = "application/vnd.ellucian-pilot.v1+json";

        #endregion Helper methods
    }
}
// Copyright 2012-2019 Ellucian Company L.P. and its affiliates.
using Ellucian.Web.Http.Routes;
using System.Collections.Generic;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Routing;

namespace Ellucian.Colleague.Api
{
    /// <summary>
    /// Route configuration
    /// </summary> 
    public class RouteConfig
    {
        private const string HedtechIntegrationMediaTypeFormat = "application/vnd.hedtech.integration.v{0}+json";
        private const string HedtechIntegrationMaximumMediaTypeFormat = "application/vnd.hedtech.integration.maximum.v{0}+json";
        private const string HedtechIntegrationSectionsMaximumMediaTypeFormat = "application/vnd.hedtech.integration.sections-maximum.v{0}+json";
        private const string HedtechIntegrationMinimumMediaTypeFormat = "application/vnd.hedtech.integration.minimum.v{0}+json";
        private const string HedtechIntegrationQapiMediaTypeFormat = "application/vnd.hedtech.integration.{0}.v{1}+json";
        private const string HedtechIntegrationStudentTranscriptGradesOptionsFormat = "application/vnd.hedtech.integration.student-transcript-grades-options.v{0}+json";
        private const string HedtechIntegrationStudentUnverifiedGradesSubmissionsFormat = "application/vnd.hedtech.integration.student-unverified-grades-submissions.v{0}+json";
        private const string HedtechIntegrationStudentAcademicProgramSubmissionsFormat = "application/vnd.hedtech.integration.student-academic-programs-submissions.v{0}+json";
        private const string HedtechIntegrationStudentTranscriptGradesAdjustmentsFormat = "application/vnd.hedtech.integration.student-transcript-grades-adjustments.v{0}+json";
        private const string HedtechIntegrationSectionRegistrationGradeOptionsFormat = "application/vnd.hedtech.integration.section-registrations-grade-options.v{0}+json";
        private const string HedtechIntegrationAdmissionApplicationsSubmissionsFormat = "application/vnd.hedtech.integration.admission-applications-submissions.v{0}+json";
        private const string HedtechIntegrationProspectOpportunitiesSubmissionsFormat = "application/vnd.hedtech.integration.prospect-opportunities-submissions.v{0}+json";
        private const string HedtechIntegrationPersonMatchingRequestsInitiationsProspectsFormat = "application/vnd.hedtech.integration.person-matching-requests-initiations-prospects.v{0}+json";
        private const string HedtechIntegrationConfigurationSettingsOptionsFormat = "application/vnd.hedtech.integration.configuration-settings-options.v{0}+json";
        private const string EllucianPDFMediaTypeFormat = "application/vnd.ellucian.v{0}+pdf";
        private const string EllucianJsonPilotMediaTypeFormat = "application/vnd.ellucian-pilot.v{0}+json";
        private const string EllucianJsonIlpMediaTypeFormat = "application/vnd.ellucian-ilp.v{0}+json";
        private const string EllucianHumanResourceDemographicsTypeFormat = "application/vnd.ellucian-human-resource-demographics.v{0}+json";
        private const string EllucianStepUpAuthenticationFormat = "application/vnd.ellucian-step-up-authentication.v{0}+json";
        private const string EllucianConfigurationFormat = "application/vnd.ellucian-configuration.v{0}+json";
        private const string EllucianProxyUserFormat = "application/vnd.ellucian-proxy-user.v{0}+json";
        private const string EllucianInvalidKeysFormat = "application/vnd.ellucian-with-invalid-keys.v{0}+json";
        private const string EllucianPersonSearchExactMatchFormat = "application/vnd.ellucian-person-search-exact-match.v{0}+json";

        /// <summary>
        /// Registers the routes for the Web API
        /// </summary>
        /// <param name="routes">Register the routes in this collection</param>
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            #region F09

            F09RouteConfig.RegisterRoutes(routes);

            #endregion

            #region About

            routes.MapHttpRoute(
                name: "GetAbout",
                routeTemplate: "about",
                   defaults: new { controller = "About", action = "GetAboutAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                }
            );

            #endregion

            #region AcademicCatalogs

            routes.MapHttpRoute(
                 name: "GetAcademicCatalogByIdV6",
                 routeTemplate: "academic-catalogs/{id}",
                 defaults: new { controller = "AcademicCatalog", action = "GetAcademicCatalogById2Async", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                 }
             );

            routes.MapHttpRoute(
                 name: "GetAcademicCatalogById",
                 routeTemplate: "academic-catalogs/{id}",
                    defaults: new { controller = "AcademicCatalog", action = "GetAcademicCatalogById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, true),
                 }
             );

            routes.MapHttpRoute(
                name: "GetAcademicCatalogsV6",
                routeTemplate: "academic-catalogs",
                defaults: new { controller = "AcademicCatalog", action = "GetAcademicCatalogs2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicCatalogs",
                routeTemplate: "academic-catalogs",
                   defaults: new { controller = "AcademicCatalog", action = "GetAcademicCatalogs2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
               name: "PutAcademicCatalogV6",
               routeTemplate: "academic-catalogs/{id}",
               defaults: new { controller = "AcademicCatalog", action = "PutAcademicCatalogs" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "PostAcademicCatalogV6",
               routeTemplate: "academic-catalogs",
               defaults: new { controller = "AcademicCatalog", action = "PostAcademicCatalogs" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DeleteAcademicCatalog",
               routeTemplate: "academic-catalogs/{id}",
               defaults: new { controller = "AcademicCatalog", action = "DeleteAcademicCatalogs" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
           );

            routes.MapHttpRoute(
               name: "GetAllCatalogs",
               routeTemplate: "academic-catalogs",
               defaults: new { controller = "AcademicCatalog", action = "GetAllAcademicCatalogsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
           );
            #endregion

            #region AcademicCredentials

            routes.MapHttpRoute(
                name: "GetAcademicCredentialByGuidV6",
                routeTemplate: "academic-credentials/{guid}",
                defaults: new { controller = "AcademicCredentials", action = "GetAcademicCredentialByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicCredentialByGuid",
                routeTemplate: "academic-credentials/{guid}",
                   defaults: new { controller = "AcademicCredentials", action = "GetAcademicCredentialByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicCredentialsV6",
                routeTemplate: "academic-credentials",
                defaults: new { controller = "AcademicCredentials", action = "GetAcademicCredentialsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicCredentials",
                routeTemplate: "academic-credentials",
                   defaults: new { controller = "AcademicCredentials", action = "GetAcademicCredentialsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
               name: "PutAcademicCredentialsV6",
               routeTemplate: "academic-credentials/{id}",
               defaults: new { controller = "AcademicCredentials", action = "PutAcademicCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostAcademicCredentialsV6",
                routeTemplate: "academic-credentials",
                defaults: new { controller = "AcademicCredentials", action = "PostAcademicCredentialAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
           );

            routes.MapHttpRoute(
                name: "DeleteAcademicCredentials",
                routeTemplate: "academic-credentials/{id}",
                defaults: new { controller = "AcademicCredentials", action = "DeleteAcademicCredentialAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region AcademicDisciplines

            // Get by ID
            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesByIdV15",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDiscipline2ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15)),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesByIdV10",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDiscipline2ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesByIdV7",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDiscipline2ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesByIdV6",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDisciplineByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesByIdDefault",
                routeTemplate: "academic-disciplines/{id}",
                   defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDiscipline2ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(15, true),
                }
            );

            // Get all
            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesV15",
                routeTemplate: "academic-disciplines",
                    defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDisciplines3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
                }
            );
            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesV10",
                routeTemplate: "academic-disciplines",
                    defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDisciplines2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesV7",
                routeTemplate: "academic-disciplines",
                    defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDisciplines2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesV6",
                routeTemplate: "academic-disciplines",
                defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDisciplinesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicDisciplinesDefault",
                routeTemplate: "academic-disciplines",
                   defaults: new { controller = "AcademicDisciplines", action = "GetAcademicDisciplines3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(15, true),
                }
            );

            // Post

            routes.MapHttpRoute(
                name: "PostAcademicDisciplinesV15",
                routeTemplate: "academic-disciplines",
                defaults: new { controller = "AcademicDisciplines", action = "PostAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicDisciplinesV10",
                routeTemplate: "academic-disciplines",
                defaults: new { controller = "AcademicDisciplines", action = "PostAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );
            routes.MapHttpRoute(
                name: "PostAcademicDisciplinesV7",
                routeTemplate: "academic-disciplines",
                defaults: new { controller = "AcademicDisciplines", action = "PostAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicDisciplinesV6",
                routeTemplate: "academic-disciplines",
                defaults: new { controller = "AcademicDisciplines", action = "PostAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            // Put
            routes.MapHttpRoute(
                name: "PutAcademicDisciplinesV15",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "PutAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15)),
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicDisciplinesV10",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "PutAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicDisciplinesV7",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "PutAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicDisciplinesV6",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "PutAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            // Delete

            routes.MapHttpRoute(
                name: "DeleteAcademicDisciplines",
                routeTemplate: "academic-disciplines/{id}",
                defaults: new { controller = "AcademicDisciplines", action = "DeleteAcademicDisciplines" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region AcademicLevels

            routes.MapHttpRoute(
                name: "GetAcademicLevelById3_V6.1.0",
                routeTemplate: "academic-levels/{id}",
                defaults: new { controller = "AcademicLevels", action = "GetAcademicLevelById3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0")),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicLevelById3_V6",
                routeTemplate: "academic-levels/{id}",
                defaults: new { controller = "AcademicLevels", action = "GetAcademicLevelById3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicLevelById3",
                routeTemplate: "academic-levels/{id}",
                   defaults: new { controller = "AcademicLevels", action = "GetAcademicLevelById3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0")),
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmAcademicLevels3_V6.1.0",
                routeTemplate: "academic-levels",
                defaults: new { controller = "AcademicLevels", action = "GetAcademicLevels3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmAcademicLevels3_V6",
                routeTemplate: "academic-levels",
                defaults: new { controller = "AcademicLevels", action = "GetAcademicLevels3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicLevels",
                routeTemplate: "academic-levels",
                defaults: new { controller = "AcademicLevels", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmAcademicLevels3",
                routeTemplate: "academic-levels",
                   defaults: new { controller = "AcademicLevels", action = "GetAcademicLevels3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0"))
                }
            );

            routes.MapHttpRoute(
               name: "PutAcademicLevels2_V6.1.0",
                routeTemplate: "academic-levels/{id}",
               defaults: new { controller = "AcademicLevels", action = "PutAcademicLevels2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0")),
                }
            );

            routes.MapHttpRoute(
               name: "PutAcademicLevels2_V6",
                routeTemplate: "academic-levels/{id}",
               defaults: new { controller = "AcademicLevels", action = "PutAcademicLevels2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicLevels2_V6.1.0",
                routeTemplate: "academic-levels",
                defaults: new { controller = "AcademicLevels", action = "PostAcademicLevels2Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0")),
               }
           );

            routes.MapHttpRoute(
                name: "PostAcademicLevels2_V6",
                routeTemplate: "academic-levels",
                defaults: new { controller = "AcademicLevels", action = "PostAcademicLevels2Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
                name: "DeleteAcademicLevels2",
                routeTemplate: "academic-levels/{id}",
                defaults: new { controller = "AcademicLevels", action = "DeleteAcademicLevels2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "AcademicLevelsUnsupported",
              routeTemplate: "academic-levels/{id}",
               defaults: new { controller = "AcademicLevels", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion

            #region AcademicHistory

            // Obsolete as of API 1.18, use version 2 instead.
            routes.MapHttpRoute(
                name: "GetAcademicHistoryByIdList",
                routeTemplate: "qapi/academic-history",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicHistoryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicHistoryByIdList2",
                routeTemplate: "qapi/academic-history",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicHistory2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPilotAcademicHistoryLevelByIdList",
                routeTemplate: "qapi/academic-history-levels",
                defaults: new { controller = "AcademicHistory", action = "QueryPilotAcademicHistoryLevelAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianJsonPilotMediaTypeFormat, 1))
                }
            );

            // Obsolete as of API 1.10, use version 2 instead.
            routes.MapHttpRoute(
                name: "GetAcademicHistoryLevelByIdList",
                routeTemplate: "qapi/academic-history-levels",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicHistoryLevelAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicHistoryLevel2ByIdList",
                routeTemplate: "qapi/academic-history-levels",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicHistoryLevel2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            // Obsolete as of API 1.18, use version 4 instead.
            routes.MapHttpRoute(
                name: "GetAcademicHistoryLevel3ByIdList",
                routeTemplate: "qapi/academic-history-levels",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicHistoryLevel3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetInvalidStudentEnrollment",
                routeTemplate: "qapi/invalid-student-enrollments",
                defaults: new { controller = "AcademicHistory", action = "GetInvalidStudentEnrollmentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryByPostAcademicCredits",
                routeTemplate: "qapi/academic-credits",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicCreditsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "QueryByPostAcademicCredits2",
                routeTemplate: "qapi/academic-credits",
                defaults: new { controller = "AcademicHistory", action = "QueryAcademicCredits2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
               name: "QueryByPostAcademicCreditsWithInvalidKeys",
               routeTemplate: "qapi/academic-credits",
               defaults: new { controller = "AcademicHistory", action = "QueryAcademicCreditsWithInvalidKeysAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianInvalidKeysFormat, 1))

               }
           );

            #endregion

            #region AcademicHonors

            routes.MapHttpRoute(
                name: "GetOtherHonorTypeByIdV6",
                routeTemplate: "academic-honors/{id}",
                defaults: new { controller = "OtherHonors", action = "GetOtherHonorByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetOtherHonorTypeById",
                routeTemplate: "academic-honors/{id}",
                   defaults: new { controller = "OtherHonors", action = "GetOtherHonorByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHeDMOtherHonorTypesV6",
                routeTemplate: "academic-honors",
                defaults: new { controller = "OtherHonors", action = "GetOtherHonorAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetHeDMOtherHonorTypes",
                routeTemplate: "academic-honors",
                   defaults: new { controller = "OtherHonors", action = "GetOtherHonorAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutOtherHonorTypeV6",
                routeTemplate: "academic-honors/{id}",
                defaults: new { controller = "OtherHonors", action = "PutOtherHonors" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "PostOtherHonorTypeV6",
                routeTemplate: "academic-honors",
                defaults: new { controller = "OtherHonors", action = "PostOtherHonors" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteOtherHonorType",
                routeTemplate: "academic-honors/{id}",
                defaults: new { controller = "OtherHonors", action = "DeleteOtherHonors" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region AcademicPeriods

            routes.MapHttpRoute(
                name: "GetAcademicPeriodByGuidV16.1.0",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriodByGuid4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicPeriodByGuidV16.0.0",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriodByGuid4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicPeriodByGuidV8",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriodByGuid3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicPeriodByGuidV6",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriodByGuid2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAcademicPeriodByGuid",
                routeTemplate: "academic-periods/{id}",
                   defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriodByGuid4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.1.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "GetAcademicPeriodsV16.1.0",
               routeTemplate: "academic-periods",
               defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriods4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.1.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetAcademicPeriodsV16.0.0",
               routeTemplate: "academic-periods",
               defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriods4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetAcademicPeriodsV8",
               routeTemplate: "academic-periods",
               defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriods3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
                name: "GetAcademicPeriodsV6",
                routeTemplate: "academic-periods",
                defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriods2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAcademicPeriods",
                routeTemplate: "academic-periods",
                   defaults: new { controller = "AcademicPeriods", action = "GetAcademicPeriods4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.1.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicPeriodsV16.1.0",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "PutAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("16.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.1.0")),
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicPeriodsV16.0.0",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "PutAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")),
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicPeriodsV8",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "PutAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicPeriodsV6",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "PutAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicPeriodsV16.1.0",
                routeTemplate: "academic-periods",
                defaults: new { controller = "AcademicPeriods", action = "PostAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("16.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.1.0")),
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicPeriodsV16.0.0",
                routeTemplate: "academic-periods",
                defaults: new { controller = "AcademicPeriods", action = "PostAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")),
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicPeriodsV8",
                routeTemplate: "academic-periods",
                defaults: new { controller = "AcademicPeriods", action = "PostAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicPeriodsV6",
                routeTemplate: "academic-periods",
                defaults: new { controller = "AcademicPeriods", action = "PostAcademicPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteAcademicPeriods",
                routeTemplate: "academic-periods/{id}",
                defaults: new { controller = "AcademicPeriods", action = "DeleteAcademicPeriodByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "AcademicPeriodsUnsupported",
              routeTemplate: "academic-periods/{id}",
               defaults: new { controller = "AcademicPeriods", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            #endregion

            #region AcademicPeriodEnrollmentStatuses

            routes.MapHttpRoute(
               name: "GetAcademicPeriodEnrollmentStatusByIdV6",
               routeTemplate: "academic-period-enrollment-statuses/{id}",
               defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "GetAcademicPeriodEnrollmentStatusByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetAcademicPeriodEnrollmentStatusById",
                routeTemplate: "academic-period-enrollment-statuses/{id}",
                   defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "GetAcademicPeriodEnrollmentStatusByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetAcademicPeriodEnrollmentStatusesV6",
               routeTemplate: "academic-period-enrollment-statuses",
               defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "GetAcademicPeriodEnrollmentStatusesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
              name: "DefaultGetAcademicPeriodEnrollmentStatuses",
              routeTemplate: "academic-period-enrollment-statuses",
                 defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "GetAcademicPeriodEnrollmentStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, true)
              }
          );

            routes.MapHttpRoute(
              name: "PutAcademicPeriodEnrollmentStatusesV6",
              routeTemplate: "academic-period-enrollment-statuses/{id}",
              defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "PutAcademicPeriodEnrollmentStatusAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
                name: "PostAcademicPeriodEnrollmentStatusesV6",
                routeTemplate: "academic-period-enrollment-statuses",
                defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "PostAcademicPeriodEnrollmentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAcademicPeriodEnrollmentStatuses",
                routeTemplate: "academic-period-enrollment-statuses/{id}",
                defaults: new { controller = "AcademicPeriodEnrollmentStatuses", action = "DeleteAcademicPeriodEnrollmentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region AcademicPrograms

            routes.MapHttpRoute(
               name: "GetHedmAcademicPrograms_V1520",
               routeTemplate: "academic-programs",
               defaults: new { controller = "AcademicPrograms", action = "GetAcademicPrograms4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("15.2.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.2.0"))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmAcademicPrograms_V1510",
               routeTemplate: "academic-programs",
               defaults: new { controller = "AcademicPrograms", action = "GetAcademicPrograms4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("15.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.1.0"))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmAcademicPrograms_V15",
               routeTemplate: "academic-programs",
               defaults: new { controller = "AcademicPrograms", action = "GetAcademicPrograms4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
               }
           );

            routes.MapHttpRoute(
                name: "GetHedmAcademicPrograms_V10",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "GetAcademicPrograms3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmAcademicPrograms_V6",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramsV6Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicPrograms",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmAcademicPrograms",
                routeTemplate: "academic-programs",
                   defaults: new { controller = "AcademicPrograms", action = "GetAcademicPrograms4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "15.2.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("15.2.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmAcademicProgramsById_V1520",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramById4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("15.2.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.2.0")),
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmAcademicProgramsById_V1510",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramById4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("15.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.1.0")),
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmAcademicProgramsById_V15",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramById4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15)),
               }
           );

            routes.MapHttpRoute(
                name: "GetHedmAcademicProgramsById_V10",
                routeTemplate: "academic-programs/{id}",
                defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramById3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmAcademicProgramsById_V6",
                routeTemplate: "academic-programs/{id}",
                defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramByIdV6Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmAcademicProgramsById",
                routeTemplate: "academic-programs/{id}",
                   defaults: new { controller = "AcademicPrograms", action = "GetAcademicProgramById4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "15.2.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("15.2.0", true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmAcademicPrograms_V1520",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "PostAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("15.2.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.2.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmAcademicPrograms_V1510",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "PostAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("15.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmAcademicPrograms_V15",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "PostAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmAcademicPrograms_V10",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "PostAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );
            routes.MapHttpRoute(
                name: "PostHedmAcademicPrograms_V6",
                routeTemplate: "academic-programs",
                defaults: new { controller = "AcademicPrograms", action = "PostAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmAcademicPrograms_V1520",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "PutAcademicProgram" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint("15.2.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.2.0")),
               }
            );

            routes.MapHttpRoute(
               name: "PutHedmAcademicPrograms_V1510",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "PutAcademicProgram" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint("15.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "15.1.0")),
               }
            );

            routes.MapHttpRoute(
               name: "PutHedmAcademicPrograms_V15",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "PutAcademicProgram" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15)),
               }
            );

            routes.MapHttpRoute(
               name: "PutHedmAcademicPrograms_V10",
               routeTemplate: "academic-programs/{id}",
               defaults: new { controller = "AcademicPrograms", action = "PutAcademicProgram" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
               }
            );

            routes.MapHttpRoute(
                name: "PutHedmAcademicPrograms_V6",
                routeTemplate: "academic-programs/{id}",
                defaults: new { controller = "AcademicPrograms", action = "PutAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmAcademicPrograms",
                routeTemplate: "academic-programs/{id}",
                defaults: new { controller = "AcademicPrograms", action = "DeleteAcademicProgram" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
            name: "AcademicProgramsUnsupported",
            routeTemplate: "academic-programs/{id}",
             defaults: new { controller = "AcademicPrograms", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion

            #region AcademicProgressAppealCodes
            routes.MapHttpRoute(
                name: "AcademicProgressAppealCodes",
                routeTemplate: "academic-progress-appeal-codes",
                defaults: new { controller = "AcademicProgressAppealCodes", action = "GetAcademicProgressAppealCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region AcademicProgressEvaluations

            //WARNING: Obsolete as of API 1.14. Use GetStudentAcademicProgressEvaluations2 route
            routes.MapHttpRoute(
                name: "GetStudentAcademicProgressEvaluations",
                routeTemplate: "students/{studentId}/academic-progress-evaluations",
                defaults: new { controller = "AcademicProgressEvaluations", action = "GetStudentAcademicProgressEvaluationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicProgressEvaluations2",
                routeTemplate: "students/{studentId}/academic-progress-evaluations",
                defaults: new { controller = "AcademicProgressEvaluations", action = "GetStudentAcademicProgressEvaluations2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region AcademicProgressStatuses

            routes.MapHttpRoute(
                name: "GetAcademicProgressStatuses",
                routeTemplate: "academic-progress-statuses",
                defaults: new { controller = "AcademicProgressStatuses", action = "GetAcademicProgressStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region AcademicStandings

            routes.MapHttpRoute(
                name: "GetAcademicStandings",
                routeTemplate: "academic-standings",
                defaults: new { controller = "AcademicStandings", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicStandingsByIdV8",
                routeTemplate: "academic-standings/{id}",
                defaults: new { controller = "AcademicStandings", action = "GetAcademicStandingByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAcademicStandingsById",
                routeTemplate: "academic-standings/{id}",
                defaults: new { controller = "AcademicStandings", action = "GetAcademicStandingByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicStandingsV8",
                routeTemplate: "academic-standings",
                defaults: new { controller = "AcademicStandings", action = "GetAcademicStandingsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAcademicStandings",
                routeTemplate: "academic-standings",
                defaults: new { controller = "AcademicStandings", action = "GetAcademicStandingsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutAcademicStandingsV8",
                routeTemplate: "academic-standings/{id}",
                defaults: new { controller = "AcademicStandings", action = "PutAcademicStandingAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "PostAcademicStandingsV8",
                routeTemplate: "academic-standings",
                defaults: new { controller = "AcademicStandings", action = "PostAcademicStandingAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteAcademicStandings",
                routeTemplate: "academic-standings/{id}",
                defaults: new { controller = "AcademicStandings", action = "DeleteAcademicStandingAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region AccountActivity

            routes.MapHttpRoute(
                name: "GetAccountActivityPeriodsForStudent",
                routeTemplate: "account-activity/admin/{studentId}",
                defaults: new { controller = "AccountActivity", action = "GetAccountActivityPeriodsForStudent" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See PostAccountActivityByPeriodForStudent2 in AccountActivity
            routes.MapHttpRoute(
                name: "PostAccountActivityByPeriodForStudent",
                routeTemplate: "account-activity/period/admin/{studentId}",
                defaults: new { controller = "AccountActivity", action = "PostAccountActivityByPeriodForStudent" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "PostAccountActivityByPeriodForStudent2",
                routeTemplate: "account-activity/period/admin/{studentId}",
                defaults: new { controller = "AccountActivity", action = "PostAccountActivityByPeriodForStudent2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See GetAccountActivityByTermForStudent2 in AccountActivity
            routes.MapHttpRoute(
                name: "GetAccountActivityByTermForStudent",
                routeTemplate: "account-activity/term/admin/{studentId}",
                defaults: new { controller = "AccountActivity", action = "GetAccountActivityByTermForStudent" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );


            routes.MapHttpRoute(
                name: "GetAccountActivityByTermForStudent2",
                routeTemplate: "account-activity/term/admin/{studentId}",
                defaults: new { controller = "AccountActivity", action = "GetAccountActivityByTermForStudent2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAwardDisbursementInfoAsync",
                routeTemplate: "students/{studentId}/disbursements/{awardYear}/{awardId}",
                defaults: new { controller = "AccountActivity", action = "GetStudentAwardDisbursementInfoAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-student-finance-disbursements.v{0}+json", 1))
                }
            );

            routes.MapHttpRoute(
                name: "QueryStudentPotentialD7FinancialAidAsync",
                routeTemplate: "qapi/potential-d7-financial-aid",
                defaults: new { controller = "AccountActivity", action = "QueryStudentPotentialD7FinancialAidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region AccountingCodes

            routes.MapHttpRoute(
                name: "GetAccountingCodeByIdV6",
                routeTemplate: "accounting-codes/{id}",
                defaults: new { controller = "AccountingCodes", action = "GetAccountingCodeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "GetAccountingCodeByIdV11",
               routeTemplate: "accounting-codes/{id}",
               defaults: new { controller = "AccountingCodes", action = "GetAccountingCodeById2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetAccountingCodeById",
                routeTemplate: "accounting-codes/{id}",
                   defaults: new { controller = "AccountingCodes", action = "GetAccountingCodeById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAccountingCodesV6",
                routeTemplate: "accounting-codes",
                defaults: new { controller = "AccountingCodes", action = "GetAccountingCodesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAccountingCodesV11",
                routeTemplate: "accounting-codes",
                defaults: new { controller = "AccountingCodes", action = "GetAccountingCodes2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAccountingCodes",
                routeTemplate: "accounting-codes",
                   defaults: new { controller = "AccountingCodes", action = "GetAccountingCodes2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutAccountingCodesV6",
               routeTemplate: "accounting-codes/{id}",
               defaults: new { controller = "AccountingCodes", action = "PutAccountingCode" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PutAccountingCodesV11",
               routeTemplate: "accounting-codes/{id}",
               defaults: new { controller = "AccountingCodes", action = "PutAccountingCode" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "PostAccountingCodesV6",
                routeTemplate: "accounting-codes",
                defaults: new { controller = "AccountingCodes", action = "PostAccountingCode" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostAccountingCodesV11",
                routeTemplate: "accounting-codes",
                defaults: new { controller = "AccountingCodes", action = "PostAccountingCode" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingCodes",
                routeTemplate: "accounting-codes/{id}",
                defaults: new { controller = "AccountingCodes", action = "DeleteAccountingCode" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region  Accounting Code Categories

            routes.MapHttpRoute(
              name: "GetAccountingCodeCategoriesByGuidV11",
              routeTemplate: "accounting-code-categories/{guid}",
              defaults: new { controller = "AccountingCodeCategories", action = "GetAccountingCodeCategoryByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingCodeCategoriesByGuid",
               routeTemplate: "accounting-code-categories/{guid}",
                  defaults: new { controller = "AccountingCodeCategories", action = "GetAccountingCodeCategoryByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAccountingCodeCategoriesV11",
              routeTemplate: "accounting-code-categories",
              defaults: new { controller = "AccountingCodeCategories", action = "GetAccountingCodeCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingCodeCategories",
               routeTemplate: "accounting-code-categories",
                  defaults: new { controller = "AccountingCodeCategories", action = "GetAccountingCodeCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAccountingCodeCategoriesV11",
              routeTemplate: "accounting-code-categories/{guid}",
              defaults: new { controller = "AccountingCodeCategories", action = "PutAccountingCodeCategoryAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostAccountingCodeCategoriesV11",
               routeTemplate: "accounting-code-categories",
               defaults: new { controller = "AccountingCodeCategories", action = "PostAccountingCodeCategoryAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingCodeCategories",
                routeTemplate: "accounting-code-categories/{guid}",
                defaults: new { controller = "AccountingCodeCategories", action = "DeleteAccountingCodeCategoryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounting Code Categories

            #region AccountingStrings

            routes.MapHttpRoute(
                name: "GetAccountingStringsByFilterV7",
                routeTemplate: "accounting-strings",
                defaults: new { controller = "AccountingStrings", action = "GetAccountingStringByFilterAsync", isEedmSupported = true },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "accountingString" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetAccountingStringsByFilterDefault",
                routeTemplate: "accounting-strings",
                   defaults: new { controller = "AccountingStrings", action = "GetAccountingStringByFilterAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "accountingString" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            //routes.MapHttpRoute(
            //    name: "GetAccountingStringsV7",
            //    routeTemplate: "accounting-strings",
            //    defaults: new { controller = "AccountingStrings", action = "GetAccountingStringsAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "GetAccountingStringsDefault",
            //    routeTemplate: "accounting-strings",
            //       defaults: new { controller = "AccountingStrings", action = "GetAccountingStringsAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(7, true)
            //    }
            //);

            routes.MapHttpRoute(
                name: "GetAccountingStringsV7",
                routeTemplate: "accounting-strings",
                defaults: new { controller = "AccountingStrings", action = "GetAccountingStringByFilterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetAccountingStringsDefault",
                routeTemplate: "accounting-strings",
                   defaults: new { controller = "AccountingStrings", action = "GetAccountingStringByFilterAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostAccountingStringV7",
                routeTemplate: "accounting-strings",
                defaults: new { controller = "AccountingStrings", action = "PostAccountingStringsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            #endregion

            #region  Accounting String Components

            routes.MapHttpRoute(
              name: "GetAccountingStringComponentsByGuidV8",
              routeTemplate: "accounting-string-components/{guid}",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringComponentsByGuid",
               routeTemplate: "accounting-string-components/{guid}",
                  defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAccountingStringComponentsV8",
              routeTemplate: "accounting-string-components",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "GetAccountingStringComponents",
               routeTemplate: "accounting-string-components",
                  defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentsAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAccountingStringComponentsV8",
              routeTemplate: "accounting-string-components/{guid}",
              defaults: new { controller = "AccountingStrings", action = "PutAccountingStringComponentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostAccountingStringComponentsV8",
               routeTemplate: "accounting-string-components",
               defaults: new { controller = "AccountingStrings", action = "PostAccountingStringComponentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingStringComponents",
                routeTemplate: "accounting-string-components/{guid}",
                defaults: new { controller = "AccountingStrings", action = "DeleteAccountingStringComponentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounting String Components

            #region  Accounting String Components Values

            routes.MapHttpRoute(
              name: "GetAccountingStringComponentValuesByGuidV8",
              routeTemplate: "accounting-string-component-values/{guid}",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValuesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetAccountingStringComponentValuesByGuidV11",
              routeTemplate: "accounting-string-component-values/{guid}",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValues2ByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetAccountingStringComponentValuesByGuidV15",
              routeTemplate: "accounting-string-component-values/{guid}",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValues3ByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringComponentValuesByGuid",
               routeTemplate: "accounting-string-component-values/{guid}",
                  defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValues3ByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAccountingStringComponentValuesV8",
              routeTemplate: "accounting-string-component-values",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValuesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetAccountingStringComponentValuesV11",
              routeTemplate: "accounting-string-component-values",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValues2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetAccountingStringComponentValuesV15",
              routeTemplate: "accounting-string-component-values",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValues3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "GetAccountingStringComponentValues",
               routeTemplate: "accounting-string-component-values",
                  defaults: new { controller = "AccountingStrings", action = "GetAccountingStringComponentValues3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAccountingStringComponentValuesV8",
              routeTemplate: "accounting-string-component-values/{guid}",
              defaults: new { controller = "AccountingStrings", action = "PutAccountingStringComponentValuesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
             name: "PutAccountingStringComponentValuesV11",
             routeTemplate: "accounting-string-component-values/{guid}",
             defaults: new { controller = "AccountingStrings", action = "PutAccountingStringComponentValuesAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
         );

            routes.MapHttpRoute(
             name: "PutAccountingStringComponentValuesV15",
             routeTemplate: "accounting-string-component-values/{guid}",
             defaults: new { controller = "AccountingStrings", action = "PutAccountingStringComponentValuesAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
             }
         );


            routes.MapHttpRoute(
               name: "PostAccountingStringComponentValuesV8",
               routeTemplate: "accounting-string-component-values",
               defaults: new { controller = "AccountingStrings", action = "PostAccountingStringComponentValuesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
              name: "PostAccountingStringComponentValuesV11",
              routeTemplate: "accounting-string-component-values",
              defaults: new { controller = "AccountingStrings", action = "PostAccountingStringComponentValuesAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
          );

            routes.MapHttpRoute(
              name: "PostAccountingStringComponentValuesV15",
              routeTemplate: "accounting-string-component-values",
              defaults: new { controller = "AccountingStrings", action = "PostAccountingStringComponentValuesAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
             }
          );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingStringComponentValues",
                routeTemplate: "accounting-string-component-values/{guid}",
                defaults: new { controller = "AccountingStrings", action = "DeleteAccountingStringComponentValuesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounting String Components Values

            #region  Accounting String Formats

            routes.MapHttpRoute(
              name: "GetAccountingStringFormatsByGuidV8",
              routeTemplate: "accounting-string-formats/{guid}",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringFormatsByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringFormatsByGuid",
               routeTemplate: "accounting-string-formats/{guid}",
                  defaults: new { controller = "AccountingStrings", action = "GetAccountingStringFormatsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );


            routes.MapHttpRoute(
              name: "GetAccountingStringFormatsV8",
              routeTemplate: "accounting-string-formats",
              defaults: new { controller = "AccountingStrings", action = "GetAccountingStringFormatsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "GetAccountingStringFormats",
               routeTemplate: "accounting-string-formats",
                  defaults: new { controller = "AccountingStrings", action = "GetAccountingStringFormatsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
              name: "PutAccountingStringFormatsV8",
              routeTemplate: "accounting-string-formats/{guid}",
              defaults: new { controller = "AccountingStrings", action = "PutAccountingStringFormatsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );


            routes.MapHttpRoute(
               name: "PostAccountingStringFormatsV8",
               routeTemplate: "accounting-string-formats",
               defaults: new { controller = "AccountingStrings", action = "PostAccountingStringFormatsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingStringFormats",
                routeTemplate: "accounting-string-formats/{guid}",
                defaults: new { controller = "AccountingStrings", action = "DeleteAccountingStringFormatsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounting String Formats

            #region  Accounting String Subcomponents

            routes.MapHttpRoute(
              name: "GetAccountingStringSubcomponentsByGuidV13",
              routeTemplate: "accounting-string-subcomponents/{guid}",
              defaults: new { controller = "AccountingStringSubcomponents", action = "GetAccountingStringSubcomponentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringSubcomponentsByGuid",
               routeTemplate: "accounting-string-subcomponents/{guid}",
                  defaults: new { controller = "AccountingStringSubcomponents", action = "GetAccountingStringSubcomponentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAccountingStringSubcomponentsV13",
              routeTemplate: "accounting-string-subcomponents",
              defaults: new { controller = "AccountingStringSubcomponents", action = "GetAccountingStringSubcomponentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringSubcomponents",
               routeTemplate: "accounting-string-subcomponents",
                  defaults: new { controller = "AccountingStringSubcomponents", action = "GetAccountingStringSubcomponentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAccountingStringSubcomponentsV13",
              routeTemplate: "accounting-string-subcomponents/{guid}",
              defaults: new { controller = "AccountingStringSubcomponents", action = "PutAccountingStringSubcomponentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );


            routes.MapHttpRoute(
               name: "PostAccountingStringSubcomponentsV13",
               routeTemplate: "accounting-string-subcomponents",
               defaults: new { controller = "AccountingStringSubcomponents", action = "PostAccountingStringSubcomponentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingStringSubcomponents",
                routeTemplate: "accounting-string-subcomponents/{guid}",
                defaults: new { controller = "AccountingStringSubcomponents", action = "DeleteAccountingStringSubcomponentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounting String Subcomponents

            #region  Accounting String Subcomponent Values

            routes.MapHttpRoute(
              name: "GetAccountingStringSubcomponentValuesByGuidV13",
              routeTemplate: "accounting-string-subcomponent-values/{guid}",
              defaults: new { controller = "AccountingStringSubcomponentValues", action = "GetAccountingStringSubcomponentValuesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringSubcomponentValuesByGuid",
               routeTemplate: "accounting-string-subcomponent-values/{guid}",
                  defaults: new { controller = "AccountingStringSubcomponentValues", action = "GetAccountingStringSubcomponentValuesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAccountingStringSubcomponentValuesV13",
              routeTemplate: "accounting-string-subcomponent-values",
              defaults: new { controller = "AccountingStringSubcomponentValues", action = "GetAccountingStringSubcomponentValuesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountingStringSubcomponentValues",
               routeTemplate: "accounting-string-subcomponent-values",
                  defaults: new { controller = "AccountingStringSubcomponentValues", action = "GetAccountingStringSubcomponentValuesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAccountingStringSubcomponentValuesV13",
              routeTemplate: "accounting-string-subcomponent-values/{guid}",
              defaults: new { controller = "AccountingStringSubcomponentValues", action = "PutAccountingStringSubcomponentValuesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );


            routes.MapHttpRoute(
               name: "PostAccountingStringSubcomponentValuesV13",
               routeTemplate: "accounting-string-subcomponent-values",
               defaults: new { controller = "AccountingStringSubcomponentValues", action = "PostAccountingStringSubcomponentValuesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountingStringSubcomponentValues",
                routeTemplate: "accounting-string-subcomponent-values/{guid}",
                defaults: new { controller = "AccountingStringSubcomponentValues", action = "DeleteAccountingStringSubcomponentValuesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounting String Subcomponent Values

            #region AccountFundsAvailable

            routes.MapHttpRoute(
                name: "GetAccountFundsAvailable",
                routeTemplate: "account-funds-available",
                defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailableAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "GetAccountFundsAvailableDefault",
                routeTemplate: "account-funds-available",
                   defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailableAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutAccountFundsAvailable",
                routeTemplate: "account-funds-available/{guid}",
                defaults: new { controller = "AccountFundsAvailable", action = "PutAccountFundsAvailableAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PostAccountFundsAvailable",
                routeTemplate: "account-funds-available",
                defaults: new { controller = "AccountFundsAvailable", action = "PostAccountFundsAvailableAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultDeleteAccountFundsAvailable",
               routeTemplate: "account-funds-available/{guid}",
               defaults: new { controller = "AccountFundsAvailable", action = "DeleteAccountFundsAvailableAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE")
               }
            );

            #endregion

            #region AccountFundsAvailable_transactions


            routes.MapHttpRoute(
               name: "GetAccountFundsAvailableTransactionsByGuidV11.1.0",
               routeTemplate: "account-funds-available-transactions/{guid}",
               defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsByGuidAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
               }
           );

            routes.MapHttpRoute(
                name: "GetAccountFundsAvailableTransactionsByGuidV8",
                routeTemplate: "account-funds-available_transactions/{guid}",
                defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "GetAccountFundsAvailableTransactionsByGuidV11",
               routeTemplate: "account-funds-available-transactions/{guid}",
               defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsByGuidAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "GetAccountFundsAvailableTransactionsbyIDDefault",
                routeTemplate: "account-funds-available-transactions/{guid}",
                   defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "GetAccountFundsAvailableTransactionsV11.1.0",
               routeTemplate: "account-funds-available-transactions",
               defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
               }
           );

            routes.MapHttpRoute(
                name: "GetAccountFundsAvailableTransactionsV8",
                routeTemplate: "account-funds-available_transactions",
                defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "GetAccountFundsAvailableTransactionsV11",
               routeTemplate: "account-funds-available-transactions",
               defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "GetAccountFundsAvailableTransactionsDefault",
                routeTemplate: "account-funds-available-transactions",
                   defaults: new { controller = "AccountFundsAvailable", action = "GetAccountFundsAvailable_TransactionsAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "PutAccountFundsAvailableTransactionsV11.1.0",
               routeTemplate: "account-funds-available-transactions/{guid}",
               defaults: new { controller = "AccountFundsAvailable", action = "PutAccountFundsAvailable_TransactionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
               }
           );

            routes.MapHttpRoute(
                name: "PutAccountFundsAvailableTransactionsV8",
                routeTemplate: "account-funds-available_transactions/{guid}",
                defaults: new { controller = "AccountFundsAvailable", action = "PutAccountFundsAvailable_TransactionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "PutAccountFundsAvailableTransactionsV11",
               routeTemplate: "account-funds-available-transactions/{guid}",
               defaults: new { controller = "AccountFundsAvailable", action = "PutAccountFundsAvailable_TransactionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "PostAccountFundsAvailableTransactionsV8",
                routeTemplate: "account-funds-available_transactions",
                defaults: new { controller = "AccountFundsAvailable", action = "PostAccountFundsAvailable_TransactionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
             name: "QueryAccountsFundsAvailableTransMinimumByPostV11.1.0",
             routeTemplate: "qapi/account-funds-available-transactions",
            defaults: new { controller = "AccountFundsAvailable", action = "QueryAccountFundsAvailable_Transactions2Async", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0")),
            });

            routes.MapHttpRoute(
             name: "QueryAccountsFundsAvailableTransMinimumByPostV8",
             routeTemplate: "qapi/account-funds-available_transactions",
            defaults: new { controller = "AccountFundsAvailable", action = "QueryAccountFundsAvailable_TransactionsAsync", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationQapiMediaTypeFormat, "afa_transactions", 8)),
            });

            routes.MapHttpRoute(
             name: "QueryAccountsFundsAvailableTransMinimumByPostV11",
             routeTemplate: "qapi/account-funds-available-transactions",
            defaults: new { controller = "AccountFundsAvailable", action = "QueryAccountFundsAvailable_Transactions2Async", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11)),
            });

            routes.MapHttpRoute(
               name: "DefaultDeleteAccountFundsTransactionsAvailable",
               routeTemplate: "account-funds-available-transactions/{guid}",
               defaults: new { controller = "AccountFundsAvailable", action = "DeleteAccountFundsAvailable_TransactionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE")
               }
           );

            #endregion

            #region  Accounts Payable Invoices

            routes.MapHttpRoute(
              name: "GetAccountsPayableInvoicesByGuidV11",
              routeTemplate: "accounts-payable-invoices/{guid}",
              defaults: new { controller = "AccountsPayableInvoices", action = "GetAccountsPayableInvoices2ByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetAccountsPayableInvoicesByGuid",
               routeTemplate: "accounts-payable-invoices/{guid}",
                  defaults: new { controller = "AccountsPayableInvoices", action = "GetAccountsPayableInvoices2ByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
             );

            routes.MapHttpRoute(
              name: "GetAccountsPayableInvoicesV11",
              routeTemplate: "accounts-payable-invoices",
              defaults: new { controller = "AccountsPayableInvoices", action = "GetAccountsPayableInvoices2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "GetAccountsPayableInvoices",
               routeTemplate: "accounts-payable-invoices",
                  defaults: new { controller = "AccountsPayableInvoices", action = "GetAccountsPayableInvoices2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );

            routes.MapHttpRoute(
              name: "PutAccountsPayableInvoicesV11",
              routeTemplate: "accounts-payable-invoices/{guid}",
              defaults: new { controller = "AccountsPayableInvoices", action = "PutAccountsPayableInvoices2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "PostAccountsPayableInvoicesV11",
               routeTemplate: "accounts-payable-invoices",
               defaults: new { controller = "AccountsPayableInvoices", action = "PostAccountsPayableInvoices2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountsPayableInvoices",
                routeTemplate: "accounts-payable-invoices/{guid}",
                defaults: new { controller = "AccountsPayableInvoices", action = "DeleteAccountsPayableInvoicesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );
            #endregion Accounts Payable Invoices

            #region AccountsReceivable

            // WARNING: This is an obsolete route!!!  See GetAccountHolder in Receivables
            routes.MapHttpRoute(
                name: "GetAccountHolderObs",
                routeTemplate: "account-holders/{personId}",
                defaults: new { controller = "Receivables", action = "GetAccountHolder" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See GetDepositsDue in Deposits
            routes.MapHttpRoute(
                name: "GetDepositsDueObs",
                routeTemplate: "account-holders/{studentId}/deposits-due",
                defaults: new { controller = "Deposits", action = "GetDepositsDue" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See GetDepositTypes in Deposits
            routes.MapHttpRoute(
                name: "GetDepositTypesObs",
                routeTemplate: "deposit-types",
                defaults: new { controller = "Deposits", action = "GetDepositTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region AccountDue

            routes.MapHttpRoute(
                name: "GetPaymentsDueByPeriodForStudent",
                routeTemplate: "account-due/period/admin/{studentId}",
                defaults: new { controller = "AccountDue", action = "GetAccountDuePeriodForStudent" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentsDueByTermForStudent",
                routeTemplate: "account-due/term/admin/{studentId}",
                defaults: new { controller = "AccountDue", action = "GetAccountDueForStudent" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region AccountReceivableTypes

            routes.MapHttpRoute(
                name: "GetAccountReceivableTypeByIdV6",
                routeTemplate: "account-receivable-types/{id}",
                defaults: new { controller = "AccountReceivableTypes", action = "GetAccountReceivableTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAccountReceivableTypeById",
                routeTemplate: "account-receivable-types/{id}",
                   defaults: new { controller = "AccountReceivableTypes", action = "GetAccountReceivableTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAccountReceivableTypesV6",
                routeTemplate: "account-receivable-types",
                defaults: new { controller = "AccountReceivableTypes", action = "GetAccountReceivableTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAccountReceivableTypes",
                routeTemplate: "account-receivable-types",
                   defaults: new { controller = "AccountReceivableTypes", action = "GetAccountReceivableTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutAccountReceivableTypesV6",
               routeTemplate: "account-receivable-types/{id}",
               defaults: new { controller = "AccountReceivableTypes", action = "PutAccountReceivableTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "PostAccountReceivableTypesV6",
                routeTemplate: "account-receivable-types",
                defaults: new { controller = "AccountReceivableTypes", action = "PostAccountReceivableTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteAccountReceivableTypes",
                routeTemplate: "account-receivable-types/{id}",
                defaults: new { controller = "AccountReceivableTypes", action = "DeleteAccountReceivableTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region AddAuthorizations

            routes.MapHttpRoute(
                name: "UpdateAddAuthorization",
                routeTemplate: "add-authorizations",
                defaults: new { controller = "AddAuthorizations", action = "PutAddAuthorizationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateAddAuthorization",
                routeTemplate: "add-authorizations",
                defaults: new { controller = "AddAuthorizations", action = "PostAddAuthorizationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAddAuthorization",
                routeTemplate: "add-authorizations/{id}",
                defaults: new { controller = "AddAuthorizations", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Addresses

            routes.MapHttpRoute(
               name: "GetAddressByGuidV11.1.0",
               routeTemplate: "addresses/{guid}",
               defaults: new { controller = "Addresses", action = "GetAddressByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0")),
               }
           );

            routes.MapHttpRoute(
               name: "GetAddressByGuidV11",
               routeTemplate: "addresses/{guid}",
               defaults: new { controller = "Addresses", action = "GetAddressByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11)),
               }
           );

            routes.MapHttpRoute(
               name: "GetAddressByGuidV6",
               routeTemplate: "addresses/{guid}",
               defaults: new { controller = "Addresses", action = "GetAddressByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetAddressByGuid",
               routeTemplate: "addresses/{guid}",
               defaults: new { controller = "Addresses", action = "GetAddressByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true),
               }
           );

            routes.MapHttpRoute(
               name: "GetAddressesV11.1.0",
               routeTemplate: "addresses",
               defaults: new { controller = "Addresses", action = "GetAddresses2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0")),
               }
           );

            routes.MapHttpRoute(
               name: "GetAddressesV11",
               routeTemplate: "addresses",
               defaults: new { controller = "Addresses", action = "GetAddresses2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11)),
               }
           );

            routes.MapHttpRoute(
               name: "GetAddressesV6",
               routeTemplate: "addresses",
               defaults: new { controller = "Addresses", action = "GetAddressesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
                name: "GetAddressesDefault",
                routeTemplate: "addresses",
                   defaults: new { controller = "Addresses", action = "GetAddresses2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "PutAddressV11.1.0",
                routeTemplate: "addresses/{id}",
                defaults: new { controller = "Addresses", action = "PutAddress2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PutAddressV11",
                routeTemplate: "addresses/{id}",
                defaults: new { controller = "Addresses", action = "PutAddress2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PutAddressV6",
                routeTemplate: "addresses/{id}",
                defaults: new { controller = "Addresses", action = "PutAddressAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostAddressV11.1.0",
                routeTemplate: "addresses",
                defaults: new { controller = "Addresses", action = "PostAddressAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostAddressV11",
                routeTemplate: "addresses",
                defaults: new { controller = "Addresses", action = "PostAddressAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostAddressV6",
                routeTemplate: "addresses",
                defaults: new { controller = "Addresses", action = "PostAddressAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAddresses",
                routeTemplate: "addresses/{id}",
                defaults: new { controller = "Addresses", action = "DeleteAddressAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
                name: "GetAddressByPersonId",
                routeTemplate: "addresses/{personId}",
                defaults: new { controller = "Addresses", action = "GetPersonAddresses" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAddressesByIdList",
                routeTemplate: "qapi/addresses",
                defaults: new { controller = "Addresses", action = "QueryAddresses" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
           name: "AddressesUnsupported",
           routeTemplate: "addresses/{id}",
            defaults: new { controller = "Addresses", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                   headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
               }
          );


            #endregion

            #region AddressTypes

            routes.MapHttpRoute(
                name: "GetAddressTypeByGuid",
                routeTemplate: "address-types/{id}",
                defaults: new { controller = "AddressTypes", action = "GetAddressTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAddressTypeByGuid",
                routeTemplate: "address-types/{id}",
                defaults: new { controller = "AddressTypes", action = "GetAddressTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHeDMAddressTypes",
                routeTemplate: "address-types",
                defaults: new { controller = "AddressTypes", action = "GetAddressTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHeDMAddressTypes",
                routeTemplate: "address-types",
                defaults: new { controller = "AddressTypes", action = "GetAddressTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutHeDMAddressTypes",
               routeTemplate: "address-types/{id}",
               defaults: new { controller = "AddressTypes", action = "PutAddressTypesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );


            routes.MapHttpRoute(
                name: "PostHeDMAddressTypes",
                routeTemplate: "address-types",
                defaults: new { controller = "AddressTypes", action = "PostAddressTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHeDMAddressTypes",
                routeTemplate: "address-types/{id}",
                defaults: new { controller = "AddressTypes", action = "DeleteAddressTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  AdministrativeInstructionalMethods

            routes.MapHttpRoute(
              name: "GetAdministrativeInstructionalMethodsByGuidV20",
              routeTemplate: "administrative-instructional-methods/{guid}",
              defaults: new { controller = "AdministrativeInstructionalMethods", action = "GetAdministrativeInstructionalMethodsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdministrativeInstructionalMethodsByGuid",
               routeTemplate: "administrative-instructional-methods/{guid}",
                  defaults: new { controller = "AdministrativeInstructionalMethods", action = "GetAdministrativeInstructionalMethodsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "GetAdministrativeInstructionalMethodsV20",
              routeTemplate: "administrative-instructional-methods",
              defaults: new { controller = "AdministrativeInstructionalMethods", action = "GetAdministrativeInstructionalMethodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
               name: "DefaultGetAdministrativeInstructionalMethods",
               routeTemplate: "administrative-instructional-methods",
                  defaults: new { controller = "AdministrativeInstructionalMethods", action = "GetAdministrativeInstructionalMethodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdministrativeInstructionalMethodsV20",
              routeTemplate: "administrative-instructional-methods/{guid}",
              defaults: new { controller = "AdministrativeInstructionalMethods", action = "PutAdministrativeInstructionalMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdministrativeInstructionalMethodsV20",
               routeTemplate: "administrative-instructional-methods",
               defaults: new { controller = "AdministrativeInstructionalMethods", action = "PostAdministrativeInstructionalMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdministrativeInstructionalMethods",
                routeTemplate: "administrative-instructional-methods/{guid}",
                defaults: new { controller = "AdministrativeInstructionalMethods", action = "DeleteAdministrativeInstructionalMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion AdministrativeInstructionalMethods

            #region  Alternative Credential Types

            routes.MapHttpRoute(
              name: "GetAlternativeCredentialTypesByGuidV100",
              routeTemplate: "alternative-credential-types/{guid}",
              defaults: new { controller = "AlternativeCredentialTypes", action = "GetAlternativeCredentialTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAlternativeCredentialTypesByGuid",
               routeTemplate: "alternative-credential-types/{guid}",
                  defaults: new { controller = "AlternativeCredentialTypes", action = "GetAlternativeCredentialTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetAlternativeCredentialTypesV100",
              routeTemplate: "alternative-credential-types",
              defaults: new { controller = "AlternativeCredentialTypes", action = "GetAlternativeCredentialTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAlternativeCredentialTypes",
               routeTemplate: "alternative-credential-types",
                  defaults: new { controller = "AlternativeCredentialTypes", action = "GetAlternativeCredentialTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutAlternativeCredentialTypesV100",
              routeTemplate: "alternative-credential-types/{guid}",
              defaults: new { controller = "AlternativeCredentialTypes", action = "PutAlternativeCredentialTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostAlternativeCredentialTypesV100",
               routeTemplate: "alternative-credential-types",
               defaults: new { controller = "AlternativeCredentialTypes", action = "PostAlternativeCredentialTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAlternativeCredentialTypes",
                routeTemplate: "alternative-credential-types/{guid}",
                defaults: new { controller = "AlternativeCredentialTypes", action = "DeleteAlternativeCredentialTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "AlternativeCredentialTypesUnsupported",
            routeTemplate: "alternative-credential-types/{id}",
             defaults: new { controller = "AlternativeCredentialTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Alternative Credential Types

            #region  Administrative Periods

            routes.MapHttpRoute(
              name: "GetAdministrativePeriodsByGuidV20",
              routeTemplate: "administrative-periods/{guid}",
              defaults: new { controller = "AdministrativePeriods", action = "GetAdministrativePeriodByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdministrativePeriodsByGuid",
               routeTemplate: "administrative-periods/{guid}",
                  defaults: new { controller = "AdministrativePeriods", action = "GetAdministrativePeriodByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAdministrativePeriodsV20",
              routeTemplate: "administrative-periods",
              defaults: new { controller = "AdministrativePeriods", action = "GetAdministrativePeriodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdministrativePeriods",
               routeTemplate: "administrative-periods",
                  defaults: new { controller = "AdministrativePeriods", action = "GetAdministrativePeriodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdministrativePeriodsV20",
              routeTemplate: "administrative-periods/{guid}",
              defaults: new { controller = "AdministrativePeriods", action = "PutAdministrativePeriodAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdministrativePeriodsV20",
               routeTemplate: "administrative-periods",
               defaults: new { controller = "AdministrativePeriods", action = "PostAdministrativePeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdministrativePeriods",
                routeTemplate: "administrative-periods/{guid}",
                defaults: new { controller = "AdministrativePeriods", action = "DeleteAdministrativePeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Administrative Periods

            #region  Admission Applications

            routes.MapHttpRoute(
             name: "PutAdmissionApplicationsSubmissions",
             routeTemplate: "admission-applications/{guid}",
             defaults: new
             {
                 controller = "AdmissionApplications",
                 action = "PutAdmissionApplicationsSubmissionsAsync",
                 isEedmSupported = true,
                 RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")
             },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationAdmissionApplicationsSubmissionsFormat, "1.0.0")),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
         );

            routes.MapHttpRoute(
            name: "DefaultPutAdmissionApplicationsSubmissions",
            routeTemplate: "admission-applications/{guid}",
            defaults: new
            {
                controller = "AdmissionApplications",
                action = "PutAdmissionApplicationsSubmissionsAsync",
                isEedmSupported = false,
                RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")
            },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationAdmissionApplicationsSubmissionsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            }
        );


            routes.MapHttpRoute(
               name: "PostAdmissionApplicationsSubmissions",
               routeTemplate: "admission-applications",
               defaults: new
               {
                   controller = "AdmissionApplications",
                   action = "PostAdmissionApplicationsSubmissionsAsync",
                   isEedmSupported = true,
                   RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")
               },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationAdmissionApplicationsSubmissionsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
           );

            routes.MapHttpRoute(
             name: "DefaultPostAdmissionApplicationsSubmissions",
             routeTemplate: "admission-applications",
             defaults: new
             {
                 controller = "AdmissionApplications",
                 action = "PostAdmissionApplicationsSubmissionsAsync",
                 isEedmSupported = false,
                 RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")
             },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationAdmissionApplicationsSubmissionsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            }
         );

            routes.MapHttpRoute(
              name: "AdmissionApplicationsSubmissionsUnsupported",
              routeTemplate: "admission-applications/{id}",
               defaults: new { controller = "AdmissionApplications", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationAdmissionApplicationsSubmissionsFormat, "1.0.0")),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );


            routes.MapHttpRoute(
               name: "GetAdmissionApplicationsByGuidV16_0_0",
               routeTemplate: "admission-applications/{guid}",
               defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplicationsByGuid3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
               name: "GetAdmissionApplicationsByGuidV11",
               routeTemplate: "admission-applications/{guid}",
               defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplicationsByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationsByGuidV6",
              routeTemplate: "admission-applications/{guid}",
              defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplicationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationsByGuid",
               routeTemplate: "admission-applications/{guid}",
                  defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplicationsByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationsV16_0_0",
              routeTemplate: "admission-applications",
              defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplications3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationsV11",
              routeTemplate: "admission-applications",
              defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplications2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationsV6",
              routeTemplate: "admission-applications",
              defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplicationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplications",
               routeTemplate: "admission-applications",
                  defaults: new { controller = "AdmissionApplications", action = "GetAdmissionApplications3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationsV6",
              routeTemplate: "admission-applications/{guid}",
              defaults: new { controller = "AdmissionApplications", action = "PutAdmissionApplicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationsV11",
              routeTemplate: "admission-applications/{guid}",
              defaults: new { controller = "AdmissionApplications", action = "PutAdmissionApplications2Async" , isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationsV16_0_0",
              routeTemplate: "admission-applications/{guid}",
              defaults: new { controller = "AdmissionApplications", action = "PutAdmissionApplicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "PostAdmissionApplicationsV6",
               routeTemplate: "admission-applications",
               defaults: new { controller = "AdmissionApplications", action = "PostAdmissionApplicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
               name: "PostAdmissionApplicationsV11",
               routeTemplate: "admission-applications",
               defaults: new { controller = "AdmissionApplications", action = "PostAdmissionApplications2Async" , isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
               name: "PostAdmissionApplicationsV16_0_0",
               routeTemplate: "admission-applications",
               defaults: new { controller = "AdmissionApplications", action = "PostAdmissionApplicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplications",
                routeTemplate: "admission-applications/{guid}",
                defaults: new { controller = "AdmissionApplications", action = "DeleteAdmissionApplicationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
              name: "AdmissionApplicationsUnsupported",
              routeTemplate: "admission-applications/{id}",
               defaults: new { controller = "AdmissionApplications", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            #endregion Admission Applications

            #region Admission Application Sources

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSourcesByGuidV1.0.0",
              routeTemplate: "admission-application-sources/{guid}",
              defaults: new { controller = "AdmissionApplicationSources", action = "GetAdmissionApplicationSourcesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationSourcesByGuid",
               routeTemplate: "admission-application-sources/{guid}",
                  defaults: new { controller = "AdmissionApplicationSources", action = "GetAdmissionApplicationSourcesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSourcesV1.0.0",
              routeTemplate: "admission-application-sources",
              defaults: new { controller = "AdmissionApplicationSources", action = "GetAdmissionApplicationSourcesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationSources",
               routeTemplate: "admission-application-sources",
                  defaults: new { controller = "AdmissionApplicationSources", action = "GetAdmissionApplicationSourcesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationSourcesV1.0.0",
              routeTemplate: "admission-application-sources/{guid}",
              defaults: new { controller = "AdmissionApplicationSources", action = "PutAdmissionApplicationSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdmissionApplicationSourcesV1.0.0",
               routeTemplate: "admission-application-sources",
               defaults: new { controller = "AdmissionApplicationSources", action = "PostAdmissionApplicationSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationSources",
                routeTemplate: "admission-application-sources/{guid}",
                defaults: new { controller = "AdmissionApplicationSources", action = "DeleteAdmissionApplicationSourcesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "AdmissionApplicationSourcesUnsupported",
            routeTemplate: "admission-application-sources/{id}",
             defaults: new { controller = "AdmissionApplicationSources", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Admission Application Sources

            #region  Admission Application Status Types

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationStatusTypesByGuidV6",
              routeTemplate: "admission-application-status-types/{guid}",
              defaults: new { controller = "AdmissionApplicationStatusTypes", action = "GetAdmissionApplicationStatusTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationStatusTypesByGuid",
               routeTemplate: "admission-application-status-types/{guid}",
                  defaults: new { controller = "AdmissionApplicationStatusTypes", action = "GetAdmissionApplicationStatusTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationStatusTypesV6",
              routeTemplate: "admission-application-status-types",
              defaults: new { controller = "AdmissionApplicationStatusTypes", action = "GetAdmissionApplicationStatusTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAdmissionApplicationStatusTypes",
               routeTemplate: "admission-application-status-types",
                  defaults: new { controller = "AdmissionApplicationStatusTypes", action = "GetAdmissionApplicationStatusTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationStatusTypesV6",
              routeTemplate: "admission-application-status-types/{guid}",
              defaults: new { controller = "AdmissionApplicationStatusTypes", action = "PutAdmissionApplicationStatusTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "PostAdmissionApplicationStatusTypesV6",
               routeTemplate: "admission-application-status-types",
               defaults: new { controller = "AdmissionApplicationStatusTypes", action = "PostAdmissionApplicationStatusTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationStatusTypes",
                routeTemplate: "admission-application-status-types/{guid}",
                defaults: new { controller = "AdmissionApplicationStatusTypes", action = "DeleteAdmissionApplicationStatusTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Admission Application Status Types

            #region  Admission Application Supporting Items

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSupportingItemsByGuidV12",
              routeTemplate: "admission-application-supporting-items/{guid}",
              defaults: new { controller = "AdmissionApplicationSupportingItems", action = "GetAdmissionApplicationSupportingItemsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationSupportingItemsByGuid",
               routeTemplate: "admission-application-supporting-items/{guid}",
                  defaults: new { controller = "AdmissionApplicationSupportingItems", action = "GetAdmissionApplicationSupportingItemsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
            );

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSupportingItemsV12",
              routeTemplate: "admission-application-supporting-items",
              defaults: new { controller = "AdmissionApplicationSupportingItems", action = "GetAdmissionApplicationSupportingItemsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationSupportingItems",
               routeTemplate: "admission-application-supporting-items",
                  defaults: new { controller = "AdmissionApplicationSupportingItems", action = "GetAdmissionApplicationSupportingItemsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
             );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationSupportingItemsV12",
              routeTemplate: "admission-application-supporting-items/{guid}",
              defaults: new { controller = "AdmissionApplicationSupportingItems", action = "PutAdmissionApplicationSupportingItemsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "PostAdmissionApplicationSupportingItemsV12",
               routeTemplate: "admission-application-supporting-items",
               defaults: new { controller = "AdmissionApplicationSupportingItems", action = "PostAdmissionApplicationSupportingItemsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationSupportingItems",
                routeTemplate: "admission-application-supporting-items/{guid}",
                defaults: new { controller = "AdmissionApplicationSupportingItems", action = "DeleteAdmissionApplicationSupportingItemsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Admission Application Supporting Items

            #region  Admission Application Supporting Item Statuses

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSupportingItemStatusesByGuidV9",
              routeTemplate: "admission-application-supporting-item-statuses/{guid}",
              defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "GetAdmissionApplicationSupportingItemStatusByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationSupportingItemStatusesByGuid",
               routeTemplate: "admission-application-supporting-item-statuses/{guid}",
                  defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "GetAdmissionApplicationSupportingItemStatusByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSupportingItemStatusesV9",
              routeTemplate: "admission-application-supporting-item-statuses",
              defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "GetAdmissionApplicationSupportingItemStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetAdmissionApplicationSupportingItemStatuses",
               routeTemplate: "admission-application-supporting-item-statuses",
                  defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "GetAdmissionApplicationSupportingItemStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationSupportingItemStatusesV9",
              routeTemplate: "admission-application-supporting-item-statuses/{guid}",
              defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "PutAdmissionApplicationSupportingItemStatusAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
              }
          );


            routes.MapHttpRoute(
               name: "PostAdmissionApplicationSupportingItemStatusesV9",
               routeTemplate: "admission-application-supporting-item-statuses",
               defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "PostAdmissionApplicationSupportingItemStatusAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationSupportingItemStatuses",
                routeTemplate: "admission-application-supporting-item-statuses/{guid}",
                defaults: new { controller = "AdmissionApplicationSupportingItemStatuses", action = "DeleteAdmissionApplicationSupportingItemStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Admission Application Supporting Item Statuses

            #region  Admission Application Supporting Item Types

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSupportingItemTypesByGuidV9",
              routeTemplate: "admission-application-supporting-item-types/{guid}",
              defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "GetAdmissionApplicationSupportingItemTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationSupportingItemTypesByGuid",
               routeTemplate: "admission-application-supporting-item-types/{guid}",
                  defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "GetAdmissionApplicationSupportingItemTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAdmissionApplicationSupportingItemTypesV9",
              routeTemplate: "admission-application-supporting-item-types",
              defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "GetAdmissionApplicationSupportingItemTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetAdmissionApplicationSupportingItemTypes",
               routeTemplate: "admission-application-supporting-item-types",
                  defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "GetAdmissionApplicationSupportingItemTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationSupportingItemTypesV9",
              routeTemplate: "admission-application-supporting-item-types/{guid}",
              defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "PutAdmissionApplicationSupportingItemTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdmissionApplicationSupportingItemTypesV9",
               routeTemplate: "admission-application-supporting-item-types",
               defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "PostAdmissionApplicationSupportingItemTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationSupportingItemTypes",
                routeTemplate: "admission-application-supporting-item-types/{guid}",
                defaults: new { controller = "AdmissionApplicationSupportingItemTypes", action = "DeleteAdmissionApplicationSupportingItemTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Admission Application Withdrawal Reasons

            #region  Admission Application Withdrawal Reasons

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationWithdrawalReasonsByGuidV6",
              routeTemplate: "admission-application-withdrawal-reasons/{guid}",
              defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "GetAdmissionApplicationWithdrawalReasonsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationWithdrawalReasonsByGuid",
               routeTemplate: "admission-application-withdrawal-reasons/{guid}",
                  defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "GetAdmissionApplicationWithdrawalReasonsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAdmissionApplicationWithdrawalReasonsV6",
              routeTemplate: "admission-application-withdrawal-reasons",
              defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "GetAdmissionApplicationWithdrawalReasonsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAdmissionApplicationWithdrawalReasons",
               routeTemplate: "admission-application-withdrawal-reasons",
                  defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "GetAdmissionApplicationWithdrawalReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionApplicationWithdrawalReasonsV6",
              routeTemplate: "admission-application-withdrawal-reasons/{guid}",
              defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "PutAdmissionApplicationWithdrawalReasonsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdmissionApplicationWithdrawalReasonsV6",
               routeTemplate: "admission-application-withdrawal-reasons",
               defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "PostAdmissionApplicationWithdrawalReasonsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationWithdrawalReasons",
                routeTemplate: "admission-application-withdrawal-reasons/{guid}",
                defaults: new { controller = "AdmissionApplicationWithdrawalReasons", action = "DeleteAdmissionApplicationWithdrawalReasonsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Admission Application Withdrawal Reasons

            #region AdmissionApplicationTypes

            routes.MapHttpRoute(
              name: "GetAdmissionApplicationTypesByGuid",
              routeTemplate: "admission-application-types/{id}",
              defaults: new { controller = "AdmissionApplicationTypes", action = "GetAdmissionApplicationTypeByIdAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
            );
            routes.MapHttpRoute(
               name: "DefaultGetAdmissionApplicationTypesByGuid",
               routeTemplate: "admission-application-types/{id}",
                  defaults: new { controller = "AdmissionApplicationTypes", action = "GetAdmissionApplicationTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
             );
            routes.MapHttpRoute(
              name: "GetAdmissionApplicationTypes",
              routeTemplate: "admission-application-types",
              defaults: new { controller = "AdmissionApplicationTypes", action = "GetAdmissionApplicationTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
            );
            routes.MapHttpRoute(
              name: "DefaultGetAdmissionApplicationTypes",
              routeTemplate: "admission-application-types",
              defaults: new { controller = "AdmissionApplicationTypes", action = "GetAdmissionApplicationTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, true)
              }
            );
            routes.MapHttpRoute(
              name: "PutAdmissionApplicationType",
              routeTemplate: "admission-application-types/{id}",
              defaults: new { controller = "AdmissionApplicationTypes", action = "PutAdmissionApplicationType" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );
            routes.MapHttpRoute(
               name: "PostAdmissionApplicationType",
               routeTemplate: "admission-application-types",
               defaults: new { controller = "AdmissionApplicationTypes", action = "PostAdmissionApplicationType" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionApplicationType",
                routeTemplate: "admission-application-types/{id}",
                defaults: new { controller = "AdmissionApplicationTypes", action = "DeleteAdmissionApplicationType" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion

            #region  Admission Decision Types

            routes.MapHttpRoute(
              name: "GetAdmissionDecisionTypesByGuidV11",
              routeTemplate: "admission-decision-types/{guid}",
              defaults: new { controller = "AdmissionDecisionTypes", action = "GetAdmissionDecisionTypeByGuid2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "GetAdmissionDecisionTypesByGuidV9",
              routeTemplate: "admission-decision-types/{guid}",
              defaults: new { controller = "AdmissionDecisionTypes", action = "GetAdmissionDecisionTypeByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionDecisionTypesByGuid",
               routeTemplate: "admission-decision-types/{guid}",
                  defaults: new { controller = "AdmissionDecisionTypes", action = "GetAdmissionDecisionTypeByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
             );

            routes.MapHttpRoute(
              name: "GetAdmissionDecisionTypesV11",
              routeTemplate: "admission-decision-types",
              defaults: new { controller = "AdmissionDecisionTypes", action = "GetAdmissionDecisionTypes2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetAdmissionDecisionTypesV9",
              routeTemplate: "admission-decision-types",
              defaults: new { controller = "AdmissionDecisionTypes", action = "GetAdmissionDecisionTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetAdmissionDecisionTypes",
               routeTemplate: "admission-decision-types",
                  defaults: new { controller = "AdmissionDecisionTypes", action = "GetAdmissionDecisionTypes2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionDecisionTypesV11",
              routeTemplate: "admission-decision-types/{guid}",
              defaults: new { controller = "AdmissionDecisionTypes", action = "PutAdmissionDecisionTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "PutAdmissionDecisionTypesV9",
              routeTemplate: "admission-decision-types/{guid}",
              defaults: new { controller = "AdmissionDecisionTypes", action = "PutAdmissionDecisionTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "PostAdmissionDecisionTypesV11",
               routeTemplate: "admission-decision-types",
               defaults: new { controller = "AdmissionDecisionTypes", action = "PostAdmissionDecisionTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
               name: "PostAdmissionDecisionTypesV9",
               routeTemplate: "admission-decision-types",
               defaults: new { controller = "AdmissionDecisionTypes", action = "PostAdmissionDecisionTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionDecisionTypes",
                routeTemplate: "admission-decision-types/{guid}",
                defaults: new { controller = "AdmissionDecisionTypes", action = "DeleteAdmissionDecisionTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            #endregion Admission Decision Types

            #region  Admission Decisions

            routes.MapHttpRoute(
             name: "GetAdmissionDecisionsByGuidV11_1_0",
             routeTemplate: "admission-decisions/{guid}",
             defaults: new { controller = "AdmissionDecisions", action = "GetAdmissionDecisionsByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
             }
         );

            routes.MapHttpRoute(
              name: "GetAdmissionDecisionsByGuidV11",
              routeTemplate: "admission-decisions/{guid}",
              defaults: new { controller = "AdmissionDecisions", action = "GetAdmissionDecisionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionDecisionsByGuid",
               routeTemplate: "admission-decisions/{guid}",
                  defaults: new { controller = "AdmissionDecisions", action = "GetAdmissionDecisionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "GetAdmissionDecisionsV11_1_0",
              routeTemplate: "admission-decisions",
              defaults: new { controller = "AdmissionDecisions", action = "GetAdmissionDecisionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
              }
          );


            routes.MapHttpRoute(
              name: "GetAdmissionDecisionsV11",
              routeTemplate: "admission-decisions",
              defaults: new { controller = "AdmissionDecisions", action = "GetAdmissionDecisionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionDecisions",
               routeTemplate: "admission-decisions",
                  defaults: new { controller = "AdmissionDecisions", action = "GetAdmissionDecisionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "PutAdmissionDecisionsV11_1_0",
              routeTemplate: "admission-decisions/{guid}",
              defaults: new { controller = "AdmissionDecisions", action = "PutAdmissionDecisionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
              }
          );

            routes.MapHttpRoute(
              name: "PutAdmissionDecisionsV11",
              routeTemplate: "admission-decisions/{guid}",
              defaults: new { controller = "AdmissionDecisions", action = "PutAdmissionDecisionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
              name: "PostAdmissionDecisionsV11_1_0",
              routeTemplate: "admission-decisions",
              defaults: new { controller = "AdmissionDecisions", action = "PostAdmissionDecisionsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
             }
          );

            routes.MapHttpRoute(
               name: "PostAdmissionDecisionsV11",
               routeTemplate: "admission-decisions",
               defaults: new { controller = "AdmissionDecisions", action = "PostAdmissionDecisionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionDecisions",
                routeTemplate: "admission-decisions/{guid}",
                defaults: new { controller = "AdmissionDecisions", action = "DeleteAdmissionDecisionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );


            routes.MapHttpRoute(
              name: "AdmissionDecisionsUnsupported",
              routeTemplate: "admission-decisions/{id}",
               defaults: new { controller = "AdmissionDecisions", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            #endregion Admission Decisions

            #region AdmissionPopulations

            routes.MapHttpRoute(
              name: "GetAdmissionPopulationsByGuid",
              routeTemplate: "admission-populations/{id}",
              defaults: new { controller = "AdmissionPopulations", action = "GetAdmissionPopulationByIdAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
            );
            routes.MapHttpRoute(
               name: "DefaultGetAdmissionPopulationsByGuid",
               routeTemplate: "admission-populations/{id}",
                  defaults: new { controller = "AdmissionPopulations", action = "GetAdmissionPopulationByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
             );
            routes.MapHttpRoute(
              name: "GetAdmissionPopulations",
              routeTemplate: "admission-populations",
              defaults: new { controller = "AdmissionPopulations", action = "GetAdmissionPopulationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
            );
            routes.MapHttpRoute(
              name: "DefaultGetAdmissionPopulations",
              routeTemplate: "admission-populations",
              defaults: new { controller = "AdmissionPopulations", action = "GetAdmissionPopulationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, true)
              }
            );
            routes.MapHttpRoute(
              name: "PutAdmissionPopulation",
              routeTemplate: "admission-populations/{id}",
              defaults: new { controller = "AdmissionPopulations", action = "PutAdmissionPopulation" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );
            routes.MapHttpRoute(
               name: "PostAdmissionPopulation",
               routeTemplate: "admission-populations",
               defaults: new { controller = "AdmissionPopulations", action = "PostAdmissionPopulation" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionPopulation",
                routeTemplate: "admission-populations/{id}",
                defaults: new { controller = "AdmissionPopulations", action = "DeleteAdmissionPopulation" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion

            #region  Admission Residency Types

            routes.MapHttpRoute(
              name: "GetAdmissionResidencyTypesByGuidV6",
              routeTemplate: "admission-residency-types/{guid}",
              defaults: new { controller = "AdmissionResidencyTypes", action = "GetAdmissionResidencyTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdmissionResidencyTypesByGuid",
               routeTemplate: "admission-residency-types/{guid}",
                  defaults: new { controller = "AdmissionResidencyTypes", action = "GetAdmissionResidencyTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAdmissionResidencyTypesV6",
              routeTemplate: "admission-residency-types",
              defaults: new { controller = "AdmissionResidencyTypes", action = "GetAdmissionResidencyTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAdmissionResidencyTypes",
               routeTemplate: "admission-residency-types",
                  defaults: new { controller = "AdmissionResidencyTypes", action = "GetAdmissionResidencyTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAdmissionResidencyTypesV6",
              routeTemplate: "admission-residency-types/{guid}",
              defaults: new { controller = "AdmissionResidencyTypes", action = "PutAdmissionResidencyTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdmissionResidencyTypesV6",
               routeTemplate: "admission-residency-types",
               defaults: new { controller = "AdmissionResidencyTypes", action = "PostAdmissionResidencyTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdmissionResidencyTypes",
                routeTemplate: "admission-residency-types/{guid}",
                defaults: new { controller = "AdmissionResidencyTypes", action = "DeleteAdmissionResidencyTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Admission Residency Types

            #region AdmittedStatuses

            routes.MapHttpRoute(
                name: "GetAdmittedStatuses",
                routeTemplate: "admitted-statuses",
                defaults: new { controller = "AdmittedStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Advisees

            routes.MapHttpRoute(
                name: "PostAdvisementComplete",
                routeTemplate: "students/{studentId}/completed-advisements",
                defaults: new { controller = "AdvisementsComplete", action = "PostCompletedAdvisementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Advisors

            routes.MapHttpRoute(
                name: "AdvisorPermissions",
                routeTemplate: "advisors/permissions",
                defaults: new { controller = "Advisors", action = "GetPermissionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetAdvisingPermissions2Async",
                routeTemplate: "advisors/permissions",
                defaults: new { controller = "Advisors", action = "GetAdvisingPermissions2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "Advisor",
                routeTemplate: "advisors/{id}",
                defaults: new { controller = "Advisors", action = "GetAdvisorAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryAdvisorsByPost",
                routeTemplate: "qapi/advisors",
                defaults: new { controller = "Advisors", action = "QueryAdvisorsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "QueryAdvisorsByPost2",
                routeTemplate: "qapi/advisors",
                defaults: new { controller = "Advisors", action = "QueryAdvisorsByPost2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAdvisees2",
                routeTemplate: "advisors/{advisorId}/advisees",
                defaults: new { controller = "Advisors", action = "GetAdvisees2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAdvisee2",
                routeTemplate: "advisors/{advisorId}/{adviseeId}",
                defaults: new { controller = "Advisors", action = "GetAdvisee2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryAdviseesByPost2",
                routeTemplate: "qapi/advisees",
                defaults: new { controller = "Advisees", action = "QueryAdviseesByPost2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );
            routes.MapHttpRoute(
                name: "QueryAdviseesForExactMatchByPost",
                routeTemplate: "qapi/advisees",
                defaults: new { controller = "Advisees", action = "QueryAdviseesForExactMatchByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianPersonSearchExactMatchFormat, 1))
                }
            );

            #endregion

            #region AdvisorTypes

            routes.MapHttpRoute(
                name: "GetAdvisorTypes",
                routeTemplate: "advisor-types",
                defaults: new { controller = "AdvisorTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
              name: "GetAdvisorTypesByGuidV8",
              routeTemplate: "advisor-types/{guid}",
              defaults: new { controller = "AdvisorTypes", action = "GetAdvisorTypesByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetAdvisorTypesByGuid",
               routeTemplate: "advisor-types/{guid}",
                  defaults: new { controller = "AdvisorTypes", action = "GetAdvisorTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );


            routes.MapHttpRoute(
              name: "GetAdvisorTypesV8",
              routeTemplate: "advisor-types",
              defaults: new { controller = "AdvisorTypes", action = "GetAdvisorTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAdvisorTypes",
                routeTemplate: "advisor-types",
                  defaults: new { controller = "AdvisorTypes", action = "GetAdvisorTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
           );

            routes.MapHttpRoute(
              name: "PutAdvisorTypesV8",
              routeTemplate: "advisor-types/{guid}",
              defaults: new { controller = "AdvisorTypes", action = "PutAdvisorTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostAdvisorTypesV8",
               routeTemplate: "advisor-types",
               defaults: new { controller = "AdvisorTypes", action = "PostAdvisorTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAdvisorTypes",
                routeTemplate: "advisor-types/{guid}",
                defaults: new { controller = "AdvisorTypes", action = "DeleteAdvisorTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            #endregion

            #region Affiliations

            routes.MapHttpRoute(
                name: "GetAffiliations",
                routeTemplate: "affiliations",
                defaults: new { controller = "Affiliations", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region AgreementPeriods

            routes.MapHttpRoute(
                name: "GetAgreementPeriodsAsync",
                routeTemplate: "agreement-periods",
                defaults: new { controller = "AgreementPeriods", action = "GetAgreementPeriodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Applicants
            routes.MapHttpRoute(
                name: "Applicants",
                routeTemplate: "applicants/{applicantId}",
                defaults: new { controller = "Applicants", action = "GetApplicantAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // Undocumented route created for reference by Api Client for self-service in anticipation of obsolescence of version1 for privacy in 1.16
            routes.MapHttpRoute(
                name: "Applicants2",
                routeTemplate: "applicants/{applicantId}",
                defaults: new { controller = "Applicants", action = "GetApplicantAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );
            #endregion

            #region ApplicationInfluences

            routes.MapHttpRoute(
                name: "GetApplicationInfluences",
                routeTemplate: "application-influences",
                defaults: new { controller = "ApplicationInfluences", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region ApplicationStatuses

            routes.MapHttpRoute(
                name: "GetApplicationStatuses",
                routeTemplate: "application-statuses",
                defaults: new { controller = "ApplicationStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region ApplicationStatusCategories

            routes.MapHttpRoute(
                name: "GetApplicationStatusCategories",
                routeTemplate: "application-status-categories",
                defaults: new { controller = "ApplicationStatusCategories", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Aptitude Assessments

            routes.MapHttpRoute(
              name: "GetAptitudeAssessmentsByGuidV6",
              routeTemplate: "aptitude-assessments/{guid}",
              defaults: new { controller = "AptitudeAssessments", action = "GetAptitudeAssessmentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAptitudeAssessmentsByGuid",
               routeTemplate: "aptitude-assessments/{guid}",
                  defaults: new { controller = "AptitudeAssessments", action = "GetAptitudeAssessmentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAptitudeAssessmentsV6",
              routeTemplate: "aptitude-assessments",
              defaults: new { controller = "AptitudeAssessments", action = "GetAptitudeAssessmentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAptitudeAssessments",
               routeTemplate: "aptitude-assessments",
                  defaults: new { controller = "AptitudeAssessments", action = "GetAptitudeAssessmentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAptitudeAssessmentsV6",
              routeTemplate: "aptitude-assessments/{guid}",
              defaults: new { controller = "AptitudeAssessments", action = "PutAptitudeAssessmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );


            routes.MapHttpRoute(
               name: "PostAptitudeAssessmentsV6",
               routeTemplate: "aptitude-assessments",
               defaults: new { controller = "AptitudeAssessments", action = "PostAptitudeAssessmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAptitudeAssessments",
                routeTemplate: "aptitude-assessments/{guid}",
                defaults: new { controller = "AptitudeAssessments", action = "DeleteAptitudeAssessmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Aptitude Assessments

            #region  Aptitude Assessment Types

            routes.MapHttpRoute(
              name: "GetAptitudeAssessmentTypesByGuidV6",
              routeTemplate: "aptitude-assessment-types/{guid}",
              defaults: new { controller = "AptitudeAssessmentTypes", action = "GetAptitudeAssessmentTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAptitudeAssessmentTypesByGuid",
               routeTemplate: "aptitude-assessment-types/{guid}",
                  defaults: new { controller = "AptitudeAssessmentTypes", action = "GetAptitudeAssessmentTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAptitudeAssessmentTypesV6",
              routeTemplate: "aptitude-assessment-types",
              defaults: new { controller = "AptitudeAssessmentTypes", action = "GetAptitudeAssessmentTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAptitudeAssessmentTypes",
               routeTemplate: "aptitude-assessment-types",
                  defaults: new { controller = "AptitudeAssessmentTypes", action = "GetAptitudeAssessmentTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAptitudeAssessmentTypesV6",
              routeTemplate: "aptitude-assessment-types/{guid}",
              defaults: new { controller = "AptitudeAssessmentTypes", action = "PutAptitudeAssessmentTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );


            routes.MapHttpRoute(
               name: "PostAptitudeAssessmentTypesV6",
               routeTemplate: "aptitude-assessment-types",
               defaults: new { controller = "AptitudeAssessmentTypes", action = "PostAptitudeAssessmentTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAptitudeAssessmentTypes",
                routeTemplate: "aptitude-assessment-types/{guid}",
                defaults: new { controller = "AptitudeAssessmentTypes", action = "DeleteAptitudeAssessmentTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Aptitude Assessment Types

            #region  Accounts Payable Sources

            routes.MapHttpRoute(
              name: "GetAccountsPayableSourcesByGuidV8",
              routeTemplate: "accounts-payable-sources/{guid}",
              defaults: new { controller = "AccountsPayableSources", action = "GetAccountsPayableSourcesByIdAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountsPayableSourcesByGuid",
               routeTemplate: "accounts-payable-sources/{guid}",
                  defaults: new { controller = "AccountsPayableSources", action = "GetAccountsPayableSourcesByIdAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAccountsPayableSourcesV8",
              routeTemplate: "accounts-payable-sources",
              defaults: new { controller = "AccountsPayableSources", action = "GetAccountsPayableSourcesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAccountsPayableSources",
               routeTemplate: "accounts-payable-sources",
                  defaults: new { controller = "AccountsPayableSources", action = "GetAccountsPayableSourcesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAccountsPayableSourcesV8Async",
              routeTemplate: "accounts-payable-sources/{guid}",
              defaults: new { controller = "AccountsPayableSources", action = "PutAccountsPayableSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostAccountsPayableSourcesV8Async",
               routeTemplate: "accounts-payable-sources",
               defaults: new { controller = "AccountsPayableSources", action = "PostAccountsPayableSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAccountsPayableSourcesAsync",
                routeTemplate: "accounts-payable-sources/{guid}",
                defaults: new { controller = "AccountsPayableSources", action = "DeleteAccountsPayableSourcesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounts Payable Sources

            #region AccountsPayableTaxes

            routes.MapHttpRoute(
                name: "GetAccountsPayableTaxes",
                routeTemplate: "accounts-payable-taxes",
                defaults: new { controller = "AccountsPayableTaxes", action = "GetAccountsPayableTaxesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region AccountsPayableTypes

            routes.MapHttpRoute(
                name: "GetAccountsPayableTypes",
                routeTemplate: "accounts-payable-types",
                defaults: new { controller = "AccountsPayableTypes", action = "GetAccountsPayableTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region  AssessmentCalculationMethods

            routes.MapHttpRoute(
              name: "GetAssessmentCalculationMethodsByGuidV6",
              routeTemplate: "assessment-calculation-methods/{guid}",
              defaults: new { controller = "AssessmentCalculationMethods", action = "GetAssessmentCalculationMethodsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAssessmentCalculationMethodsByGuid",
               routeTemplate: "assessment-calculation-methods/{guid}",
                  defaults: new { controller = "AssessmentCalculationMethods", action = "GetAssessmentCalculationMethodsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAssessmentCalculationMethodsV6",
              routeTemplate: "assessment-calculation-methods",
              defaults: new { controller = "AssessmentCalculationMethods", action = "GetAssessmentCalculationMethodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAssessmentCalculationMethods",
               routeTemplate: "assessment-calculation-methods",
                  defaults: new { controller = "AssessmentCalculationMethods", action = "GetAssessmentCalculationMethodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAssessmentCalculationMethodsV6",
              routeTemplate: "assessment-calculation-methods/{guid}",
              defaults: new { controller = "AssessmentCalculationMethods", action = "PutAssessmentCalculationMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );


            routes.MapHttpRoute(
               name: "PostAssessmentCalculationMethodsV6",
               routeTemplate: "assessment-calculation-methods",
               defaults: new { controller = "AssessmentCalculationMethods", action = "PostAssessmentCalculationMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAssessmentCalculationMethods",
                routeTemplate: "assessment-calculation-methods/{guid}",
                defaults: new { controller = "AssessmentCalculationMethods", action = "DeleteAssessmentCalculationMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Assessment Calculation Methods

            #region  Assessment Percentile Types

            routes.MapHttpRoute(
              name: "GetAssessmentPercentileTypesByGuidV6",
              routeTemplate: "assessment-percentile-types/{guid}",
              defaults: new { controller = "AssessmentPercentileTypes", action = "GetAssessmentPercentileTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAssessmentPercentileTypesByGuid",
               routeTemplate: "assessment-percentile-types/{guid}",
                  defaults: new { controller = "AssessmentPercentileTypes", action = "GetAssessmentPercentileTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAssessmentPercentileTypesV6",
              routeTemplate: "assessment-percentile-types",
              defaults: new { controller = "AssessmentPercentileTypes", action = "GetAssessmentPercentileTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetAssessmentPercentileTypes",
               routeTemplate: "assessment-percentile-types",
                  defaults: new { controller = "AssessmentPercentileTypes", action = "GetAssessmentPercentileTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAssessmentPercentileTypesV6",
              routeTemplate: "assessment-percentile-types/{guid}",
              defaults: new { controller = "AssessmentPercentileTypes", action = "PutAssessmentPercentileTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );


            routes.MapHttpRoute(
               name: "PostAssessmentPercentileTypesV6",
               routeTemplate: "assessment-percentile-types",
               defaults: new { controller = "AssessmentPercentileTypes", action = "PostAssessmentPercentileTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAssessmentPercentileTypes",
                routeTemplate: "assessment-percentile-types/{guid}",
                defaults: new { controller = "AssessmentPercentileTypes", action = "DeleteAssessmentPercentileTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Assessment Percentile Types

            #region AssessmentSpecialCircumstances

            routes.MapHttpRoute(
                name: "GetAssessmentSpecialCircumstanceByIdV6",
                routeTemplate: "assessment-special-circumstances/{id}",
                defaults: new { controller = "AssessmentSpecialCircumstances", action = "GetAssessmentSpecialCircumstanceByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAssessmentSpecialCircumstanceById",
                routeTemplate: "assessment-special-circumstances/{id}",
                defaults: new { controller = "AssessmentSpecialCircumstances", action = "GetAssessmentSpecialCircumstanceByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetAssessmentSpecialCircumstancesV6",
                routeTemplate: "assessment-special-circumstances",
                defaults: new { controller = "AssessmentSpecialCircumstances", action = "GetAssessmentSpecialCircumstancesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAssessmentSpecialCircumstances",
                routeTemplate: "assessment-special-circumstances",
                defaults: new { controller = "AssessmentSpecialCircumstances", action = "GetAssessmentSpecialCircumstancesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutAssessmentSpecialCircumstancesV6",
               routeTemplate: "assessment-special-circumstances/{id}",
               defaults: new { controller = "AssessmentSpecialCircumstances", action = "PutAssessmentSpecialCircumstanceAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostAssessmentSpecialCircumstancesV6",
                routeTemplate: "assessment-special-circumstances",
                defaults: new { controller = "AssessmentSpecialCircumstances", action = "PostAssessmentSpecialCircumstanceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteAssessmentSpecialCircumstances",
                routeTemplate: "assessment-special-circumstances/{id}",
                defaults: new { controller = "AssessmentSpecialCircumstances", action = "DeleteAssessmentSpecialCircumstanceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region Attachment Collections

            routes.MapHttpRoute(
                name: "GetAttachmentCollectionsById",
                routeTemplate: "attachment-collections/{id}",
                defaults: new { controller = "AttachmentCollections", action = "GetAttachmentCollectionByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAttachmentCollectionsByUser",
                routeTemplate: "attachment-collections",
                defaults: new { controller = "AttachmentCollections", action = "GetAttachmentCollectionsByUserAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostAttachmentCollection",
                routeTemplate: "attachment-collections",
                defaults: new { controller = "AttachmentCollections", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutAttachmentCollection",
                routeTemplate: "attachment-collections/{id}",
                defaults: new { controller = "AttachmentCollections", action = "PutAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAttachmentCollectionEffectivePermissions",
                routeTemplate: "attachment-collections/{id}/effective-permissions",
                defaults: new { controller = "AttachmentCollections", action = "GetEffectivePermissionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Attachments

            routes.MapHttpRoute(
                name: "GetAttachments",
                routeTemplate: "attachments",
                defaults: new { controller = "Attachments", action = "GetAttachmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAttachmentsContent",
                routeTemplate: "attachments/{id}/content",
                defaults: new { controller = "Attachments", action = "GetAttachmentContentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostAttachment",
                routeTemplate: "attachments",
                defaults: new { controller = "Attachments", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutAttachment",
                routeTemplate: "attachments/{id}",
                defaults: new { controller = "Attachments", action = "PutAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteAttachment",
                routeTemplate: "attachments/{id}",
                defaults: new { controller = "Attachments", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Attendance Categories

            routes.MapHttpRoute(
              name: "GetAttendanceCategoriesByGuidV10",
              routeTemplate: "attendance-categories/{guid}",
              defaults: new { controller = "AttendanceCategories", action = "GetAttendanceCategoriesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetAttendanceCategoriesByGuid",
               routeTemplate: "attendance-categories/{guid}",
                  defaults: new { controller = "AttendanceCategories", action = "GetAttendanceCategoriesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetAttendanceCategoriesV10",
              routeTemplate: "attendance-categories",
              defaults: new { controller = "AttendanceCategories", action = "GetAttendanceCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetAttendanceCategories",
               routeTemplate: "attendance-categories",
                  defaults: new { controller = "AttendanceCategories", action = "GetAttendanceCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutAttendanceCategoriesV10",
              routeTemplate: "attendance-categories/{guid}",
              defaults: new { controller = "AttendanceCategories", action = "PutAttendanceCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostAttendanceCategoriesV10",
               routeTemplate: "attendance-categories",
               defaults: new { controller = "AttendanceCategories", action = "PostAttendanceCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteAttendanceCategories",
                routeTemplate: "attendance-categories/{guid}",
                defaults: new { controller = "AttendanceCategories", action = "DeleteAttendanceCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Attendance Categories

            #region AverageAwardPackages
            routes.MapHttpRoute(
                name: "GetAverageAwardPackages",
                routeTemplate: "students/{studentId}/average-award-packages",
                defaults: new { controller = "AverageAwardPackages", action = "GetAverageAwardPackagesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
             );
            #endregion

            #region AuthenticationScheme
            routes.MapHttpRoute(
                name: "GetAuthenticationSchemeAsync",
                routeTemplate: "authentication-scheme",
                defaults: new { controller = "AuthenticationScheme", action = "GetAuthenticationSchemeAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "username" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
             );

            #endregion

            #region AwardLetters

            #region Obsolete AwardLetter Routes

            //WARNING: Obsolete as of API 1.9. Use GetAwardLetters2 route
            routes.MapHttpRoute(
                name: "GetAwardLetters",
                routeTemplate: "students/{studentId}/award-letters",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetters" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            //WARNING: Obsolete as of API 1.10. Use GetAwardLetters3 route
            routes.MapHttpRoute(
                name: "GetAwardLetters2",
                routeTemplate: "students/{studentId}/award-letters",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetters2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            //WARNING: Obsolete as of API 1.9. Use GetAwardLetterReport2 route
            routes.MapHttpRoute(
                name: "GetAwardLetterReport",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetterReport" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            //WARNING: Obsolete as of API 1.10. Use GetAwardLetterReport3Async route
            routes.MapHttpRoute(
                name: "GetAwardLetterReport2",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetterReport2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false, string.Format(EllucianPDFMediaTypeFormat, 2))
                }
            );

            //WARNING: Obsolete as of API 1.9. Use GetAwardLetter2 route
            routes.MapHttpRoute(
                name: "GetAwardLetter",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetter" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)

                }
            );

            //WARNING: Obsolete as of API 1.10. Use GetAwardLetters3Async route
            routes.MapHttpRoute(
                name: "GetAwardLetter2",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetter2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)

                }
            );

            //WARNING: Obsolete as of API 1.10. Use UpdateAwardLetter2 route
            routes.MapHttpRoute(
                name: "UpdateAwardLetter",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "UpdateAwardLetter" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            //WARNING: Obsolete as of API 1.22. Use GetAwardLetters4Async route
            routes.MapHttpRoute(
                name: "GetAwardLetters3Async",
                routeTemplate: "students/{studentId}/award-letters",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetters3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
             );

            //This route that produces a PDF must appear BEFORE the GetAwardLetter3Async route because the second parameter to the HeaderVersionConstraint 
            //is false.
            //WARNING: Obsolete as of API 1.22. Use GetAwardLetterReport4Async route
            routes.MapHttpRoute(
                name: "GetAwardLetterReport3Async",
                routeTemplate: "students/{studentId}/award-letters/{awardLetterId}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetterReport3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false, string.Format(EllucianPDFMediaTypeFormat, 3))
                }
            );

            //WARNING: Obsolete as of API 1.22. Use GetAwardLetter4Async route
            routes.MapHttpRoute(
                name: "GetAwardLetter3Async",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetter3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );

            //WARNING: Obsolete as of API 1.22. Use UpdateAwardLetter3Async route
            routes.MapHttpRoute(
                name: "UpdateAwardLetter2",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "UpdateAwardLetter2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );


            #endregion

            routes.MapHttpRoute(
                name: "GetAwardLetters4Async",
                routeTemplate: "students/{studentId}/award-letters",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetters4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, true)
                }
             );

            routes.MapHttpRoute(
                name: "GetAwardLetterReport4Async",
                routeTemplate: "students/{studentId}/award-letters/{awardLetterId}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetterReport4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, false, string.Format(EllucianPDFMediaTypeFormat, 4))
                }
            );

            routes.MapHttpRoute(
                name: "GetAwardLetter4Async",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "GetAwardLetter4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateAwardLetter3",
                routeTemplate: "students/{studentId}/award-letters/{awardYear}",
                defaults: new { controller = "AwardLetters", action = "UpdateAwardLetter3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            #endregion

            #region AwardLetterConfigurations

            routes.MapHttpRoute(
                name: "GetAwardLetterConfigurationsAsync",
                routeTemplate: "award-letter-configurations",
                defaults: new { controller = "AwardLetterConfigurations", action = "GetAwardLetterConfigurationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)

                }
            );
            #endregion

            #region AwardCategories
            //WARNING: Obsolete as of API 1.8. Use GetAwardCategories2 route
            routes.MapHttpRoute(
                name: "AwardCategories",
                routeTemplate: "award-categories",
                defaults: new { controller = "AwardCategories", action = "GetAwardCategories" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "AwardCategories2",
                routeTemplate: "award-categories",
                defaults: new { controller = "AwardCategories", action = "GetAwardCategories2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );
            #endregion

            #region AwardPackageChangeRequests

            routes.MapHttpRoute(
                name: "GetStudentAwardPackageChangeRequests",
                routeTemplate: "students/{studentId}/award-package-change-requests",
                defaults: new { controller = "AwardPackageChangeRequests", action = "GetAwardPackageChangeRequestsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAwardPackageChangeRequest",
                routeTemplate: "students/{studentId}/award-package-change-requests/{requestId}",
                defaults: new { controller = "AwardPackageChangeRequests", action = "GetAwardPackageChangeRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateStudentAwardPackageChangeRequest",
                routeTemplate: "students/{studentId}/award-package-change-requests",
                defaults: new { controller = "AwardPackageChangeRequests", action = "PostAwardPackageChangeRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion          

            #region Awards
            //WARNING: Obsolete as of API 1.8. Use GetAwards2 route
            routes.MapHttpRoute(
                name: "Awards",
                routeTemplate: "awards",
                defaults: new { controller = "Awards", action = "GetAwards" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "Awards2",
                routeTemplate: "awards",
                defaults: new { controller = "Awards", action = "GetAwards2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );
            #endregion

            #region AwardStatuses
            routes.MapHttpRoute(
                name: "AwardStatuses",
                routeTemplate: "award-statuses",
                defaults: new { controller = "AwardStatuses", action = "GetAwardStatuses" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region AwardTypes
            routes.MapHttpRoute(
                name: "AwardTypes",
                routeTemplate: "award-types",
                defaults: new { controller = "AwardTypes", action = "GetAwardTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region AwardPeriods
            routes.MapHttpRoute(
                name: "GetAwardPeriods",
                routeTemplate: "award-periods",
                defaults: new { controller = "AwardPeriods", action = "GetAwardPeriods" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region AwardYears
            routes.MapHttpRoute(
                name: "AwardYears",
                routeTemplate: "award-years",
                defaults: new { controller = "AwardYears", action = "GetAwardYears" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Approvals

            routes.MapHttpRoute(
                 name: "GetApprovalDocument",
                 routeTemplate: "approvals/document/{documentId}",
                 defaults: new { controller = "Approvals", action = "GetApprovalDocument" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );

            routes.MapHttpRoute(
                 name: "GetApprovalResponse",
                 routeTemplate: "approvals/response/{responseId}",
                 defaults: new { controller = "Approvals", action = "GetApprovalResponse" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );

            #endregion

            #region Backup configuration

            routes.MapHttpRoute(
                name: "PostBackupApiConfigData",
                routeTemplate: "configuration/backup-api-config",
                defaults: new { controller = "Configuration", action = "PostBackupApiConfigAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianConfigurationFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "PostRestoreApiConfigData",
                routeTemplate: "configuration/restore-api-config",
                defaults: new { controller = "Configuration", action = "PostRestoreApiConfigAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianConfigurationFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "PostBackupConfigData",
                routeTemplate: "configuration",
                defaults: new { controller = "Configuration", action = "PostConfigBackupDataAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianConfigurationFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "QueryBackupConfigData",
                routeTemplate: "qapi/configuration",
                defaults: new { controller = "Configuration", action = "QueryBackupConfigDataByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianConfigurationFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "GetBackupConfigData",
                routeTemplate: "configuration/{id}",
                defaults: new { controller = "Configuration", action = "GetConfigBackupDataAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianConfigurationFormat, 1))
                }
            );

            #endregion

            #region BankingInformationConfiguration
            routes.MapHttpRoute(
                 name: "BankingInformationConfiguration",
                 routeTemplate: "banking-information-configuration",
                 defaults: new { controller = "BankingInformationConfigurations", action = "GetAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );
            #endregion

            #region Banks
            routes.MapHttpRoute(
                 name: "Banks",
                 routeTemplate: "banks/{id}",
                 defaults: new { controller = "Banks", action = "GetBankAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );
            #endregion

            #region BargainingUnits

            routes.MapHttpRoute(
                name: "GetHedmBargainingUnits",
                routeTemplate: "bargaining-units",
                defaults: new { controller = "BargainingUnits", action = "GetBargainingUnitsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmBargainingUnits",
                routeTemplate: "bargaining-units",
                defaults: new { controller = "BargainingUnits", action = "GetBargainingUnitsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmBargainingUnitsById",
                routeTemplate: "bargaining-units/{id}",
                defaults: new { controller = "BargainingUnits", action = "GetBargainingUnitByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmBargainingUnitsById",
                routeTemplate: "bargaining-units/{id}",
                defaults: new { controller = "BargainingUnits", action = "GetBargainingUnitByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmBargainingUnits",
                routeTemplate: "bargaining-units",
                defaults: new { controller = "BargainingUnits", action = "PostBargainingUnitAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmBargainingUnits",
                routeTemplate: "bargaining-units/{id}",
                defaults: new { controller = "BargainingUnits", action = "PutBargainingUnitAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmBargainingUnits",
                routeTemplate: "bargaining-units/{id}",
                defaults: new { controller = "BargainingUnits", action = "DeleteBargainingUnitAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Beneficiary Preference Types

            routes.MapHttpRoute(
              name: "GetBeneficiaryPreferenceTypesByGuidV11",
              routeTemplate: "beneficiary-preference-types/{guid}",
              defaults: new { controller = "BeneficiaryPreferenceTypes", action = "GetBeneficiaryPreferenceTypesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBeneficiaryPreferenceTypesByGuid",
               routeTemplate: "beneficiary-preference-types/{guid}",
                  defaults: new { controller = "BeneficiaryPreferenceTypes", action = "GetBeneficiaryPreferenceTypesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetBeneficiaryPreferenceTypesV11",
              routeTemplate: "beneficiary-preference-types",
              defaults: new { controller = "BeneficiaryPreferenceTypes", action = "GetBeneficiaryPreferenceTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetBeneficiaryPreferenceTypes",
               routeTemplate: "beneficiary-preference-types",
                  defaults: new { controller = "BeneficiaryPreferenceTypes", action = "GetBeneficiaryPreferenceTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBeneficiaryPreferenceTypesV11",
              routeTemplate: "beneficiary-preference-types/{guid}",
              defaults: new { controller = "BeneficiaryPreferenceTypes", action = "PutBeneficiaryPreferenceTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostBeneficiaryPreferenceTypesV11",
               routeTemplate: "beneficiary-preference-types",
               defaults: new { controller = "BeneficiaryPreferenceTypes", action = "PostBeneficiaryPreferenceTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBeneficiaryPreferenceTypes",
                routeTemplate: "beneficiary-preference-types/{guid}",
                defaults: new { controller = "BeneficiaryPreferenceTypes", action = "DeleteBeneficiaryPreferenceTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Beneficiary Preference Types

            #region  Billing Override Reasons

            routes.MapHttpRoute(
              name: "GetBillingOverrideReasonsByGuidV8",
              routeTemplate: "billing-override-reasons/{guid}",
              defaults: new { controller = "BillingOverrideReasons", action = "GetBillingOverrideReasonsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBillingOverrideReasonsByGuid",
               routeTemplate: "billing-override-reasons/{guid}",
                  defaults: new { controller = "BillingOverrideReasons", action = "GetBillingOverrideReasonsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetBillingOverrideReasonsV8",
              routeTemplate: "billing-override-reasons",
              defaults: new { controller = "BillingOverrideReasons", action = "GetBillingOverrideReasonsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "GetBillingOverrideReasons",
               routeTemplate: "billing-override-reasons",
                  defaults: new { controller = "BillingOverrideReasons", action = "GetBillingOverrideReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBillingOverrideReasonsV8",
              routeTemplate: "billing-override-reasons/{guid}",
              defaults: new { controller = "BillingOverrideReasons", action = "PutBillingOverrideReasonsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostBillingOverrideReasonsV8",
               routeTemplate: "billing-override-reasons",
               defaults: new { controller = "BillingOverrideReasons", action = "PostBillingOverrideReasonsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBillingOverrideReasons",
                routeTemplate: "billing-override-reasons/{guid}",
                defaults: new { controller = "BillingOverrideReasons", action = "DeleteBillingOverrideReasonsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Billing Override Reasons

            #region Blanket Purchase Orders

            routes.MapHttpRoute(
              name: "GetBlanketPurchaseOrdersByGuidV16_0_0",
              routeTemplate: "blanket-purchase-orders/{id}",
              defaults: new { controller = "BlanketPurchaseOrders", action = "GetBlanketPurchaseOrdersByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBlanketPurchaseOrdersByGuid",
               routeTemplate: "blanket-purchase-orders/{id}",
                  defaults: new { controller = "BlanketPurchaseOrders", action = "GetBlanketPurchaseOrdersByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "GetBlanketPurchaseOrdersV16_0_0",
              routeTemplate: "blanket-purchase-orders",
              defaults: new { controller = "BlanketPurchaseOrders", action = "GetBlanketPurchaseOrdersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "DefaultGetBlanketPurchaseOrders",
               routeTemplate: "blanket-purchase-orders",
                  defaults: new { controller = "BlanketPurchaseOrders", action = "GetBlanketPurchaseOrdersAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBlanketPurchaseOrdersV16_0_0",
              routeTemplate: "blanket-purchase-orders/{id}",
              defaults: new { controller = "BlanketPurchaseOrders", action = "PutBlanketPurchaseOrdersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "PostBlanketPurchaseOrdersV16_0_0",
               routeTemplate: "blanket-purchase-orders",
               defaults: new { controller = "BlanketPurchaseOrders", action = "PostBlanketPurchaseOrdersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBlanketPurchaseOrders",
                routeTemplate: "blanket-purchase-orders/{id}",
                defaults: new { controller = "BlanketPurchaseOrders", action = "DeleteBlanketPurchaseOrdersAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
              name: "BlanketPurchaseOrdersUnsupported",
              routeTemplate: "blanket-purchase-orders/{id}",
               defaults: new { controller = "BlanketPurchaseOrders", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            #endregion

            #region Books

            routes.MapHttpRoute(
                 name: "GetBook",
                 routeTemplate: "books/{id}",
                 defaults: new { controller = "Books", action = "GetAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );

            routes.MapHttpRoute(
                name: "QueryBooks",
                routeTemplate: "qapi/books",
                defaults: new { controller = "Books", action = "QueryBooksByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                 name: "GetBookOptions",
                 routeTemplate: "book-options",
                 defaults: new { controller = "BookOptions", action = "GetAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );
            #endregion

            #region BookSpending
            routes.MapHttpRoute(
                name: "GetBookSpendingAsync",
                routeTemplate: "students/{studentId}/book-spending",
                defaults: new { controller = "BookSpending", action = "GetBookSpendingAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-falink-book-spending.v{0}+json", 1)),
               }
            );
            #endregion

            #region BPO

            routes.MapHttpRoute(
                name: "GetBlanketPurchaseOrder",
                routeTemplate: "blanket-purchase-orders/{blanketPurchaseOrderId}",
                defaults: new { controller = "BlanketPurchaseOrders", action = "GetBlanketPurchaseOrderAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Budget Development

            routes.MapHttpRoute(
                name: "GetBudgetDevelopmentConfiguration",
                routeTemplate: "configuration/budget-development",
                defaults: new { controller = "BudgetDevelopmentConfiguration", action = "GetBudgetDevelopmentConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetBudgetDevelopmentWorkingBudget",
                routeTemplate: "budget-development/working-budget/{startPosition}/{recordCount}",
                defaults: new { controller = "BudgetDevelopment", action = "GetBudgetDevelopmentWorkingBudgetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route as of API version 1.25. Use QueryWorkingBudget2.
            routes.MapHttpRoute(
                name: "QueryWorkingBudget",
                routeTemplate: "qapi/working-budget",
                defaults: new { controller = "BudgetDevelopment", action = "QueryWorkingBudgetByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "QueryWorkingBudget2",
                routeTemplate: "qapi/working-budget",
                defaults: new { controller = "BudgetDevelopment", action = "QueryWorkingBudgetByPost2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateBudgetDevelopmentWorkingBudget",
                routeTemplate: "budget-development/working-budget",
                defaults: new { controller = "BudgetDevelopment", action = "UpdateBudgetDevelopmentWorkingBudgetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetBudgetOfficers",
                routeTemplate: "budget-officers",
                defaults: new { controller = "BudgetOfficer", action = "GetBudgetOfficersAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "isInWorkingBudget" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetBudgetReportingUnits",
                routeTemplate: "budget-reporting-units",
                defaults: new { controller = "BudgetReportingUnit", action = "GetBudgetReportingUnitsAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "isInWorkingBudget" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Budget adjustments

            routes.MapHttpRoute(
                name: "GetBudgetAdjustmentConfiguration",
                routeTemplate: "configuration/budget-adjustment-validation",
                defaults: new { controller = "GeneralLedgerConfiguration", action = "GetBudgetAdjustmentConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetBudgetAdjustmentsEnabled",
                routeTemplate: "configuration/budget-adjustment-enabled",
                defaults: new { controller = "GeneralLedgerConfiguration", action = "GetBudgetAdjustmentsEnabledAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            routes.MapHttpRoute(
                name: "GetBudgetAdjustment",
                routeTemplate: "budget-adjustments/{id}",
                defaults: new { controller = "BudgetAdjustments", action = "GetBudgetAdjustmentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateBudgetAdjustment",
                routeTemplate: "budget-adjustments",
                defaults: new { controller = "BudgetAdjustments", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateBudgetAdjustment",
                routeTemplate: "budget-adjustments/{id}",
                defaults: new { controller = "BudgetAdjustments", action = "PutAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                 name: "GetBudgetAdjustments",
                 routeTemplate: "budget-adjustments-summary",
                 defaults: new { controller = "BudgetAdjustments", action = "GetBudgetAdjustmentsSummaryAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            routes.MapHttpRoute(
                 name: "GetBudgetAdjustmentsPendingApprovalSummary",
                 routeTemplate: "budget-adjustments-pending-approval-summary",
                 defaults: new { controller = "BudgetAdjustments", action = "GetBudgetAdjustmentsPendingApprovalSummaryAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );


            routes.MapHttpRoute(
                 name: "GetBudgetAdjustmentPendingApprovalDetail",
                 routeTemplate: "budget-adjustments-pending-approval-detail/{id}",
                 defaults: new { controller = "BudgetAdjustments", action = "GetBudgetAdjustmentPendingApprovalDetailAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            routes.MapHttpRoute(
                 name: "PostBudgetAdjustmentApproval",
                 routeTemplate: "budget-adjustments/{id}/approvals",
                 defaults: new { controller = "BudgetAdjustments", action = "PostBudgetAdjustmentApprovalAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("POST"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            #endregion

            #region  Budget Codes

            routes.MapHttpRoute(
              name: "GetBudgetCodesByGuidV12",
              routeTemplate: "budget-codes/{guid}",
              defaults: new { controller = "BudgetCodes", action = "GetBudgetCodesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBudgetCodesByGuid",
               routeTemplate: "budget-codes/{guid}",
                  defaults: new { controller = "BudgetCodes", action = "GetBudgetCodesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetBudgetCodesV12",
              routeTemplate: "budget-codes",
              defaults: new { controller = "BudgetCodes", action = "GetBudgetCodesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBudgetCodes",
               routeTemplate: "budget-codes",
                  defaults: new { controller = "BudgetCodes", action = "GetBudgetCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBudgetCodesV12",
              routeTemplate: "budget-codes/{guid}",
              defaults: new { controller = "BudgetCodes", action = "PutBudgetCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostBudgetCodesV12",
               routeTemplate: "budget-codes",
               defaults: new { controller = "BudgetCodes", action = "PostBudgetCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBudgetCodes",
                routeTemplate: "budget-codes/{guid}",
                defaults: new { controller = "BudgetCodes", action = "DeleteBudgetCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Budget Codes

            #region  Budget Phases

            routes.MapHttpRoute(
              name: "GetBudgetPhasesByGuidV12",
              routeTemplate: "budget-phases/{guid}",
              defaults: new { controller = "BudgetPhases", action = "GetBudgetPhasesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBudgetPhasesByGuid",
               routeTemplate: "budget-phases/{guid}",
                  defaults: new { controller = "BudgetPhases", action = "GetBudgetPhasesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetBudgetPhasesV12",
              routeTemplate: "budget-phases",
              defaults: new { controller = "BudgetPhases", action = "GetBudgetPhasesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBudgetPhases",
               routeTemplate: "budget-phases",
                  defaults: new { controller = "BudgetPhases", action = "GetBudgetPhasesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBudgetPhasesV12",
              routeTemplate: "budget-phases/{guid}",
              defaults: new { controller = "BudgetPhases", action = "PutBudgetPhasesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostBudgetPhasesV12",
               routeTemplate: "budget-phases",
               defaults: new { controller = "BudgetPhases", action = "PostBudgetPhasesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBudgetPhases",
                routeTemplate: "budget-phases/{guid}",
                defaults: new { controller = "BudgetPhases", action = "DeleteBudgetPhasesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Budget Phases

            #region  Budget Phase Line Items

            routes.MapHttpRoute(
              name: "GetBudgetPhaseLineItemsByGuidV12",
              routeTemplate: "budget-phase-line-items/{guid}",
              defaults: new { controller = "BudgetPhaseLineItems", action = "GetBudgetPhaseLineItemsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBudgetPhaseLineItemsByGuid",
               routeTemplate: "budget-phase-line-items/{guid}",
                  defaults: new { controller = "BudgetPhaseLineItems", action = "GetBudgetPhaseLineItemsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetBudgetPhaseLineItemsV12",
              routeTemplate: "budget-phase-line-items",
              defaults: new { controller = "BudgetPhaseLineItems", action = "GetBudgetPhaseLineItemsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBudgetPhaseLineItems",
               routeTemplate: "budget-phase-line-items",
                  defaults: new { controller = "BudgetPhaseLineItems", action = "GetBudgetPhaseLineItemsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBudgetPhaseLineItemsV12",
              routeTemplate: "budget-phase-line-items/{guid}",
              defaults: new { controller = "BudgetPhaseLineItems", action = "PutBudgetPhaseLineItemsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostBudgetPhaseLineItemsV12",
               routeTemplate: "budget-phase-line-items",
               defaults: new { controller = "BudgetPhaseLineItems", action = "PostBudgetPhaseLineItemsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBudgetPhaseLineItems",
                routeTemplate: "budget-phase-line-items/{guid}",
                defaults: new { controller = "BudgetPhaseLineItems", action = "DeleteBudgetPhaseLineItemsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Budget Phase Line Items

            #region Buildings

            routes.MapHttpRoute(
               name: "GetHedmBuildingsV11",
               routeTemplate: "buildings",
               defaults: new { controller = "Buildings", action = "GetHedmBuildings3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmBuildingsV6",
               routeTemplate: "buildings",
               defaults: new { controller = "Buildings", action = "GetHedmBuildings2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "GetBuildings",
                routeTemplate: "buildings",
                defaults: new { controller = "Buildings", action = "GetBuildingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetHedmBuildings",
               routeTemplate: "buildings",
                  defaults: new { controller = "Buildings", action = "GetHedmBuildings3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );

            routes.MapHttpRoute(
              name: "GetHedmBuildingByIdV11",
              routeTemplate: "buildings/{id}",
              defaults: new { controller = "Buildings", action = "GetHedmBuildingById2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
              name: "GetHedmBuildingByIdV6",
              routeTemplate: "buildings/{id}",
              defaults: new { controller = "Buildings", action = "GetHedmBuildingByIdAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
              name: "DefaultGetHedmBuildingById",
              routeTemplate: "buildings/{id}",
                 defaults: new { controller = "Buildings", action = "GetHedmBuildingById2Async", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, true)
              }
          );
            routes.MapHttpRoute(
               name: "PutBuildingV11",
               routeTemplate: "buildings/{id}",
               defaults: new { controller = "Buildings", action = "PutBuildingAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
               name: "PutBuildingV6",
               routeTemplate: "buildings/{id}",
               defaults: new { controller = "Buildings", action = "PutBuildingAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostBuildingV11",
                routeTemplate: "buildings",
                defaults: new { controller = "Buildings", action = "PostBuildingAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostBuildingV6",
                routeTemplate: "buildings",
                defaults: new { controller = "Buildings", action = "PostBuildingAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteBuilding",
                routeTemplate: "buildings/{id}",
                defaults: new { controller = "Buildings", action = "DeleteBuildingAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );


            routes.MapHttpRoute(
                name: "GetBuildingTypes",
                routeTemplate: "building-types",
                defaults: new { controller = "Buildings", action = "GetBuildingTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Building-Wings

            routes.MapHttpRoute(
                name: "GetBuildingWingsByGuidV6",
                routeTemplate: "building-wings/{guid}",
                defaults: new { controller = "Rooms", action = "GetBuildingWingsByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetBuildingWingsByGuid",
                routeTemplate: "building-wings/{guid}",
                defaults: new { controller = "Rooms", action = "GetBuildingWingsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetBuildingWingsV6",
                routeTemplate: "building-wings",
                defaults: new { controller = "Rooms", action = "GetBuildingWingsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetBuildingWings",
                routeTemplate: "building-wings",
                defaults: new { controller = "Rooms", action = "GetBuildingWingsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutBuildingWingsV6",
                routeTemplate: "building-wings/{guid}",
                defaults: new { controller = "Rooms", action = "PutBuildingWingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "PostBuildingWingsV6",
                routeTemplate: "building-wings",
                defaults: new { controller = "Rooms", action = "PostBuildingWingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteBuildingWings",
                routeTemplate: "building-wings/{guid}",
                defaults: new { controller = "Rooms", action = "DeleteBuildingWingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Buyers

            routes.MapHttpRoute(
              name: "GetBuyersByGuidV10",
              routeTemplate: "buyers/{guid}",
              defaults: new { controller = "Buyers", action = "GetBuyersByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetBuyersByGuid",
               routeTemplate: "buyers/{guid}",
                  defaults: new { controller = "Buyers", action = "GetBuyersByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetBuyersV10",
              routeTemplate: "buyers",
              defaults: new { controller = "Buyers", action = "GetBuyersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetBuyers",
               routeTemplate: "buyers",
                  defaults: new { controller = "Buyers", action = "GetBuyersAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutBuyersV10",
              routeTemplate: "buyers/{guid}",
              defaults: new { controller = "Buyers", action = "PutBuyersAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostBuyersV10",
               routeTemplate: "buyers",
               defaults: new { controller = "Buyers", action = "PostBuyersAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteBuyers",
                routeTemplate: "buyers/{guid}",
                defaults: new { controller = "Buyers", action = "DeleteBuyersAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
           );
            #endregion Buyers

            #region FinancialAidBudgetComponents

            routes.MapHttpRoute(
                name: "GetFinancialAidBudgetComponents",
                routeTemplate: "financial-aid-budget-components",
                defaults: new { controller = "FinancialAidBudgetComponents", action = "GetBudgetComponents" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region CampusCalendars
            routes.MapHttpRoute(
               name: "GetAllCampusCalendars",
               routeTemplate: "campus-calendars",
               defaults: new { controller = "Events", action = "GetCampusCalendarsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );
            #endregion

            #region CampusInvolvements

            routes.MapHttpRoute(
               name: "GetCampusInvolvementById",
               routeTemplate: "campus-involvements/{id}",
               defaults: new { controller = "CampusInvolvements", action = "GetCampusInvolvementByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetCampusInvolvementById",
                routeTemplate: "campus-involvements/{id}",
                   defaults: new { controller = "CampusInvolvements", action = "GetCampusInvolvementByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetCampusInvolvements",
               routeTemplate: "campus-involvements",
               defaults: new { controller = "CampusInvolvements", action = "GetCampusInvolvementsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultCampusInvolvements",
                routeTemplate: "campus-involvements",
                   defaults: new { controller = "CampusInvolvements", action = "GetCampusInvolvementsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutCampusInvolvements",
               routeTemplate: "campus-involvements/{id}",
               defaults: new { controller = "CampusInvolvements", action = "PutCampusInvolvementAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostCampusInvolvements",
                routeTemplate: "campus-involvements",
                defaults: new { controller = "CampusInvolvements", action = "PostCampusInvolvementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteCampusInvolvements",
                routeTemplate: "campus-involvements/{id}",
                defaults: new { controller = "CampusInvolvements", action = "DeleteCampusInvolvementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region CampusInvolvementRoles

            routes.MapHttpRoute(
                name: "GetCampusInvolvementRoleById",
                routeTemplate: "campus-involvement-roles/{id}",
                defaults: new { controller = "CampusInvolvementRoles", action = "GetCampusInvolvementRoleByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCampusInvolvementRoleById",
                routeTemplate: "campus-involvement-roles/{id}",
                   defaults: new { controller = "CampusInvolvementRoles", action = "GetCampusInvolvementRoleByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetCampusInvolvementRoles",
                routeTemplate: "campus-involvement-roles",
                defaults: new { controller = "CampusInvolvementRoles", action = "GetCampusInvolvementRolesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCampusInvolvementRoles",
                routeTemplate: "campus-involvement-roles",
                   defaults: new { controller = "CampusInvolvementRoles", action = "GetCampusInvolvementRolesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutCampusInvolvementRoles",
               routeTemplate: "campus-involvement-roles/{id}",
               defaults: new { controller = "CampusInvolvementRoles", action = "PutCampusInvolvementRoleAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostCampusInvolvementRoles",
                routeTemplate: "campus-involvement-roles",
                defaults: new { controller = "CampusInvolvementRoles", action = "PostCampusInvolvementRoleAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteCampusInvolvementRoles",
                routeTemplate: "campus-involvement-roles/{id}",
                defaults: new { controller = "CampusInvolvementRoles", action = "DeleteCampusInvolvementRoleAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region CampusOrganization

            routes.MapHttpRoute(
               name: "GetCampusOrganizationsById",
               routeTemplate: "campus-organizations/{id}",
               defaults: new { controller = "CampusOrganizations", action = "GetCampusOrganizationByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetCampusOrganizationById",
                routeTemplate: "campus-organizations/{id}",
                   defaults: new { controller = "CampusOrganizations", action = "GetCampusOrganizationByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetCampusOrganizations",
                routeTemplate: "campus-organizations",
                defaults: new { controller = "CampusOrganizations", action = "GetCampusOrganizationsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCampusOrganizations",
                routeTemplate: "campus-organizations",
                   defaults: new { controller = "CampusOrganizations", action = "GetCampusOrganizationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutCampusOrganization",
               routeTemplate: "campus-organizations/{id}",
               defaults: new { controller = "CampusOrganizations", action = "PutCampusOrganizationAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostCampusOrganization",
                routeTemplate: "campus-organizations",
                defaults: new { controller = "CampusOrganizations", action = "PostCampusOrganizationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteCampusOrganization",
                routeTemplate: "campus-organizations/{id}",
                defaults: new { controller = "CampusOrganizations", action = "DeleteCampusOrganizationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
               name: "GetCampusOrganizations2Async",
               routeTemplate: "qapi/campus-organization",
               defaults: new { controller = "CampusOrganizations", action = "GetCampusOrganizations2Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );

            #endregion

            #region CampusOrganizationTypes

            routes.MapHttpRoute(
                name: "GetCampusOrganizationTypeById",
                routeTemplate: "campus-organization-types/{id}",
                defaults: new { controller = "CampusOrganizationTypes", action = "GetCampusOrganizationTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCampusOrganizationTypeById",
                routeTemplate: "campus-organization-types/{id}",
                   defaults: new { controller = "CampusOrganizationTypes", action = "GetCampusOrganizationTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetCampusOrganizationTypes",
                routeTemplate: "campus-organization-types",
                defaults: new { controller = "CampusOrganizationTypes", action = "GetCampusOrganizationTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCampusOrganizationTypes",
                routeTemplate: "campus-organization-types",
                   defaults: new { controller = "CampusOrganizationTypes", action = "GetCampusOrganizationTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutCampusOrganizationTypes",
               routeTemplate: "campus-organization-types/{id}",
               defaults: new { controller = "CampusOrganizationTypes", action = "PutCampusOrganizationTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostCampusOrganizationTypes",
                routeTemplate: "campus-organization-types",
                defaults: new { controller = "CampusOrganizationTypes", action = "PostCampusOrganizationTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteCampusOrganizationTypes",
                routeTemplate: "campus-organization-types/{id}",
                defaults: new { controller = "CampusOrganizationTypes", action = "DeleteCampusOrganizationTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region CapSizes

            routes.MapHttpRoute(
                name: "GetCapSizes",
                routeTemplate: "cap-sizes",
                defaults: new { controller = "CapSizes", action = "GetAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            #endregion

            #region CareerGoals

            routes.MapHttpRoute(
                name: "GetCareerGoals",
                routeTemplate: "career-goals",
                defaults: new { controller = "CareerGoals", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region FinancialAidChecklistItems
            routes.MapHttpRoute(
               name: "GetFinancialAidChecklistItems",
               routeTemplate: "financial-aid-checklist-items",
               defaults: new { controller = "FinancialAidChecklistItems", action = "GetChecklistItems" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Ccds

            routes.MapHttpRoute(
                 name: "GetCCDs",
                 routeTemplate: "ccds",
                 defaults: new { controller = "Ccds", action = "GetAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            #endregion

            #region  Charge Assessment Methods

            routes.MapHttpRoute(
              name: "GetChargeAssessmentMethodsByGuidV13",
              routeTemplate: "charge-assessment-methods/{guid}",
              defaults: new { controller = "ChargeAssessmentMethods", action = "GetChargeAssessmentMethodsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetChargeAssessmentMethodsByGuid",
               routeTemplate: "charge-assessment-methods/{guid}",
                  defaults: new { controller = "ChargeAssessmentMethods", action = "GetChargeAssessmentMethodsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetChargeAssessmentMethodsV13",
              routeTemplate: "charge-assessment-methods",
              defaults: new { controller = "ChargeAssessmentMethods", action = "GetChargeAssessmentMethodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "GetChargeAssessmentMethods",
               routeTemplate: "charge-assessment-methods",
                  defaults: new { controller = "ChargeAssessmentMethods", action = "GetChargeAssessmentMethodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutChargeAssessmentMethodsV13",
              routeTemplate: "charge-assessment-methods/{guid}",
              defaults: new { controller = "ChargeAssessmentMethods", action = "PutChargeAssessmentMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );


            routes.MapHttpRoute(
               name: "PostChargeAssessmentMethodsV13",
               routeTemplate: "charge-assessment-methods",
               defaults: new { controller = "ChargeAssessmentMethods", action = "PostChargeAssessmentMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteChargeAssessmentMethods",
                routeTemplate: "charge-assessment-methods/{guid}",
                defaults: new { controller = "ChargeAssessmentMethods", action = "DeleteChargeAssessmentMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Charge Assessment Methods

            #region ClassLevels

            routes.MapHttpRoute(
                 name: "GetClassLevels",
                 routeTemplate: "class-levels",
                 defaults: new { controller = "ClassLevels", action = "GetAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            #endregion

            #region CitizenshipStatuses

            routes.MapHttpRoute(
                name: "GetCitizenshipStatusByIdV6",
                routeTemplate: "citizenship-statuses/{id}",
                defaults: new { controller = "CitizenshipStatuses", action = "GetCitizenshipStatusByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetCitizenshipStatusById",
                routeTemplate: "citizenship-statuses/{id}",
                   defaults: new { controller = "CitizenshipStatuses", action = "GetCitizenshipStatusByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)

                }
            );

            routes.MapHttpRoute(
               name: "GetCitizenshipStatusesV6",
               routeTemplate: "citizenship-statuses",
               defaults: new { controller = "CitizenshipStatuses", action = "GetCitizenshipStatusesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "GetCitizenshipStatuses",
               routeTemplate: "citizenship-statuses",
                  defaults: new { controller = "CitizenshipStatuses", action = "GetCitizenshipStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)

               }
           );

            routes.MapHttpRoute(
               name: "PutCitizenshipStatusV6",
               routeTemplate: "citizenship-statuses/{id}",
               defaults: new { controller = "CitizenshipStatuses", action = "PutCitizenshipStatusAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostCitizenshipStatusV6",
                routeTemplate: "citizenship-statuses",
                defaults: new { controller = "CitizenshipStatuses", action = "PostCitizenshipStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
           );

            routes.MapHttpRoute(
                name: "DeleteCitizenshipStatus",
                routeTemplate: "citizenship-statuses/{id}",
                defaults: new { controller = "CitizenshipStatuses", action = "DeleteCitizenshipStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region CitizenType

            routes.MapHttpRoute(
                name: "GetCitizenTypees",
                routeTemplate: "citizen-types",
                defaults: new { controller = "CitizenTypes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region CommencementSites

            routes.MapHttpRoute(
                 name: "GetCommencementSites",
                 routeTemplate: "commencement-sites",
                 defaults: new { controller = "CommencementSites", action = "GetAsync" },
                   constraints: new
                   {
                       httpMethod = new HttpMethodConstraint("GET"),
                       headerVersion = new HeaderVersionConstraint(1, true)
                   }
                 );

            #endregion

            #region Comments

            routes.MapHttpRoute(
                 name: "GetCommentsByGuidV6",
                 routeTemplate: "comments/{id}",
                 defaults: new { controller = "Comments", action = "GetCommentsByGuidAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                 }
            );

            routes.MapHttpRoute(
                 name: "GetCommentsByGuidDefault",
                 routeTemplate: "comments/{id}",
                    defaults: new { controller = "Comments", action = "GetCommentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, true)
                 }
             );

            routes.MapHttpRoute(
                name: "GetCommentsV6",
                routeTemplate: "comments",
                defaults: new { controller = "Comments", action = "GetCommentsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetCommentsDefault",
                routeTemplate: "comments",
                   defaults: new { controller = "Comments", action = "GetCommentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutCommentsV6",
               routeTemplate: "comments/{id}",
               defaults: new { controller = "Comments", action = "PutCommentsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "PostCommentsV6",
               routeTemplate: "comments",
               defaults: new { controller = "Comments", action = "PostCommentsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DeleteCommentByGuid",
               routeTemplate: "comments/{id}",
               defaults: new { controller = "Comments", action = "DeleteCommentByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE")
               }
           );

            #endregion

            #region CommentSubjectArea

            routes.MapHttpRoute(
                 name: "GetCommentSubjectAreaByIdV6",
                 routeTemplate: "comment-subject-area/{id}",
                 defaults: new { controller = "CommentSubjectArea", action = "GetCommentSubjectAreaByIdAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                 }
             );

            routes.MapHttpRoute(
                 name: "GetCommentSubjectAreaById",
                 routeTemplate: "comment-subject-area/{id}",
                    defaults: new { controller = "CommentSubjectArea", action = "GetCommentSubjectAreaByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, true),
                 }
             );

            routes.MapHttpRoute(
                name: "GetCommentSubjectAreaV6",
                routeTemplate: "comment-subject-area",
                defaults: new { controller = "CommentSubjectArea", action = "GetCommentSubjectAreaAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
             );

            routes.MapHttpRoute(
                name: "GetCommentSubjectArea",
                routeTemplate: "comment-subject-area",
                   defaults: new { controller = "CommentSubjectArea", action = "GetCommentSubjectAreaAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
               name: "PutCommentSubjectAreaV6",
               routeTemplate: "comment-subject-area/{id}",
               defaults: new { controller = "CommentSubjectArea", action = "PutCommentSubjectAreaAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "PostCommentSubjectAreaV6",
               routeTemplate: "comment-subject-area",
               defaults: new { controller = "CommentSubjectArea", action = "PostCommentSubjectAreaAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DeleteCommentSubjectArea",
               routeTemplate: "comment-subject-area/{id}",
               defaults: new { controller = "CommentSubjectArea", action = "DeleteCommentSubjectAreaAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
           );

            #endregion

            #region  Commerce Tax Code Rates

            routes.MapHttpRoute(
              name: "GetCommerceTaxCodeRatesByGuidV1.0.0",
              routeTemplate: "commerce-tax-code-rates/{guid}",
              defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeRatesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCommerceTaxCodeRatesByGuid",
               routeTemplate: "commerce-tax-code-rates/{guid}",
                  defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeRatesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetCommerceTaxCodeRatesV1.0.0",
              routeTemplate: "commerce-tax-code-rates",
              defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeRatesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCommerceTaxCodeRates",
               routeTemplate: "commerce-tax-code-rates",
                  defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeRatesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutCommerceTaxCodeRatesV1.0.0",
              routeTemplate: "commerce-tax-code-rates/{guid}",
              defaults: new { controller = "CommerceTaxCodes", action = "PutCommerceTaxCodeRatesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCommerceTaxCodeRatesV1.0.0",
               routeTemplate: "commerce-tax-code-rates",
               defaults: new { controller = "CommerceTaxCodes", action = "PostCommerceTaxCodeRatesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCommerceTaxCodeRates",
                routeTemplate: "commerce-tax-code-rates/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "DeleteCommerceTaxCodeRatesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "CommerceTaxCodeRatesUnsupported",
            routeTemplate: "commerce-tax-code-rates/{id}",
             defaults: new { controller = "CommerceTaxCodes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Commerce Tax Code Rates

            #region CommerceTaxCodes

            routes.MapHttpRoute(
                name: "GetHedmCommerceTaxCodes810",
                routeTemplate: "commerce-tax-codes",
                defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("8.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "8.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmCommerceTaxCodes",
                routeTemplate: "commerce-tax-codes",
                defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCommerceTaxCodes",
                routeTemplate: "commerce-tax-codes",
                defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "8.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("8.1.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmCommerceTaxCodesById810",
                routeTemplate: "commerce-tax-codes/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("8.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "8.1.0")),
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmCommerceTaxCodesById",
                routeTemplate: "commerce-tax-codes/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCommerceTaxCodesById",
                routeTemplate: "commerce-tax-codes/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "GetCommerceTaxCodeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "8.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("8.1.0", true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmCommerceTaxCodes810",
                routeTemplate: "commerce-tax-codes",
                defaults: new { controller = "CommerceTaxCodes", action = "PostCommerceTaxCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("8.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "8.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmCommerceTaxCodes",
                routeTemplate: "commerce-tax-codes",
                defaults: new { controller = "CommerceTaxCodes", action = "PostCommerceTaxCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmCommerceTaxCodes810",
                routeTemplate: "commerce-tax-codes/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "PutCommerceTaxCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("8.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "8.1.0")),
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmCommerceTaxCodes",
                routeTemplate: "commerce-tax-codes/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "PutCommerceTaxCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmCommerceTaxCodes",
                routeTemplate: "commerce-tax-codes/{guid}",
                defaults: new { controller = "CommerceTaxCodes", action = "DeleteCommerceTaxCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
             name: "CommerceTaxCodesUnsupported",
             routeTemplate: "commerce-tax-codes/{id}",
              defaults: new { controller = "CommerceTaxCodes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
           );

            #endregion

            #region CommodityCodes

            routes.MapHttpRoute(
            name: "GetAllCommodityCodes",
            routeTemplate: "commodity-codes",
            defaults: new { controller = "CommodityCodes", action = "GetAllCommodityCodesAsync"},
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(1, false)
             }
        );

            routes.MapHttpRoute(
                name: "GetHedmCommodityCodes",
                routeTemplate: "commodity-codes",
                defaults: new { controller = "CommodityCodes", action = "GetCommodityCodesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCommodityCodes",
                routeTemplate: "commodity-codes",
                defaults: new { controller = "CommodityCodes", action = "GetCommodityCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmCommodityCodesById",
                routeTemplate: "commodity-codes/{id}",
                defaults: new { controller = "CommodityCodes", action = "GetCommodityCodeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCommodityCodesById",
                routeTemplate: "commodity-codes/{id}",
                defaults: new { controller = "CommodityCodes", action = "GetCommodityCodeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmCommodityCodes",
                routeTemplate: "commodity-codes",
                defaults: new { controller = "CommodityCodes", action = "PostCommodityCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmCommodityCodes",
                routeTemplate: "commodity-codes/{id}",
                defaults: new { controller = "CommodityCodes", action = "PutCommodityCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmCommodityCodes",
                routeTemplate: "commodity-codes/{id}",
                defaults: new { controller = "CommodityCodes", action = "DeleteCommodityCodeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region CommodityUnitTypes

            routes.MapHttpRoute(
               name: "GetCommodityUnitTypes",
               routeTemplate: "commodity-unit-types",
               defaults: new { controller = "CommodityUnitTypes", action = "GetAllCommodityUnitTypesAsync"},
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
           );

            routes.MapHttpRoute(
                name: "GetHedmCommodityUnitTypes",
                routeTemplate: "commodity-unit-types",
                defaults: new { controller = "CommodityUnitTypes", action = "GetCommodityUnitTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCommodityUnitTypes",
                routeTemplate: "commodity-unit-types",
                defaults: new { controller = "CommodityUnitTypes", action = "GetCommodityUnitTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmCommodityUnitTypesById",
                routeTemplate: "commodity-unit-types/{id}",
                defaults: new { controller = "CommodityUnitTypes", action = "GetCommodityUnitTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCommodityUnitTypesById",
                routeTemplate: "commodity-unit-types/{id}",
                defaults: new { controller = "CommodityUnitTypes", action = "GetCommodityUnitTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmCommodityUnitTypes",
                routeTemplate: "commodity-unit-types",
                defaults: new { controller = "CommodityUnitTypes", action = "PostCommodityUnitTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmCommodityUnitTypes",
                routeTemplate: "commodity-unit-types/{id}",
                defaults: new { controller = "CommodityUnitTypes", action = "PutCommodityUnitTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmCommodityUnitTypes",
                routeTemplate: "commodity-unit-types/{id}",
                defaults: new { controller = "CommodityUnitTypes", action = "DeleteCommodityUnitTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region CommunicationCodes

            routes.MapHttpRoute(
                name: "GetCommunicationCodes",
                routeTemplate: "communication-codes",
                defaults: new { controller = "CommunicationCodes", action = "GetCommunicationCodes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetCommunicationCodes2",
                routeTemplate: "communication-codes",
                defaults: new { controller = "CommunicationCodes", action = "GetCommunicationCodes2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region Configuration

            routes.MapHttpRoute(
                 name: "GetConfiguration",
                 routeTemplate: "configuration",
                 defaults: new { controller = "FinanceConfiguration", action = "Get" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            routes.MapHttpRoute(
                 name: "GetImmediatePaymentControl",
                 routeTemplate: "configuration/ipc",
                 defaults: new { controller = "FinanceConfiguration", action = "GetImmediatePaymentControl" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            routes.MapHttpRoute(
                name: "GetIntegrationConfiguration",
                routeTemplate: "configuration/ems/{configId}",
                defaults: new { controller = "Configuration", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGraduationConfiguration",
                routeTemplate: "configuration/student-graduation",
                defaults: new { controller = "StudentConfiguration", action = "GetGraduationConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            //WARNING: Obsolete as of API 1.16. Use version 2 of this API instead.
            routes.MapHttpRoute(
                name: "UserProfileConfiguration",
                routeTemplate: "configuration/user-profile",
                defaults: new { controller = "Configuration", action = "GetUserProfileConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "UserProfileConfiguration2",
                routeTemplate: "configuration/user-profile",
                defaults: new { controller = "Configuration", action = "GetUserProfileConfiguration2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                 name: "GetProxyConfiguration",
                 routeTemplate: "configuration/proxy",
                 defaults: new { controller = "Configuration", action = "GetProxyConfigurationAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            routes.MapHttpRoute(
                name: "GetRestrictionConfiguration",
                routeTemplate: "configuration/restriction",
                defaults: new { controller = "Configuration", action = "GetRestrictionConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentRequestConfiguration",
                routeTemplate: "configuration/student-request",
                defaults: new { controller = "StudentConfiguration", action = "GetStudentRequestConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetFacultyGradingConfiguration",
                routeTemplate: "configuration/faculty-grading",
                defaults: new { controller = "StudentConfiguration", action = "GetFacultyGradingConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentProfileConfigurationAsync",
                routeTemplate: "configuration/student-profile",
                defaults: new { controller = "StudentConfiguration", action = "GetStudentProfileConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #region  Emergency Contact Phone Availabilities

            routes.MapHttpRoute(
              name: "GetEmergencyContactPhoneAvailabilitiesByGuidV1.0.0",
              routeTemplate: "emergency-contact-phone-availabilities/{guid}",
              defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "GetEmergencyContactPhoneAvailabilitiesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmergencyContactPhoneAvailabilitiesByGuid",
               routeTemplate: "emergency-contact-phone-availabilities/{guid}",
                  defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "GetEmergencyContactPhoneAvailabilitiesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "GetEmergencyContactPhoneAvailabilitiesV1.0.0",
              routeTemplate: "emergency-contact-phone-availabilities",
              defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "GetEmergencyContactPhoneAvailabilitiesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmergencyContactPhoneAvailabilities",
               routeTemplate: "emergency-contact-phone-availabilities",
                  defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "GetEmergencyContactPhoneAvailabilitiesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutEmergencyContactPhoneAvailabilitiesV1.0.0",
              routeTemplate: "emergency-contact-phone-availabilities/{guid}",
              defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "PutEmergencyContactPhoneAvailabilitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmergencyContactPhoneAvailabilitiesV1.0.0",
               routeTemplate: "emergency-contact-phone-availabilities",
               defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "PostEmergencyContactPhoneAvailabilitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmergencyContactPhoneAvailabilities",
                routeTemplate: "emergency-contact-phone-availabilities/{guid}",
                defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "DeleteEmergencyContactPhoneAvailabilitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "EmergencyContactPhoneAvailabilitiesUnsupported",
            routeTemplate: "emergency-contact-phone-availabilities/{id}",
             defaults: new { controller = "EmergencyContactPhoneAvailabilities", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Emergency Contact Phone Availabilities

            //WARNING: Obsolete as of API 1.16. Use version 2 of this API instead.
            routes.MapHttpRoute(
                name: "GetEmergencyInformationConfiguration",
                routeTemplate: "configuration/emergency-information",
                defaults: new { controller = "Configuration", action = "GetEmergencyInformationConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetEmergencyInformationConfiguration2",
                routeTemplate: "configuration/emergency-information",
                defaults: new { controller = "Configuration", action = "GetEmergencyInformationConfiguration2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGeneralLedgerConfiguration",
                routeTemplate: "configuration/general-ledger",
                defaults: new { controller = "GeneralLedgerConfiguration", action = "GetGeneralLedgerConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPrivacyConfigurationAsync",
                routeTemplate: "configuration/privacy",
                defaults: new { controller = "Configuration", action = "GetPrivacyConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.26. Use GetCourseCatalogConfiguration2 route
            routes.MapHttpRoute(
                name: "GetCourseCatalogConfiguration",
                routeTemplate: "configuration/course-catalog",
                defaults: new { controller = "StudentConfiguration", action = "GetCourseCatalogConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetCourseCatalogConfiguration2",
                routeTemplate: "configuration/course-catalog",
                defaults: new { controller = "StudentConfiguration", action = "GetCourseCatalogConfiguration2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetOrganizationRelationshipConfigurationAsync",
                routeTemplate: "configuration/organizational-relationships",
                defaults: new { controller = "Configuration", action = "GetOrganizationalRelationshipConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRegistrationConfigurationAsync",
                routeTemplate: "configuration/registration",
                defaults: new { controller = "StudentConfiguration", action = "GetRegistrationConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSelfServiceConfigurationAsync",
                routeTemplate: "configuration/self-service",
                defaults: new { controller = "Configuration", action = "GetSelfServiceConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRequiredDocumentConfigurationAsync",
                routeTemplate: "configuration/required-document",
                defaults: new { controller = "Configuration", action = "GetRequiredDocumentConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSessionConfigurationAsync",
                routeTemplate: "configuration/session",
                defaults: new { controller = "Configuration", action = "GetSessionConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion            

            #region Content Keys

            routes.MapHttpRoute(
                name: "GetContentKey",
                routeTemplate: "content-keys/{id}",
                defaults: new { controller = "ContentKeys", action = "GetContentKeyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostContentKey",
                routeTemplate: "content-keys",
                defaults: new { controller = "ContentKeys", action = "PostContentKeyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Configuration Settings

            //routes.MapHttpRoute(
            //  name: "GetConfigurationSettingsOptionsV1.0.0",
            //  routeTemplate: "configuration-settings",
            //  defaults: new { controller = "ConfigurationSettings", action = "GetConfigurationSettingsOptionsAsync", isEedmSupported = true },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("GET"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationConfigurationSettingsOptionsFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //  name: "GetConfigurationSettingsOptionsByGuidV1.0.0",
            //  routeTemplate: "configuration-settings/{guid}",
            //  defaults: new { controller = "ConfigurationSettings", action = "GetConfigurationSettingsOptionsByGuidAsync", isEedmSupported = true },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("GET"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationConfigurationSettingsOptionsFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //  name: "PutConfigurationSettingsOptionsV1.0.0",
            //  routeTemplate: "configuration-settings/{guid}",
            //  defaults: new { controller = "ConfigurationSettings", action = "PutConfigurationSettingsOptionsAsync" },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("PUT"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationConfigurationSettingsOptionsFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //   name: "PostConfigurationSettingsOptionsV1.0.0",
            //   routeTemplate: "configuration-settings",
            //   defaults: new { controller = "ConfigurationSettings", action = "PostConfigurationSettingsOptionsAsync" },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("POST"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationConfigurationSettingsOptionsFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //  name: "GetConfigurationSettingsByGuidV1.0.0",
            //  routeTemplate: "configuration-settings/{guid}",
            //  defaults: new { controller = "ConfigurationSettings", action = "GetConfigurationSettingsByGuidAsync", isEedmSupported = true },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("GET"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //   name: "DefaultGetConfigurationSettingsByGuid",
            //   routeTemplate: "configuration-settings/{guid}",
            //      defaults: new { controller = "ConfigurationSettings", action = "GetConfigurationSettingsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
            //   constraints: new
            //   {
            //       httpMethod = new HttpMethodConstraint("GET"),
            //       headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            //   }
            //);


            //routes.MapHttpRoute(
            //  name: "GetConfigurationSettingsV1.0.0",
            //  routeTemplate: "configuration-settings",
            //  defaults: new { controller = "ConfigurationSettings", action = "GetConfigurationSettingsAsync", isEedmSupported = true },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("GET"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //   name: "DefaultGetConfigurationSettings",
            //   routeTemplate: "configuration-settings",
            //      defaults: new { controller = "ConfigurationSettings", action = "GetConfigurationSettingsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
            //   constraints: new
            //   {
            //       httpMethod = new HttpMethodConstraint("GET"),
            //       headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            //   }
            //);

            //routes.MapHttpRoute(
            //  name: "PutConfigurationSettingsV1.0.0",
            //  routeTemplate: "configuration-settings/{guid}",
            //  defaults: new { controller = "ConfigurationSettings", action = "PutConfigurationSettingsAsync", isEedmSupported = true },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("PUT"),
            //      headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            //  }
            //);

            //routes.MapHttpRoute(
            //   name: "PostConfigurationSettingsV1.0.0",
            //   routeTemplate: "configuration-settings",
            //   defaults: new { controller = "ConfigurationSettings", action = "PostConfigurationSettingsAsync" },
            //  constraints: new
            //  {
            //      httpMethod = new HttpMethodConstraint("POST")
            //  }
            //);

            //routes.MapHttpRoute(
            //    name: "DefaultDeleteConfigurationSettings",
            //    routeTemplate: "configuration-settings/{guid}",
            //    defaults: new { controller = "ConfigurationSettings", action = "DeleteConfigurationSettingsAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("DELETE"),

            //    }
            //);

            //routes.MapHttpRoute(
            //name: "ConfigurationSettingsUnsupported",
            //routeTemplate: "configuration-settings/{id}",
            // defaults: new { controller = "ConfigurationSettings", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
            //        headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
            //    }
            //);

            #endregion Configuration Settings

            #region  Contract Types

            routes.MapHttpRoute(
              name: "GetContractTypesByGuidV11",
              routeTemplate: "contract-types/{guid}",
              defaults: new { controller = "ContractTypes", action = "GetContractTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetContractTypesByGuid",
               routeTemplate: "contract-types/{guid}",
                  defaults: new { controller = "ContractTypes", action = "GetContractTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetContractTypesV11",
              routeTemplate: "contract-types",
              defaults: new { controller = "ContractTypes", action = "GetContractTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetContractTypes",
               routeTemplate: "contract-types",
                  defaults: new { controller = "ContractTypes", action = "GetContractTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutContractTypesV11",
              routeTemplate: "contract-types/{guid}",
              defaults: new { controller = "ContractTypes", action = "PutContractTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostContractTypesV11",
               routeTemplate: "contract-types",
               defaults: new { controller = "ContractTypes", action = "PostContractTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteContractTypes",
                routeTemplate: "contract-types/{guid}",
                defaults: new { controller = "ContractTypes", action = "DeleteContractTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Contract Types

            #region  Contribution Payroll Deductions

            routes.MapHttpRoute(
                name: "GetContributionPayrollDeductionsByGuidV8",
                routeTemplate: "contribution-payroll-deductions/{id}",
                defaults: new { controller = "ContributionPayrollDeductions", action = "GetContributionPayrollDeductionsByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetContributionPayrollDeductionsByGuid",
                routeTemplate: "contribution-payroll-deductions/{id}",
                    defaults: new { controller = "ContributionPayrollDeductions", action = "GetContributionPayrollDeductionsByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetContributionPayrollDeductionsV8",
                routeTemplate: "contribution-payroll-deductions",
                defaults: new { controller = "ContributionPayrollDeductions", action = "GetContributionPayrollDeductionsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "GetContributionPayrollDeductions",
                routeTemplate: "contribution-payroll-deductions",
                    defaults: new { controller = "ContributionPayrollDeductions", action = "GetContributionPayrollDeductionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutContributionPayrollDeductionsV8",
                routeTemplate: "contribution-payroll-deductions/{id}",
                defaults: new { controller = "ContributionPayrollDeductions", action = "PutContributionPayrollDeductionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );


            routes.MapHttpRoute(
                name: "PostContributionPayrollDeductionsV8",
                routeTemplate: "contribution-payroll-deductions",
                defaults: new { controller = "ContributionPayrollDeductions", action = "PostContributionPayrollDeductionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteContributionPayrollDeductions",
                routeTemplate: "contribution-payroll-deductions/{id}",
                defaults: new { controller = "ContributionPayrollDeductions", action = "DeleteContributionPayrollDeductionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion Contribution Payroll Deductions

            #region Comp Time

            routes.MapHttpRoute(
                name: "QueryCompTimeAccrualAsync",
                routeTemplate: "qapi/comp-time-accrual",
                defaults: new { controller = "CompTime", action = "QueryCompTimeAccrualAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryOvertimeCompTimeThresholdAllocationAsync",
                routeTemplate: "qapi/overtime-comp-time-threshold-allocation",
                defaults: new { controller = "CompTime", action = "QueryOvertimeCompTimeThresholdAllocationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "ValidateCompTimeAsync",
                routeTemplate: "qapi/validate-comp-time",
                defaults: new { controller = "CompTime", action = "ValidateCompTimeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateCompTimeAccrualAsync",
                routeTemplate: "comp-time-accrual",
                defaults: new { controller = "CompTime", action = "UpdateCompTimeAccrualAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteCompTimeAccrual",
                routeTemplate: "comp-time-accrual/{id}",
                defaults: new { controller = "CompTime", action = "DeleteCompTimeAccrualAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion 

            #region Correspondence Requests

            routes.MapHttpRoute(
                name: "GetCorrespondenceRequestsAsync",
                routeTemplate: "correspondence-requests",
                defaults: new { controller = "CorrespondenceRequests", action = "GetCorrespondenceRequestsAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "personId" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Cost Calculation Methods

            routes.MapHttpRoute(
              name: "GetCostCalculationMethodsByGuidV11",
              routeTemplate: "cost-calculation-methods/{guid}",
              defaults: new { controller = "CostCalculationMethods", action = "GetCostCalculationMethodsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCostCalculationMethodsByGuid",
               routeTemplate: "cost-calculation-methods/{guid}",
                  defaults: new { controller = "CostCalculationMethods", action = "GetCostCalculationMethodsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetCostCalculationMethodsV11",
              routeTemplate: "cost-calculation-methods",
              defaults: new { controller = "CostCalculationMethods", action = "GetCostCalculationMethodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetCostCalculationMethods",
               routeTemplate: "cost-calculation-methods",
                  defaults: new { controller = "CostCalculationMethods", action = "GetCostCalculationMethodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutCostCalculationMethodsV11",
              routeTemplate: "cost-calculation-methods/{guid}",
              defaults: new { controller = "CostCalculationMethods", action = "PutCostCalculationMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostCostCalculationMethodsV11",
               routeTemplate: "cost-calculation-methods",
               defaults: new { controller = "CostCalculationMethods", action = "PostCostCalculationMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCostCalculationMethods",
                routeTemplate: "cost-calculation-methods/{guid}",
                defaults: new { controller = "CostCalculationMethods", action = "DeleteCostCalculationMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Cost Calculation Methods

            #region Cost Centers

            routes.MapHttpRoute(
                name: "GetCostCenters",
                routeTemplate: "cost-centers",
                defaults: new { controller = "CostCenters", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryCostCenters",
                routeTemplate: "qapi/cost-centers",
                defaults: new { controller = "CostCenters", action = "QueryCostCentersByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetCostCenter",
                routeTemplate: "cost-centers/{costCenterId}",
                defaults: new { controller = "CostCenters", action = "GetCostCenterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion Cost Centers

            #region  CourseCategories

            routes.MapHttpRoute(
              name: "GetCourseCategoriesByGuidV11",
              routeTemplate: "course-categories/{guid}",
              defaults: new { controller = "CourseTypes", action = "GetCourseCategoriesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseCategoriesByGuid",
               routeTemplate: "course-categories/{guid}",
                  defaults: new { controller = "CourseTypes", action = "GetCourseCategoriesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetCourseCategoriesV11",
              routeTemplate: "course-categories",
              defaults: new { controller = "CourseTypes", action = "GetCourseCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseCategories",
               routeTemplate: "course-categories",
                  defaults: new { controller = "CourseTypes", action = "GetCourseCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutCourseCategoriesV11",
              routeTemplate: "course-categories/{guid}",
              defaults: new { controller = "CourseTypes", action = "PutCourseCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "PostCourseCategoriesV11",
               routeTemplate: "course-categories",
               defaults: new { controller = "CourseTypes", action = "PostCourseCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCourseCategories",
                routeTemplate: "course-categories/{guid}",
                defaults: new { controller = "CourseTypes", action = "DeleteCourseCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion CourseCategories

            #region CourseLevels

            routes.MapHttpRoute(
                name: "GetCourseLevelById2V6",
                routeTemplate: "course-levels/{id}",
                defaults: new { controller = "CourseLevels", action = "GetCourseLevelById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCourseLevelById2",
                routeTemplate: "course-levels/{id}",
                   defaults: new { controller = "CourseLevels", action = "GetCourseLevelById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
                name: "GetEedmCourseLevels2V6",
                routeTemplate: "course-levels",
                defaults: new { controller = "CourseLevels", action = "GetCourseLevels2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetCourseLevels",
                routeTemplate: "course-levels",
                defaults: new { controller = "CourseLevels", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEedmCourseLevels2V6",
                routeTemplate: "course-levels",
                defaults: new { controller = "CourseLevels", action = "GetCourseLevels2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutCourseLevelsV6",
                routeTemplate: "course-levels/{id}",
                defaults: new { controller = "CourseLevels", action = "PutCourseLevelsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostCourseLevelsV6",
                routeTemplate: "course-levels",
                defaults: new { controller = "CourseLevels", action = "PostCourseLevelsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteCourseLevels",
                routeTemplate: "course-levels/{id}",
                defaults: new { controller = "CourseLevels", action = "DeleteCourseLevelsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region Countries


            routes.MapHttpRoute(
             name: "GetCountriesByGuidV1.0.0",
             routeTemplate: "countries/{guid}",
             defaults: new { controller = "Countries", action = "GetCountriesByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
             }
         );

            routes.MapHttpRoute(
               name: "DefaultGetCountriesByGuid",
               routeTemplate: "countries/{guid}",
                  defaults: new { controller = "Countries", action = "GetCountriesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetCountriesV1.0.0",
              routeTemplate: "countries",
              defaults: new { controller = "Countries", action = "GetCountriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "GetCountries",
                routeTemplate: "countries",
                defaults: new { controller = "Countries", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetCountries",
               routeTemplate: "countries",
                  defaults: new { controller = "Countries", action = "GetCountriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutCountriesV1.0.0",
              routeTemplate: "countries/{guid}",
              defaults: new { controller = "Countries", action = "PutCountriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCountriesV1.0.0",
               routeTemplate: "countries",
               defaults: new { controller = "Countries", action = "PostCountriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCountries",
                routeTemplate: "countries/{guid}",
                defaults: new { controller = "Countries", action = "DeleteCountriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "CountriesUnsupported",
            routeTemplate: "countries/{id}",
             defaults: new { controller = "Countries", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );
            #endregion

            #region  Country Iso Codes

            routes.MapHttpRoute(
              name: "GetCountryIsoCodesByGuidV1.0.0",
              routeTemplate: "country-iso-codes/{guid}",
              defaults: new { controller = "Countries", action = "GetCountryIsoCodesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCountryIsoCodesByGuid",
               routeTemplate: "country-iso-codes/{guid}",
                  defaults: new { controller = "Countries", action = "GetCountryIsoCodesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetCountryIsoCodesV1.0.0",
              routeTemplate: "country-iso-codes",
              defaults: new { controller = "Countries", action = "GetCountryIsoCodesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCountryIsoCodes",
               routeTemplate: "country-iso-codes",
                  defaults: new { controller = "Countries", action = "GetCountryIsoCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutCountryIsoCodesV1.0.0",
              routeTemplate: "country-iso-codes/{guid}",
              defaults: new { controller = "Countries", action = "PutCountryIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCountryIsoCodesV1.0.0",
               routeTemplate: "country-iso-codes",
               defaults: new { controller = "Countries", action = "PostCountryIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCountryIsoCodes",
                routeTemplate: "country-iso-codes/{guid}",
                defaults: new { controller = "Countries", action = "DeleteCountryIsoCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "CountryIsoCodesUnsupported",
            routeTemplate: "country-iso-codes/{id}",
             defaults: new { controller = "Countries", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Country Iso Codes

            #region Courses

            // WARNING: This is an obsolete route as of Api version 1.3. Use GetCourseSections3 route
            routes.MapHttpRoute(
                name: "GetCourseSections",
                routeTemplate: "courses/sections",
                defaults: new { controller = "Courses", action = "GetCourseSectionsAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "courseIds" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use GetCourseSections3 route
            routes.MapHttpRoute(
                name: "GetCourseSections2",
                routeTemplate: "courses/sections",
                defaults: new { controller = "Courses", action = "GetCourseSections2Async" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "courseIds" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetCourseSections3",
                routeTemplate: "courses/sections",
                defaults: new { controller = "Courses", action = "GetCourseSections3Async" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "courseIds" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            routes.MapHttpRoute(
                 name: "GetHedmCourse3ById",
                 routeTemplate: "courses/{id}",
                 defaults: new { controller = "Courses", action = "GetHedmCourse3ByIdAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                 }
             );

            routes.MapHttpRoute(
                name: "GetHedmCourse4ById",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "GetHedmCourse4ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
             );

            routes.MapHttpRoute(
                name: "GetHedmCourse5ById",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "GetHedmCourse5ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
             );

            routes.MapHttpRoute(
                name: "DefaultGetHedmCourse5ById",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "GetHedmCourse5ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true)
                }
            );



            // WARNING: This is an obsolete route!!!  See the GetCourse2 route.
            routes.MapHttpRoute(
               name: "GetCourse",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "GetAsync" },
               constraints: new
               {
                   isSingle = new QueryStringConstraint(new List<string> { "id" }),
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false) // change true to false
               }
            );

            // WARNING: This is an obsolete route!!!  See the GetCourse3 route as of API 1.3.
            routes.MapHttpRoute(
                name: "GetCourse2",
                routeTemplate: "courses",
                defaults: new { controller = "Courses", action = "GetCourseAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "courseId" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
               name: "GetCourse3",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "GetCourse2Async" },
               constraints: new
               {
                   isSingle = new QueryStringConstraint(new List<string> { "courseId" }),
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(3, true)
               }
           );

            routes.MapHttpRoute(
               name: "GetCoursesAllAndFilteredV6",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "GetAllAndFilteredCourses3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "GetCoursesAllAndFilteredV8",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "GetAllAndFilteredCourses4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
               name: "GetCoursesAllAndFilteredV16.0.0",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "GetAllAndFilteredCourses5Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetCoursesAllAndFilteredV16.0.0",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "GetAllAndFilteredCourses5Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true)
               }
            );

            routes.MapHttpRoute(
                name: "CourseSearch",
                routeTemplate: "courses/search",
                defaults: new { controller = "Courses", action = "PostSearchAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "CourseSearch2",
                routeTemplate: "courses/search",
                defaults: new { controller = "Courses", action = "PostSearch2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );




            routes.MapHttpRoute(
                name: "QueryCoursesByPost",
                routeTemplate: "qapi/courses",
                defaults: new { controller = "Courses", action = "QueryCoursesByPost2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
               name: "PostHedmCourse3",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "PostCourse3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PostHedmCourse4",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "PostCourse4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
           );

            routes.MapHttpRoute(
               name: "PostHedmCourse5",
               routeTemplate: "courses",
               defaults: new { controller = "Courses", action = "PostCourse5Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
                name: "PutCourse3",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "PutCourse3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutCourse4",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "PutCourse4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PutCourse5",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "PutCourse5Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteCourse",
                routeTemplate: "courses/{id}",
                defaults: new { controller = "Courses", action = "DeleteHedmCourseByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );
            #endregion

            #region  Course Statuses

            routes.MapHttpRoute(
              name: "GetCourseStatusesByGuidV1.0.0",
              routeTemplate: "course-statuses/{guid}",
              defaults: new { controller = "CourseStatuses", action = "GetCourseStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseStatusesByGuid",
               routeTemplate: "course-statuses/{guid}",
                  defaults: new { controller = "CourseStatuses", action = "GetCourseStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetCourseStatusesV1.0.0",
              routeTemplate: "course-statuses",
              defaults: new { controller = "CourseStatuses", action = "GetCourseStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseStatuses",
               routeTemplate: "course-statuses",
                  defaults: new { controller = "CourseStatuses", action = "GetCourseStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutCourseStatusesV1.0.0",
              routeTemplate: "course-statuses/{guid}",
              defaults: new { controller = "CourseStatuses", action = "PutCourseStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCourseStatusesV1.0.0",
               routeTemplate: "course-statuses",
               defaults: new { controller = "CourseStatuses", action = "PostCourseStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCourseStatuses",
                routeTemplate: "course-statuses/{guid}",
                defaults: new { controller = "CourseStatuses", action = "DeleteCourseStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Course Statuses

            #region  Course Title Types

            routes.MapHttpRoute(
              name: "GetCourseTitleTypesByGuidV1.0.0",
              routeTemplate: "course-title-types/{guid}",
              defaults: new { controller = "CourseTitleTypes", action = "GetCourseTitleTypeByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseTitleTypesByGuid",
               routeTemplate: "course-title-types/{guid}",
                  defaults: new { controller = "CourseTitleTypes", action = "GetCourseTitleTypeByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetCourseTitleTypesV1.0.0",
              routeTemplate: "course-title-types",
              defaults: new { controller = "CourseTitleTypes", action = "GetCourseTitleTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseTitleTypes",
               routeTemplate: "course-title-types",
                  defaults: new { controller = "CourseTitleTypes", action = "GetCourseTitleTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutCourseTitleTypesV1.0.0",
              routeTemplate: "course-title-types/{guid}",
              defaults: new { controller = "CourseTitleTypes", action = "PutCourseTitleTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCourseTitleTypesV1.0.0",
               routeTemplate: "course-title-types",
               defaults: new { controller = "CourseTitleTypes", action = "PostCourseTitleTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCourseTitleTypes",
                routeTemplate: "course-title-types/{guid}",
                defaults: new { controller = "CourseTitleTypes", action = "DeleteCourseTitleTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Course Title Types

            #region  Course Topics

            routes.MapHttpRoute(
              name: "GetCourseTopicsByGuidV11",
              routeTemplate: "course-topics/{guid}",
              defaults: new { controller = "CourseTopics", action = "GetCourseTopicsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseTopicsByGuid",
               routeTemplate: "course-topics/{guid}",
                  defaults: new { controller = "CourseTopics", action = "GetCourseTopicsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetCourseTopicsV11",
              routeTemplate: "course-topics",
              defaults: new { controller = "CourseTopics", action = "GetCourseTopicsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetCourseTopics",
               routeTemplate: "course-topics",
                  defaults: new { controller = "CourseTopics", action = "GetCourseTopicsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutCourseTopicsV11",
              routeTemplate: "course-topics/{guid}",
              defaults: new { controller = "CourseTopics", action = "PutCourseTopicsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "PostCourseTopicsV11",
               routeTemplate: "course-topics",
               defaults: new { controller = "CourseTopics", action = "PostCourseTopicsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCourseTopics",
                routeTemplate: "course-topics/{guid}",
                defaults: new { controller = "CourseTopics", action = "DeleteCourseTopicsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Course Topics

            #region  Course Transfer Statuses

            routes.MapHttpRoute(
              name: "GetCourseTransferStatusesByGuidV13",
              routeTemplate: "course-transfer-statuses/{guid}",
              defaults: new { controller = "CourseTransferStatuses", action = "GetCourseTransferStatusesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCourseTransferStatusesByGuid",
               routeTemplate: "course-transfer-statuses/{guid}",
                  defaults: new { controller = "CourseTransferStatuses", action = "GetCourseTransferStatusesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetCourseTransferStatusesV13",
              routeTemplate: "course-transfer-statuses",
              defaults: new { controller = "CourseTransferStatuses", action = "GetCourseTransferStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "GetCourseTransferStatuses",
               routeTemplate: "course-transfer-statuses",
                  defaults: new { controller = "CourseTransferStatuses", action = "GetCourseTransferStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutCourseTransferStatusesV13",
              routeTemplate: "course-transfer-statuses/{guid}",
              defaults: new { controller = "CourseTransferStatuses", action = "PutCourseTransferStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );


            routes.MapHttpRoute(
               name: "PostCourseTransferStatusesV13",
               routeTemplate: "course-transfer-statuses",
               defaults: new { controller = "CourseTransferStatuses", action = "PostCourseTransferStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCourseTransferStatuses",
                routeTemplate: "course-transfer-statuses/{guid}",
                defaults: new { controller = "CourseTransferStatuses", action = "DeleteCourseTransferStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Course Transfer Statuses

            #region CourseTypes

            routes.MapHttpRoute(
                name: "GetCourseTypes",
                routeTemplate: "course-types",
                defaults: new { controller = "CourseTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region CreditCategories

            routes.MapHttpRoute(
                name: "GetCreditCategoryByGuid3",
                routeTemplate: "credit-categories/{id}",
                defaults: new { controller = "CreditCategories", action = "GetCreditCategoryByGuid3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCreditCategoryByGuid3",
                routeTemplate: "credit-categories/{id}",
                defaults: new { controller = "CreditCategories", action = "GetCreditCategoryByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmCreditCategories3",
               routeTemplate: "credit-categories",
               defaults: new { controller = "CreditCategories", action = "GetCreditCategories3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetHedmCreditCategories3",
                routeTemplate: "credit-categories",
               defaults: new { controller = "CreditCategories", action = "GetCreditCategories3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostCreditCategoriesV6",
                routeTemplate: "credit-categories",
                defaults: new { controller = "CreditCategories", action = "PostCreditCategoryV6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutCreditCategoriesV6",
                routeTemplate: "credit-categories/{id}",
                defaults: new { controller = "CreditCategories", action = "PutCreditCategoryV6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteCreditCategoriesV6",
                routeTemplate: "credit-categories/{id}",
                defaults: new { controller = "CreditCategories", action = "DeleteCreditCategoryV6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );


            #endregion

            #region CreditTypes

            routes.MapHttpRoute(
                 name: "GetCreditTypes",
                 routeTemplate: "credit-types",
                 defaults: new { controller = "CreditTypes", action = "GetAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
            );

            #endregion

            #region  Currencies

            routes.MapHttpRoute(
              name: "GetCurrenciesByGuidV1.0.0",
              routeTemplate: "currencies/{guid}",
              defaults: new { controller = "Currencies", action = "GetCurrenciesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCurrenciesByGuid",
               routeTemplate: "currencies/{guid}",
                  defaults: new { controller = "Currencies", action = "GetCurrenciesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetCurrenciesV1.0.0",
              routeTemplate: "currencies",
              defaults: new { controller = "Currencies", action = "GetCurrenciesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCurrencies",
               routeTemplate: "currencies",
                  defaults: new { controller = "Currencies", action = "GetCurrenciesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutCurrenciesV1.0.0",
              routeTemplate: "currencies/{guid}",
              defaults: new { controller = "Currencies", action = "PutCurrenciesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCurrenciesV1.0.0",
               routeTemplate: "currencies",
               defaults: new { controller = "Currencies", action = "PostCurrenciesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCurrencies",
                routeTemplate: "currencies/{guid}",
                defaults: new { controller = "Currencies", action = "DeleteCurrenciesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "CurrenciesUnsupported",
            routeTemplate: "currencies/{id}",
             defaults: new { controller = "Currencies", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Currencies

            #region  Currency Iso Codes

            routes.MapHttpRoute(
              name: "GetCurrencyIsoCodesByGuidV1.0.0",
              routeTemplate: "currency-iso-codes/{guid}",
              defaults: new { controller = "Currencies", action = "GetCurrencyIsoCodesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCurrencyIsoCodesByGuid",
               routeTemplate: "currency-iso-codes/{guid}",
                  defaults: new { controller = "Currencies", action = "GetCurrencyIsoCodesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetCurrencyIsoCodesV1.0.0",
              routeTemplate: "currency-iso-codes",
              defaults: new { controller = "Currencies", action = "GetCurrencyIsoCodesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetCurrencyIsoCodes",
               routeTemplate: "currency-iso-codes",
                  defaults: new { controller = "Currencies", action = "GetCurrencyIsoCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutCurrencyIsoCodesV1.0.0",
              routeTemplate: "currency-iso-codes/{guid}",
              defaults: new { controller = "Currencies", action = "PutCurrencyIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostCurrencyIsoCodesV1.0.0",
               routeTemplate: "currency-iso-codes",
               defaults: new { controller = "Currencies", action = "PostCurrencyIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteCurrencyIsoCodes",
                routeTemplate: "currency-iso-codes/{guid}",
                defaults: new { controller = "Currencies", action = "DeleteCurrencyIsoCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "CurrencyIsoCodesUnsupported",
            routeTemplate: "currency-iso-codes/{id}",
             defaults: new { controller = "Currencies", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Currency Iso Codes

            #region  Deduction Categories

            routes.MapHttpRoute(
              name: "GetDeductionCategoriesByGuidV11",
              routeTemplate: "deduction-categories/{guid}",
              defaults: new { controller = "DeductionCategories", action = "GetDeductionCategoriesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetDeductionCategoriesByGuid",
               routeTemplate: "deduction-categories/{guid}",
                  defaults: new { controller = "DeductionCategories", action = "GetDeductionCategoriesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetDeductionCategoriesV11",
              routeTemplate: "deduction-categories",
              defaults: new { controller = "DeductionCategories", action = "GetDeductionCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetDeductionCategories",
               routeTemplate: "deduction-categories",
                  defaults: new { controller = "DeductionCategories", action = "GetDeductionCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutDeductionCategoriesV11",
              routeTemplate: "deduction-categories/{guid}",
              defaults: new { controller = "DeductionCategories", action = "PutDeductionCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostDeductionCategoriesV11",
               routeTemplate: "deduction-categories",
               defaults: new { controller = "DeductionCategories", action = "PostDeductionCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteDeductionCategories",
                routeTemplate: "deduction-categories/{guid}",
                defaults: new { controller = "DeductionCategories", action = "DeleteDeductionCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Deduction Categories

            #region DeductionTypes

            routes.MapHttpRoute(
               name: "GetHedmDeductionTypesV11",
               routeTemplate: "deduction-types",
               defaults: new { controller = "DeductionTypes", action = "GetAllDeductionTypes2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmDeductionTypes",
               routeTemplate: "deduction-types",
               defaults: new { controller = "DeductionTypes", action = "GetAllDeductionTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetHedmDeductionTypes",
                routeTemplate: "deduction-types",
                defaults: new { controller = "DeductionTypes", action = "GetAllDeductionTypes2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmDeductionTypeByIdV11",
                routeTemplate: "deduction-types/{id}",
                defaults: new { controller = "DeductionTypes", action = "GetDeductionTypeById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11)),
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmDeductionTypeById",
                routeTemplate: "deduction-types/{id}",
                defaults: new { controller = "DeductionTypes", action = "GetDeductionTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetDeductionTypeById",
                routeTemplate: "deduction-types/{id}",
                defaults: new { controller = "DeductionTypes", action = "GetDeductionTypeById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmDeductionTypeV11",
                routeTemplate: "deduction-types",
                defaults: new { controller = "DeductionTypes", action = "PostDeductionType2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmDeductionType",
                routeTemplate: "deduction-types",
                defaults: new { controller = "DeductionTypes", action = "PostDeductionTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmDeductionTypeV11",
                routeTemplate: "deduction-types/{id}",
                defaults: new { controller = "DeductionTypes", action = "PutDeductionType2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11)),
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmDeductionType",
                routeTemplate: "deduction-types/{id}",
                defaults: new { controller = "DeductionTypes", action = "PutDeductionTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteDeductionType",
                routeTemplate: "deduction-types/{id}",
                defaults: new { controller = "DeductionTypes", action = "DeleteDeductionTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region DegreePlans

            routes.MapHttpRoute(
                name: "QueryDegreePlanReviewRequests",
                routeTemplate: "qapi/degree-plans",
                defaults: new { controller = "DegreePlanReviewRequests", action = "QueryDegreePlanReviewRequests" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
               name: "QueryDegreePlanReviewRequestsForExactMatch",
               routeTemplate: "qapi/degree-plans",
               defaults: new { controller = "DegreePlanReviewRequests", action = "QueryDegreePlanReviewRequestsForExactMatchAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianPersonSearchExactMatchFormat, 1))
               }
           );

            routes.MapHttpRoute(
               name: "PostDegreePlanReviewAssignment",
               routeTemplate: "degree-plan-review-request",
               defaults: new { controller = "DegreePlanReviewRequests", action = "PostAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
           );

            // WARNING: This is an obsolete route as of Api version 1.3. Use GetDegreePlan3 route
            routes.MapHttpRoute(
                name: "GetDegreePlan",
                routeTemplate: "degree-plans/{id}",
                defaults: new { controller = "StudentDegreePlans", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use GetDegreePlan3 route
            routes.MapHttpRoute(
                name: "GetDegreePlan2",
                routeTemplate: "degree-plans/{id}",
                defaults: new { controller = "StudentDegreePlans", action = "Get2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.6. Use GetDegreePlan4 route
            routes.MapHttpRoute(
                name: "GetDegreePlan3",
                routeTemplate: "degree-plans/{id}",
                defaults: new { controller = "StudentDegreePlans", action = "Get3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.11. Use GetDegreePlan5 route
            routes.MapHttpRoute(
                name: "GetDegreePlan4",
                routeTemplate: "degree-plans/{id}",
                defaults: new { controller = "StudentDegreePlans", action = "Get4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.18. Use GetDegreePlan6 route
            routes.MapHttpRoute(
                name: "GetDegreePlan5",
                routeTemplate: "degree-plans/{id}",
                defaults: new { controller = "StudentDegreePlans", action = "Get5Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(5, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetDegreePlan6",
                routeTemplate: "degree-plans/{id}",
                defaults: new { controller = "StudentDegreePlans", action = "Get6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.3. Use UpdatePlan3 route
            routes.MapHttpRoute(
                name: "UpdatePlan",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "PutAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use UpdatePlan3 route
            routes.MapHttpRoute(
                name: "UpdatePlan2",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Put2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.6. Use UpdatePlan4 route
            routes.MapHttpRoute(
                name: "UpdatePlan3",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Put3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.11. Use UpdatePlan5 route
            routes.MapHttpRoute(
                name: "UpdatePlan4",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Put4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(4, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.18. Use UpdatePlan6 route
            routes.MapHttpRoute(
                name: "UpdatePlan5",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Put5Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(5, false)
                }
            );

            routes.MapHttpRoute(
                name: "UpdatePlan6",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Put6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.3. Use CreateDegreePlan2 route
            routes.MapHttpRoute(
                name: "CreatePlan",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use CreateDegreePlan3 route
            routes.MapHttpRoute(
                name: "CreateDegreePlan2",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Post2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.6. Use CreateDegreePlan4 route
            routes.MapHttpRoute(
                name: "CreateDegreePlan3",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Post3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );

            // WARNING: This is an obsolete route as of API 1.11. Please use CreateDegreePlan5 instead.
            routes.MapHttpRoute(
                name: "CreateDegreePlan4",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Post4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(4, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.18. Use CreateDegreePlan4 route
            routes.MapHttpRoute(
                name: "CreateDegreePlan5",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Post5Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(5, false)
                }
            );

            routes.MapHttpRoute(
                name: "CreateDegreePlan6",
                routeTemplate: "degree-plans",
                defaults: new { controller = "StudentDegreePlans", action = "Post6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See Register route.
            routes.MapHttpRoute(
                name: "PutRegistration",
                routeTemplate: "degree-plans/{degreePlanId}/registration",
                defaults: new { controller = "StudentDegreePlans", action = "PutRegistrationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. See Register route
            routes.MapHttpRoute(
                name: "PutRegistration2",
                routeTemplate: "degree-plans/{degreePlanId}/registration",
                defaults: new { controller = "StudentDegreePlans", action = "PutRegistration2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.3. Use GetRegistrationEligibility2 route
            routes.MapHttpRoute(
                name: "GetRegistrationEligibility",
                routeTemplate: "students/{id}/registration-eligibility",
                defaults: new { controller = "Students", action = "GetRegistrationEligibilityAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetRegistrationEligibility2",
                routeTemplate: "students/{studentId}/registration-eligibility",
                defaults: new { controller = "Students", action = "GetRegistrationEligibility2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See Register route.
            routes.MapHttpRoute(
                name: "PutSectionRegistration",
                routeTemplate: "degree-plans/{degreePlanId}/section-registration",
                defaults: new { controller = "StudentDegreePlans", action = "PutSectionRegistrationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. See Register route.
            routes.MapHttpRoute(
                name: "PutSectionRegistration2",
                routeTemplate: "degree-plans/{degreePlanId}/section-registration",
                defaults: new { controller = "StudentDegreePlans", action = "PutSectionRegistration2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See the GetSamplePlanPreview and UpdatePlan.
            routes.MapHttpRoute(
                name: "PutSamplePlan",
                routeTemplate: "degree-plans/apply-sample",
                defaults: new { controller = "DegreePlans", action = "PutApplySampleAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route. See the GetSamplePlanPreview3 route.
            routes.MapHttpRoute(
                name: "GetSamplePlanPreview",
                routeTemplate: "degree-plans/{degreePlanId}/preview-sample",
                defaults: new { controller = "DegreePlans", action = "GetSamplePlanPreviewAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false),
                    isSingle = new QueryStringConstraint(new List<string> { "programCode" })
                }
            );

            // WARNING: This is an obsolete route as of API 1.5. See the GetSamplePlanPreview3 route.
            routes.MapHttpRoute(
                name: "GetSamplePlanPreview2",
                routeTemplate: "degree-plans/{degreePlanId}/preview-sample",
                defaults: new { controller = "DegreePlans", action = "GetSamplePlanPreview2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false),
                    isSingle = new QueryStringConstraint(new List<string> { "programCode", "firstTermCode" })
                }
            );

            // WARNING: This is an obsolete route as of API 1.6. See the GetSamplePlanPreview4 route.
            routes.MapHttpRoute(
                name: "GetSamplePlanPreview3",
                routeTemplate: "degree-plans/{degreePlanId}/preview-sample",
                defaults: new { controller = "DegreePlans", action = "GetSamplePlanPreview3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false),
                    isSingle = new QueryStringConstraint(new List<string> { "programCode", "firstTermCode" })
                }
            );

            // WARNING: This is an obsolete route as of API 1.11. See the GetSamplePlanPreview5 route.
            routes.MapHttpRoute(
                name: "GetSamplePlanPreview4",
                routeTemplate: "degree-plans/{degreePlanId}/preview-sample",
                defaults: new { controller = "DegreePlans", action = "GetSamplePlanPreview4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, false),
                    isSingle = new QueryStringConstraint(new List<string> { "programCode", "firstTermCode" })
                }
            );

            // WARNING: This is an obsolete route as of API 1.18. See the GetSamplePlanPreview6 route. 
            routes.MapHttpRoute(
                name: "GetSamplePlanPreview5",
                routeTemplate: "degree-plans/{degreePlanId}/preview-sample",
                defaults: new { controller = "DegreePlans", action = "GetSamplePlanPreview5Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(5, false),
                    isSingle = new QueryStringConstraint(new List<string> { "programCode", "firstTermCode" })
                }
            );

            routes.MapHttpRoute(
                name: "GetSamplePlanPreview6",
                routeTemplate: "degree-plans/{degreePlanId}/preview-sample",
                defaults: new { controller = "DegreePlans", action = "GetSamplePlanPreview6Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                    isSingle = new QueryStringConstraint(new List<string> { "programCode", "firstTermCode" })
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use PostArchive2 route.
            routes.MapHttpRoute(
                name: "Archive",
                routeTemplate: "degree-plans/{degreePlanId}/archive",
                defaults: new { controller = "DegreePlans", action = "PostArchiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.7. Use PostArchive3 route.
            routes.MapHttpRoute(
                name: "Archive2",
                routeTemplate: "degree-plans/{degreePlanId}/archive",
                defaults: new { controller = "DegreePlans", action = "PostArchive2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "Archive3",
                routeTemplate: "degree-plans/{degreePlanId}/archive",
                defaults: new { controller = "DegreePlans", action = "PostArchive3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use GetPlanArchives2 route.
            routes.MapHttpRoute(
                name: "GetPlanArchives",
                routeTemplate: "degree-plans/{degreePlanId}/archives",
                defaults: new { controller = "DegreePlans", action = "GetDegreePlanArchivesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false),
                }
            );

            routes.MapHttpRoute(
                name: "GetPlanArchives2",
                routeTemplate: "degree-plans/{degreePlanId}/archives",
                defaults: new { controller = "DegreePlans", action = "GetDegreePlanArchives2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true),
                }
            );

            routes.MapHttpRoute(
                name: "GetPlanArchive",
                routeTemplate: "degree-plan-archives/{id}",
                defaults: new { controller = "DegreePlans", action = "GetPlanArchiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region DegreeTypes

            routes.MapHttpRoute(
                name: "GetDegreeTypes",
                routeTemplate: "degree-types",
                defaults: new { controller = "DegreeTypes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Degrees

            routes.MapHttpRoute(
                name: "GetDegrees",
                routeTemplate: "degrees",
                defaults: new { controller = "Degrees", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Denominations

            routes.MapHttpRoute(
                name: "GetDenominations",
                routeTemplate: "denominations",
                defaults: new { controller = "Denominations", action = "GetDenominations" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Departments

            routes.MapHttpRoute(
                name: "GetDepartments",
                routeTemplate: "departments",
                defaults: new { controller = "Departments", action = "GetDepartmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetActiveDepartments",
                routeTemplate: "departments/active",
                defaults: new { controller = "Departments", action = "GetActiveDepartmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Deposits

            routes.MapHttpRoute(
                name: "GetDepositTypes",
                routeTemplate: "deposits/deposit-types",
                defaults: new { controller = "Deposits", action = "GetDepositTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetDepositsDue",
                routeTemplate: "deposits/deposits-due/{studentId}",
                defaults: new { controller = "Deposits", action = "GetDepositsDue" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region DisabilityTypes

            routes.MapHttpRoute(
                name: "GetDisabilityTypes",
                routeTemplate: "disability-types",
                defaults: new { controller = "DisabilityTypes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Divisions

            routes.MapHttpRoute(
                name: "GetDivisions",
                routeTemplate: "divisions",
                defaults: new { controller = "Divisions", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Draft budget adjustments

            routes.MapHttpRoute(
                name: "CreateDraftBudgetAdjustment",
                routeTemplate: "draft-budget-adjustments",
                defaults: new { controller = "DraftBudgetAdjustments", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateDraftBudgetAdjustment",
                routeTemplate: "draft-budget-adjustments/{id}",
                defaults: new { controller = "DraftBudgetAdjustments", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetDraftBudgetAdjustment",
                routeTemplate: "draft-budget-adjustments/{id}",
                defaults: new { controller = "DraftBudgetAdjustments", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteDraftBudgetAdjustment",
                routeTemplate: "draft-budget-adjustments/{id}",
                defaults: new { controller = "DraftBudgetAdjustments", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );
            #endregion

            #region DropReasons

            routes.MapHttpRoute(
                name: "GetDropReasons",
                routeTemplate: "drop-reasons",
                defaults: new { controller = "DropReasons", action = "GetAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            #endregion

            #region EarningsTypes

            routes.MapHttpRoute(
              name: "GetEarningTypesByGuidV12",
              routeTemplate: "earning-types/{guid}",
              defaults: new { controller = "EarningTypes", action = "GetEarningTypesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEarningTypesByGuid",
               routeTemplate: "earning-types/{guid}",
                  defaults: new { controller = "EarningTypes", action = "GetEarningTypesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEarningTypesV12",
              routeTemplate: "earning-types",
              defaults: new { controller = "EarningTypes", action = "GetEarningTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
                name: "GetEarningsTypes",
                routeTemplate: "earnings-types",
                defaults: new { controller = "EarningTypes", action = "GetEarningsTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetEarningTypes",
               routeTemplate: "earning-types",
                  defaults: new { controller = "EarningTypes", action = "GetEarningTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEarningTypesV12",
              routeTemplate: "earning-types/{guid}",
              defaults: new { controller = "EarningTypes", action = "PutEarningTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostEarningTypesV12",
               routeTemplate: "earning-types",
               defaults: new { controller = "EarningTypes", action = "PostEarningTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEarningTypes",
                routeTemplate: "earning-types/{guid}",
                defaults: new { controller = "EarningTypes", action = "DeleteEarningTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion

            #region EarningsTypeGroups

            routes.MapHttpRoute(
                name: "GetEarningsTypeGroups",
                routeTemplate: "earnings-type-groups",
                defaults: new { controller = "EarningsTypeGroups", action = "GetEarningsTypeGroupsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            #endregion

            #region E-Commerce

            routes.MapHttpRoute(
                name: "GetConvenienceFees",
                routeTemplate: "ecommerce/convenience-fees",
                defaults: new { controller = "ECommerce", action = "GetConvenienceFees" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Education History

            routes.MapHttpRoute(
                name: "GetEducationHistory",
                routeTemplate: "qapi/education-history",
                defaults: new { controller = "EducationHistory", action = "QueryEducationHistoryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Educational Institutions

            routes.MapHttpRoute(
                    name: "GetEducationalInstitutionByGuidV6",
                    routeTemplate: "educational-institutions/{id}",
                    defaults: new { controller = "EducationalInstitutions", action = "GetEducationalInstitutionsByGuidAsync", isEedmSupported = true },
                    constraints: new
                    {
                        httpMethod = new HttpMethodConstraint("GET"),
                        headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                    }
            );

            routes.MapHttpRoute(
                    name: "GetEducationalInstitutionByGuidDefault",
                    routeTemplate: "educational-institutions/{id}",
                       defaults: new { controller = "EducationalInstitutions", action = "GetEducationalInstitutionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                    constraints: new
                    {
                        httpMethod = new HttpMethodConstraint("GET"),
                        headerVersion = new HeaderVersionConstraint(6, true)
                    }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionsV6",
                routeTemplate: "educational-institutions",
                defaults: new { controller = "EducationalInstitutions", action = "GetEducationalInstitutionsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionsDefault",
                routeTemplate: "educational-institutions",
                   defaults: new { controller = "EducationalInstitutions", action = "GetEducationalInstitutionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutEducationalInstitutionV6",
                routeTemplate: "educational-institutions/{id}",
                defaults: new { controller = "EducationalInstitutions", action = "PutEducationalInstitutionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostEducationalInstitutionV6",
                routeTemplate: "educational-institutions",
                defaults: new { controller = "EducationalInstitutions", action = "PostEducationalInstitutionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteEducationalInstitutionByGuid",
                routeTemplate: "educational-institutions/{id}",
                defaults: new { controller = "EducationalInstitutions", action = "DeleteEducationalInstitutionByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region Educational Institutional Units

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionUnitsByGuidV12",
                routeTemplate: "educational-institution-units/{guid}",
                defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnitsByGuid3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionUnitsByGuidV7",
                routeTemplate: "educational-institution-units/{id}",
                defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnitsByGuid2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                 name: "GetEducationalInstitutionUnitsByGuidV6",
                 routeTemplate: "educational-institution-units/{id}",
                 defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnitsByGuidAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                 }
            );

            routes.MapHttpRoute(
                 name: "GetEducationalInstitutionUnitsByGuidDefault",
                 routeTemplate: "educational-institution-units/{guid}",
                    defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnitsByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(12, true)
                 }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionUnitsV12",
                routeTemplate: "educational-institution-units",
                defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnits3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionUnitsV7",
                routeTemplate: "educational-institution-units",
                defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnits2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionUnitsV6",
                routeTemplate: "educational-institution-units",
                defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnitsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetEducationalInstitutionUnitsDefault",
                routeTemplate: "educational-institution-units",
                   defaults: new { controller = "EducationalInstitutionUnits", action = "GetEducationalInstitutionUnits3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutEducationalInstitutionUnitsV12",
               routeTemplate: "educational-institution-units/{id}",
               defaults: new { controller = "EducationalInstitutionUnits", action = "PutEducationalInstitutionUnitsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
            );

            routes.MapHttpRoute(
               name: "PutEducationalInstitutionUnitsV7",
               routeTemplate: "educational-institution-units/{id}",
               defaults: new { controller = "EducationalInstitutionUnits", action = "PutEducationalInstitutionUnitsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "PutEducationalInstitutionUnitsV6",
               routeTemplate: "educational-institution-units/{id}",
               defaults: new { controller = "EducationalInstitutionUnits", action = "PutEducationalInstitutionUnitsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "PostEducationalInstitutionUnitsV12",
               routeTemplate: "educational-institution-units",
               defaults: new { controller = "EducationalInstitutionUnits", action = "PostEducationalInstitutionUnitsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
            );

            routes.MapHttpRoute(
               name: "PostEducationalInstitutionUnitsV7",
               routeTemplate: "educational-institution-units",
               defaults: new { controller = "EducationalInstitutionUnits", action = "PostEducationalInstitutionUnitsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "PostEducationalInstitutionUnitsV6",
               routeTemplate: "educational-institution-units",
               defaults: new { controller = "EducationalInstitutionUnits", action = "PostEducationalInstitutionUnitsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DeleteEducationalInstitutionUnitsByGuid",
               routeTemplate: "educational-institution-units/{id}",
               defaults: new { controller = "EducationalInstitutionUnits", action = "DeleteEducationalInstitutionUnitsByGuidAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE")
               }
           );

            #endregion

            #region EmailTypes

            routes.MapHttpRoute(
                name: "GetEmailTypeById",
                routeTemplate: "email-types/{id}",
                defaults: new { controller = "EmailTypes", action = "GetEmailTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEmailTypeById",
                routeTemplate: "email-types/{id}",
                defaults: new { controller = "EmailTypes", action = "GetEmailTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHeDMEmailTypes",
                routeTemplate: "email-types",
                defaults: new { controller = "EmailTypes", action = "GetEmailTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHeDMEmailTypes",
                routeTemplate: "email-types",
                defaults: new { controller = "EmailTypes", action = "GetEmailTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutHeDMEmailTypes",
                routeTemplate: "email-types/{id}",
                defaults: new { controller = "EmailTypes", action = "PutEmailTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );


            routes.MapHttpRoute(
                name: "PostHeDMEmailTypes",
                routeTemplate: "email-types",
                defaults: new { controller = "EmailTypes", action = "PostEmailTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHeDMEmailTypes",
                routeTemplate: "email-types/{id}",
                defaults: new { controller = "EmailTypes", action = "DeleteEmailTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
                name: "GetEmailTypes",
                routeTemplate: "email-types",
                defaults: new { controller = "EmailTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Emergency Contact Types

            routes.MapHttpRoute(
              name: "GetEmergencyContactTypesByGuidV1.0.0",
              routeTemplate: "emergency-contact-types/{guid}",
              defaults: new { controller = "EmergencyContactTypes", action = "GetEmergencyContactTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmergencyContactTypesByGuid",
               routeTemplate: "emergency-contact-types/{guid}",
                  defaults: new { controller = "EmergencyContactTypes", action = "GetEmergencyContactTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "GetEmergencyContactTypesV1.0.0",
              routeTemplate: "emergency-contact-types",
              defaults: new { controller = "EmergencyContactTypes", action = "GetEmergencyContactTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmergencyContactTypes",
               routeTemplate: "emergency-contact-types",
                  defaults: new { controller = "EmergencyContactTypes", action = "GetEmergencyContactTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutEmergencyContactTypesV1.0.0",
              routeTemplate: "emergency-contact-types/{guid}",
              defaults: new { controller = "EmergencyContactTypes", action = "PutEmergencyContactTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmergencyContactTypesV1.0.0",
               routeTemplate: "emergency-contact-types",
               defaults: new { controller = "EmergencyContactTypes", action = "PostEmergencyContactTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmergencyContactTypes",
                routeTemplate: "emergency-contact-types/{guid}",
                defaults: new { controller = "EmergencyContactTypes", action = "DeleteEmergencyContactTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "EmergencyContactTypesUnsupported",
            routeTemplate: "emergency-contact-types/{id}",
             defaults: new { controller = "EmergencyContactTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Emergency Contact Types

            #region Employees

            routes.MapHttpRoute(
                name: "QueryEmployeeNames",
                routeTemplate: "qapi/employees",
                defaults: new { controller = "Employees", action = "QueryEmployeeNamesByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-employee-name-search.v{0}+json", 1)),
                }
            );

            routes.MapHttpRoute(
                name: "GetEmployeeV12ById",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "GetEmployee3ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "GetEmployeeV11ById",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "GetEmployee2ByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllEmployeesV12",
                routeTemplate: "employees",
                defaults: new { controller = "Employees", action = "GetEmployees3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllEmployeesV11",
                routeTemplate: "employees",
                defaults: new { controller = "Employees", action = "GetEmployees2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetEmployeeByIdDefault",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "GetEmployee3ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAllEmployeesDefault",
                routeTemplate: "employees",
                defaults: new { controller = "Employees", action = "GetEmployees3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetEmployeeById",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "GetEmployeeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllEmployees",
                routeTemplate: "employees",
                defaults: new { controller = "Employees", action = "GetEmployeesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutEmployeeV12",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "PutEmployee3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "PostEmployeeV12",
                routeTemplate: "employees",
                defaults: new { controller = "Employees", action = "PostEmployee3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "PutEmployee",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "PutEmployeeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
               name: "PutEmployeeV11",
               routeTemplate: "employees/{id}",
               defaults: new { controller = "Employees", action = "PutEmployeeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "PostEmployee",
                routeTemplate: "employees",
                defaults: new { controller = "Employees", action = "PostEmployeeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
               name: "PostEmployeeV11",
               routeTemplate: "employees",
               defaults: new { controller = "Employees", action = "PostEmployeeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "DeleteEmployee",
                routeTemplate: "employees/{id}",
                defaults: new { controller = "Employees", action = "DeleteEmployeeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region Employee Compensation

            routes.MapHttpRoute(
                name: "GetEmployeeCompensation",
                routeTemplate: "employee-compensation",
                defaults: new { controller = "EmployeeCompensation", action = "GetEmployeeCompensationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)

                }
           );
            #endregion

            #region Employee Current Benefits

            routes.MapHttpRoute(
                name: "GetEmployeeCurrentBenefitsAsync",
                routeTemplate: "employee-current-benefits",
                defaults: new { controller = "CurrentBenefits", action = "GetEmployeeCurrentBenefitsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
           );
            #endregion

            #region  Employee Leave Plans

            routes.MapHttpRoute(
              name: "GetEmployeeLeavePlansByGuidV11",
              routeTemplate: "employee-leave-plans/{guid}",
              defaults: new { controller = "EmployeeLeavePlans", action = "GetEmployeeLeavePlansByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmployeeLeavePlansByGuid",
               routeTemplate: "employee-leave-plans/{guid}",
                  defaults: new { controller = "EmployeeLeavePlans", action = "GetEmployeeLeavePlansByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmployeeLeavePlansV11",
              routeTemplate: "employee-leave-plans",
              defaults: new { controller = "EmployeeLeavePlans", action = "GetEmployeeLeavePlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmployeeLeavePlans",
               routeTemplate: "employee-leave-plans",
                  defaults: new { controller = "EmployeeLeavePlans", action = "GetEmployeeLeavePlansAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmployeeLeavePlansV11",
              routeTemplate: "employee-leave-plans/{guid}",
              defaults: new { controller = "EmployeeLeavePlans", action = "PutEmployeeLeavePlansAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmployeeLeavePlansV11",
               routeTemplate: "employee-leave-plans",
               defaults: new { controller = "EmployeeLeavePlans", action = "PostEmployeeLeavePlansAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmployeeLeavePlans",
                routeTemplate: "employee-leave-plans/{guid}",
                defaults: new { controller = "EmployeeLeavePlans", action = "DeleteEmployeeLeavePlansAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );


            routes.MapHttpRoute(
                name: "GetAllEmployeeLeavePlansV2",
                routeTemplate: "employee-leave-plans",
                defaults: new { controller = "EmployeeLeavePlans", action = "GetEmployeeLeavePlansV2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)

                }
           );

            routes.MapHttpRoute(
                name: "GetLeaveBalanceConfigurationAsync",
                routeTemplate: "leave-plans-configuration",
                defaults: new { controller = "LeaveBalanceConfiguration", action = "GetLeaveBalanceConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET")
                }
           );


            #endregion Employee Leave Plans

            #region  Employee Leave Transactions

            routes.MapHttpRoute(
              name: "GetEmployeeLeaveTransactionsByGuidV11",
              routeTemplate: "employee-leave-transactions/{guid}",
              defaults: new { controller = "EmployeeLeaveTransactions", action = "GetEmployeeLeaveTransactionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmployeeLeaveTransactionsByGuid",
               routeTemplate: "employee-leave-transactions/{guid}",
                  defaults: new { controller = "EmployeeLeaveTransactions", action = "GetEmployeeLeaveTransactionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmployeeLeaveTransactionsV11",
              routeTemplate: "employee-leave-transactions",
              defaults: new { controller = "EmployeeLeaveTransactions", action = "GetEmployeeLeaveTransactionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmployeeLeaveTransactions",
               routeTemplate: "employee-leave-transactions",
                  defaults: new { controller = "EmployeeLeaveTransactions", action = "GetEmployeeLeaveTransactionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmployeeLeaveTransactionsV11",
              routeTemplate: "employee-leave-transactions/{guid}",
              defaults: new { controller = "EmployeeLeaveTransactions", action = "PutEmployeeLeaveTransactionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmployeeLeaveTransactionsV11",
               routeTemplate: "employee-leave-transactions",
               defaults: new { controller = "EmployeeLeaveTransactions", action = "PostEmployeeLeaveTransactionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmployeeLeaveTransactions",
                routeTemplate: "employee-leave-transactions/{guid}",
                defaults: new { controller = "EmployeeLeaveTransactions", action = "DeleteEmployeeLeaveTransactionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Employee Leave Transactions

            #region EmployeeSummary
            routes.MapHttpRoute(
                name: "QueryEmployeeSummaryAsync",
                routeTemplate: "qapi/employee-summary",
                defaults: new { controller = "EmployeeSummary", action = "QueryEmployeeSummaryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region EmployeeTimeSummary
            routes.MapHttpRoute(
                name: "QueryEmployeeTimeSummaryAsync",
                routeTemplate: "qapi/employee-time-summary",
                defaults: new { controller = "EmployeeTimeSummary", action = "QueryEmployeeTimeSummaryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region EmploymentClassifications

            routes.MapHttpRoute(
                name: "GetHedmEmploymentClassifications",
                routeTemplate: "employment-classifications",
                defaults: new { controller = "EmploymentClassifications", action = "GetEmploymentClassificationsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentClassifications",
                routeTemplate: "employment-classifications",
                defaults: new { controller = "EmploymentClassifications", action = "GetEmploymentClassificationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmEmploymentClassificationsById",
                routeTemplate: "employment-classifications/{id}",
                defaults: new { controller = "EmploymentClassifications", action = "GetEmploymentClassificationByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentClassificationsById",
                routeTemplate: "employment-classifications/{id}",
                defaults: new { controller = "EmploymentClassifications", action = "GetEmploymentClassificationByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmEmploymentClassifications",
                routeTemplate: "employment-classifications",
                defaults: new { controller = "EmploymentClassifications", action = "PostEmploymentClassificationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmEmploymentClassifications",
                routeTemplate: "employment-classifications/{id}",
                defaults: new { controller = "EmploymentClassifications", action = "PutEmploymentClassificationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmEmploymentClassifications",
                routeTemplate: "employment-classifications/{id}",
                defaults: new { controller = "EmploymentClassifications", action = "DeleteEmploymentClassificationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Employment Departments


            routes.MapHttpRoute(
              name: "GetEmploymentDepartmentsByGuidV1210",
              routeTemplate: "employment-departments/{guid}",
              defaults: new { controller = "EmploymentDepartments", action = "GetEmploymentDepartmentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
            );


            routes.MapHttpRoute(
              name: "GetEmploymentDepartmentsByGuidV12",
              routeTemplate: "employment-departments/{guid}",
              defaults: new { controller = "EmploymentDepartments", action = "GetEmploymentDepartmentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentDepartmentsByGuid",
               routeTemplate: "employment-departments/{guid}",
                  defaults: new { controller = "EmploymentDepartments", action = "GetEmploymentDepartmentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("12.1.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "GetEmploymentDepartmentsV1210",
              routeTemplate: "employment-departments",
              defaults: new { controller = "EmploymentDepartments", action = "GetEmploymentDepartmentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
            );

            routes.MapHttpRoute(
             name: "GetEmploymentDepartmentsV12",
             routeTemplate: "employment-departments",
             defaults: new { controller = "EmploymentDepartments", action = "GetEmploymentDepartmentsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
             }
            );

            routes.MapHttpRoute(
             name: "DefaultGetEmploymentDepartments",
             routeTemplate: "employment-departments",
                defaults: new { controller = "EmploymentDepartments", action = "GetEmploymentDepartmentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("12.1.0", true)
             }
            );

            routes.MapHttpRoute(
             name: "PutEmploymentDepartmentsV1210",
             routeTemplate: "employment-departments/{guid}",
             defaults: new { controller = "EmploymentDepartments", action = "PutEmploymentDepartmentsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
             }
           );

            routes.MapHttpRoute(
             name: "PostEmploymentDepartmentsV1210",
             routeTemplate: "employment-departments",
             defaults: new { controller = "EmploymentDepartments", action = "PostEmploymentDepartmentsAsync" },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
            }
         );

            routes.MapHttpRoute(
             name: "PutEmploymentDepartmentsV12",
             routeTemplate: "employment-departments/{guid}",
             defaults: new { controller = "EmploymentDepartments", action = "PutEmploymentDepartmentsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
             }
            );

            routes.MapHttpRoute(
               name: "PostEmploymentDepartmentsV12",
               routeTemplate: "employment-departments",
               defaults: new { controller = "EmploymentDepartments", action = "PostEmploymentDepartmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );



            routes.MapHttpRoute(
                name: "DefaultDeleteEmploymentDepartments",
                routeTemplate: "employment-departments/{guid}",
                defaults: new { controller = "EmploymentDepartments", action = "DeleteEmploymentDepartmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
             name: "EmploymentDepartmentsUnsupported",
             routeTemplate: "employment-departments/{id}",
              defaults: new { controller = "EmploymentDepartments", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
            );
            #endregion Employment Departments

            #region  Employment Frequencies

            routes.MapHttpRoute(
              name: "GetEmploymentFrequenciesByGuidV11",
              routeTemplate: "employment-frequencies/{guid}",
              defaults: new { controller = "EmploymentFrequencies", action = "GetEmploymentFrequenciesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentFrequenciesByGuid",
               routeTemplate: "employment-frequencies/{guid}",
                  defaults: new { controller = "EmploymentFrequencies", action = "GetEmploymentFrequenciesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmploymentFrequenciesV11",
              routeTemplate: "employment-frequencies",
              defaults: new { controller = "EmploymentFrequencies", action = "GetEmploymentFrequenciesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmploymentFrequencies",
               routeTemplate: "employment-frequencies",
                  defaults: new { controller = "EmploymentFrequencies", action = "GetEmploymentFrequenciesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmploymentFrequenciesV11",
              routeTemplate: "employment-frequencies/{guid}",
              defaults: new { controller = "EmploymentFrequencies", action = "PutEmploymentFrequenciesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmploymentFrequenciesV11",
               routeTemplate: "employment-frequencies",
               defaults: new { controller = "EmploymentFrequencies", action = "PostEmploymentFrequenciesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmploymentFrequencies",
                routeTemplate: "employment-frequencies/{guid}",
                defaults: new { controller = "EmploymentFrequencies", action = "DeleteEmploymentFrequenciesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Employment Frequencies

            #region EmploymentLeaveOfAbsenceReasons

            routes.MapHttpRoute(
               name: "GetHedmEmploymentLeaveOfAbsenceReasons",
               routeTemplate: "employment-leave-of-absence-reasons",
               defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "GetAllEmploymentLeaveOfAbsenceReasonsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentLeaveOfAbsenceReasons",
                routeTemplate: "employment-leave-of-absence-reasons",
                defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "GetAllEmploymentLeaveOfAbsenceReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmEmploymentLeaveOfAbsenceReasonById",
                routeTemplate: "employment-leave-of-absence-reasons/{id}",
                defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "GetEmploymentLeaveOfAbsenceReasonByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEmploymentLeaveOfAbsenceReasonById",
                routeTemplate: "employment-leave-of-absence-reasons/{id}",
                defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "GetEmploymentLeaveOfAbsenceReasonByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmEmploymentLeaveOfAbsenceReason",
                routeTemplate: "employment-leave-of-absence-reasons",
                defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "PostEmploymentLeaveOfAbsenceReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmEmploymentLeaveOfAbsenceReason",
                routeTemplate: "employment-leave-of-absence-reasons/{id}",
                defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "PutEmploymentLeaveOfAbsenceReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteEmploymentLeaveOfAbsenceReason",
                routeTemplate: "employment-leave-of-absence-reasons/{id}",
                defaults: new { controller = "EmploymentLeaveOfAbsenceReasons", action = "DeleteEmploymentLeaveOfAbsenceReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Employment Organizations

            routes.MapHttpRoute(
              name: "GetEmploymentOrganizationsByGuidV1210",
              routeTemplate: "employment-organizations/{guid}",
              defaults: new { controller = "EmploymentOrganizations", action = "GetEmploymentOrganizationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentOrganizationsByGuid",
               routeTemplate: "employment-organizations/{guid}",
                  defaults: new { controller = "EmploymentOrganizations", action = "GetEmploymentOrganizationsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("12.1.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmploymentOrganizationsV1210",
              routeTemplate: "employment-organizations",
              defaults: new { controller = "EmploymentOrganizations", action = "GetEmploymentOrganizationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmploymentOrganizations",
               routeTemplate: "employment-organizations",
                  defaults: new { controller = "EmploymentOrganizations", action = "GetEmploymentOrganizationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("12.1.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmploymentOrganizationsV1210",
              routeTemplate: "employment-organizations/{guid}",
              defaults: new { controller = "EmploymentOrganizations", action = "PutEmploymentOrganizationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
          );

            routes.MapHttpRoute(
               name: "PostEmploymentOrganizationsV1210",
               routeTemplate: "employment-organizations",
               defaults: new { controller = "EmploymentOrganizations", action = "PostEmploymentOrganizationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
           );

            routes.MapHttpRoute(
              name: "GetEmploymentOrganizationsByGuidV12",
              routeTemplate: "employment-organizations/{guid}",
              defaults: new { controller = "EmploymentOrganizations", action = "GetEmploymentOrganizationsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "GetEmploymentOrganizationsV12",
              routeTemplate: "employment-organizations",
              defaults: new { controller = "EmploymentOrganizations", action = "GetEmploymentOrganizationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "PutEmploymentOrganizationsV12",
              routeTemplate: "employment-organizations/{guid}",
              defaults: new { controller = "EmploymentOrganizations", action = "PutEmploymentOrganizationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmploymentOrganizationsV12",
               routeTemplate: "employment-organizations",
               defaults: new { controller = "EmploymentOrganizations", action = "PostEmploymentOrganizationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmploymentOrganizations",
                routeTemplate: "employment-organizations/{guid}",
                defaults: new { controller = "EmploymentOrganizations", action = "DeleteEmploymentOrganizationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
              name: "EmploymentOrganizationsUnsupported",
              routeTemplate: "employment-organizations/{id}",
               defaults: new { controller = "EmploymentOrganizations", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            #endregion Employment Organizations

            #region  Employment Performance Reviews

            routes.MapHttpRoute(
              name: "GetEmploymentPerformanceReviewsByGuidV10",
              routeTemplate: "employment-performance-reviews/{guid}",
              defaults: new { controller = "EmploymentPerformanceReviews", action = "GetEmploymentPerformanceReviewsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentPerformanceReviewsByGuid",
               routeTemplate: "employment-performance-reviews/{guid}",
                  defaults: new { controller = "EmploymentPerformanceReviews", action = "GetEmploymentPerformanceReviewsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmploymentPerformanceReviewsV10",
              routeTemplate: "employment-performance-reviews",
              defaults: new { controller = "EmploymentPerformanceReviews", action = "GetEmploymentPerformanceReviewsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmploymentPerformanceReviews",
               routeTemplate: "employment-performance-reviews",
                  defaults: new { controller = "EmploymentPerformanceReviews", action = "GetEmploymentPerformanceReviewsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmploymentPerformanceReviewsV10",
              routeTemplate: "employment-performance-reviews/{guid}",
              defaults: new { controller = "EmploymentPerformanceReviews", action = "PutEmploymentPerformanceReviewsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmploymentPerformanceReviewsV10",
               routeTemplate: "employment-performance-reviews",
               defaults: new { controller = "EmploymentPerformanceReviews", action = "PostEmploymentPerformanceReviewsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmploymentPerformanceReviews",
                routeTemplate: "employment-performance-reviews/{guid}",
                defaults: new { controller = "EmploymentPerformanceReviews", action = "DeleteEmploymentPerformanceReviewsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Employment Performance Reviews

            #region  Employment Performance Review Ratings

            routes.MapHttpRoute(
              name: "GetEmploymentPerformanceReviewRatingsByGuidV10",
              routeTemplate: "employment-performance-review-ratings/{guid}",
              defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "GetEmploymentPerformanceReviewRatingsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentPerformanceReviewRatingsByGuid",
               routeTemplate: "employment-performance-review-ratings/{guid}",
                  defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "GetEmploymentPerformanceReviewRatingsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmploymentPerformanceReviewRatingsV10",
              routeTemplate: "employment-performance-review-ratings",
              defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "GetEmploymentPerformanceReviewRatingsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmploymentPerformanceReviewRatings",
               routeTemplate: "employment-performance-review-ratings",
                  defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "GetEmploymentPerformanceReviewRatingsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmploymentPerformanceReviewRatingsV10",
              routeTemplate: "employment-performance-review-ratings/{guid}",
              defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "PutEmploymentPerformanceReviewRatingsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmploymentPerformanceReviewRatingsV10",
               routeTemplate: "employment-performance-review-ratings",
               defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "PostEmploymentPerformanceReviewRatingsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmploymentPerformanceReviewRatings",
                routeTemplate: "employment-performance-review-ratings/{guid}",
                defaults: new { controller = "EmploymentPerformanceReviewRatings", action = "DeleteEmploymentPerformanceReviewRatingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Employment Performance Review Ratings

            #region EmploymentPerformanceReviewTypes

            routes.MapHttpRoute(
                name: "GetHedmEmploymentPerformanceReviewTypes",
                routeTemplate: "employment-performance-review-types",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "GetEmploymentPerformanceReviewTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentPerformanceReviewTypes",
                routeTemplate: "employment-performance-review-types",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "GetEmploymentPerformanceReviewTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmEmploymentPerformanceReviewTypesByGuid",
                routeTemplate: "employment-performance-review-types/{guid}",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "GetEmploymentPerformanceReviewTypesByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentPerformanceReviewTypesByGuid",
                routeTemplate: "employment-performance-review-types/{guid}",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "GetEmploymentPerformanceReviewTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmEmploymentPerformanceReviewTypes",
                routeTemplate: "employment-performance-review-types",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "PostEmploymentPerformanceReviewTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmEmploymentPerformanceReviewTypes",
                routeTemplate: "employment-performance-review-types/{guid}",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "PutEmploymentPerformanceReviewTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmEmploymentPerformanceReviewTypes",
                routeTemplate: "employment-performance-review-types/{guid}",
                defaults: new { controller = "EmploymentPerformanceReviewTypes", action = "DeleteEmploymentPerformanceReviewTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Employment Proficiency Levels

            routes.MapHttpRoute(
              name: "GetEmploymentProficiencyLevelsByGuidV10",
              routeTemplate: "employment-proficiency-levels/{guid}",
              defaults: new { controller = "EmploymentProficiencyLevels", action = "GetEmploymentProficiencyLevelByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentProficiencyLevelsByGuid",
               routeTemplate: "employment-proficiency-levels/{guid}",
                  defaults: new { controller = "EmploymentProficiencyLevels", action = "GetEmploymentProficiencyLevelByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmploymentProficiencyLevelsV10",
              routeTemplate: "employment-proficiency-levels",
              defaults: new { controller = "EmploymentProficiencyLevels", action = "GetEmploymentProficiencyLevelsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmploymentProficiencyLevels",
               routeTemplate: "employment-proficiency-levels",
                  defaults: new { controller = "EmploymentProficiencyLevels", action = "GetEmploymentProficiencyLevelsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmploymentProficiencyLevelsV10",
              routeTemplate: "employment-proficiency-levels/{guid}",
              defaults: new { controller = "EmploymentProficiencyLevels", action = "PutEmploymentProficiencyLevelAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostEmploymentProficiencyLevelsV10",
               routeTemplate: "employment-proficiency-levels",
               defaults: new { controller = "EmploymentProficiencyLevels", action = "PostEmploymentProficiencyLevelAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteEmploymentProficiencyLevels",
                routeTemplate: "employment-proficiency-levels/{guid}",
                defaults: new { controller = "EmploymentProficiencyLevels", action = "DeleteEmploymentProficiencyLevelAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Employment Proficiency Levels

            #region EmploymentProficiencies

            routes.MapHttpRoute(
                name: "GetHedmEmploymentProficiencies",
                routeTemplate: "employment-proficiencies",
                defaults: new { controller = "EmploymentProficiencies", action = "GetEmploymentProficienciesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentProficiencies",
                routeTemplate: "employment-proficiencies",
                defaults: new { controller = "EmploymentProficiencies", action = "GetEmploymentProficienciesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmEmploymentProficienciesById",
                routeTemplate: "employment-proficiencies/{id}",
                defaults: new { controller = "EmploymentProficiencies", action = "GetEmploymentProficiencyByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentProficienciesById",
                routeTemplate: "employment-proficiencies/{id}",
                defaults: new { controller = "EmploymentProficiencies", action = "GetEmploymentProficiencyByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmEmploymentProficiencies",
                routeTemplate: "employment-proficiencies",
                defaults: new { controller = "EmploymentProficiencies", action = "PostEmploymentProficiencyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmEmploymentProficiencies",
                routeTemplate: "employment-proficiencies/{id}",
                defaults: new { controller = "EmploymentProficiencies", action = "PutEmploymentProficiencyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmEmploymentProficiencies",
                routeTemplate: "employment-proficiencies/{id}",
                defaults: new { controller = "EmploymentProficiencies", action = "DeleteEmploymentProficiencyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region EmploymentTerminationReasons

            routes.MapHttpRoute(
               name: "GetHedmEmploymentTerminationReasons",
               routeTemplate: "employment-termination-reasons",
               defaults: new { controller = "EmploymentTerminationReasons", action = "GetEmploymentTerminationReasonsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentTerminationReasons",
                routeTemplate: "employment-termination-reasons",
                defaults: new { controller = "EmploymentTerminationReasons", action = "GetEmploymentTerminationReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmEmploymentTerminationReasonById",
                routeTemplate: "employment-termination-reasons/{id}",
                defaults: new { controller = "EmploymentTerminationReasons", action = "GetEmploymentTerminationReasonByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmEmploymentTerminationReasonById",
                routeTemplate: "employment-termination-reasons/{id}",
                defaults: new { controller = "EmploymentTerminationReasons", action = "GetEmploymentTerminationReasonByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmEmploymentTerminationReason",
                routeTemplate: "employment-termination-reasons",
                defaults: new { controller = "EmploymentTerminationReasons", action = "PostEmploymentTerminationReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmEmploymentTerminationReason",
                routeTemplate: "employment-termination-reasons/{id}",
                defaults: new { controller = "EmploymentTerminationReasons", action = "PutEmploymentTerminationReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmEmploymentTerminationReason",
                routeTemplate: "employment-termination-reasons/{id}",
                defaults: new { controller = "EmploymentTerminationReasons", action = "DeleteEmploymentTerminationReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  EmploymentVocations

            routes.MapHttpRoute(
              name: "GetEmploymentVocationsByGuidV10",
              routeTemplate: "employment-vocations/{guid}",
              defaults: new { controller = "EmploymentVocations", action = "GetEmploymentVocationByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetEmploymentVocationsByGuid",
               routeTemplate: "employment-vocations/{guid}",
                  defaults: new { controller = "EmploymentVocations", action = "GetEmploymentVocationByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetEmploymentVocationsV10",
              routeTemplate: "employment-vocations",
              defaults: new { controller = "EmploymentVocations", action = "GetEmploymentVocationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetEmploymentVocations",
               routeTemplate: "employment-vocations",
                  defaults: new { controller = "EmploymentVocations", action = "GetEmploymentVocationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutEmploymentVocationsV10",
              routeTemplate: "employment-vocations/{guid}",
              defaults: new { controller = "EmploymentVocations", action = "PutEmploymentVocationAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostVocationsV1",
               routeTemplate: "employment-vocations",
               defaults: new { controller = "EmploymentVocations", action = "PostEmploymentVocationAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteVocations",
                routeTemplate: "employment-vocations/{guid}",
                defaults: new { controller = "EmploymentVocations", action = "DeleteEmploymentVocationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion EmploymentVocations

            #region EnrollmentStatuses

            routes.MapHttpRoute(
                name: "GetEnrollmentStatusByIdV6",
                routeTemplate: "enrollment-statuses/{id}",
                defaults: new { controller = "EnrollmentStatuses", action = "GetEnrollmentStatusByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEnrollmentStatusById",
                routeTemplate: "enrollment-statuses/{id}",
                   defaults: new { controller = "EnrollmentStatuses", action = "GetEnrollmentStatusByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetEnrollmentStatusesV6",
               routeTemplate: "enrollment-statuses",
               defaults: new { controller = "EnrollmentStatuses", action = "GetEnrollmentStatusesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetEnrollmentStatuses",
               routeTemplate: "enrollment-statuses",
                  defaults: new { controller = "EnrollmentStatuses", action = "GetEnrollmentStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "PutEnrollmentStatusV6",
               routeTemplate: "enrollment-statuses/{id}",
               defaults: new { controller = "EnrollmentStatuses", action = "PutEnrollmentStatusAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostEnrollmentStatusV6",
                routeTemplate: "enrollment-statuses",
                defaults: new { controller = "EnrollmentStatuses", action = "PostEnrollmentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteEnrollmentStatus",
                routeTemplate: "enrollment-statuses/{id}",
                defaults: new { controller = "EnrollmentStatuses", action = "DeleteEnrollmentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region Ethnicities

            routes.MapHttpRoute(
                name: "GetEthnicityById2",
                routeTemplate: "ethnicities/{id}",
                defaults: new { controller = "Ethnicities", action = "GetEthnicityById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEthnicityById2",
                routeTemplate: "ethnicities/{id}",
                defaults: new { controller = "Ethnicities", action = "GetEthnicityById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetEedmEthnicities2",
                routeTemplate: "ethnicities",
                defaults: new { controller = "Ethnicities", action = "GetEthnicities2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEedmEthnicities2",
                routeTemplate: "ethnicities",
                defaults: new { controller = "Ethnicities", action = "GetEthnicities2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
              name: "GetEthnicities",
              routeTemplate: "ethnicities",
              defaults: new { controller = "Ethnicities", action = "GetAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
          );

            routes.MapHttpRoute(
                name: "PutEthnicities",
                routeTemplate: "ethnicities/{id}",
                defaults: new { controller = "Ethnicities", action = "PutEthnicitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostEthnicities",
                routeTemplate: "ethnicities",
                defaults: new { controller = "Ethnicities", action = "PostEthnicitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteEthnicities",
                routeTemplate: "ethnicities/{id}",
                defaults: new { controller = "Ethnicities", action = "DeleteEthnicitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region Events

            routes.MapHttpRoute(
                name: "GetFacultyEvents",
                routeTemplate: "faculty/{facultyId}/calendar",
                defaults: new { controller = "Events", action = "GetFacultyEvents" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            // WARNING: This is an obsolete route as of Api version 1.22.  See qapi/sections/QuerySectionEventsICal .
            routes.MapHttpRoute(
                name: "GetSectionEvents",
                routeTemplate: "sections/{sectionId}/calendar",
                defaults: new { controller = "Events", action = "GetSectionEvents" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionMeetingInstancesAsync",
                routeTemplate: "sections/{sectionId}/section-meeting-instances",
                defaults: new { controller = "Sections", action = "GetSectionMeetingInstancesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region ExternalEducation

            // V11 ROUTES TEMPORARILY REMOVED

            //routes.MapHttpRoute(
            //   name: "GetExternalEducationV11",
            //   routeTemplate: "external-education",
            //   defaults: new { controller = "ExternalEducation", action = "GetExternalEducations2Async", isEedmSupported = true },
            //   constraints: new
            //   {
            //       httpMethod = new HttpMethodConstraint("GET"),
            //       headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //   }
            //);

            routes.MapHttpRoute(
               name: "GetExternalEducationV6",
               routeTemplate: "external-education",
               defaults: new { controller = "ExternalEducation", action = "GetExternalEducationsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetExternalEducation",
               routeTemplate: "external-education",
                  defaults: new { controller = "ExternalEducation", action = "GetExternalEducationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
            );

            //routes.MapHttpRoute(
            //   name: "GetExternalEducationByGuidV11",
            //   routeTemplate: "external-education/{guid}",
            //   defaults: new { controller = "ExternalEducation", action = "GetExternalEducationByGuid2Async", isEedmSupported = true },
            //   constraints: new
            //   {
            //       httpMethod = new HttpMethodConstraint("GET"),
            //       headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //   }
            //);

            routes.MapHttpRoute(
               name: "GetExternalEducationByGuidV6",
               routeTemplate: "external-education/{guid}",
               defaults: new { controller = "ExternalEducation", action = "GetExternalEducationByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetExternalEducationByGuid",
               routeTemplate: "external-education/{guid}",
                  defaults: new { controller = "ExternalEducation", action = "GetExternalEducationByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
            );
            /*
            routes.MapHttpRoute(
               name: "PostExternalEducationV11",
               routeTemplate: "external-education",
               defaults: new { controller = "ExternalEducation", action = "PostExternalEducationAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );
            */
            routes.MapHttpRoute(
              name: "PostExternalEducationV6",
              routeTemplate: "external-education",
              defaults: new { controller = "ExternalEducation", action = "PostExternalEducationAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );
            /*
            routes.MapHttpRoute(
                name: "PutExternalEducationV11",
                routeTemplate: "external-education/{id}",
                defaults: new { controller = "ExternalEducation", action = "PutExternalEducationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );
            */
            routes.MapHttpRoute(
                name: "PutExternalEducationV6",
                routeTemplate: "external-education/{id}",
                defaults: new { controller = "ExternalEducation", action = "PutExternalEducationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteExternalEducation",
                routeTemplate: "external-education/{id}",
                defaults: new { controller = "ExternalEducation", action = "DeleteExternalEducationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region  External Employments

            routes.MapHttpRoute(
              name: "GetExternalEmploymentsByGuidV10",
              routeTemplate: "external-employments/{guid}",
              defaults: new { controller = "ExternalEmployments", action = "GetExternalEmploymentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetExternalEmploymentsByGuid",
               routeTemplate: "external-employments/{guid}",
                  defaults: new { controller = "ExternalEmployments", action = "GetExternalEmploymentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetExternalEmploymentsV10",
              routeTemplate: "external-employments",
              defaults: new { controller = "ExternalEmployments", action = "GetExternalEmploymentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetExternalEmployments",
               routeTemplate: "external-employments",
                  defaults: new { controller = "ExternalEmployments", action = "GetExternalEmploymentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutExternalEmploymentsV10",
              routeTemplate: "external-employments/{guid}",
              defaults: new { controller = "ExternalEmployments", action = "PutExternalEmploymentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostExternalEmploymentsV10",
               routeTemplate: "external-employments",
               defaults: new { controller = "ExternalEmployments", action = "PostExternalEmploymentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteExternalEmployments",
                routeTemplate: "external-employments/{guid}",
                defaults: new { controller = "ExternalEmployments", action = "DeleteExternalEmploymentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion External Employments

            #region  External Employment Statuses

            routes.MapHttpRoute(
              name: "GetExternalEmploymentStatusesByGuidV10",
              routeTemplate: "external-employment-statuses/{guid}",
              defaults: new { controller = "ExternalEmploymentStatuses", action = "GetExternalEmploymentStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetExternalEmploymentStatusesByGuid",
               routeTemplate: "external-employment-statuses/{guid}",
                  defaults: new { controller = "ExternalEmploymentStatuses", action = "GetExternalEmploymentStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetExternalEmploymentStatusesV10",
              routeTemplate: "external-employment-statuses",
              defaults: new { controller = "ExternalEmploymentStatuses", action = "GetExternalEmploymentStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetExternalEmploymentStatuses",
               routeTemplate: "external-employment-statuses",
                  defaults: new { controller = "ExternalEmploymentStatuses", action = "GetExternalEmploymentStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutExternalEmploymentStatusesV10",
              routeTemplate: "external-employment-statuses/{guid}",
              defaults: new { controller = "ExternalEmploymentStatuses", action = "PutExternalEmploymentStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostExternalEmploymentStatusesV10",
               routeTemplate: "external-employment-statuses",
               defaults: new { controller = "ExternalEmploymentStatuses", action = "PostExternalEmploymentStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteExternalEmploymentStatuses",
                routeTemplate: "external-employment-statuses/{guid}",
                defaults: new { controller = "ExternalEmploymentStatuses", action = "DeleteExternalEmploymentStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion External Employment Statuses

            #region  ExternalEmploymentPositions

            routes.MapHttpRoute(
              name: "GetExternalEmploymentPositionsByGuidV10",
              routeTemplate: "external-employment-positions/{guid}",
              defaults: new { controller = "ExternalEmploymentPositions", action = "GetExternalEmploymentPositionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetExternalEmploymentPositionsByGuid",
               routeTemplate: "external-employment-positions/{guid}",
                  defaults: new { controller = "ExternalEmploymentPositions", action = "GetExternalEmploymentPositionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetExternalEmploymentPositionsV10",
              routeTemplate: "external-employment-positions",
              defaults: new { controller = "ExternalEmploymentPositions", action = "GetExternalEmploymentPositionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetExternalEmploymentPositions",
               routeTemplate: "external-employment-positions",
                  defaults: new { controller = "ExternalEmploymentPositions", action = "GetExternalEmploymentPositionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutExternalEmploymentPositionsV10",
              routeTemplate: "external-employment-positions/{guid}",
              defaults: new { controller = "ExternalEmploymentPositions", action = "PutExternalEmploymentPositionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostExternalEmploymentPositionsV10",
               routeTemplate: "external-employment-positions",
               defaults: new { controller = "ExternalEmploymentPositions", action = "PostExternalEmploymentPositionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteExternalEmploymentPositions",
                routeTemplate: "external-employment-positions/{guid}",
                defaults: new { controller = "ExternalEmploymentPositions", action = "DeleteExternalEmploymentPositionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion ExternalEmploymentPositions

            #region ExternalTranscriptStatuses

            routes.MapHttpRoute(
                name: "GetExternalTranscriptStatuses",
                routeTemplate: "external-transcript-statuses",
                defaults: new { controller = "ExternalTranscriptStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Faculty

            // WARNING: Obsolete as of Colleague Web API 1.21. Use version 2.
            routes.MapHttpRoute(
                name: "FacultyPermissions",
                routeTemplate: "faculty/permissions",
                defaults: new { controller = "Faculty", action = "GetPermissionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetFacultyPermissions2",
                routeTemplate: "faculty/permissions",
                defaults: new { controller = "Faculty", action = "GetFacultyPermissions2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route.  See GetFaculty2 below.
            routes.MapHttpRoute(
                name: "GetFaculty",
                routeTemplate: "faculty",
                defaults: new { controller = "Faculty", action = "PostFacultyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetFaculty2",
                routeTemplate: "faculty/{id}",
                defaults: new { controller = "Faculty", action = "GetFacultyAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.3. Use the GetFacultySections3 route.
            routes.MapHttpRoute(
                name: "GetFacultySections",
                routeTemplate: "faculty/{facultyId}/sections",
                defaults: new { controller = "Faculty", action = "GetFacultySectionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.5. Use the GetFacultySections3 route.            
            routes.MapHttpRoute(
                name: "GetFacultySections2",
                routeTemplate: "faculty/{facultyId}/sections",
                defaults: new { controller = "Faculty", action = "GetFacultySections2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            // WARNING: This is an obsolete route as of Api version 1.13.1. Use the GetFacultySections3 route.
            routes.MapHttpRoute(
                name: "GetFacultySections3",
                routeTemplate: "faculty/{facultyId}/sections",
                defaults: new { controller = "Faculty", action = "GetFacultySections3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
               );

            routes.MapHttpRoute(
                name: "GetFacultySections4",
                routeTemplate: "faculty/{facultyId}/sections",
                defaults: new { controller = "Faculty", action = "GetFacultySections4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, true)
                }
         );

            routes.MapHttpRoute(
                name: "GetFacultyRestrictions",
                routeTemplate: "faculty/{facultyId}/restrictions",
                defaults: new { controller = "Faculty", action = "GetFacultyRestrictionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryFacultyOfficeHours",
                routeTemplate: "qapi/faculty/office-hours",
                defaults: new { controller = "Faculty", action = "GetFacultyOfficeHoursAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetFacultyByIds",
                routeTemplate: "qapi/faculty",
                defaults: new { controller = "Faculty", action = "QueryFacultyByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostFacultyIds",
                routeTemplate: "qapi/query-faculty-ids",
                defaults: new { controller = "Faculty", action = "PostFacultyIdsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region FacultyContracts

            routes.MapHttpRoute(
                name: "GetFacultyContractsAsync",
                routeTemplate: "faculty/{facultyId}/contracts",
                defaults: new { controller = "FacultyContracts", action = "GetFacultyContractsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region FALink

            routes.MapHttpRoute(
                name: "FALink",
                routeTemplate: "fa-link",
                defaults: new { controller = "FALink", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Fafsa
            routes.MapHttpRoute(
                name: "Fafsa",
                routeTemplate: "qapi/fafsa",
                defaults: new { controller = "Fafsa", action = "QueryFafsaByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "AllStudentFafsas",
                routeTemplate: "students/{studentId}/fafsas",
                defaults: new { controller = "Fafsa", action = "GetStudentFafsasAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region FederalCourseClassifications

            routes.MapHttpRoute(
                name: "GetFederalCourseClassifications",
                routeTemplate: "federal-course-classifications",
                defaults: new { controller = "FederalCourseClassifications", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Financial Aid Academic Progress Types

            routes.MapHttpRoute(
              name: "GetFinancialAidAcademicProgressTypesByGuidV15",
              routeTemplate: "financial-aid-academic-progress-types/{guid}",
              defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "GetFinancialAidAcademicProgressTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidAcademicProgressTypesByGuid",
               routeTemplate: "financial-aid-academic-progress-types/{guid}",
                  defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "GetFinancialAidAcademicProgressTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialAidAcademicProgressTypesV15",
              routeTemplate: "financial-aid-academic-progress-types",
              defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "GetFinancialAidAcademicProgressTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidAcademicProgressTypes",
               routeTemplate: "financial-aid-academic-progress-types",
                  defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "GetFinancialAidAcademicProgressTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialAidAcademicProgressTypesV15",
              routeTemplate: "financial-aid-academic-progress-types/{guid}",
              defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "PutFinancialAidAcademicProgressTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialAidAcademicProgressTypesV15",
               routeTemplate: "financial-aid-academic-progress-types",
               defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "PostFinancialAidAcademicProgressTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialAidAcademicProgressTypes",
                routeTemplate: "financial-aid-academic-progress-types/{guid}",
                defaults: new { controller = "FinancialAidAcademicProgressTypes", action = "DeleteFinancialAidAcademicProgressTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Financial Aid Academic Progress Types

            #region  Financial Aid Academic Progress Statuses

            routes.MapHttpRoute(
              name: "GetFinancialAidAcademicProgressStatusesByGuidV15",
              routeTemplate: "financial-aid-academic-progress-statuses/{guid}",
              defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "GetFinancialAidAcademicProgressStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidAcademicProgressStatusesByGuid",
               routeTemplate: "financial-aid-academic-progress-statuses/{guid}",
                  defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "GetFinancialAidAcademicProgressStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialAidAcademicProgressStatusesV15",
              routeTemplate: "financial-aid-academic-progress-statuses",
              defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "GetFinancialAidAcademicProgressStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidAcademicProgressStatuses",
               routeTemplate: "financial-aid-academic-progress-statuses",
                  defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "GetFinancialAidAcademicProgressStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialAidAcademicProgressStatusesV15",
              routeTemplate: "financial-aid-academic-progress-statuses/{guid}",
              defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "PutFinancialAidAcademicProgressStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialAidAcademicProgressStatusesV15",
               routeTemplate: "financial-aid-academic-progress-statuses",
               defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "PostFinancialAidAcademicProgressStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialAidAcademicProgressStatuses",
                routeTemplate: "financial-aid-academic-progress-statuses/{guid}",
                defaults: new { controller = "FinancialAidAcademicProgressStatuses", action = "DeleteFinancialAidAcademicProgressStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Financial Aid Academic Progress Statuses

            #region FinancialAidApplications

            routes.MapHttpRoute(
              name: "GetFinancialAidApplicationsByIdV9",
              routeTemplate: "financial-aid-applications/{id}",
              defaults: new { controller = "StudentFinancialAidApplications", action = "GetByIdAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidApplicationsById",
               routeTemplate: "financial-aid-applications/{id}",
                  defaults: new { controller = "StudentFinancialAidApplications", action = "GetByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialAidApplicationsV9",
              routeTemplate: "financial-aid-applications",
              defaults: new { controller = "StudentFinancialAidApplications", action = "GetAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidApplications",
               routeTemplate: "financial-aid-applications",
                  defaults: new { controller = "StudentFinancialAidApplications", action = "GetAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialAidApplicationsV9",
              routeTemplate: "financial-aid-applications/{id}",
              defaults: new { controller = "StudentFinancialAidApplications", action = "UpdateAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialAidApplicationsV9",
               routeTemplate: "financial-aid-applications",
               defaults: new { controller = "StudentFinancialAidApplications", action = "CreateAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialAidApplications",
                routeTemplate: "financial-aid-applications/{id}",
                defaults: new { controller = "StudentFinancialAidApplications", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
                }
           );

            //Obsolete as of API version 1.7. Deprecated.
            routes.MapHttpRoute(
                name: "GetFinancialAidApplications",
                routeTemplate: "students/{studentId}/financial-aid-applications",
                defaults: new { controller = "FinancialAidApplications", action = "GetFinancialAidApplications" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );
            #endregion

            #region FinancialAidApplicationOutcomes

            routes.MapHttpRoute(
              name: "GetFinancialAidApplicationOutcomesByIdV9",
              routeTemplate: "financial-aid-application-outcomes/{id}",
              defaults: new { controller = "FinancialAidApplicationOutcomes", action = "GetFinancialAidApplicationOutcomesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidApplicationOutcomesById",
               routeTemplate: "financial-aid-application-outcomes/{id}",
                  defaults: new { controller = "FinancialAidApplicationOutcomes", action = "GetFinancialAidApplicationOutcomesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialAidApplicationOutcomesV9",
              routeTemplate: "financial-aid-application-outcomes",
              defaults: new { controller = "FinancialAidApplicationOutcomes", action = "GetFinancialAidApplicationOutcomesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidApplicationOutcomes",
               routeTemplate: "financial-aid-application-outcomes",
                  defaults: new { controller = "FinancialAidApplicationOutcomes", action = "GetFinancialAidApplicationOutcomesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialAidApplicationOutcomesV9",
              routeTemplate: "financial-aid-application-outcomes/{id}",
              defaults: new { controller = "FinancialAidApplicationOutcomes", action = "UpdateAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialAidApplicationOutcomesV9",
               routeTemplate: "financial-aid-application-outcomes",
               defaults: new { controller = "FinancialAidApplicationOutcomes", action = "CreateAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialAidApplicationOutcomes",
                routeTemplate: "financial-aid-application-outcomes/{id}",
                defaults: new { controller = "FinancialAidApplicationOutcomes", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
           );

            #endregion

            #region FinancialAidAwardPeriods

            routes.MapHttpRoute(
                name: "GetFinancialAidAwardPeriodByIdV7",
                routeTemplate: "financial-aid-award-periods/{id}",
                defaults: new { controller = "FinancialAidAwardPeriods", action = "GetFinancialAidAwardPeriodByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidAwardPeriodById",
                routeTemplate: "financial-aid-award-periods/{id}",
                defaults: new { controller = "FinancialAidAwardPeriods", action = "GetFinancialAidAwardPeriodByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetFinancialAidAwardPeriodsV7",
                routeTemplate: "financial-aid-award-periods",
                defaults: new { controller = "FinancialAidAwardPeriods", action = "GetFinancialAidAwardPeriodsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidAwardPeriods",
                routeTemplate: "financial-aid-award-periods",
                defaults: new { controller = "FinancialAidAwardPeriods", action = "GetFinancialAidAwardPeriodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutFinancialAidAwardPeriodsV7",
               routeTemplate: "financial-aid-award-periods/{id}",
               defaults: new { controller = "FinancialAidAwardPeriods", action = "PutFinancialAidAwardPeriodAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostFinancialAidAwardPeriodsV7",
                routeTemplate: "financial-aid-award-periods",
                defaults: new { controller = "FinancialAidAwardPeriods", action = "PostFinancialAidAwardPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteFinancialAidAwardPeriods",
                routeTemplate: "financial-aid-award-periods/{id}",
                defaults: new { controller = "FinancialAidAwardPeriods", action = "DeleteFinancialAidAwardPeriodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region FinancialAidCounselors
            routes.MapHttpRoute(
                name: "GetFinancialAidCounselors",
                routeTemplate: "financial-aid-counselors/{counselorId}",
                defaults: new { controller = "FinancialAidCounselors", action = "GetCounselor" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryFinancialAidCounselors",
                routeTemplate: "qapi/financial-aid-counselors",
                defaults: new { controller = "FinancialAidCounselors", action = "QueryFinancialAidCounselorsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region FinancialAidExplanations

            routes.MapHttpRoute(
                name: "GetFinancialAidExplanations",
                routeTemplate: "financial-aid-explanations",
                defaults: new { controller = "FinancialAidExplanations", action = "GetFinancialAidExplanationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region FinancialAidFundCategories

            routes.MapHttpRoute(
                name: "GetFinancialAidFundCategoryByIdV7",
                routeTemplate: "financial-aid-fund-categories/{id}",
                defaults: new { controller = "FinancialAidFundCategories", action = "GetFinancialAidFundCategoryByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidFundCategoryById",
                routeTemplate: "financial-aid-fund-categories/{id}",
                defaults: new { controller = "FinancialAidFundCategories", action = "GetFinancialAidFundCategoryByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetFinancialAidFundCategoriesV7",
                routeTemplate: "financial-aid-fund-categories",
                defaults: new { controller = "FinancialAidFundCategories", action = "GetFinancialAidFundCategoriesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidFundCategories",
                routeTemplate: "financial-aid-fund-categories",
                defaults: new { controller = "FinancialAidFundCategories", action = "GetFinancialAidFundCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutFinancialAidFundCategoriesV7",
               routeTemplate: "financial-aid-fund-categories/{id}",
               defaults: new { controller = "FinancialAidFundCategories", action = "PutFinancialAidFundCategoryAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostFinancialAidFundCategoriesV7",
                routeTemplate: "financial-aid-fund-categories",
                defaults: new { controller = "FinancialAidFundCategories", action = "PostFinancialAidFundCategoryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteFinancialAidFundCategories",
                routeTemplate: "financial-aid-fund-categories/{id}",
                defaults: new { controller = "FinancialAidFundCategories", action = "DeleteFinancialAidFundCategoryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region  Financial Aid Fund Classifications

            routes.MapHttpRoute(
              name: "GetFinancialAidFundClassificationsByGuidV9",
              routeTemplate: "financial-aid-fund-classifications/{guid}",
              defaults: new { controller = "FinancialAidFundClassifications", action = "GetFinancialAidFundClassificationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidFundClassificationsByGuid",
               routeTemplate: "financial-aid-fund-classifications/{guid}",
                  defaults: new { controller = "FinancialAidFundClassifications", action = "GetFinancialAidFundClassificationsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialAidFundClassificationsV9",
              routeTemplate: "financial-aid-fund-classifications",
              defaults: new { controller = "FinancialAidFundClassifications", action = "GetFinancialAidFundClassificationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetFinancialAidFundClassifications",
               routeTemplate: "financial-aid-fund-classifications",
                  defaults: new { controller = "FinancialAidFundClassifications", action = "GetFinancialAidFundClassificationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialAidFundClassificationsV9",
              routeTemplate: "financial-aid-fund-classifications/{guid}",
              defaults: new { controller = "FinancialAidFundClassifications", action = "PutFinancialAidFundClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialAidFundClassificationsV9",
               routeTemplate: "financial-aid-fund-classifications",
               defaults: new { controller = "FinancialAidFundClassifications", action = "PostFinancialAidFundClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialAidFundClassifications",
                routeTemplate: "financial-aid-fund-classifications/{guid}",
                defaults: new { controller = "FinancialAidFundClassifications", action = "DeleteFinancialAidFundClassificationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Financial Aid Fund Classifications

            #region  Financial Aid Funds

            routes.MapHttpRoute(
              name: "GetFinancialAidFundsByGuidV9",
              routeTemplate: "financial-aid-funds/{id}",
              defaults: new { controller = "FinancialAidFunds", action = "GetFinancialAidFundsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialAidFundsByGuid",
               routeTemplate: "financial-aid-funds/{id}",
                  defaults: new { controller = "FinancialAidFunds", action = "GetFinancialAidFundsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialAidFundsV9",
              routeTemplate: "financial-aid-funds",
              defaults: new { controller = "FinancialAidFunds", action = "GetFinancialAidFundsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetFinancialAidFunds",
               routeTemplate: "financial-aid-funds",
                  defaults: new { controller = "FinancialAidFunds", action = "GetFinancialAidFundsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialAidFundsV9",
              routeTemplate: "financial-aid-funds/{id}",
              defaults: new { controller = "FinancialAidFunds", action = "PutFinancialAidFundsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialAidFundsV9",
               routeTemplate: "financial-aid-funds",
               defaults: new { controller = "FinancialAidFunds", action = "PostFinancialAidFundsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialAidFunds",
                routeTemplate: "financial-aid-funds/{id}",
                defaults: new { controller = "FinancialAidFunds", action = "DeleteFinancialAidFundsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Financial Aid Funds

            #region FinancialAidOffices

            // Obsolete as of Api version 1.14, use version 2 of this API
            routes.MapHttpRoute(
               name: "GetFinancialAidOffices",
               routeTemplate: "financial-aid-offices",
               defaults: new { controller = "FinancialAidOffices", action = "GetFinancialAidOffices" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
            );

            // Obsolete as of Api version 1.15, use version 3 of this API
            routes.MapHttpRoute(
                name: "GetFinancialAidOffices2",
                routeTemplate: "financial-aid-offices",
                defaults: new { controller = "FinancialAidOffices", action = "GetFinancialAidOffices2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetFinancialAidOffices3",
                routeTemplate: "financial-aid-offices",
                defaults: new { controller = "FinancialAidOffices", action = "GetFinancialAidOffices3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetFinancialAidOfficeByGuidV9",
                routeTemplate: "financial-aid-offices/{guid}",
                defaults: new { controller = "StudentFinancialAidOffices", action = "GetFinancialAidOfficeByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidOfficeByGuid",
                routeTemplate: "financial-aid-offices/{guid}",
                defaults: new { controller = "StudentFinancialAidOffices", action = "GetFinancialAidOfficeByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(9, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetFinancialAidOfficesV9",
                routeTemplate: "financial-aid-offices",
                defaults: new { controller = "StudentFinancialAidOffices", action = "GetEedmFinancialAidOfficesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidOffices",
                routeTemplate: "financial-aid-offices",
                defaults: new { controller = "StudentFinancialAidOffices", action = "GetEedmFinancialAidOfficesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(9, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutFinancialAidOfficesV9",
               routeTemplate: "financial-aid-offices/{guid}",
               defaults: new { controller = "StudentFinancialAidOffices", action = "PutFinancialAidOfficeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
               }
           );

            routes.MapHttpRoute(
                name: "PostFinancialAidOfficesV9",
                routeTemplate: "financial-aid-offices",
                defaults: new { controller = "StudentFinancialAidOffices", action = "PostFinancialAidOfficeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteFinancialAidOffices",
                routeTemplate: "financial-aid-offices/{guid}",
                defaults: new { controller = "StudentFinancialAidOffices", action = "DeleteFinancialAidOfficeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region FinancialAidYears

            routes.MapHttpRoute(
                name: "GetFinancialAidYearByIdV7",
                routeTemplate: "financial-aid-years/{id}",
                defaults: new { controller = "FinancialAidYears", action = "GetFinancialAidYearByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidYearById",
                routeTemplate: "financial-aid-years/{id}",
                defaults: new { controller = "FinancialAidYears", action = "GetFinancialAidYearByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetFinancialAidYearsV7",
                routeTemplate: "financial-aid-years",
                defaults: new { controller = "FinancialAidYears", action = "GetFinancialAidYearsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetFinancialAidYears",
                routeTemplate: "financial-aid-years",
                defaults: new { controller = "FinancialAidYears", action = "GetFinancialAidYearsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutFinancialAidYearsV7",
               routeTemplate: "financial-aid-years/{id}",
               defaults: new { controller = "FinancialAidYears", action = "PutFinancialAidYearAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostFinancialAidYearsV7",
                routeTemplate: "financial-aid-years",
                defaults: new { controller = "FinancialAidYears", action = "PostFinancialAidYearAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteFinancialAidYears",
                routeTemplate: "financial-aid-years/{id}",
                defaults: new { controller = "FinancialAidYears", action = "DeleteFinancialAidYearAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region FinancialAidPersons

            routes.MapHttpRoute(
                name: "QueryFinancialAidPersonsByPost",
                routeTemplate: "qapi/financial-aid-persons",
                defaults: new { controller = "FinancialAidPerson", action = "QueryFinancialAidPersonsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Financial Document Types

            routes.MapHttpRoute(
              name: "GetFinancialDocumentTypesByGuidV11",
              routeTemplate: "financial-document-types/{guid}",
              defaults: new { controller = "FinancialDocumentTypes", action = "GetFinancialDocumentTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFinancialDocumentTypesByGuid",
               routeTemplate: "financial-document-types/{guid}",
                  defaults: new { controller = "FinancialDocumentTypes", action = "GetFinancialDocumentTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFinancialDocumentTypesV11",
              routeTemplate: "financial-document-types",
              defaults: new { controller = "FinancialDocumentTypes", action = "GetFinancialDocumentTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetFinancialDocumentTypes",
               routeTemplate: "financial-document-types",
                  defaults: new { controller = "FinancialDocumentTypes", action = "GetFinancialDocumentTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFinancialDocumentTypesV11",
              routeTemplate: "financial-document-types/{guid}",
              defaults: new { controller = "FinancialDocumentTypes", action = "PutFinancialDocumentTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostFinancialDocumentTypesV11",
               routeTemplate: "financial-document-types",
               defaults: new { controller = "FinancialDocumentTypes", action = "PostFinancialDocumentTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFinancialDocumentTypes",
                routeTemplate: "financial-document-types/{guid}",
                defaults: new { controller = "FinancialDocumentTypes", action = "DeleteFinancialDocumentTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Financial Document Types

            #region Finance query

            routes.MapHttpRoute(
                name: "QueryFinanceQuerySelectionByPostAsync",
                routeTemplate: "qapi/finance-query",
                defaults: new { controller = "FinanceQuery", action = "QueryFinanceQuerySelectionByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "Get",
                routeTemplate: "configuration/gl-fiscal-year-configuration",
                defaults: new { controller = "GeneralLedgerConfiguration", action = "GetGlFiscalYearConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            #endregion

            #region  FiscalPeriods

            routes.MapHttpRoute(
              name: "GetFiscalPeriodsByGuidV11",
              routeTemplate: "fiscal-periods/{guid}",
              defaults: new { controller = "FiscalPeriods", action = "GetFiscalPeriodsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFiscalPeriodsByGuid",
               routeTemplate: "fiscal-periods/{guid}",
                  defaults: new { controller = "FiscalPeriods", action = "GetFiscalPeriodsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFiscalPeriodsV11",
              routeTemplate: "fiscal-periods",
              defaults: new { controller = "FiscalPeriods", action = "GetFiscalPeriodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetFiscalPeriods",
               routeTemplate: "fiscal-periods",
                  defaults: new { controller = "FiscalPeriods", action = "GetFiscalPeriodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFiscalPeriodsV11",
              routeTemplate: "fiscal-periods/{guid}",
              defaults: new { controller = "FiscalPeriods", action = "PutFiscalPeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostFiscalPeriodsV11",
               routeTemplate: "fiscal-periods",
               defaults: new { controller = "FiscalPeriods", action = "PostFiscalPeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFiscalPeriods",
                routeTemplate: "fiscal-periods/{guid}",
                defaults: new { controller = "FiscalPeriods", action = "DeleteFiscalPeriodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Fiscal Periods

            #region FiscalYears

            routes.MapHttpRoute(
                name: "GetFiscalYears",
                routeTemplate: "fiscal-years",
                defaults: new { controller = "FiscalYears", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetFiscalYearForToday",
                routeTemplate: "fiscal-years/today",
                defaults: new { controller = "FiscalYears", action = "GetFiscalYearForTodayAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
              name: "GetFiscalYearsByGuidV11",
              routeTemplate: "fiscal-years/{guid}",
              defaults: new { controller = "FiscalYears", action = "GetFiscalYearsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFiscalYearsByGuid",
               routeTemplate: "fiscal-years/{guid}",
                  defaults: new { controller = "FiscalYears", action = "GetFiscalYearsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFiscalYearsV11",
              routeTemplate: "fiscal-years",
              defaults: new { controller = "FiscalYears", action = "GetFiscalYearsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFiscalYears",
               routeTemplate: "fiscal-years",
                  defaults: new { controller = "FiscalYears", action = "GetFiscalYearsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFiscalYearsV11",
              routeTemplate: "fiscal-years/{guid}",
              defaults: new { controller = "FiscalYears", action = "PutFiscalYearsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostFiscalYearsV11",
               routeTemplate: "fiscal-years",
               defaults: new { controller = "FiscalYears", action = "PostFiscalYearsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFiscalYears",
                routeTemplate: "fiscal-years/{guid}",
                defaults: new { controller = "FiscalYears", action = "DeleteFiscalYearsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion

            #region  Fixed Assets

            routes.MapHttpRoute(
             name: "GetFixedAssetTransferFlags",
             routeTemplate: "fixed-asset-transfer-flags",
             defaults: new { controller = "FixedAssets", action = "GetFixedAssetTransferFlagsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(1, true)
             }
        );

            routes.MapHttpRoute(
              name: "GetFixedAssetsByGuidV12",
              routeTemplate: "fixed-assets/{guid}",
              defaults: new { controller = "FixedAssets", action = "GetFixedAssetsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFixedAssetsByGuid",
               routeTemplate: "fixed-assets/{guid}",
                  defaults: new { controller = "FixedAssets", action = "GetFixedAssetsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFixedAssetsV12",
              routeTemplate: "fixed-assets",
              defaults: new { controller = "FixedAssets", action = "GetFixedAssetsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFixedAssets",
               routeTemplate: "fixed-assets",
                  defaults: new { controller = "FixedAssets", action = "GetFixedAssetsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFixedAssetsV12",
              routeTemplate: "fixed-assets/{guid}",
              defaults: new { controller = "FixedAssets", action = "PutFixedAssetsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostFixedAssetsV12",
               routeTemplate: "fixed-assets",
               defaults: new { controller = "FixedAssets", action = "PostFixedAssetsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFixedAssets",
                routeTemplate: "fixed-assets/{guid}",
                defaults: new { controller = "FixedAssets", action = "DeleteFixedAssetsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Fixed Assets

            #region  Fixed Asset Categories

            routes.MapHttpRoute(
              name: "GetFixedAssetCategoriesByGuidV12",
              routeTemplate: "fixed-asset-categories/{guid}",
              defaults: new { controller = "FixedAssetCategories", action = "GetFixedAssetCategoriesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFixedAssetCategoriesByGuid",
               routeTemplate: "fixed-asset-categories/{guid}",
                  defaults: new { controller = "FixedAssetCategories", action = "GetFixedAssetCategoriesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFixedAssetCategoriesV12",
              routeTemplate: "fixed-asset-categories",
              defaults: new { controller = "FixedAssetCategories", action = "GetFixedAssetCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFixedAssetCategories",
               routeTemplate: "fixed-asset-categories",
                  defaults: new { controller = "FixedAssetCategories", action = "GetFixedAssetCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFixedAssetCategoriesV12",
              routeTemplate: "fixed-asset-categories/{guid}",
              defaults: new { controller = "FixedAssetCategories", action = "PutFixedAssetCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostFixedAssetCategoriesV12",
               routeTemplate: "fixed-asset-categories",
               defaults: new { controller = "FixedAssetCategories", action = "PostFixedAssetCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFixedAssetCategories",
                routeTemplate: "fixed-asset-categories/{guid}",
                defaults: new { controller = "FixedAssetCategories", action = "DeleteFixedAssetCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Fixed Asset Categories

            #region  Fixed Asset Types

            routes.MapHttpRoute(
              name: "GetFixedAssetTypesByGuidV12",
              routeTemplate: "fixed-asset-types/{guid}",
              defaults: new { controller = "FixedAssetTypes", action = "GetFixedAssetTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFixedAssetTypesByGuid",
               routeTemplate: "fixed-asset-types/{guid}",
                  defaults: new { controller = "FixedAssetTypes", action = "GetFixedAssetTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFixedAssetTypesV12",
              routeTemplate: "fixed-asset-types",
              defaults: new { controller = "FixedAssetTypes", action = "GetFixedAssetTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFixedAssetTypes",
               routeTemplate: "fixed-asset-types",
                  defaults: new { controller = "FixedAssetTypes", action = "GetFixedAssetTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFixedAssetTypesV12",
              routeTemplate: "fixed-asset-types/{guid}",
              defaults: new { controller = "FixedAssetTypes", action = "PutFixedAssetTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostFixedAssetTypesV12",
               routeTemplate: "fixed-asset-types",
               defaults: new { controller = "FixedAssetTypes", action = "PostFixedAssetTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFixedAssetTypes",
                routeTemplate: "fixed-asset-types/{guid}",
                defaults: new { controller = "FixedAssetTypes", action = "DeleteFixedAssetTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Fixed Asset Types

            #region  Free On Board Types

            routes.MapHttpRoute(
              name: "GetFreeOnBoardTypesByGuidV10",
              routeTemplate: "free-on-board-types/{guid}",
              defaults: new { controller = "FreeOnBoardTypes", action = "GetFreeOnBoardTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFreeOnBoardTypesByGuid",
               routeTemplate: "free-on-board-types/{guid}",
                  defaults: new { controller = "FreeOnBoardTypes", action = "GetFreeOnBoardTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFreeOnBoardTypesV10",
              routeTemplate: "free-on-board-types",
              defaults: new { controller = "FreeOnBoardTypes", action = "GetFreeOnBoardTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetFreeOnBoardTypes",
               routeTemplate: "free-on-board-types",
                  defaults: new { controller = "FreeOnBoardTypes", action = "GetFreeOnBoardTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFreeOnBoardTypesV10",
              routeTemplate: "free-on-board-types/{guid}",
              defaults: new { controller = "FreeOnBoardTypes", action = "PutFreeOnBoardTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostFreeOnBoardTypesV10",
               routeTemplate: "free-on-board-types",
               defaults: new { controller = "FreeOnBoardTypes", action = "PostFreeOnBoardTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFreeOnBoardTypes",
                routeTemplate: "free-on-board-types/{guid}",
                defaults: new { controller = "FreeOnBoardTypes", action = "DeleteFreeOnBoardTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Free On Board Types

            #region  Floor Characteristics

            routes.MapHttpRoute(
              name: "GetFloorCharacteristicsByGuidV8",
              routeTemplate: "floor-characteristics/{guid}",
              defaults: new { controller = "FloorCharacteristics", action = "GetFloorCharacteristicsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetFloorCharacteristicsByGuid",
               routeTemplate: "floor-characteristics/{guid}",
                  defaults: new { controller = "FloorCharacteristics", action = "GetFloorCharacteristicsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetFloorCharacteristicsV8",
              routeTemplate: "floor-characteristics",
              defaults: new { controller = "FloorCharacteristics", action = "GetFloorCharacteristicsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "GetFloorCharacteristics",
               routeTemplate: "floor-characteristics",
                  defaults: new { controller = "FloorCharacteristics", action = "GetFloorCharacteristicsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutFloorCharacteristicsV8",
              routeTemplate: "floor-characteristics/{guid}",
              defaults: new { controller = "FloorCharacteristics", action = "PutFloorCharacteristicsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostFloorCharacteristicsV8",
               routeTemplate: "floor-characteristics",
               defaults: new { controller = "FloorCharacteristics", action = "PostFloorCharacteristicsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteFloorCharacteristics",
                routeTemplate: "floor-characteristics/{guid}",
                defaults: new { controller = "FloorCharacteristics", action = "DeleteFloorCharacteristicsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Floor Characteristics

            #region FrequencyCodes

            routes.MapHttpRoute(
                name: "GetFrequencyCodes",
                routeTemplate: "frequency-codes",
                defaults: new { controller = "FrequencyCodes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Gender Identities

            routes.MapHttpRoute(
              name: "GetGenderIdentitiesByGuidV1.0.0",
              routeTemplate: "gender-identities/{guid}",
              defaults: new { controller = "GenderIdentityTypes", action = "GetGenderIdentitiesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetGenderIdentitiesByGuid",
               routeTemplate: "gender-identities/{guid}",
                  defaults: new { controller = "GenderIdentityTypes", action = "GetGenderIdentitiesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "GetGenderIdentitiesV1.0.0",
              routeTemplate: "gender-identities",
              defaults: new { controller = "GenderIdentityTypes", action = "GetGenderIdentitiesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
               name: "DefaultGetGenderIdentities",
               routeTemplate: "gender-identities",
                  defaults: new { controller = "GenderIdentityTypes", action = "GetGenderIdentitiesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutGenderIdentitiesV1.0.0",
              routeTemplate: "gender-identities/{guid}",
              defaults: new { controller = "GenderIdentityTypes", action = "PutGenderIdentitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "PostGenderIdentitiesV1.0.0",
               routeTemplate: "gender-identities",
               defaults: new { controller = "GenderIdentityTypes", action = "PostGenderIdentitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteGenderIdentities",
                routeTemplate: "gender-identities/{guid}",
                defaults: new { controller = "GenderIdentityTypes", action = "DeleteGenderIdentitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "GenderIdentitiesUnsupported",
            routeTemplate: "gender-identities/{id}",
             defaults: new { controller = "GenderIdentityTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
           );

            #endregion Gender Identities

            #region GenderIdentityTypes

            routes.MapHttpRoute(
                name: "GetGenderIdentityTypes",
                routeTemplate: "gender-identity-types",
                defaults: new { controller = "GenderIdentityTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region  GeneralLedgerAccount

            routes.MapHttpRoute(
                name: "GetGeneralLedgerAccount",
                routeTemplate: "general-ledger-accounts/{generalLedgerAccountId}",
                defaults: new { controller = "GeneralLedgerAccounts", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
              name: "GetUserGeneralLedgerAccounts",
              routeTemplate: "general-ledger-accounts",
              defaults: new { controller = "GeneralLedgerAccounts", action = "GetUserGeneralLedgerAccountsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
          );

            routes.MapHttpRoute(
                name: "GetGlAccountValidation",
                routeTemplate: "general-ledger-account-validation/{generalLedgerAccountId}",
                defaults: new { controller = "GeneralLedgerAccounts", action = "GetGlAccountValidationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region GeneralLedgerActivityDetails

            routes.MapHttpRoute(
                name: "QueryGeneralLedgerActivityDetails",
                routeTemplate: "qapi/general-ledger-activity-details",
                defaults: new { controller = "GeneralLedgerActivityDetails", action = "QueryGeneralLedgerActivityDetailsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region GeneralLedgerObject Code

            routes.MapHttpRoute(
               name: "QueryGeneralLedgerObjectCodes",
               routeTemplate: "qapi/general-ledger-object-codes",
               defaults: new { controller = "GeneralLedgerObjectCodes", action = "QueryGeneralLedgerObjectCodesByPostAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );

            #endregion GeneralLedgerObjectCode

            #region GeneralLedgerTransactions

            routes.MapHttpRoute(
                name: "GetGeneralLedgerTransaction",
                routeTemplate: "general-ledger-transactions/{id}",
                defaults: new { controller = "GeneralLedgerTransactions", action = "GetByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetGeneralLedgerTransactionV8",
                routeTemplate: "general-ledger-transactions/{id}",
                defaults: new { controller = "GeneralLedgerTransactions", action = "GetById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "GetGeneralLedgerTransactionV12",
                routeTemplate: "general-ledger-transactions/{id}",
                defaults: new { controller = "GeneralLedgerTransactions", action = "GetById3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllGeneralLedgerTransaction",
                routeTemplate: "general-ledger-transactions",
                defaults: new { controller = "GeneralLedgerTransactions", action = "GetAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "GetAllGeneralLedgerTransactionV8",
               routeTemplate: "general-ledger-transactions",
               defaults: new { controller = "GeneralLedgerTransactions", action = "Get2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
           );

            routes.MapHttpRoute(
               name: "GetAllGeneralLedgerTransactionV12",
               routeTemplate: "general-ledger-transactions",
               defaults: new { controller = "GeneralLedgerTransactions", action = "Get3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
           );

            routes.MapHttpRoute(
                name: "GetGeneralLedgerTransactionDefault",
                routeTemplate: "general-ledger-transactions/{id}",
                   defaults: new { controller = "GeneralLedgerTransactions", action = "GetById3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAllGeneralLedgerTransactionDefault",
                routeTemplate: "general-ledger-transactions",
                   defaults: new { controller = "GeneralLedgerTransactions", action = "Get3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutGeneralLedgerTransaction",
                routeTemplate: "general-ledger-transactions/{id}",
                defaults: new { controller = "GeneralLedgerTransactions", action = "UpdateAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutGeneralLedgerTransactionV8",
                routeTemplate: "general-ledger-transactions/{id}",
                defaults: new { controller = "GeneralLedgerTransactions", action = "Update2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "PutGeneralLedgerTransactionV12",
               routeTemplate: "general-ledger-transactions/{id}",
               defaults: new { controller = "GeneralLedgerTransactions", action = "Update3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
           );

            routes.MapHttpRoute(
                name: "PostGeneralLedgerTransaction",
                routeTemplate: "general-ledger-transactions",
                defaults: new { controller = "GeneralLedgerTransactions", action = "CreateAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );
            routes.MapHttpRoute(
                name: "PostGeneralLedgerTransactionV8",
                routeTemplate: "general-ledger-transactions",
                defaults: new { controller = "GeneralLedgerTransactions", action = "Create2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PostGeneralLedgerTransactionV12",
                routeTemplate: "general-ledger-transactions",
                defaults: new { controller = "GeneralLedgerTransactions", action = "Create3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteGeneralLedgerTransaction",
                routeTemplate: "general-ledger-transactions/{id}",
                defaults: new { controller = "GeneralLedgerTransactions", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region GeographicAreas

            routes.MapHttpRoute(
                name: "GetGeographicAreaByIdV6",
                routeTemplate: "geographic-areas/{id}",
                defaults: new { controller = "GeographicAreas", action = "GetGeographicAreaByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetGeographicAreaById",
                routeTemplate: "geographic-areas/{id}",
                   defaults: new { controller = "GeographicAreas", action = "GetGeographicAreaByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetGeographicAreasV6",
               routeTemplate: "geographic-areas",
               defaults: new { controller = "GeographicAreas", action = "GetGeographicAreasAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "GetGeographicAreas",
               routeTemplate: "geographic-areas",
                  defaults: new { controller = "GeographicAreas", action = "GetGeographicAreasAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "PutGeographicAreaV6",
               routeTemplate: "geographic-areas/{id}",
               defaults: new { controller = "GeographicAreas", action = "PutGeographicAreaAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostGeographicAreaV6",
                routeTemplate: "geographic-areas",
                defaults: new { controller = "GeographicAreas", action = "PostGeographicAreaAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
           );

            routes.MapHttpRoute(
                name: "DeleteGeographicArea",
                routeTemplate: "geographic-areas/{id}",
                defaults: new { controller = "GeographicAreas", action = "DeleteGeographicAreaAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region GeographicAreaTypes

            routes.MapHttpRoute(
                name: "GetGeographicAreaTypeByIdV6",
                routeTemplate: "geographic-area-types/{id}",
                defaults: new { controller = "GeographicAreaTypes", action = "GetGeographicAreaTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetGeographicAreaTypeById",
                routeTemplate: "geographic-area-types/{id}",
                   defaults: new { controller = "GeographicAreaTypes", action = "GetGeographicAreaTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetGeographicAreaTypesV6",
               routeTemplate: "geographic-area-types",
               defaults: new { controller = "GeographicAreaTypes", action = "GetGeographicAreaTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "GetGeographicAreaTypes",
               routeTemplate: "geographic-area-types",
                  defaults: new { controller = "GeographicAreaTypes", action = "GetGeographicAreaTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "PutGeographicAreaTypeV6",
               routeTemplate: "geographic-area-types/{id}",
               defaults: new { controller = "GeographicAreaTypes", action = "PutGeographicAreaTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostGeographicAreaTypeV6",
                routeTemplate: "geographic-area-types",
                defaults: new { controller = "GeographicAreaTypes", action = "PostGeographicAreaTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
           );

            routes.MapHttpRoute(
                name: "DeleteGeographicAreaType",
                routeTemplate: "geographic-area-types/{id}",
                defaults: new { controller = "GeographicAreaTypes", action = "DeleteGeographicAreaTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region GownSizes
            routes.MapHttpRoute(
                name: "GetGownSizes",
                routeTemplate: "gown-sizes",
                defaults: new { controller = "GownSizes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region GradesDefinitionsMaximum

            routes.MapHttpRoute(
                name: "GetGradeDefinitionsMaximumV6",
                routeTemplate: "grade-definitions",
                defaults: new { controller = "Grades", action = "GetGradeDefinitionsMaximumAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetGradeDefinitionsMaximumByIdV6",
                routeTemplate: "grade-definitions/{id}",
                defaults: new { controller = "Grades", action = "GetGradeDefinitionsMaximumByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteGradeDefinitionsMaximum",
                routeTemplate: "grade-definitions/{id}",
                defaults: new { controller = "Grades", action = "DeleteGradeDefinitionsMaximumByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))

                }
            );

            routes.MapHttpRoute(
                name: "PostGradeDefinitionsMaximumV6",
                routeTemplate: "grade-definitions",
                defaults: new { controller = "Grades", action = "PostGradeDefinitionsMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutGradeDefinitionsMaximumV6",
                routeTemplate: "grade-definitions/{id}",
                defaults: new { controller = "Grades", action = "PutGradeDefinitionsMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
                }
            );

            #endregion

            #region Grades

            routes.MapHttpRoute(
                name: "GetHedmGradesV6",
                routeTemplate: "grade-definitions",
                defaults: new { controller = "Grades", action = "GetHedmAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmGrades",
                routeTemplate: "grade-definitions",
                   defaults: new { controller = "Grades", action = "GetHedmAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGrades",
                routeTemplate: "grades",
                defaults: new { controller = "Grades", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmGradeByIdV6",
                routeTemplate: "grade-definitions/{id}",
                defaults: new { controller = "Grades", action = "GetByIdHedmAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmGradeById",
                routeTemplate: "grade-definitions/{id}",
                   defaults: new { controller = "Grades", action = "GetByIdHedmAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostGradeV6",
                routeTemplate: "grade-definitions",
                defaults: new { controller = "Grades", action = "PostGradeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutGradeV6",
                routeTemplate: "grade-definitions/{id}",
                defaults: new { controller = "Grades", action = "PutGradeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteGrade",
                routeTemplate: "grade-definitions/{id}",
                defaults: new { controller = "Grades", action = "DeleteGradeByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
                name: "QueryPilotGrades",
                routeTemplate: "qapi/grades",
                defaults: new { controller = "Grades", action = "QueryPilotGradesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianJsonPilotMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "QueryPilotGradesV2",
                routeTemplate: "qapi/grades",
                defaults: new { controller = "Grades", action = "QueryPilotGrades2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false, string.Format(EllucianJsonPilotMediaTypeFormat, 2))
                }
            );
            #endregion

            #region GradeChangeReasons

            routes.MapHttpRoute(
                name: "GetGradeChangeReasonsV6",
                routeTemplate: "grade-change-reasons",
                defaults: new { controller = "GradeChangeReasons", action = "GetGradeChangeReasonsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetGradeChangeReasons",
                routeTemplate: "grade-change-reasons",
                   defaults: new { controller = "GradeChangeReasons", action = "GetGradeChangeReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGradeChangeReasonByIdV6",
                routeTemplate: "grade-change-reasons/{id}",
                defaults: new { controller = "GradeChangeReasons", action = "GetGradeChangeReasonByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetGradeChangeReasonById",
                routeTemplate: "grade-change-reasons/{id}",
                   defaults: new { controller = "GradeChangeReasons", action = "GetGradeChangeReasonByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostGradeChangeReasonV6",
                routeTemplate: "grade-change-reasons",
                defaults: new { controller = "GradeChangeReasons", action = "PostGradeChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutGradeChangeReasonV6",
                routeTemplate: "grade-change-reasons/{id}",
                defaults: new { controller = "GradeChangeReasons", action = "PutGradeChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteGradeChangeReason",
                routeTemplate: "grade-change-reasons/{id}",
                defaults: new { controller = "GradeChangeReasons", action = "DeleteGradeChangeReasonByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region GradeModes

            routes.MapHttpRoute(
                name: "GetGradeModesV6",
                routeTemplate: "grade-modes",
                defaults: new { controller = "GradeModes", action = "GetGradeModes2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetGradeModes",
                routeTemplate: "grade-modes",
                   defaults: new { controller = "GradeModes", action = "GetGradeModes2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetGradeModeByIdV6",
                routeTemplate: "grade-modes/{id}",
                defaults: new { controller = "GradeModes", action = "GetGradeModeById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetGradeModeById",
                routeTemplate: "grade-modes/{id}",
                   defaults: new { controller = "GradeModes", action = "GetGradeModeById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );


            routes.MapHttpRoute(
                name: "PostGradeModeV6",
                routeTemplate: "grade-modes",
                defaults: new { controller = "GradeModes", action = "PostGradeModeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );


            routes.MapHttpRoute(
                name: "PutGradeModeV6",
                routeTemplate: "grade-modes/{id}",
                defaults: new { controller = "GradeModes", action = "PutGradeModeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );


            routes.MapHttpRoute(
                name: "DeleteGradeMode",
                routeTemplate: "grade-modes/{id}",
                defaults: new { controller = "GradeModes", action = "DeleteGradeModeByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
            name: "GradeModesUnsupported",
            routeTemplate: "grade-modes/{id}",
            defaults: new { controller = "GradeModes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
           );
            #endregion

            #region GraduationApplication

            routes.MapHttpRoute(
                name: "CreateGraduationApplication",
                routeTemplate: "students/{studentId}/programs/{programCode}/graduation-application",
                defaults: new { controller = "GraduationApplications", action = "PostGraduationApplicationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateGraduationApplication",
                routeTemplate: "students/{studentId}/programs/{programCode}/graduation-application",
                defaults: new { controller = "GraduationApplications", action = "PutGraduationApplicationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGraduationApplication",
                routeTemplate: "students/{studentId}/programs/{programCode}/graduation-application",
                defaults: new { controller = "GraduationApplications", action = "GetGraduationApplicationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGraduationApplications",
                routeTemplate: "students/{studentId}/graduation-applications",
                defaults: new { controller = "GraduationApplications", action = "GetGraduationApplicationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetGraduationApplicationFee",
                routeTemplate: "graduation-application-fees/{studentId}/{programCode}",
                defaults: new { controller = "GraduationApplications", action = "GetGraduationApplicationFeeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryGraduationApplicationEligibility",
                routeTemplate: "qapi/graduation-application-eligibility",
                defaults: new { controller = "GraduationApplications", action = "QueryGraduationApplicationEligibilityAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region GradeSchemes

            routes.MapHttpRoute(
                name: "GetNonEthosGradeSchemeByIdAsync",
                routeTemplate: "grade-schemes/{id}",
                defaults: new { controller = "GradeSchemes", action = "GetNonEthosGradeSchemeByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetGradeSchemeByIdV6",
                routeTemplate: "grade-schemes/{id}",
                defaults: new { controller = "GradeSchemes", action = "GetGradeSchemeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetGradeSchemeById",
                routeTemplate: "grade-schemes/{id}",
                   defaults: new { controller = "GradeSchemes", action = "GetGradeSchemeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHeDMGradeSchemes2V6",
                routeTemplate: "grade-schemes",
                defaults: new { controller = "GradeSchemes", action = "GetGradeSchemes2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHeDMGradeSchemes2",
                routeTemplate: "grade-schemes",
                   defaults: new { controller = "GradeSchemes", action = "GetGradeSchemes2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutGradeSchemeV6",
               routeTemplate: "grade-schemes/{id}",
               defaults: new { controller = "GradeSchemes", action = "PutGradeSchemeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostGradeSchemeV6",
                routeTemplate: "grade-schemes",
                defaults: new { controller = "GradeSchemes", action = "PostGradeSchemeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteGradeScheme",
                routeTemplate: "grade-schemes/{id}",
                defaults: new { controller = "GradeSchemes", action = "DeleteGradeSchemeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region GradeSubschemes

            routes.MapHttpRoute(
                name: "GetGradeSubschemeByIdAsync",
                routeTemplate: "grade-subschemes/{id}",
                defaults: new { controller = "GradeSubschemes", action = "GetGradeSubschemeByIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Grants

            routes.MapHttpRoute(
              name: "GetGrantsByGuidV11",
              routeTemplate: "grants/{guid}",
              defaults: new { controller = "Grants", action = "GetGrantsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetGrantsByGuid",
               routeTemplate: "grants/{guid}",
                  defaults: new { controller = "Grants", action = "GetGrantsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetGrantsV11",
              routeTemplate: "grants",
              defaults: new { controller = "Grants", action = "GetGrantsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetGrants",
               routeTemplate: "grants",
                  defaults: new { controller = "Grants", action = "GetGrantsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutGrantsV11",
              routeTemplate: "grants/{guid}",
              defaults: new { controller = "Grants", action = "PutGrantsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostGrantsV11",
               routeTemplate: "grants",
               defaults: new { controller = "Grants", action = "PostGrantsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteGrants",
                routeTemplate: "grants/{guid}",
                defaults: new { controller = "Grants", action = "DeleteGrantsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Grants

            #region HealthCheck

            routes.MapHttpRoute(
                name: "GetHealthCheck",
                routeTemplate: "healthcheck",
                   defaults: new { controller = "HealthCheck", action = "GetHealthCheckAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                }
            );

            #endregion

            #region HealthConditons

            routes.MapHttpRoute(
                name: "GetHealthConditions",
                routeTemplate: "health-conditions",
                defaults: new { controller = "HealthConditions", action = "GetHealthConditions" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region HoldRequestTypes

            routes.MapHttpRoute(
                name: "GetHoldRequestTypes",
                routeTemplate: "hold-request-types",
                defaults: new { controller = "HoldRequestTypes", action = "GetHoldRequestTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  HousingAssignments

            routes.MapHttpRoute(
                name: "GetHousingAssignment",
                routeTemplate: "housing-assignments/{id}",
                defaults: new { controller = "HousingAssignments", action = "GetHousingAssignmentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)

                }
            );

            routes.MapHttpRoute(
             name: "GetHousingAssignmentByGuidV1600",
             routeTemplate: "housing-assignments/{guid}",
             defaults: new { controller = "HousingAssignment", action = "GetHousingAssignmentByGuid2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
           );

            routes.MapHttpRoute(
             name: "GetHousingAssignmentByGuidV1010",
             routeTemplate: "housing-assignments/{guid}",
             defaults: new { controller = "HousingAssignment", action = "GetHousingAssignmentByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
             }
           );

            routes.MapHttpRoute(
              name: "GetHousingAssignmentByGuidV10",
              routeTemplate: "housing-assignments/{guid}",
              defaults: new { controller = "HousingAssignment", action = "GetHousingAssignmentByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetHousingAssignmentByGuid",
               routeTemplate: "housing-assignments/{guid}",
                  defaults: new { controller = "HousingAssignment", action = "GetHousingAssignmentByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
             name: "GetHousingAssignmentV1600",
             routeTemplate: "housing-assignments",
             defaults: new { controller = "HousingAssignment", action = "GetHousingAssignments2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
           );

            routes.MapHttpRoute(
             name: "GetHousingAssignmentV1010",
             routeTemplate: "housing-assignments",
             defaults: new { controller = "HousingAssignment", action = "GetHousingAssignmentsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
             }
           );

            routes.MapHttpRoute(
              name: "GetHousingAssignmentV10",
              routeTemplate: "housing-assignments",
              defaults: new { controller = "HousingAssignment", action = "GetHousingAssignmentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "DefaultGetHousingAssignments",
               routeTemplate: "housing-assignments",
                  defaults: new { controller = "HousingAssignment", action = "GetHousingAssignments2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
            name: "PutHousingAssignmentV1600",
            routeTemplate: "housing-assignments/{guid}",
            defaults: new { controller = "HousingAssignment", action = "PutHousingAssignment2Async", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            }
           );

            routes.MapHttpRoute(
            name: "PutHousingAssignmentV1010",
            routeTemplate: "housing-assignments/{guid}",
            defaults: new { controller = "HousingAssignment", action = "PutHousingAssignmentAsync", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
            }
           );

            routes.MapHttpRoute(
              name: "PutHousingAssignmentV10",
              routeTemplate: "housing-assignments/{guid}",
              defaults: new { controller = "HousingAssignment", action = "PutHousingAssignmentAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "PostHousingAssignmentV1600",
               routeTemplate: "housing-assignments",
               defaults: new { controller = "HousingAssignment", action = "PostHousingAssignment2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
           );

            routes.MapHttpRoute(
               name: "PostHousingAssignmentV1010",
               routeTemplate: "housing-assignments",
               defaults: new { controller = "HousingAssignment", action = "PostHousingAssignmentAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
              }
           );

            routes.MapHttpRoute(
               name: "PostHousingAssignmentV10",
               routeTemplate: "housing-assignments",
               defaults: new { controller = "HousingAssignment", action = "PostHousingAssignmentAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteHousingAssignment",
                routeTemplate: "housing-assignments/{guid}",
                defaults: new { controller = "HousingAssignment", action = "DeleteHousingAssignmentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
               name: "CreateHousingAssignment",
               routeTemplate: "housing-assignments",
               defaults: new { controller = "HousingAssignments", action = "PostHousingAssignmentAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
           );

            routes.MapHttpRoute(
                name: "UpdateHousingAssignment",
                routeTemplate: "housing-assignments",
                defaults: new { controller = "HousingAssignments", action = "PutHousingAssignmentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
            name: "HousingAssignmentUnsupported",
            routeTemplate: "housing-assignments/{guid}",
             defaults: new { controller = "HousingAssignments", action = "NotAcceptableStatusException", guid = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion HousingAssignments

            #region  Housing Requests

            routes.MapHttpRoute(
              name: "GetHousingRequestsByGuidV10",
              routeTemplate: "housing-requests/{guid}",
              defaults: new { controller = "HousingRequests", action = "GetHousingRequestByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetHousingRequestsByGuid",
               routeTemplate: "housing-requests/{guid}",
                  defaults: new { controller = "HousingRequests", action = "GetHousingRequestByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetHousingRequestsV10",
              routeTemplate: "housing-requests",
              defaults: new { controller = "HousingRequests", action = "GetHousingRequestsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetHousingRequests",
               routeTemplate: "housing-requests",
                  defaults: new { controller = "HousingRequests", action = "GetHousingRequestsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutHousingRequestsV10",
              routeTemplate: "housing-requests/{guid}",
              defaults: new { controller = "HousingRequests", action = "PutHousingRequestAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostHousingRequestsV10",
               routeTemplate: "housing-requests",
               defaults: new { controller = "HousingRequests", action = "PostHousingRequestAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteHousingRequests",
                routeTemplate: "housing-requests/{guid}",
                defaults: new { controller = "HousingRequests", action = "DeleteHousingRequestsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            #endregion Housing Requests

            #region  HousingResidentTypes

            routes.MapHttpRoute(
              name: "GetHousingResidentTypesByGuidV8",
              routeTemplate: "housing-resident-types/{guid}",
              defaults: new { controller = "HousingResidentTypes", action = "GetHousingResidentTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetHousingResidentTypesByGuid",
               routeTemplate: "housing-resident-types/{guid}",
                  defaults: new { controller = "HousingResidentTypes", action = "GetHousingResidentTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetHousingResidentTypesV8",
              routeTemplate: "housing-resident-types",
              defaults: new { controller = "HousingResidentTypes", action = "GetHousingResidentTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "GetHousingResidentTypes",
               routeTemplate: "housing-resident-types",
                  defaults: new { controller = "HousingResidentTypes", action = "GetHousingResidentTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutHousingResidentTypesV8",
              routeTemplate: "housing-resident-types/{guid}",
              defaults: new { controller = "HousingResidentTypes", action = "PutHousingResidentTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostHousingResidentTypesV8",
               routeTemplate: "housing-resident-types",
               defaults: new { controller = "HousingResidentTypes", action = "PostHousingResidentTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteHousingResidentTypes",
                routeTemplate: "housing-resident-types/{guid}",
                defaults: new { controller = "HousingResidentTypes", action = "DeleteHousingResidentTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion External Employment Statuses

            #region HumanResourceDemographics

            routes.MapHttpRoute(
                name: "GetHumanResourceDemographics",
                routeTemplate: "human-resources",
                defaults: new { controller = "HumanResources", action = "GetHumanResourceDemographicsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianHumanResourceDemographicsTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "GetHumanResourceDemographics2Async",
                routeTemplate: "human-resources",
                defaults: new { controller = "HumanResources", action = "GetHumanResourceDemographics2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true, string.Format(EllucianHumanResourceDemographicsTypeFormat, 2))
                }
            );

            routes.MapHttpRoute(
                name: "GetSpecificHumanResourceDemographics",
                routeTemplate: "human-resources/{id}",
                defaults: new { controller = "HumanResources", action = "GetSpecificHumanResourceDemographicsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianHumanResourceDemographicsTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "QueryHumanResourceDemographics",
                routeTemplate: "qapi/human-resources",
                defaults: new { controller = "HumanResources", action = "QueryHumanResourceDemographicsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianHumanResourceDemographicsTypeFormat, 1)),
                }
            );

            #endregion

            #region IdentityDocumentTypes

            routes.MapHttpRoute(
                name: "GetIdentityDocumentTypeByIdV6",
                routeTemplate: "identity-document-types/{id}",
                defaults: new { controller = "IdentityDocumentTypes", action = "GetIdentityDocumentTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetIdentityDocumentTypeById",
                routeTemplate: "identity-document-types/{id}",
                   defaults: new { controller = "IdentityDocumentTypes", action = "GetIdentityDocumentTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetIdentityDocumentTypesV6",
                routeTemplate: "identity-document-types",
                defaults: new { controller = "IdentityDocumentTypes", action = "GetIdentityDocumentTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetIdentityDocumentTypes",
                routeTemplate: "identity-document-types",
                   defaults: new { controller = "IdentityDocumentTypes", action = "GetIdentityDocumentTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutIdentityDocumentTypesV6",
               routeTemplate: "identity-document-types/{id}",
               defaults: new { controller = "IdentityDocumentTypes", action = "PutIdentityDocumentTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "PostIdentityDocumentTypesV6",
                routeTemplate: "identity-document-types",
                defaults: new { controller = "IdentityDocumentTypes", action = "PostIdentityDocumentTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteIdentityDocumentTypes",
                routeTemplate: "identity-document-types/{id}",
                defaults: new { controller = "IdentityDocumentTypes", action = "DeleteIdentityDocumentTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region ImportantNumbers

            routes.MapHttpRoute(
                name: "GetImportantNumbers",
                routeTemplate: "important-numbers",
                defaults: new { controller = "ImportantNumbers", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetImportantNumberCategories",
                routeTemplate: "important-number-categories",
                defaults: new { controller = "ImportantNumbers", action = "GetImportantNumberCategories" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Instructors

            routes.MapHttpRoute(
              name: "GetInstructorsByGuidV8",
              routeTemplate: "instructors/{guid}",
              defaults: new { controller = "Instructors", action = "GetInstructorsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
             name: "GetInstructorsByGuidV9",
             routeTemplate: "instructors/{guid}",
             defaults: new { controller = "Instructors", action = "GetInstructorsByGuid2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
         );

            routes.MapHttpRoute(
               name: "DefaultGetInstructorsByGuid",
               routeTemplate: "instructors/{guid}",
                  defaults: new { controller = "Instructors", action = "GetInstructorsByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetInstructorsV8",
              routeTemplate: "instructors",
              defaults: new { controller = "Instructors", action = "GetInstructorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
             name: "GetInstructorsV9",
             routeTemplate: "instructors",
             defaults: new { controller = "Instructors", action = "GetInstructors2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
         );

            routes.MapHttpRoute(
               name: "GetInstructors",
               routeTemplate: "instructors",
                  defaults: new { controller = "Instructors", action = "GetInstructors2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutInstructorsV8",
              routeTemplate: "instructors/{guid}",
              defaults: new { controller = "Instructors", action = "PutInstructorsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
             name: "PutInstructorsV9",
             routeTemplate: "instructors/{guid}",
             defaults: new { controller = "Instructors", action = "PutInstructorsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
         );


            routes.MapHttpRoute(
               name: "PostInstructorsV8",
               routeTemplate: "instructors",
               defaults: new { controller = "Instructors", action = "PostInstructorsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
             name: "PostInstructorsV9",
             routeTemplate: "instructors",
             defaults: new { controller = "Instructors", action = "PostInstructorsAsync" },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
            }
         );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstructors",
                routeTemplate: "instructors/{guid}",
                defaults: new { controller = "Instructors", action = "DeleteInstructorsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Instructors

            #region  Instructor Categories

            routes.MapHttpRoute(
              name: "GetInstructorCategoriesByGuidV8",
              routeTemplate: "instructor-categories/{guid}",
              defaults: new { controller = "InstructorCategories", action = "GetInstructorCategoriesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstructorCategoriesByGuidV9",
              routeTemplate: "instructor-categories/{guid}",
              defaults: new { controller = "InstructorCategories", action = "GetInstructorCategoriesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructorCategoriesByGuid",
               routeTemplate: "instructor-categories/{guid}",
                  defaults: new { controller = "InstructorCategories", action = "GetInstructorCategoriesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetInstructorCategoriesV8",
              routeTemplate: "instructor-categories",
              defaults: new { controller = "InstructorCategories", action = "GetInstructorCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstructorCategoriesV9",
              routeTemplate: "instructor-categories",
              defaults: new { controller = "InstructorCategories", action = "GetInstructorCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructorCategories",
               routeTemplate: "instructor-categories",
                  defaults: new { controller = "InstructorCategories", action = "GetInstructorCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutInstructorCategoriesV8",
              routeTemplate: "instructor-categories/{guid}",
              defaults: new { controller = "InstructorCategories", action = "PutInstructorCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "PutInstructorCategoriesV9",
              routeTemplate: "instructor-categories/{guid}",
              defaults: new { controller = "InstructorCategories", action = "PutInstructorCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostInstructorCategoriesV8",
               routeTemplate: "instructor-categories",
               defaults: new { controller = "InstructorCategories", action = "PostInstructorCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
               name: "PostInstructorCategoriesV9",
               routeTemplate: "instructor-categories",
               defaults: new { controller = "InstructorCategories", action = "PostInstructorCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstructorCategories",
                routeTemplate: "instructor-categories/{guid}",
                defaults: new { controller = "InstructorCategories", action = "DeleteInstructorCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Instructor Categories

            #region  Instructor Staff Types

            routes.MapHttpRoute(
              name: "GetInstructorStaffTypesByGuidV8",
              routeTemplate: "instructor-staff-types/{guid}",
              defaults: new { controller = "InstructorStaffTypes", action = "GetInstructorStaffTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstructorStaffTypesByGuidV9",
              routeTemplate: "instructor-staff-types/{guid}",
              defaults: new { controller = "InstructorStaffTypes", action = "GetInstructorStaffTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructorStaffTypesByGuid",
               routeTemplate: "instructor-staff-types/{guid}",
                  defaults: new { controller = "InstructorStaffTypes", action = "GetInstructorStaffTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetInstructorStaffTypesV8",
              routeTemplate: "instructor-staff-types",
              defaults: new { controller = "InstructorStaffTypes", action = "GetInstructorStaffTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstructorStaffTypesV9",
              routeTemplate: "instructor-staff-types",
              defaults: new { controller = "InstructorStaffTypes", action = "GetInstructorStaffTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetInstructorStaffTypes",
               routeTemplate: "instructor-staff-types",
                  defaults: new { controller = "InstructorStaffTypes", action = "GetInstructorStaffTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutInstructorStaffTypesV8",
              routeTemplate: "instructor-staff-types/{guid}",
              defaults: new { controller = "InstructorStaffTypes", action = "PutInstructorStaffTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "PutInstructorStaffTypesV9",
              routeTemplate: "instructor-staff-types/{guid}",
              defaults: new { controller = "InstructorStaffTypes", action = "PutInstructorStaffTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostInstructorStaffTypesV8",
               routeTemplate: "instructor-staff-types",
               defaults: new { controller = "InstructorStaffTypes", action = "PostInstructorStaffTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
               name: "PostInstructorStaffTypesV9",
               routeTemplate: "instructor-staff-types",
               defaults: new { controller = "InstructorStaffTypes", action = "PostInstructorStaffTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstructorStaffTypes",
                routeTemplate: "instructor-staff-types/{guid}",
                defaults: new { controller = "InstructorStaffTypes", action = "DeleteInstructorStaffTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Instructor Staff Types

            #region  InstitutionEmployers

            routes.MapHttpRoute(
             name: "GetInstitutionEmployersByGuidV1110",
             routeTemplate: "institution-employers/{guid}",
             defaults: new { controller = "InstitutionEmployers", action = "GetInstitutionEmployersByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
             }
           );

            routes.MapHttpRoute(
              name: "GetInstitutionEmployersByGuidV11",
              routeTemplate: "institution-employers/{guid}",
              defaults: new { controller = "InstitutionEmployers", action = "GetInstitutionEmployersByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionEmployersByGuid",
               routeTemplate: "institution-employers/{guid}",
                  defaults: new { controller = "InstitutionEmployers", action = "GetInstitutionEmployersByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true)
               }
            );

            routes.MapHttpRoute(
             name: "GetInstitutionEmployersV1110",
             routeTemplate: "institution-employers",
             defaults: new { controller = "InstitutionEmployers", action = "GetInstitutionEmployersAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
             }
           );

            routes.MapHttpRoute(
              name: "GetInstitutionEmployersV11",
              routeTemplate: "institution-employers",
              defaults: new { controller = "InstitutionEmployers", action = "GetInstitutionEmployersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionEmployers",
               routeTemplate: "institution-employers",
                  defaults: new { controller = "InstitutionEmployers", action = "GetInstitutionEmployersAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true)
               }
            );

            routes.MapHttpRoute(
              name: "PutInstitutionEmployersV1110",
              routeTemplate: "institution-employers/{guid}",
              defaults: new { controller = "InstitutionEmployers", action = "PutInstitutionEmployersAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
              }
            );


            routes.MapHttpRoute(
              name: "PutInstitutionEmployersV11",
              routeTemplate: "institution-employers/{guid}",
              defaults: new { controller = "InstitutionEmployers", action = "PutInstitutionEmployersAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "PostInstitutionEmployersV1110",
              routeTemplate: "institution-employers",
              defaults: new { controller = "InstitutionEmployers", action = "PostInstitutionEmployersAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
             }
           );

            routes.MapHttpRoute(
               name: "PostInstitutionEmployersV11",
               routeTemplate: "institution-employers",
               defaults: new { controller = "InstitutionEmployers", action = "PostInstitutionEmployersAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstitutionEmployers",
                routeTemplate: "institution-employers/{guid}",
                defaults: new { controller = "InstitutionEmployers", action = "DeleteInstitutionEmployersAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            routes.MapHttpRoute(
             name: "InstitutionEmployersUnsupported",
             routeTemplate: "institution-employers/{id}",
              defaults: new { controller = "InstitutionEmployers", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
           );

            #endregion Institution Employers

            #region  InstitutionJobs

            routes.MapHttpRoute(
              name: "GetInstitutionJobsByGuidV8",
              routeTemplate: "institution-jobs/{guid}",
              defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionJobsByGuidV11",
              routeTemplate: "institution-jobs/{guid}",
              defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobsByGuid2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionJobsByGuidV12",
              routeTemplate: "institution-jobs/{guid}",
              defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobsByGuid3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionJobsByGuid",
               routeTemplate: "institution-jobs/{guid}",
                  defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobsByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionJobsV8",
              routeTemplate: "institution-jobs",
              defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionJobsV11",
              routeTemplate: "institution-jobs",
              defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobs2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionJobsV12",
              routeTemplate: "institution-jobs",
              defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobs3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionJobs",
               routeTemplate: "institution-jobs",
                  defaults: new { controller = "InstitutionJobs", action = "GetInstitutionJobs3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
            );

            routes.MapHttpRoute(
              name: "PutInstitutionJobsV8",
              routeTemplate: "institution-jobs/{guid}",
              defaults: new { controller = "InstitutionJobs", action = "PutInstitutionJobsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
               name: "PostInstitutionJobsV8",
               routeTemplate: "institution-jobs",
               defaults: new { controller = "InstitutionJobs", action = "PostInstitutionJobsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "PutInstitutionJobsV11",
              routeTemplate: "institution-jobs/{guid}",
              defaults: new { controller = "InstitutionJobs", action = "PutInstitutionJobs2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "PostInstitutionJobsV11",
               routeTemplate: "institution-jobs",
               defaults: new { controller = "InstitutionJobs", action = "PostInstitutionJobs2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "PutInstitutionJobsV12",
              routeTemplate: "institution-jobs/{guid}",
              defaults: new { controller = "InstitutionJobs", action = "PutInstitutionJobs3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
               name: "PostInstitutionJobsV12",
               routeTemplate: "institution-jobs",
               defaults: new { controller = "InstitutionJobs", action = "PostInstitutionJobs3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstitutionJobs",
                routeTemplate: "institution-jobs/{guid}",
                defaults: new { controller = "InstitutionJobs", action = "DeleteInstitutionJobsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            #endregion Institution Jobs

            #region  InstitutionJobSupervisors

            routes.MapHttpRoute(
              name: "GetInstitutionJobSupervisorsByGuidV11",
              routeTemplate: "institution-job-supervisors/{guid}",
              defaults: new { controller = "InstitutionJobSupervisors", action = "GetInstitutionJobSupervisorsByGuid2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionJobSupervisorsByGuidV10",
              routeTemplate: "institution-job-supervisors/{guid}",
              defaults: new { controller = "InstitutionJobSupervisors", action = "GetInstitutionJobSupervisorsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionJobSupervisorsByGuid",
               routeTemplate: "institution-job-supervisors/{guid}",
                  defaults: new { controller = "InstitutionJobSupervisors", action = "GetInstitutionJobSupervisorsByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );

            routes.MapHttpRoute(
             name: "GetInstitutionJobSupervisorsV11",
             routeTemplate: "institution-job-supervisors",
             defaults: new { controller = "InstitutionJobSupervisors", action = "GetInstitutionJobSupervisors2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
           );

            routes.MapHttpRoute(
             name: "GetInstitutionJobSupervisorsV10",
             routeTemplate: "institution-job-supervisors",
             defaults: new { controller = "InstitutionJobSupervisors", action = "GetInstitutionJobSupervisorsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
             }
           );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionJobSupervisors",
               routeTemplate: "institution-job-supervisors",
                  defaults: new { controller = "InstitutionJobSupervisors", action = "GetInstitutionJobSupervisors2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );

            routes.MapHttpRoute(
             name: "PutInstitutionJobSupervisorsV11",
             routeTemplate: "institution-job-supervisors/{guid}",
             defaults: new { controller = "InstitutionJobSupervisors", action = "PutInstitutionJobSupervisorsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
           );

            routes.MapHttpRoute(
             name: "PutInstitutionJobSupervisorsV10",
             routeTemplate: "institution-job-supervisors/{guid}",
             defaults: new { controller = "InstitutionJobSupervisors", action = "PutInstitutionJobSupervisorsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
             }
           );

            routes.MapHttpRoute(
               name: "PostInstitutionJobSupervisorsV11",
               routeTemplate: "institution-job-supervisors",
               defaults: new { controller = "InstitutionJobSupervisors", action = "PostInstitutionJobSupervisorsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "PostInstitutionJobSupervisorsV10",
               routeTemplate: "institution-job-supervisors",
               defaults: new { controller = "InstitutionJobSupervisors", action = "PostInstitutionJobSupervisorsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstitutionJobSupervisors",
                routeTemplate: "institution-job-supervisors/{guid}",
                defaults: new { controller = "InstitutionJobSupervisors", action = "DeleteInstitutionJobSupervisorsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            #endregion Institution Job Supervisors

            #region InstitutionPositions

            routes.MapHttpRoute(
               name: "GetInstitutionPositionsV7",
               routeTemplate: "institution-positions",
               defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositionsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
              name: "GetInstitutionPositionsV11",
              routeTemplate: "institution-positions",
              defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositions2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstitutionPositionsV12",
              routeTemplate: "institution-positions",
              defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositions3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstitutionPositions",
              routeTemplate: "institution-positions",
                 defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositions3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, true)
              }
          );

            routes.MapHttpRoute(
                name: "GetInstitutionPositionsByGuidV7",
                routeTemplate: "institution-positions/{guid}",
                defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositionsByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
              name: "GetInstitutionPositionsByGuidV11",
              routeTemplate: "institution-positions/{guid}",
              defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositionsByGuid2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetInstitutionPositionsByGuidV12",
              routeTemplate: "institution-positions/{guid}",
              defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositionsByGuid3Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstitutionPositionsByGuid",
               routeTemplate: "institution-positions/{guid}",
                  defaults: new { controller = "InstitutionPositions", action = "GetInstitutionPositionsByGuid3Async", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
               name: "PostInstitutionPositionsV12",
               routeTemplate: "institution-positions",
               defaults: new { controller = "InstitutionPositions", action = "CreateInstitutionPositionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
               name: "PostInstitutionPositionsV11",
               routeTemplate: "institution-positions",
               defaults: new { controller = "InstitutionPositions", action = "CreateInstitutionPositionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
               name: "PostInstitutionPositionsV7",
               routeTemplate: "institution-positions",
               defaults: new { controller = "InstitutionPositions", action = "CreateInstitutionPositionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
              name: "PutInstitutionPositionsV12",
              routeTemplate: "institution-positions/{guid}",
              defaults: new { controller = "InstitutionPositions", action = "UpdateInstitutionPositionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "PutInstitutionPositionsV11",
              routeTemplate: "institution-positions/{guid}",
              defaults: new { controller = "InstitutionPositions", action = "UpdateInstitutionPositionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
                name: "PutInstitutionPositionsV7",
                routeTemplate: "institution-positions/{guid}",
                defaults: new { controller = "InstitutionPositions", action = "UpdateInstitutionPositionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
              name: "DefaultDeleteInstitutionPositions",
              routeTemplate: "institution-positions/{guid}",
              defaults: new { controller = "InstitutionPositions", action = "DefaultDeleteInstitutionPositions" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("DELETE"),
              }
          );

            #endregion

            #region Institutions

            routes.MapHttpRoute(
                name: "GetInstitutions",
                routeTemplate: "institutions",
                defaults: new { controller = "Institutions", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region InstitutionTypes

            routes.MapHttpRoute(
                name: "GetInstitutionTypes",
                routeTemplate: "institution-types",
                defaults: new { controller = "InstitutionTypes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  InstructionalDeliveryMethods

            routes.MapHttpRoute(
              name: "GetInstructionalDeliveryMethodsByGuidV11",
              routeTemplate: "instructional-delivery-methods/{guid}",
              defaults: new { controller = "InstructionalDeliveryMethods", action = "GetInstructionalDeliveryMethodByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructionalDeliveryMethodsByGuid",
               routeTemplate: "instructional-delivery-methods/{guid}",
                  defaults: new { controller = "InstructionalDeliveryMethods", action = "GetInstructionalDeliveryMethodByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetInstructionalDeliveryMethodsV11",
              routeTemplate: "instructional-delivery-methods",
              defaults: new { controller = "InstructionalDeliveryMethods", action = "GetInstructionalDeliveryMethodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructionalDeliveryMethods",
               routeTemplate: "instructional-delivery-methods",
                  defaults: new { controller = "InstructionalDeliveryMethods", action = "GetInstructionalDeliveryMethodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutInstructionalDeliveryMethodsV11",
              routeTemplate: "instructional-delivery-methods/{guid}",
              defaults: new { controller = "InstructionalDeliveryMethods", action = "PutInstructionalDeliveryMethodAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
              }
          );


            routes.MapHttpRoute(
               name: "PostInstructionalDeliveryMethodsV11",
               routeTemplate: "instructional-delivery-methods",
               defaults: new { controller = "InstructionalDeliveryMethods", action = "PostInstructionalDeliveryMethodAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstructionalDeliveryMethods",
                routeTemplate: "instructional-delivery-methods/{guid}",
                defaults: new { controller = "InstructionalDeliveryMethods", action = "DeleteInstructionalDeliveryMethodAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion InstructionalDeliveryMethods

            #region instructionalEvents

            routes.MapHttpRoute(
                name: "GetHedmInstructionalEventsV6",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "GetHedmAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmInstructionalEventsV8",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "GetInstructionalEvent3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmInstructionalEventsV11",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "GetInstructionalEvent4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmInstructionalEvents",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "GetInstructionalEvent4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmInstructionalEventsFiltersV6",
               routeTemplate: "instructional-events",
               defaults: new { controller = "InstructionalEvents", action = "GetHedmInstructionalEventsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmInstructionalEventsFiltersV8",
               routeTemplate: "instructional-events",
               defaults: new { controller = "InstructionalEvents", action = "GetInstructionalEvents3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmInstructionalEventsFiltersV11",
               routeTemplate: "instructional-events",
               defaults: new { controller = "InstructionalEvents", action = "GetInstructionalEvents4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );

            routes.MapHttpRoute(
              name: "DefaultGetHedmInstructionalEventsFiltersV11",
              routeTemplate: "instructional-events",
              defaults: new { controller = "InstructionalEvents", action = "GetInstructionalEvents4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, true)
              }
            );

            routes.MapHttpRoute(
                name: "PostHedmInstructionalEventsV6",
                routeTemplate: "instructional-events",
                defaults: new { controller = "InstructionalEvents", action = "PostHedmAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmInstructionalEventsV8",
                routeTemplate: "instructional-events",
                defaults: new { controller = "InstructionalEvents", action = "PostInstructionalEvent3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmInstructionalEventsV11",
                routeTemplate: "instructional-events",
                defaults: new { controller = "InstructionalEvents", action = "PostInstructionalEvent4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmInstructionalEventsV6",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "PutHedmAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmInstructionalEventsV8",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "PutInstructionalEvent3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmInstructionalEventsV11",
                routeTemplate: "instructional-events/{id}",
                defaults: new { controller = "InstructionalEvents", action = "PutInstructionalEvent4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
               name: "DeleteHedmInstructionalEvents",
               routeTemplate: "instructional-events/{id}",
               defaults: new { controller = "InstructionalEvents", action = "DeleteHedmAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
            );

            #endregion 

            #region InstructionalMethods

            routes.MapHttpRoute(
              name: "GetInstructionalMethodByGuidV6",
              routeTemplate: "instructional-methods/{id}",
              defaults: new { controller = "InstructionalMethods", action = "GetInstructionalMethodById2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructionalMethodByGuid",
               routeTemplate: "instructional-methods/{id}",
               defaults: new { controller = "InstructionalMethods", action = "GetInstructionalMethodById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true),
               }
           );

            routes.MapHttpRoute(
                name: "GetCdmInstructionalMethodsV6",
                routeTemplate: "instructional-methods",
                defaults: new { controller = "InstructionalMethods", action = "GetInstructionalMethods2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
              name: "GetInstructionalMethods",
              routeTemplate: "instructional-methods",
              defaults: new { controller = "InstructionalMethods", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetCdmInstructionalMethods",
                routeTemplate: "instructional-methods",
                defaults: new { controller = "InstructionalMethods", action = "GetInstructionalMethods2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutInstructionalMethodsV6",
                routeTemplate: "instructional-methods/{id}",
                defaults: new { controller = "InstructionalMethods", action = "PutInstructionalMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostInstructionalMethodsV6",
                routeTemplate: "instructional-methods",
                defaults: new { controller = "InstructionalMethods", action = "PostInstructionalMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteInstructionalMethods",
                routeTemplate: "instructional-methods/{id}",
                defaults: new { controller = "InstructionalMethods", action = "DeleteInstructionalMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region InstructionalPlatforms

            routes.MapHttpRoute(
               name: "GetInstructionalPlatformsV6",
               routeTemplate: "instructional-platforms",
               defaults: new { controller = "InstructionalPlatforms", action = "GetInstructionalPlatformsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetInstructionalPlatforms",
               routeTemplate: "instructional-platforms",
                   defaults: new { controller = "InstructionalPlatforms", action = "GetInstructionalPlatformsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
                name: "GetInstructionalPlatformsByIdV6",
                routeTemplate: "instructional-platforms/{id}",
                defaults: new { controller = "InstructionalPlatforms", action = "GetInstructionalPlatformsByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetInstructionalPlatformsById",
                routeTemplate: "instructional-platforms/{id}",
                   defaults: new { controller = "InstructionalPlatforms", action = "GetInstructionalPlatformsByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PostInstructionalPlatformsV6",
               routeTemplate: "instructional-platforms",
               defaults: new { controller = "InstructionalPlatforms", action = "PostInstructionalPlatformsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PutInstructionalPlatformsV6",
               routeTemplate: "instructional-platforms/{id}",
               defaults: new { controller = "InstructionalPlatforms", action = "PutInstructionalPlatformsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstructionalPlatforms",
                routeTemplate: "instructional-platforms/{id}",
                defaults: new { controller = "InstructionalPlatforms", action = "DeleteInstructionalPlatformsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region  Instructor Tenure Types

            routes.MapHttpRoute(
              name: "GetInstructorTenureTypesByGuidV9",
              routeTemplate: "instructor-tenure-types/{guid}",
              defaults: new { controller = "InstructorTenureTypes", action = "GetInstructorTenureTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetInstructorTenureTypesByGuid",
               routeTemplate: "instructor-tenure-types/{guid}",
                  defaults: new { controller = "InstructorTenureTypes", action = "GetInstructorTenureTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetInstructorTenureTypesV9",
              routeTemplate: "instructor-tenure-types",
              defaults: new { controller = "InstructorTenureTypes", action = "GetInstructorTenureTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetInstructorTenureTypes",
               routeTemplate: "instructor-tenure-types",
                  defaults: new { controller = "InstructorTenureTypes", action = "GetInstructorTenureTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutInstructorTenureTypesV9",
              routeTemplate: "instructor-tenure-types/{guid}",
              defaults: new { controller = "InstructorTenureTypes", action = "PutInstructorTenureTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostInstructorTenureTypesV9",
               routeTemplate: "instructor-tenure-types",
               defaults: new { controller = "InstructorTenureTypes", action = "PostInstructorTenureTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteInstructorTenureTypes",
                routeTemplate: "instructor-tenure-types/{guid}",
                defaults: new { controller = "InstructorTenureTypes", action = "DeleteInstructorTenureTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Instructor Tenure Types

            #region Interests

            routes.MapHttpRoute(
                name: "GetHedmInterestByIdV6",
                routeTemplate: "interests/{id}",
                defaults: new { controller = "Interests", action = "GetHedmInterestByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmInterestById",
                routeTemplate: "interests/{id}",
                   defaults: new { controller = "Interests", action = "GetHedmInterestByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmInterestsV6",
                routeTemplate: "interests",
                defaults: new { controller = "Interests", action = "GetHedmInterestsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetInterests",
                routeTemplate: "interests",
                defaults: new { controller = "Interests", action = "GetInterests" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmInterests",
                routeTemplate: "interests",
                   defaults: new { controller = "Interests", action = "GetHedmInterestsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmInterestsV6",
               routeTemplate: "interests/{id}",
               defaults: new { controller = "Interests", action = "PutHedmInterestAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "PostHedmInterestsV6",
               routeTemplate: "interests",
               defaults: new { controller = "Interests", action = "PostHedmInterestAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DeleteHedmInterests",
               routeTemplate: "interests/{id}",
               defaults: new { controller = "Interests", action = "DeleteHedmInterestAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
           );

            #endregion

            #region Interest Areas

            routes.MapHttpRoute(
                 name: "GetInterestAreasByIdV6",
                 routeTemplate: "interest-areas/{id}",
                 defaults: new { controller = "Interests", action = "GetInterestAreasByIdAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                 }
             );

            routes.MapHttpRoute(
                 name: "GetInterestAreasById",
                 routeTemplate: "interest-areas/{id}",
                    defaults: new { controller = "Interests", action = "GetInterestAreasByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, true),
                 }
             );

            routes.MapHttpRoute(
                name: "GetInterestAreasV6",
                routeTemplate: "interest-areas",
                defaults: new { controller = "Interests", action = "GetInterestAreasAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetInterestAreas",
                routeTemplate: "interest-areas",
                   defaults: new { controller = "Interests", action = "GetInterestAreasAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutInterestAreasV6",
               routeTemplate: "interest-areas/{id}",
               defaults: new { controller = "Interests", action = "PutInterestAreasAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "PostInterestAreasV6",
               routeTemplate: "interest-areas",
               defaults: new { controller = "Interests", action = "PostInterestAreasAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DeleteInterestAreas",
               routeTemplate: "interest-areas/{id}",
               defaults: new { controller = "Interests", action = "DeleteInterestAreasAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
           );

            #endregion

            #region IpedsInstitutions

            routes.MapHttpRoute(
                name: "QueryByPostIpedsInstitutionsByOpeId",
                routeTemplate: "qapi/ipeds-institutions",
                defaults: new { controller = "IpedsInstitutions", action = "QueryByPostIpedsInstitutionsByOpeIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Job Applications

            routes.MapHttpRoute(
              name: "GetJobApplicationsByGuidV10",
              routeTemplate: "job-applications/{guid}",
              defaults: new { controller = "JobApplications", action = "GetJobApplicationsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetJobApplicationsByGuid",
               routeTemplate: "job-applications/{guid}",
                  defaults: new { controller = "JobApplications", action = "GetJobApplicationsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetJobApplicationsV10",
              routeTemplate: "job-applications",
              defaults: new { controller = "JobApplications", action = "GetJobApplicationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetJobApplications",
               routeTemplate: "job-applications",
                  defaults: new { controller = "JobApplications", action = "GetJobApplicationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutJobApplicationsV10",
              routeTemplate: "job-applications/{guid}",
              defaults: new { controller = "JobApplications", action = "PutJobApplicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostJobApplicationsV10",
               routeTemplate: "job-applications",
               defaults: new { controller = "JobApplications", action = "PostJobApplicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteJobApplications",
                routeTemplate: "job-applications/{guid}",
                defaults: new { controller = "JobApplications", action = "DeleteJobApplicationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Job Applications

            #region  Job Application Sources

            routes.MapHttpRoute(
              name: "GetJobApplicationSourcesByGuidV10",
              routeTemplate: "job-application-sources/{guid}",
              defaults: new { controller = "JobApplicationSources", action = "GetJobApplicationSourcesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetJobApplicationSourcesByGuid",
               routeTemplate: "job-application-sources/{guid}",
                  defaults: new { controller = "JobApplicationSources", action = "GetJobApplicationSourcesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetJobApplicationSourcesV10",
              routeTemplate: "job-application-sources",
              defaults: new { controller = "JobApplicationSources", action = "GetJobApplicationSourcesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetJobApplicationSources",
               routeTemplate: "job-application-sources",
                  defaults: new { controller = "JobApplicationSources", action = "GetJobApplicationSourcesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutJobApplicationSourcesV10",
              routeTemplate: "job-application-sources/{guid}",
              defaults: new { controller = "JobApplicationSources", action = "PutJobApplicationSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostJobApplicationSourcesV10",
               routeTemplate: "job-application-sources",
               defaults: new { controller = "JobApplicationSources", action = "PostJobApplicationSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteJobApplicationSources",
                routeTemplate: "job-application-sources/{guid}",
                defaults: new { controller = "JobApplicationSources", action = "DeleteJobApplicationSourcesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Job Application Sources

            #region  Job Application Statuses

            routes.MapHttpRoute(
              name: "GetJobApplicationStatusesByGuidV10",
              routeTemplate: "job-application-statuses/{guid}",
              defaults: new { controller = "JobApplicationStatuses", action = "GetJobApplicationStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetJobApplicationStatusesByGuid",
               routeTemplate: "job-application-statuses/{guid}",
                  defaults: new { controller = "JobApplicationStatuses", action = "GetJobApplicationStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetJobApplicationStatusesV10",
              routeTemplate: "job-application-statuses",
              defaults: new { controller = "JobApplicationStatuses", action = "GetJobApplicationStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetJobApplicationStatuses",
               routeTemplate: "job-application-statuses",
                  defaults: new { controller = "JobApplicationStatuses", action = "GetJobApplicationStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutJobApplicationStatusesV10",
              routeTemplate: "job-application-statuses/{guid}",
              defaults: new { controller = "JobApplicationStatuses", action = "PutJobApplicationStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostJobApplicationStatusesV10",
               routeTemplate: "job-application-statuses",
               defaults: new { controller = "JobApplicationStatuses", action = "PostJobApplicationStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteJobApplicationStatuses",
                routeTemplate: "job-application-statuses/{guid}",
                defaults: new { controller = "JobApplicationStatuses", action = "DeleteJobApplicationStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Job Application Statuses

            #region JobChangeReasons

            routes.MapHttpRoute(
                name: "GetJobChangeReasonByIdV7",
                routeTemplate: "job-change-reasons/{id}",
                defaults: new { controller = "JobChangeReasons", action = "GetJobChangeReasonByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetJobChangeReasonById",
                routeTemplate: "job-change-reasons/{id}",
                defaults: new { controller = "JobChangeReasons", action = "GetJobChangeReasonByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetJobChangeReasonsV7",
                routeTemplate: "job-change-reasons",
                defaults: new { controller = "JobChangeReasons", action = "GetJobChangeReasonsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetJobChangeReasons",
                routeTemplate: "job-change-reasons",
                defaults: new { controller = "JobChangeReasons", action = "GetJobChangeReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutJobChangeReasonsV7",
               routeTemplate: "job-change-reasons/{id}",
               defaults: new { controller = "JobChangeReasons", action = "PutJobChangeReasonAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostJobChangeReasonsV7",
                routeTemplate: "job-change-reasons",
                defaults: new { controller = "JobChangeReasons", action = "PostJobChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteJobChangeReasons",
                routeTemplate: "job-change-reasons/{id}",
                defaults: new { controller = "JobChangeReasons", action = "DeleteJobChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region JournalEntries

            routes.MapHttpRoute(
                name: "GetJournalEntry",
                routeTemplate: "journal-entries/{journalEntryId}",
                defaults: new { controller = "JournalEntries", action = "GetJournalEntryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Languages

            routes.MapHttpRoute(
                name: "GetLanguages",
                routeTemplate: "languages",
                defaults: new { controller = "Languages", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
              name: "GetLanguagesByGuidV1.0.0",
              routeTemplate: "languages/{guid}",
              defaults: new { controller = "Languages", action = "GetLanguagesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLanguagesByGuid",
               routeTemplate: "languages/{guid}",
                  defaults: new { controller = "Languages", action = "GetLanguagesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetLanguagesV1.0.0",
              routeTemplate: "languages",
              defaults: new { controller = "Languages", action = "GetLanguagesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLanguages",
               routeTemplate: "languages",
                  defaults: new { controller = "Languages", action = "GetLanguagesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutLanguagesV1.0.0",
              routeTemplate: "languages/{guid}",
              defaults: new { controller = "Languages", action = "PutLanguagesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostLanguagesV1.0.0",
               routeTemplate: "languages",
               defaults: new { controller = "Languages", action = "PostLanguagesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteLanguages",
                routeTemplate: "languages/{guid}",
                defaults: new { controller = "Languages", action = "DeleteLanguagesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "LanguagesUnsupported",
            routeTemplate: "languages/{id}",
             defaults: new { controller = "Languages", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion

            #region Language Iso Codes
            routes.MapHttpRoute(
              name: "GetLanguageIsoCodesByGuidV1.0.0",
              routeTemplate: "language-iso-codes/{guid}",
              defaults: new { controller = "Languages", action = "GetLanguageIsoCodesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLanguageIsoCodesByGuid",
               routeTemplate: "language-iso-codes/{guid}",
                  defaults: new { controller = "Languages", action = "GetLanguageIsoCodesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetLanguageIsoCodesV1.0.0",
              routeTemplate: "language-iso-codes",
              defaults: new { controller = "Languages", action = "GetLanguageIsoCodesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLanguageIsoCodes",
               routeTemplate: "language-iso-codes",
                  defaults: new { controller = "Languages", action = "GetLanguageIsoCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutLanguageIsoCodesV1.0.0",
              routeTemplate: "language-iso-codes/{guid}",
              defaults: new { controller = "Languages", action = "PutLanguageIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostLanguageIsoCodesV1.0.0",
               routeTemplate: "language-iso-codes",
               defaults: new { controller = "Languages", action = "PostLanguageIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteLanguageIsoCodes",
                routeTemplate: "language-iso-codes/{guid}",
                defaults: new { controller = "Languages", action = "DeleteLanguageIsoCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "LanguageIsoCodesUnsupported",
            routeTemplate: "language-iso-codes/{id}",
             defaults: new { controller = "Languages", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Language Iso Codes

            #region  Leave Plans

            routes.MapHttpRoute(
              name: "GetLeavePlansByGuidV11",
              routeTemplate: "leave-plans/{guid}",
              defaults: new { controller = "LeavePlans", action = "GetLeavePlansByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLeavePlansByGuid",
               routeTemplate: "leave-plans/{guid}",
                  defaults: new { controller = "LeavePlans", action = "GetLeavePlansByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetLeavePlansV11",
              routeTemplate: "leave-plans",
              defaults: new { controller = "LeavePlans", action = "GetLeavePlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetLeavePlans",
               routeTemplate: "leave-plans",
                  defaults: new { controller = "LeavePlans", action = "GetLeavePlansAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutLeavePlansV11",
              routeTemplate: "leave-plans/{guid}",
              defaults: new { controller = "LeavePlans", action = "PutLeavePlansAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostLeavePlansV11",
               routeTemplate: "leave-plans",
               defaults: new { controller = "LeavePlans", action = "PostLeavePlansAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteLeavePlans",
                routeTemplate: "leave-plans/{guid}",
                defaults: new { controller = "LeavePlans", action = "DeleteLeavePlansAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Leave Plans

            #region  Leave Categories

            routes.MapHttpRoute(
              name: "GetLeaveCategoriesByGuidV11",
              routeTemplate: "leave-categories/{guid}",
              defaults: new { controller = "LeaveCategories", action = "GetLeaveCategoriesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLeaveCategoriesByGuid",
               routeTemplate: "leave-categories/{guid}",
                  defaults: new { controller = "LeaveCategories", action = "GetLeaveCategoriesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetLeaveCategoriesV11",
              routeTemplate: "leave-categories",
              defaults: new { controller = "LeaveCategories", action = "GetLeaveCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetLeaveCategories",
               routeTemplate: "leave-categories",
                  defaults: new { controller = "LeaveCategories", action = "GetLeaveCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutLeaveCategoriesV11",
              routeTemplate: "leave-categories/{guid}",
              defaults: new { controller = "LeaveCategories", action = "PutLeaveCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostLeaveCategoriesV11",
               routeTemplate: "leave-categories",
               defaults: new { controller = "LeaveCategories", action = "PostLeaveCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteLeaveCategories",
                routeTemplate: "leave-categories/{guid}",
                defaults: new { controller = "LeaveCategories", action = "DeleteLeaveCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Leave Categories

            #region  Leave Types

            routes.MapHttpRoute(
              name: "GetLeaveTypesByGuidV11",
              routeTemplate: "leave-types/{guid}",
              defaults: new { controller = "LeaveTypes", action = "GetLeaveTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLeaveTypesByGuid",
               routeTemplate: "leave-types/{guid}",
                  defaults: new { controller = "LeaveTypes", action = "GetLeaveTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetLeaveTypesV11",
              routeTemplate: "leave-types",
              defaults: new { controller = "LeaveTypes", action = "GetLeaveTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetLeaveTypes",
               routeTemplate: "leave-types",
                  defaults: new { controller = "LeaveTypes", action = "GetLeaveTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutLeaveTypesV11",
              routeTemplate: "leave-types/{guid}",
              defaults: new { controller = "LeaveTypes", action = "PutLeaveTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostLeaveTypesV11",
               routeTemplate: "leave-types",
               defaults: new { controller = "LeaveTypes", action = "PostLeaveTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteLeaveTypes",
                routeTemplate: "leave-types/{guid}",
                defaults: new { controller = "LeaveTypes", action = "DeleteLeaveTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Leave Types

            #region  Ledger Activities

            routes.MapHttpRoute(
              name: "GetLedgerActivitiesByGuidV11",
              routeTemplate: "ledger-activities/{guid}",
              defaults: new { controller = "LedgerActivities", action = "GetLedgerActivitiesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetLedgerActivitiesByGuid",
               routeTemplate: "ledger-activities/{guid}",
                  defaults: new { controller = "LedgerActivities", action = "GetLedgerActivitiesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetLedgerActivitiesV11",
              routeTemplate: "ledger-activities",
              defaults: new { controller = "LedgerActivities", action = "GetLedgerActivitiesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetLedgerActivities",
               routeTemplate: "ledger-activities",
                  defaults: new { controller = "LedgerActivities", action = "GetLedgerActivitiesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutLedgerActivitiesV11",
              routeTemplate: "ledger-activities/{guid}",
              defaults: new { controller = "LedgerActivities", action = "PutLedgerActivitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostLedgerActivitiesV11",
               routeTemplate: "ledger-activities",
               defaults: new { controller = "LedgerActivities", action = "PostLedgerActivitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteLedgerActivities",
                routeTemplate: "ledger-activities/{guid}",
                defaults: new { controller = "LedgerActivities", action = "DeleteLedgerActivitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Ledger Activities

            #region Links, FinancialAid

            // Changed routeTemplate to be Financial Aid specific change the controller name also
            routes.MapHttpRoute(
                name: "FinancialAidLinks",
                routeTemplate: "financial-aid-links",
                defaults: new { controller = "FinancialAidLinks", action = "GetLinks" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region LoadPeriods

            routes.MapHttpRoute(
                name: "QueryLoadPeriodsAsync",
                routeTemplate: "qapi/load-periods",
                defaults: new { controller = "LoadPeriods", action = "QueryLoadPeriodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region LoanRequests

            routes.MapHttpRoute(
                name: "GetLoanRequest",
                routeTemplate: "loan-requests/{id}",
                defaults: new { controller = "LoanRequests", action = "GetLoanRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateLoanRequest",
                routeTemplate: "loan-requests",
                defaults: new { controller = "LoanRequests", action = "CreateLoanRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Locations

            routes.MapHttpRoute(
                name: "GetLocations",
                routeTemplate: "locations",
                defaults: new { controller = "Locations", action = "GetLocations" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region LocalCourseClassifications

            routes.MapHttpRoute(
                name: "GetLocalCourseClassifications",
                routeTemplate: "local-course-classifications",
                defaults: new { controller = "LocalCourseClassifications", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Majors

            routes.MapHttpRoute(
                name: "GetMajors",
                routeTemplate: "majors",
                defaults: new { controller = "Majors", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region MaritalStatuses

            routes.MapHttpRoute(
                name: "GetMaritalStatusById2V6",
                routeTemplate: "marital-statuses/{id}",
                defaults: new { controller = "MaritalStatuses", action = "GetMaritalStatusById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetMaritalStatusById2",
                routeTemplate: "marital-statuses/{id}",
                   defaults: new { controller = "MaritalStatuses", action = "GetMaritalStatusById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetCdmMaritalStatuses2V6",
                routeTemplate: "marital-statuses",
                defaults: new { controller = "MaritalStatuses", action = "GetMaritalStatuses2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetMaritalStatuses",
                routeTemplate: "marital-statuses",
                defaults: new { controller = "MaritalStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetCdmMaritalStatuses2",
                routeTemplate: "marital-statuses",
                   defaults: new { controller = "MaritalStatuses", action = "GetMaritalStatuses2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutMaritalStatusesV6",
                routeTemplate: "marital-statuses/{id}",
                defaults: new { controller = "MaritalStatuses", action = "PutMaritalStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostMaritalStatusesV6",
                routeTemplate: "marital-statuses",
                defaults: new { controller = "MaritalStatuses", action = "PostMaritalStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteMaritalStatuses",
                routeTemplate: "marital-statuses/{id}",
                defaults: new { controller = "MaritalStatuses", action = "DeleteMaritalStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region MealPlanAssignments

            routes.MapHttpRoute(
               name: "GetMealPlanAssignment",
               routeTemplate: "meal-plan-assignments/{id}",
               defaults: new { controller = "MealPlanAssignments", action = "GetMealPlanAssignment" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
           );

            routes.MapHttpRoute(
                name: "GetStudentMealPlansByGuidV16",
                routeTemplate: "meal-plan-assignments/{guid}",
                defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlansByGuid2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
             name: "GetStudentMealPlansByGuidV1010",
             routeTemplate: "meal-plan-assignments/{guid}",
             defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlansByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
             }
          );

            routes.MapHttpRoute(
                name: "GetStudentMealPlansByGuidV10",
                routeTemplate: "meal-plan-assignments/{guid}",
                defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlansByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentMealPlansByGuid",
               routeTemplate: "meal-plan-assignments/{guid}",
                  defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlansByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
             name: "GetStudentMealPlansV16",
             routeTemplate: "meal-plan-assignments",
             defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlans2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
           );

            routes.MapHttpRoute(
             name: "GetStudentMealPlansV1010",
             routeTemplate: "meal-plan-assignments",
             defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlansAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
             }
           );

            routes.MapHttpRoute(
              name: "GetStudentMealPlansV10",
              routeTemplate: "meal-plan-assignments",
              defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
               name: "GetStudentMealPlans",
               routeTemplate: "meal-plan-assignments",
                  defaults: new { controller = "StudentMealPlans", action = "GetStudentMealPlans2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "PutStudentMealPlansV16",
              routeTemplate: "meal-plan-assignments/{guid}",
              defaults: new { controller = "StudentMealPlans", action = "PutStudentMealPlans2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
            );

            routes.MapHttpRoute(
              name: "PutStudentMealPlansV1010",
              routeTemplate: "meal-plan-assignments/{guid}",
              defaults: new { controller = "StudentMealPlans", action = "PutStudentMealPlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
              }
            );

            routes.MapHttpRoute(
              name: "PutStudentMealPlansV10",
              routeTemplate: "meal-plan-assignments/{guid}",
              defaults: new { controller = "StudentMealPlans", action = "PutStudentMealPlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
               name: "PostStudentMealPlansV16",
               routeTemplate: "meal-plan-assignments",
               defaults: new { controller = "StudentMealPlans", action = "PostStudentMealPlans2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "PostStudentMealPlansV1010",
               routeTemplate: "meal-plan-assignments",
               defaults: new { controller = "StudentMealPlans", action = "PostStudentMealPlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("10.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "10.1.0"))
              }
            );

            routes.MapHttpRoute(
               name: "PostStudentMealPlansV10",
               routeTemplate: "meal-plan-assignments",
               defaults: new { controller = "StudentMealPlans", action = "PostStudentMealPlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentMealPlans",
                routeTemplate: "meal-plan-assignments/{guid}",
                defaults: new { controller = "StudentMealPlans", action = "DeleteStudentMealPlansAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            routes.MapHttpRoute(
                name: "CreateMealPlanAssignment",
                routeTemplate: "meal-plan-assignments",
                defaults: new { controller = "MealPlanAssignments", action = "PostMealPlanAssignment" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateMealPlanAssignment",
                routeTemplate: "meal-plan-assignments",
                defaults: new { controller = "MealPlanAssignments", action = "PutMealPlanAssignment" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
             name: "MealPlanAssignmentUnsupported",
             routeTemplate: "meal-plan-assignments/{guid}",
              defaults: new { controller = "StudentMealPlans", action = "NotAcceptableStatusException", guid = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
           );

            #endregion

            #region  MealPlans

            routes.MapHttpRoute(
              name: "GetMealPlansByGuidV10",
              routeTemplate: "meal-plans/{guid}",
              defaults: new { controller = "MealPlans", action = "GetMealPlansByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetMealPlansByGuid",
               routeTemplate: "meal-plans/{guid}",
                  defaults: new { controller = "MealPlans", action = "GetMealPlansByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetMealPlansV10",
              routeTemplate: "meal-plans",
              defaults: new { controller = "MealPlans", action = "GetMealPlansAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetMealPlans",
               routeTemplate: "meal-plans",
                  defaults: new { controller = "MealPlans", action = "GetMealPlansAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutMealPlansV10",
              routeTemplate: "meal-plans/{guid}",
              defaults: new { controller = "MealPlans", action = "PutMealPlansAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostMealPlansV10",
               routeTemplate: "meal-plans",
               defaults: new { controller = "MealPlans", action = "PostMealPlansAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteMealPlans",
                routeTemplate: "meal-plans/{guid}",
                defaults: new { controller = "MealPlans", action = "DeleteMealPlansAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Meal Plans

            #region  MealPlanRequests

            routes.MapHttpRoute(
              name: "GetMealPlanRequestsByGuidV10",
              routeTemplate: "meal-plan-requests/{guid}",
              defaults: new { controller = "MealPlanRequests", action = "GetMealPlanRequestsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetMealPlanRequestsByGuid",
               routeTemplate: "meal-plan-requests/{guid}",
                  defaults: new { controller = "MealPlanRequests", action = "GetMealPlanRequestsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetMealPlanRequestsV10",
              routeTemplate: "meal-plan-requests",
              defaults: new { controller = "MealPlanRequests", action = "GetMealPlanRequestsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetMealPlanRequests",
               routeTemplate: "meal-plan-requests",
                  defaults: new { controller = "MealPlanRequests", action = "GetMealPlanRequestsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutMealPlanRequestsV10",
              routeTemplate: "meal-plan-requests/{guid}",
              defaults: new { controller = "MealPlanRequests", action = "PutMealPlanRequestsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostMealPlanRequestsV10",
               routeTemplate: "meal-plan-requests",
               defaults: new { controller = "MealPlanRequests", action = "PostMealPlanRequestsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteMealPlanRequests",
                routeTemplate: "meal-plan-requests/{guid}",
                defaults: new { controller = "MealPlanRequests", action = "DeleteMealPlanRequestsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Meal Plan Requests

            #region  MealTypes

            routes.MapHttpRoute(
              name: "GetMealTypesByGuidV10",
              routeTemplate: "meal-types/{guid}",
              defaults: new { controller = "MealTypes", action = "GetMealTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetMealTypesByGuid",
               routeTemplate: "meal-types/{guid}",
                  defaults: new { controller = "MealTypes", action = "GetMealTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetMealTypesV10",
              routeTemplate: "meal-types",
              defaults: new { controller = "MealTypes", action = "GetMealTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetMealTypes",
               routeTemplate: "meal-types",
                  defaults: new { controller = "MealTypes", action = "GetMealTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutMealTypesV10",
              routeTemplate: "meal-types/{guid}",
              defaults: new { controller = "MealTypes", action = "PutMealTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostMealTypesV10",
               routeTemplate: "meal-types",
               defaults: new { controller = "MealTypes", action = "PostMealTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteMealTypes",
                routeTemplate: "meal-types/{guid}",
                defaults: new { controller = "MealTypes", action = "DeleteMealTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Meal Types

            #region Minors

            routes.MapHttpRoute(
                name: "GetMinors",
                routeTemplate: "minors",
                defaults: new { controller = "Minors", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region MiscellaneousText

            routes.MapHttpRoute(
                name: "GetAllMiscellaneousText",
                routeTemplate: "miscellaneous-text",
                defaults: new { controller = "MiscellaneousText", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Next Approvers

            routes.MapHttpRoute(
                name: "GetNextApproverValidation",
                routeTemplate: "next-approvers/{nextApproverId}",
                defaults: new { controller = "Approvers", action = "GetNextApproverValidationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region NonAcademicAttendances

            routes.MapHttpRoute(
                name: "GetNonAcademicAttendances",
                routeTemplate: "students/{studentId}/nonacademic-attendances",
                defaults: new { controller = "NonAcademicAttendances", action = "GetNonAcademicAttendancesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region NonAcademicEvents
            routes.MapHttpRoute(
               name: "QueryByPostNonAcademicEvents",
               routeTemplate: "qapi/nonacademic-events",
               defaults: new { controller = "NonAcademicEvents", action = "QueryNonAcademicEventsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );
            #endregion

            #region NonAcademicAttendanceEventTypes

            routes.MapHttpRoute(
                name: "GetNonAcademicAttendanceEventTypes",
                routeTemplate: "nonacademic-attendance-event-types",
                defaults: new { controller = "NonAcademicAttendanceEventTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region NonAcademicAttendanceRequirements

            routes.MapHttpRoute(
                name: "GetNonAcademicAttendanceRequirements",
                routeTemplate: "students/{studentId}/nonacademic-attendance-requirements",
                defaults: new { controller = "NonAcademicAttendanceRequirements", action = "GetNonAcademicAttendanceRequirementsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region NoncourseStatuses

            routes.MapHttpRoute(
                name: "GetNoncourseStatuses",
                routeTemplate: "noncourse-statuses",
                defaults: new { controller = "NoncourseStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  NonpersonRelationships
            //removed from API 1.19 and will be released in API 1.20
            //  routes.MapHttpRoute(
            //    name: "GetNonpersonRelationshipsByGuidV13",
            //    routeTemplate: "nonperson-relationships/{guid}",
            //    defaults: new { controller = "NonpersonRelationships", action = "GetNonpersonRelationshipsByGuidAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
            //    }
            //);

            //  routes.MapHttpRoute(
            //     name: "DefaultGetNonpersonRelationshipsByGuid",
            //     routeTemplate: "nonperson-relationships/{guid}",
            //        defaults: new { controller = "NonpersonRelationships", action = "GetNonpersonRelationshipsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
            //     constraints: new
            //     {
            //         httpMethod = new HttpMethodConstraint("GET"),
            //         headerVersion = new HeaderVersionConstraint(13, true)
            //     }
            // );


            //  routes.MapHttpRoute(
            //    name: "GetNonpersonRelationshipsV13",
            //    routeTemplate: "nonperson-relationships",
            //    defaults: new { controller = "NonpersonRelationships", action = "GetNonpersonRelationshipsAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
            //    }
            //);

            //  routes.MapHttpRoute(
            //     name: "DefaultGetNonpersonRelationships",
            //     routeTemplate: "nonperson-relationships",
            //        defaults: new { controller = "NonpersonRelationships", action = "GetNonpersonRelationshipsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
            //     constraints: new
            //     {
            //         httpMethod = new HttpMethodConstraint("GET"),
            //         headerVersion = new HeaderVersionConstraint(13, true)
            //     }
            // );

            //  routes.MapHttpRoute(
            //    name: "PutNonpersonRelationshipsV13",
            //    routeTemplate: "nonperson-relationships/{guid}",
            //    defaults: new { controller = "NonpersonRelationships", action = "PutNonpersonRelationshipsAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
            //    }
            //);


            //  routes.MapHttpRoute(
            //     name: "PostNonpersonRelationshipsV13",
            //     routeTemplate: "nonperson-relationships",
            //     defaults: new { controller = "NonpersonRelationships", action = "PostNonpersonRelationshipsAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("POST"),
            //        headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
            //    }
            // );

            //  routes.MapHttpRoute(
            //      name: "DefaultDeleteNonpersonRelationships",
            //      routeTemplate: "nonperson-relationships/{guid}",
            //      defaults: new { controller = "NonpersonRelationships", action = "DeleteNonpersonRelationshipsAsync" },
            //      constraints: new
            //      {
            //          httpMethod = new HttpMethodConstraint("DELETE"),

            //      }
            // );
            #endregion NonpersonRelationships

            #region OfficeCodes
            routes.MapHttpRoute(
                name: "GetOfficeCodes",
                routeTemplate: "office-codes",
                defaults: new { controller = "OfficeCodes", action = "GetOfficeCodes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Organizations

            routes.MapHttpRoute(
                    name: "GetOrganizationByGuidV6",
                    routeTemplate: "organizations/{id}",
                    defaults: new { controller = "Organizations", action = "GetOrganizationByGuid2Async", isEedmSupported = true },
                    constraints: new
                    {
                        httpMethod = new HttpMethodConstraint("GET"),
                        headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                    }
            );

            routes.MapHttpRoute(
                    name: "GetOrganizationByGuidDefault",
                    routeTemplate: "organizations/{id}",
                       defaults: new { controller = "Organizations", action = "GetOrganizationByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                    constraints: new
                    {
                        httpMethod = new HttpMethodConstraint("GET"),
                        headerVersion = new HeaderVersionConstraint(6, true)
                    }
            );

            routes.MapHttpRoute(
                name: "GetOrganizationsV6",
                routeTemplate: "organizations",
                defaults: new { controller = "Organizations", action = "GetOrganizations2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetOrganizationsDefault",
                routeTemplate: "organizations",
                   defaults: new { controller = "Organizations", action = "GetOrganizations2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutOrganizationV6",
                routeTemplate: "organizations/{id}",
                defaults: new { controller = "Organizations", action = "PutOrganizationAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostOrganizationV6",
                routeTemplate: "organizations",
                defaults: new { controller = "Organizations", action = "PostOrganizationAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteOrganizationByGuid",
                routeTemplate: "organizations/{id}",
                defaults: new { controller = "Organizations", action = "DeleteOrganizationByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region OrganizationalRelationships


            routes.MapHttpRoute(
                name: "CreateOrganizationalRelationship",
                routeTemplate: "organizational-relationships",
                defaults: new { controller = "OrganizationalRelationships", action = "CreateOrganizationalRelationshipAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateOrganizationalRelationship",
                routeTemplate: "organizational-relationships/{id}",
                defaults: new { controller = "OrganizationalRelationships", action = "UpdateOrganizationalRelationshipAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteOrganizationalRelationship",
                routeTemplate: "organizational-relationships/{id}",
                defaults: new { controller = "OrganizationalRelationships", action = "DeleteOrganizationalRelationshipAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region OrganizationalPersonPositions

            routes.MapHttpRoute(
                name: "GetOrganizationalPersonPosition",
                routeTemplate: "organizational-person-positions/{id}",
                defaults: new { controller = "OrganizationalPersonPositions", action = "GetOrganizationalPersonPositionAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryOrganizationalPersonPositions",
                routeTemplate: "qapi/organizational-person-positions",
                defaults: new { controller = "OrganizationalPersonPositions", action = "QueryOrganizationalPersonPositionAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            #endregion

            #region OrganizationalPositions

            routes.MapHttpRoute(
                name: "GetOrganizationalPosition",
                routeTemplate: "organizational-positions/{id}",
                defaults: new { controller = "OrganizationalPosition", action = "GetOrganizationalPositionAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryOrganizationalPositions",
                routeTemplate: "qapi/organizational-positions",
                defaults: new { controller = "OrganizationalPosition", action = "QueryOrganizationalPositionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region OrganizationalPositionRelationships

            routes.MapHttpRoute(
                name: "CreateOrganizationalPositionRelationship",
                routeTemplate: "organizational-position-relationships",
                defaults: new { controller = "OrganizationalPositionRelationships", action = "CreateOrganizationalPositionRelationshipAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteOrganizationalPositionRelationship",
                routeTemplate: "organizational-position-relationships/{id}",
                defaults: new { controller = "OrganizationalPositionRelationships", action = "DeleteOrganizationalPositionRelationshipAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region OvertimeCalculation
            routes.MapHttpRoute(
                name: "OvertimeCalculation",
                routeTemplate: "qapi/overtime",
                defaults: new { controller = "Overtime", action = "QueryByPostOvertime" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );
            routes.MapHttpRoute(
                 name: "OvertimeCalculations",
                routeTemplate: "qapi/overtime",
                defaults: new { controller = "Overtime", action = "QueryByPostOvertimes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );
            #endregion

            #region OvertimeCalculationDefinitions
            routes.MapHttpRoute(
               name: "GetOvertimeCalculationDefinitionsAsync",
               routeTemplate: "overtime-calculation-definitions",
               defaults: new { controller = "OvertimeCalculationDefinitions", action = "GetOvertimeCalculationDefinitionsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );
            #endregion

            #region MealPlans

            routes.MapHttpRoute(
                name: "GetMealPlans",
                routeTemplate: "meal-plans",
                defaults: new { controller = "MealPlans", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Meal Plan Rates

            routes.MapHttpRoute(
              name: "GetMealPlanRatesByGuidV10",
              routeTemplate: "meal-plan-rates/{guid}",
              defaults: new { controller = "MealPlanRates", action = "GetMealPlanRatesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetMealPlanRatesByGuid",
               routeTemplate: "meal-plan-rates/{guid}",
                  defaults: new { controller = "MealPlanRates", action = "GetMealPlanRatesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetMealPlanRatesV10",
              routeTemplate: "meal-plan-rates",
              defaults: new { controller = "MealPlanRates", action = "GetMealPlanRatesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetMealPlanRates",
               routeTemplate: "meal-plan-rates",
                  defaults: new { controller = "MealPlanRates", action = "GetMealPlanRatesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutMealPlanRatesV10",
              routeTemplate: "meal-plan-rates/{guid}",
              defaults: new { controller = "MealPlanRates", action = "PutMealPlanRatesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostMealPlanRatesV10",
               routeTemplate: "meal-plan-rates",
               defaults: new { controller = "MealPlanRates", action = "PostMealPlanRatesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteMealPlanRates",
                routeTemplate: "meal-plan-rates/{guid}",
                defaults: new { controller = "MealPlanRates", action = "DeleteMealPlanRatesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Meal Plan Rates

            #region  Pay Classifications

            routes.MapHttpRoute(
              name: "GetPayClassificationsByGuidV12",
              routeTemplate: "pay-classifications/{guid}",
              defaults: new { controller = "PayClassifications", action = "GetPayClassificationsByGuid2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "GetPayClassificationsByGuidV11",
              routeTemplate: "pay-classifications/{guid}",
              defaults: new { controller = "PayClassifications", action = "GetPayClassificationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPayClassificationsByGuid",
               routeTemplate: "pay-classifications/{guid}",
                  defaults: new { controller = "PayClassifications", action = "GetPayClassificationsByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetPayClassificationsV12",
              routeTemplate: "pay-classifications",
              defaults: new { controller = "PayClassifications", action = "GetPayClassifications2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "GetPayClassificationsV11",
              routeTemplate: "pay-classifications",
              defaults: new { controller = "PayClassifications", action = "GetPayClassificationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetPayClassifications",
               routeTemplate: "pay-classifications",
                  defaults: new { controller = "PayClassifications", action = "GetPayClassifications2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPayClassificationsV12",
              routeTemplate: "pay-classifications/{guid}",
              defaults: new { controller = "PayClassifications", action = "PutPayClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "PutPayClassificationsV11",
              routeTemplate: "pay-classifications/{guid}",
              defaults: new { controller = "PayClassifications", action = "PutPayClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "PostPayClassificationsV12",
               routeTemplate: "pay-classifications",
               defaults: new { controller = "PayClassifications", action = "PostPayClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
               name: "PostPayClassificationsV11",
               routeTemplate: "pay-classifications",
               defaults: new { controller = "PayClassifications", action = "PostPayClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePayClassifications",
                routeTemplate: "pay-classifications/{guid}",
                defaults: new { controller = "PayClassifications", action = "DeletePayClassificationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Pay Classifications

            #region  Pay Classes

            routes.MapHttpRoute(
              name: "GetPayClassesByGuidV1210",
              routeTemplate: "pay-classes/{guid}",
              defaults: new { controller = "PayClasses", action = "GetPayClassesByGuid2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
            );

            routes.MapHttpRoute(
              name: "GetPayClassesByGuidV12",
              routeTemplate: "pay-classes/{guid}",
              defaults: new { controller = "PayClasses", action = "GetPayClassesByGuid2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
              name: "GetPayClassesByGuidV11",
              routeTemplate: "pay-classes/{guid}",
              defaults: new { controller = "PayClasses", action = "GetPayClassesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPayClassesByGuid",
               routeTemplate: "pay-classes/{guid}",
                  defaults: new { controller = "PayClasses", action = "GetPayClassesByGuid2Async", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("12.1.0", true)
               }
           );

            routes.MapHttpRoute(
             name: "GetPayClassesV1210",
             routeTemplate: "pay-classes",
             defaults: new { controller = "PayClasses", action = "GetPayClasses2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
             }
           );

            routes.MapHttpRoute(
              name: "GetPayClassesV12",
              routeTemplate: "pay-classes",
              defaults: new { controller = "PayClasses", action = "GetPayClasses2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "GetPayClassesV11",
              routeTemplate: "pay-classes",
              defaults: new { controller = "PayClasses", action = "GetPayClassesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetPayClasses",
               routeTemplate: "pay-classes",
                  defaults: new { controller = "PayClasses", action = "GetPayClasses2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("12.1.0", true)
               }
           );

            routes.MapHttpRoute(
            name: "PutPayClassesV1210",
            routeTemplate: "pay-classes/{guid}",
            defaults: new { controller = "PayClasses", action = "PutPayClassesAsync" },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
            }
          );

            routes.MapHttpRoute(
              name: "PutPayClassesV12",
              routeTemplate: "pay-classes/{guid}",
              defaults: new { controller = "PayClasses", action = "PutPayClassesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
              name: "PutPayClassesV11",
              routeTemplate: "pay-classes/{guid}",
              defaults: new { controller = "PayClasses", action = "PutPayClassesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "PostPayClassesV1210",
               routeTemplate: "pay-classes",
               defaults: new { controller = "PayClasses", action = "PostPayClassesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
            );

            routes.MapHttpRoute(
               name: "PostPayClassesV12",
               routeTemplate: "pay-classes",
               defaults: new { controller = "PayClasses", action = "PostPayClassesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
               name: "PostPayClassesV11",
               routeTemplate: "pay-classes",
               defaults: new { controller = "PayClasses", action = "PostPayClassesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePayClasses",
                routeTemplate: "pay-classes/{guid}",
                defaults: new { controller = "PayClasses", action = "DeletePayClassesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
             name: "PayClassesUnsupported",
             routeTemplate: "pay-classes/{id}",
              defaults: new { controller = "PayClasses", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
            );

            #endregion Pay Classes

            #region PayCycles

            routes.MapHttpRoute(
              name: "GetPayCyclesByGuidV12",
              routeTemplate: "pay-cycles/{guid}",
              defaults: new { controller = "PayCycles", action = "GetPayCyclesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPayCyclesByGuid",
               routeTemplate: "pay-cycles/{guid}",
                  defaults: new { controller = "PayCycles", action = "GetPayCyclesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPayCyclesV12",
              routeTemplate: "pay-cycles",
              defaults: new { controller = "PayCycles", action = "GetPayCycles2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
                name: "GetPayCycles",
                routeTemplate: "pay-cycles",
                defaults: new { controller = "PayCycles", action = "GetPayCyclesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetPayCycles",
               routeTemplate: "pay-cycles",
                  defaults: new { controller = "PayCycles", action = "GetPayCycles2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPayCyclesV12",
              routeTemplate: "pay-cycles/{guid}",
              defaults: new { controller = "PayCycles", action = "PutPayCyclesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostPayCyclesV12",
               routeTemplate: "pay-cycles",
               defaults: new { controller = "PayCycles", action = "PostPayCyclesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePayCycles",
                routeTemplate: "pay-cycles/{guid}",
                defaults: new { controller = "PayCycles", action = "DeletePayCyclesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion

            #region  Pay Periods

            routes.MapHttpRoute(
              name: "GetPayPeriodsByGuidV12",
              routeTemplate: "pay-periods/{guid}",
              defaults: new { controller = "PayPeriods", action = "GetPayPeriodsByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPayPeriodsByGuid",
               routeTemplate: "pay-periods/{guid}",
                  defaults: new { controller = "PayPeriods", action = "GetPayPeriodsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPayPeriodsV12",
              routeTemplate: "pay-periods",
              defaults: new { controller = "PayPeriods", action = "GetPayPeriodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "GetPayPeriods",
               routeTemplate: "pay-periods",
                  defaults: new { controller = "PayPeriods", action = "GetPayPeriodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPayPeriodsV12",
              routeTemplate: "pay-periods/{guid}",
              defaults: new { controller = "PayPeriods", action = "PutPayPeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostPayPeriodsV12",
               routeTemplate: "pay-periods",
               defaults: new { controller = "PayPeriods", action = "PostPayPeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePayPeriods",
                routeTemplate: "pay-periods/{guid}",
                defaults: new { controller = "PayPeriods", action = "DeletePayPeriodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Pay Periods

            #region  Pay Scales

            routes.MapHttpRoute(
              name: "GetPayScalesByGuidV11",
              routeTemplate: "pay-scales/{guid}",
              defaults: new { controller = "PayScales", action = "GetPayScalesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPayScalesByGuid",
               routeTemplate: "pay-scales/{guid}",
                  defaults: new { controller = "PayScales", action = "GetPayScalesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPayScalesV11",
              routeTemplate: "pay-scales",
              defaults: new { controller = "PayScales", action = "GetPayScalesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetPayScales",
               routeTemplate: "pay-scales",
                  defaults: new { controller = "PayScales", action = "GetPayScalesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPayScalesV11",
              routeTemplate: "pay-scales/{guid}",
              defaults: new { controller = "PayScales", action = "PutPayScalesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostPayScalesV11",
               routeTemplate: "pay-scales",
               defaults: new { controller = "PayScales", action = "PostPayScalesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePayScales",
                routeTemplate: "pay-scales/{guid}",
                defaults: new { controller = "PayScales", action = "DeletePayScalesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Pay Scales

            #region PayableDeposits

            // this is the route for getting all payable deposit directives for a payee
            routes.MapHttpRoute(
                name: "GetPayableDepositDirectives",
                routeTemplate: "payable-deposit-directives",
                defaults: new { controller = "PayableDepositDirectives", action = "GetPayableDepositDirectivesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // this is the route for getting a single payable deposit directive for a payee
            routes.MapHttpRoute(
                name: "GetPayableDepositDirective",
                routeTemplate: "payable-deposit-directives/{id}",
                defaults: new { controller = "PayableDepositDirectives", action = "GetPayableDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // this is the route for creating a payable deposit directive
            routes.MapHttpRoute(
                name: "CreatePayableDepositDirective",
                routeTemplate: "payable-deposit-directives",
                defaults: new { controller = "PayableDepositDirectives", action = "CreatePayableDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );



            // this is the route for updating a payable deposit directive
            routes.MapHttpRoute(
                name: "UpdatePayableDepositDirective",
                routeTemplate: "payable-deposit-directives/{id}",
                defaults: new { controller = "PayableDepositDirectives", action = "UpdatePayableDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // this is the route for deleting a payable deposit directive
            routes.MapHttpRoute(
                name: "DeletePayableDepositDirective",
                routeTemplate: "payable-deposit-directives/{id}",
                defaults: new { controller = "PayableDepositDirectives", action = "DeletePayableDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "AuthenticatePayableDepositDirective",
                routeTemplate: "payable-deposit-directives/{id}",
                defaults: new { controller = "PayableDepositDirectives", action = "AuthenticatePayableDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianStepUpAuthenticationFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "AuthenticatePayableDepositDirectives",
                routeTemplate: "payable-deposit-directives",
                defaults: new { controller = "PayableDepositDirectives", action = "AuthenticatePayableDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianStepUpAuthenticationFormat, 1))
                }
            );

            #endregion

            #region PayrollDeductionArrangements

            //routes.MapHttpRoute(
            //    name: "GetPayrollDeductionArrangementsByGuidV11",
            //    routeTemplate: "payroll-deduction-arrangements/{id}",
            //    defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangements2ByIdAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);

            // routes.MapHttpRoute(
            //    name: "DefaultGetPayrollDeductionArrangementsByGuid",
            //    routeTemplate: "payroll-deduction-arrangements/{id}",
            //       defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangements2ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, true)
            //    }
            //);

            routes.MapHttpRoute(
               name: "DefaultGetPayrollDeductionArrangementsByGuid",
               routeTemplate: "payroll-deduction-arrangements/{id}",
                  defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangementByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
           );


            // routes.MapHttpRoute(
            //   name: "GetPayrollDeductionArrangementsV11",
            //   routeTemplate: "payroll-deduction-arrangements",
            //   defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangements2Async", isEedmSupported = true },
            //   constraints: new
            //   {
            //       httpMethod = new HttpMethodConstraint("GET"),
            //       headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //   }
            //);

            //routes.MapHttpRoute(
            //    name: "DefaultGetPayrollDeductionArrangements",
            //    routeTemplate: "payroll-deduction-arrangements",
            //       defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangements2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, true)
            //    }
            //);

            routes.MapHttpRoute(
                name: "DefaultGetPayrollDeductionArrangements",
                routeTemplate: "payroll-deduction-arrangements",
                   defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangementsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            //  routes.MapHttpRoute(
            //    name: "PutPayrollDeductionArrangementsV11",
            //    routeTemplate: "payroll-deduction-arrangements/{id}",
            //    defaults: new { controller = "PayrollDeductionArrangements", action = "PutPayrollDeductionArrangements2Async", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);


            //routes.MapHttpRoute(
            //    name: "PostPayrollDeductionArrangementsV11",
            //    routeTemplate: "payroll-deduction-arrangements",
            //    defaults: new { controller = "PayrollDeductionArrangements", action = "PostPayrollDeductionArrangements2Async", isEedmSupported = true },
            //   constraints: new
            //   {
            //       httpMethod = new HttpMethodConstraint("POST"),
            //       headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //   }
            //);

            routes.MapHttpRoute(
               name: "GetHedmPayrollDeductionArrangements",
               routeTemplate: "payroll-deduction-arrangements",
               defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangementsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "GetHedmPayrollDeductionArrangementByGuid",
                routeTemplate: "payroll-deduction-arrangements/{id}",
                defaults: new { controller = "PayrollDeductionArrangements", action = "GetPayrollDeductionArrangementByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmPayrollDeductionArrangement",
                routeTemplate: "payroll-deduction-arrangements",
                defaults: new { controller = "PayrollDeductionArrangements", action = "PostPayrollDeductionArrangementAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmPayrollDeductionArrangement",
                routeTemplate: "payroll-deduction-arrangements/{id}",
                defaults: new { controller = "PayrollDeductionArrangements", action = "PutPayrollDeductionArrangementAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeletePayrollDeductionArrangement",
                routeTemplate: "payroll-deduction-arrangements/{id}",
                defaults: new { controller = "PayrollDeductionArrangements", action = "DeletePayrollDeductionArrangementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region PayrollDeductionArrangementChangeReasons

            routes.MapHttpRoute(
               name: "GetHedmPayrollDeductionArrangementChangeReasons",
               routeTemplate: "payroll-deduction-arrangement-change-reasons",
               defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "GetAllPayrollDeductionArrangementChangeReasonsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetHedmPayrollDeductionArrangementChangeReasons",
                routeTemplate: "payroll-deduction-arrangement-change-reasons",
                defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "GetAllPayrollDeductionArrangementChangeReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmPayrollDeductionArrangementChangeReasonById",
                routeTemplate: "payroll-deduction-arrangement-change-reasons/{id}",
                defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "GetPayrollDeductionArrangementChangeReasonByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPayrollDeductionArrangementChangeReasonById",
                routeTemplate: "payroll-deduction-arrangement-change-reasons/{id}",
                defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "GetPayrollDeductionArrangementChangeReasonByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmPayrollDeductionArrangementChangeReason",
                routeTemplate: "payroll-deduction-arrangement-change-reasons",
                defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "PostPayrollDeductionArrangementChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmPayrollDeductionArrangementChangeReason",
                routeTemplate: "payroll-deduction-arrangement-change-reasons/{id}",
                defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "PutPayrollDeductionArrangementChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7)),
                }
            );

            routes.MapHttpRoute(
                name: "DeletePayrollDeductionArrangementChangeReason",
                routeTemplate: "payroll-deduction-arrangement-change-reasons/{id}",
                defaults: new { controller = "PayrollDeductionArrangementChangeReasons", action = "DeletePayrollDeductionArrangementChangeReasonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region PayrollDirectDeposits

            routes.MapHttpRoute(
                name: "GetPayrollDepositDirectives",
                routeTemplate: "payroll-deposit-directives",
                defaults: new { controller = "PayrollDepositDirectives", action = "GetPayrollDepositDirectivesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            routes.MapHttpRoute(
                name: "GetPayrollDepositDirective",
                routeTemplate: "payroll-deposit-directives/{id}",
                defaults: new { controller = "PayrollDepositDirectives", action = "GetPayrollDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            routes.MapHttpRoute(
                name: "UpdatePayrollDepositDirectives",
                routeTemplate: "payroll-deposit-directives",
                defaults: new { controller = "PayrollDepositDirectives", action = "UpdatePayrollDepositDirectivesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            routes.MapHttpRoute(
                name: "UpdatePayrollDepositDirective",
                routeTemplate: "payroll-deposit-directives/{id}",
                defaults: new { controller = "PayrollDepositDirectives", action = "UpdatePayrollDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreatePayrollDepositDirective",
                routeTemplate: "payroll-deposit-directives",
                defaults: new { controller = "PayrollDepositDirectives", action = "CreatePayrollDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeletePayrollDepositDirective",
                routeTemplate: "payroll-deposit-directives/{id}",
                defaults: new { controller = "PayrollDepositDirectives", action = "DeletePayrollDepositDirectiveAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeletePayrollDepositsDirective",
                routeTemplate: "payroll-deposit-directives",
                defaults: new { controller = "PayrollDepositDirectives", action = "DeletePayrollDepositDirectivesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "AuthenticatePayrollDepositDirectives",
                routeTemplate: "payroll-deposit-directives",
                defaults: new { controller = "PayrollDepositDirectives", action = "PostPayrollDepositDirectivesAuthenticationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianStepUpAuthenticationFormat, 1))
                }
            );
            routes.MapHttpRoute(
                name: "AuthenticatePayrollDepositDirective",
                routeTemplate: "payroll-deposit-directives/{id}",
                defaults: new { controller = "PayrollDepositDirectives", action = "PostPayrollDepositDirectiveAuthenticationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianStepUpAuthenticationFormat, 1))
                }
            );

            #endregion

            #region PayStatements
            routes.MapHttpRoute(
                name: "GetPayStatementSummariesAsync",
                routeTemplate: "pay-statements",
                defaults: new { controller = "PayStatements", action = "GetPayStatementSummariesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPayStatementPdf",
                routeTemplate: "pay-statements/{id}",
                defaults: new { controller = "PayStatements", action = "GetPayStatementPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
               name: "QueryMultiplePayStatementPdfs",
               routeTemplate: "pay-statements",
               defaults: new { controller = "PayStatements", action = "QueryPayStatementPdfs" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianPDFMediaTypeFormat, 1))
               }
           );

            routes.MapHttpRoute(
                name: "GetPayStatementConfigurationAsync",
                routeTemplate: "pay-statement-configuration",
                defaults: new { controller = "PayStatementConfiguration", action = "GetPayStatementConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Payment

            routes.MapHttpRoute(
                name: "ConfirmStudentPayment",
                routeTemplate: "payment/confirm",
                defaults: new { controller = "Payment", action = "GetPaymentConfirmation" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostProcessElectronicCheck",
                routeTemplate: "payment/echeck",
                defaults: new { controller = "Payment", action = "PostProcessElectronicCheck" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)

                }
            );

            routes.MapHttpRoute(
                name: "GetCheckPayerInformation",
                routeTemplate: "payment/echeck/payer/{personId}",
                defaults: new { controller = "Payment", action = "GetCheckPayerInformation" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostProcessStudentPayment",
                routeTemplate: "payment/process",
                defaults: new { controller = "Payment", action = "PostPaymentProvider" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetCashReceipt",
                routeTemplate: "payment/receipt",
                defaults: new { controller = "Payment", action = "GetPaymentReceipt" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentDistributions",
                routeTemplate: "payment/distributions/{studentId}",
                defaults: new { controller = "Payment", action = "GetPaymentDistributions" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region PaymentControls

            routes.MapHttpRoute(
                name: "GetRegistrationPaymentControlDocument",
                routeTemplate: "payment-controls/{id}",
                defaults: new { controller = "PaymentControls", action = "GetDocument" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "documentId" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRegistrationPaymentControl",
                routeTemplate: "payment-controls/{id}",
                defaults: new { controller = "PaymentControls", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentPaymentControls",
                routeTemplate: "payment-controls/student/{studentId}",
                defaults: new { controller = "PaymentControls", action = "GetStudent" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route.  Please use PostRegistrationTermsAcceptance2 below.
            routes.MapHttpRoute(
                name: "PostRegistrationTermsAcceptance",
                routeTemplate: "payment-controls/accept-terms",
                defaults: new { controller = "PaymentControls", action = "PostAcceptTerms" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "PostRegistrationTermsAcceptance2",
                routeTemplate: "payment-controls/accept-terms",
                defaults: new { controller = "PaymentControls", action = "PostAcceptTerms2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentControlOptions",
                routeTemplate: "payment-controls/options/{id}",
                defaults: new { controller = "PaymentControls", action = "GetOptions" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutRegistrationPaymentControl",
                routeTemplate: "payment-controls",
                defaults: new { controller = "PaymentControls", action = "Put" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRegistrationPaymentSummary",
                routeTemplate: "payment-controls/summary/{id}",
                defaults: new { controller = "PaymentControls", action = "GetSummary" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostStartRegistrationPayment",
                routeTemplate: "payment-controls/start-payment",
                defaults: new { controller = "PaymentControls", action = "PostStartPayment" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See GetRegistrationTermsApproval2 below.
            routes.MapHttpRoute(
                name: "GetRegistrationTermsApproval",
                routeTemplate: "payment-controls/terms-approval/{id}",
                defaults: new { controller = "PaymentControls", action = "GetTermsApproval" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetRegistrationTermsApproval2",
                routeTemplate: "payment-controls/terms-approval/{id}",
                defaults: new { controller = "PaymentControls", action = "GetTermsApproval2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentControlProposedPaymentPlan",
                routeTemplate: "payment-controls/proposed-plan/{payControlId}/{receivableType}",
                defaults: new { controller = "PaymentControls", action = "GetProposedPaymentPlan" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region PaymentPlans

            routes.MapHttpRoute(
                name: "GetPaymentPlanTemplate",
                routeTemplate: "payment-plans/templates/{templateId}",
                defaults: new { controller = "PaymentPlans", action = "GetPaymentPlanTemplate" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentPlanTemplates",
                routeTemplate: "payment-plans/templates",
                defaults: new { controller = "PaymentPlans", action = "GetPaymentPlanTemplates" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentPlan",
                routeTemplate: "payment-plans/{paymentPlanId}",
                defaults: new { controller = "PaymentPlans", action = "GetPaymentPlan" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPaymentPlanApproval",
                routeTemplate: "payment-plans/approvals/{approvalId}",
                defaults: new { controller = "PaymentPlans", action = "GetPaymentPlanApproval" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostPaymentPlanTermsAcceptance",
                routeTemplate: "payment-plans/accept-terms",
                defaults: new { controller = "PaymentPlans", action = "PostAcceptTerms" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPlanPaymentSummary",
                routeTemplate: "payment-plans/{planId}/payment-summary",
                defaults: new { controller = "PaymentPlans", action = "GetPlanPaymentSummary" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetProposedPaymentPlanAsync",
                routeTemplate: "payment-plans/proposed-plan/{personId}",
                defaults: new { controller = "PaymentPlans", action = "GetProposedPaymentPlanAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Payment Transactions

            routes.MapHttpRoute(
              name: "GetPaymentTransactionsByGuidV12",
              routeTemplate: "payment-transactions/{guid}",
              defaults: new { controller = "PaymentTransactions", action = "GetPaymentTransactionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPaymentTransactionsByGuid",
               routeTemplate: "payment-transactions/{guid}",
                  defaults: new { controller = "PaymentTransactions", action = "GetPaymentTransactionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPaymentTransactionsV12",
              routeTemplate: "payment-transactions",
              defaults: new { controller = "PaymentTransactions", action = "GetPaymentTransactionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPaymentTransactions",
               routeTemplate: "payment-transactions",
                  defaults: new { controller = "PaymentTransactions", action = "GetPaymentTransactionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPaymentTransactionsV12",
              routeTemplate: "payment-transactions/{guid}",
              defaults: new { controller = "PaymentTransactions", action = "PutPaymentTransactionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostPaymentTransactionsV12",
               routeTemplate: "payment-transactions",
               defaults: new { controller = "PaymentTransactions", action = "PostPaymentTransactionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePaymentTransactions",
                routeTemplate: "payment-transactions/{guid}",
                defaults: new { controller = "PaymentTransactions", action = "DeletePaymentTransactionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Payment Transactions

            #region Person

            //WARNING: This route is obsolete as of HEDM version 4.5. Replaced by person-holds endpoint.
            routes.MapHttpRoute(
                name: "GetActivePersonRestrictionTypes",
                routeTemplate: "persons/{guid}/restriction-types",
                defaults: new { controller = "Persons", action = "GetActivePersonRestrictionTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(HedtechIntegrationMediaTypeFormat, 1), string.Format(HedtechIntegrationMediaTypeFormat, 3))
                }
            );

            routes.MapHttpRoute(
                name: "GetMatchingPersons2",
                routeTemplate: "qapi/persons",
                defaults: new { controller = "Persons", action = "QueryPerson2ByPostAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonMatchingResults",
                routeTemplate: "qapi/persons",
                defaults: new { controller = "Persons", action = "QueryPersonMatchResultsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonProfile",
                routeTemplate: "persons/{personId}",
                defaults: new { controller = "Persons", action = "GetProfileAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, "application/vnd.ellucian-person-profile.v1+json"),
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonProxyDetails",
                routeTemplate: "persons/{personId}",
                defaults: new { controller = "Persons", action = "GetPersonProxyDetailsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianProxyUserFormat, 1))
                }
                );

            //WARNING: Obsolete as of API 1.16. Use version 2 of this API instead.
            routes.MapHttpRoute(
                name: "UpdatePersonProfile",
                routeTemplate: "persons/{personId}",
                defaults: new { controller = "Persons", action = "PutProfileAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false, "application/vnd.ellucian-person-profile.v1+json"),
                }
            );


            routes.MapHttpRoute(
                name: "UpdatePersonProfile2",
                routeTemplate: "persons/{personId}",
                defaults: new { controller = "Persons", action = "PutProfile2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, false, "application/vnd.ellucian-person-profile.v2+json"),
                }
            );

            //WARNING: Obsolete as of API 1.16. Use version 2 of this API instead.
            routes.MapHttpRoute(
                name: "GetEmergencyInformation",
                routeTemplate: "persons/{personId}/emergency-information",
                defaults: new { controller = "Persons", action = "GetEmergencyInformationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetEmergencyInformation2Async",
                routeTemplate: "persons/{personId}/emergency-information",
                defaults: new { controller = "Persons", action = "GetEmergencyInformation2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutEmergencyInformation",
                routeTemplate: "persons/{personId}/emergency-information",
                defaults: new { controller = "Persons", action = "PutEmergencyInformation" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonMatches",
                routeTemplate: "qapi/persons/matches",
                defaults: new { controller = "Persons", action = "QueryPersonMatchesByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryPersonNames",
                routeTemplate: "qapi/persons",
                defaults: new { controller = "Persons", action = "QueryPersonNamesByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-person-name-search.v{0}+json", 1)),
                }
            );

            #endregion

            #region Person HEDM V8 V12 V12.1.0

            routes.MapHttpRoute(
                name: "GetHedmPersonByGuidV12.1.0",
                routeTemplate: "persons/{guid}",
                defaults: new { controller = "Persons", action = "GetPerson5ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmPersonByGuidV12",
                routeTemplate: "persons/{guid}",
                defaults: new { controller = "Persons", action = "GetPerson4ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmPersonByGuidV8",
               routeTemplate: "persons/{guid}",
               defaults: new { controller = "Persons", action = "GetPersonByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmPerson",
               routeTemplate: "persons/{guid}",
               defaults: new { controller = "Persons", action = "GetPerson2ByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetHedmPersonByGuid",
                routeTemplate: "persons/{guid}",
                defaults: new { controller = "Persons", action = "GetPerson5ByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("12.1.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmPersonV12.1.0",
               routeTemplate: "persons",
                defaults: new { controller = "Persons", action = "GetPerson5Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
                constraints: new
                {

                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmPersonV12",
               routeTemplate: "persons",
                defaults: new { controller = "Persons", action = "GetPerson4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {

                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmPersonV8",
              routeTemplate: "persons",
               defaults: new { controller = "Persons", action = "GetPerson3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {

                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
           );


            routes.MapHttpRoute(
                name: "GetHedmFilteredPerson",
                routeTemplate: "persons",
                defaults: new { controller = "Persons", action = "GetPerson2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHedmPerson",
               routeTemplate: "persons",
                defaults: new { controller = "Persons", action = "GetPerson5Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0") },
                constraints: new
                {

                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("12.1.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
                }
            );

            routes.MapHttpRoute(
               name: "CreateHedmPersonV12.1.0",
               routeTemplate: "persons",
               defaults: new { controller = "Persons", action = "PostPerson5Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
               }
            );

            routes.MapHttpRoute(
               name: "CreateHedmPersonV12",
               routeTemplate: "persons",
               defaults: new { controller = "Persons", action = "PostPerson4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
           );

            routes.MapHttpRoute(
                name: "CreateHedmPersonV8",
                routeTemplate: "persons",
                defaults: new { controller = "Persons", action = "PostPerson3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );


            routes.MapHttpRoute(
                name: "CreateHedmPersonV6",
                routeTemplate: "persons",
                defaults: new { controller = "Persons", action = "PostPerson2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
              name: "GetHedmMatchingPersonsV12.1.0",
              routeTemplate: "qapi/persons",
              defaults: new { controller = "Persons", action = "QueryPerson5ByPostAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
          );

            routes.MapHttpRoute(
                name: "GetHedmMatchingPersonsV12",
                routeTemplate: "qapi/persons",
                defaults: new { controller = "Persons", action = "QueryPerson4ByPostAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmMatchingPersonsV8",
                routeTemplate: "qapi/persons",
                defaults: new { controller = "Persons", action = "QueryPerson3ByPostAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
              name: "UpdateHedmPersonV12.1.0",
              routeTemplate: "persons/{guid}",
              defaults: new { controller = "Persons", action = "PutPerson5Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("12.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "12.1.0"))
              }
           );

            routes.MapHttpRoute(
               name: "UpdateHedmPersonV12",
               routeTemplate: "persons/{guid}",
               defaults: new { controller = "Persons", action = "PutPerson4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
            );

            routes.MapHttpRoute(
                name: "UpdateHedmPersonV8",
                routeTemplate: "persons/{guid}",
                defaults: new { controller = "Persons", action = "PutPerson3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );


            routes.MapHttpRoute(
                name: "UpdateHedmPersonV6",
                routeTemplate: "persons/{guid}",
                defaults: new { controller = "Persons", action = "PutPerson2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmPerson",
                routeTemplate: "persons/{id}",
                defaults: new { controller = "Persons", action = "DeletePersonAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "PersonsUnsupported",
              routeTemplate: "persons/{id}",
               defaults: new { controller = "Persons", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            routes.MapHttpRoute(
              name: "PersonsQapiUnsupported",
              routeTemplate: "qapi/persons",
               defaults: new { controller = "Persons", action = "NotAcceptableStatusException" },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion

            #region  Person Emergency Contacts

            routes.MapHttpRoute(
              name: "GetPersonEmergencyContactsByGuidV1.0.0",
              routeTemplate: "person-emergency-contacts/{guid}",
              defaults: new { controller = "PersonEmergencyContacts", action = "GetPersonEmergencyContactsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonEmergencyContactsByGuid2",
               routeTemplate: "person-emergency-contacts/{guid}",
                  defaults: new { controller = "PersonEmergencyContacts", action = "GetPersonEmergencyContactsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonEmergencyContactsV1.0.0",
              routeTemplate: "person-emergency-contacts",
              defaults: new { controller = "PersonEmergencyContacts", action = "GetPersonEmergencyContactsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonEmergencyContacts",
               routeTemplate: "person-emergency-contacts",
                  defaults: new { controller = "PersonEmergencyContacts", action = "GetPersonEmergencyContactsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonEmergencyContactsV1.0.0",
              routeTemplate: "person-emergency-contacts/{guid}",
              defaults: new { controller = "PersonEmergencyContacts", action = "PutPersonEmergencyContactsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonEmergencyContactsV1.0.0",
               routeTemplate: "person-emergency-contacts",
               defaults: new { controller = "PersonEmergencyContacts", action = "PostPersonEmergencyContactsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonEmergencyContacts",
                routeTemplate: "person-emergency-contacts/{guid}",
                defaults: new { controller = "PersonEmergencyContacts", action = "DeletePersonEmergencyContactsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "PersonEmergencyContactsUnsupported",
            routeTemplate: "person-emergency-contacts/{id}",
             defaults: new { controller = "PersonEmergencyContacts", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Person Emergency Contacts

            #region  Person Achievements

            routes.MapHttpRoute(
              name: "GetPersonAchievementsByGuidV10",
              routeTemplate: "person-achievements/{guid}",
              defaults: new { controller = "PersonAchievements", action = "GetPersonAchievementByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonAchievementsByGuid",
               routeTemplate: "person-achievements/{guid}",
                  defaults: new { controller = "PersonAchievements", action = "GetPersonAchievementByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonAchievementsV10",
              routeTemplate: "person-achievements",
              defaults: new { controller = "PersonAchievements", action = "GetPersonAchievementsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetPersonAchievements",
               routeTemplate: "person-achievements",
                  defaults: new { controller = "PersonAchievements", action = "GetPersonAchievementsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonAchievementsV10",
              routeTemplate: "person-achievements/{guid}",
              defaults: new { controller = "PersonAchievements", action = "PutPersonAchievementAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonAchievementsV10",
               routeTemplate: "person-achievements",
               defaults: new { controller = "PersonAchievements", action = "PostPersonAchievementAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonAchievements",
                routeTemplate: "person-achievements/{guid}",
                defaults: new { controller = "PersonAchievements", action = "DeletePersonAchievementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Person Achievements

            #region  Person Beneficiaries  TEMPORARILY REMOVED

            //  routes.MapHttpRoute(
            //    name: "GetPersonBeneficiariesByGuidV11",
            //    routeTemplate: "person-beneficiaries/{guid}",
            //    defaults: new { controller = "PersonBeneficiaries", action = "GetPersonBeneficiariesByGuidAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);

            //  routes.MapHttpRoute(
            //     name: "DefaultGetPersonBeneficiariesByGuid",
            //     routeTemplate: "person-beneficiaries/{guid}",
            //        defaults: new { controller = "PersonBeneficiaries", action = "GetPersonBeneficiariesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
            //     constraints: new
            //     {
            //         httpMethod = new HttpMethodConstraint("GET"),
            //         headerVersion = new HeaderVersionConstraint(11, true)
            //     }
            // );


            //  routes.MapHttpRoute(
            //    name: "GetPersonBeneficiariesV11",
            //    routeTemplate: "person-beneficiaries",
            //    defaults: new { controller = "PersonBeneficiaries", action = "GetPersonBeneficiariesAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);

            //  routes.MapHttpRoute(
            //     name: "GetPersonBeneficiaries",
            //     routeTemplate: "person-beneficiaries",
            //        defaults: new { controller = "PersonBeneficiaries", action = "GetPersonBeneficiariesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
            //     constraints: new
            //     {
            //         httpMethod = new HttpMethodConstraint("GET"),
            //         headerVersion = new HeaderVersionConstraint(11, true)
            //     }
            // );

            //  routes.MapHttpRoute(
            //    name: "PutPersonBeneficiariesV11",
            //    routeTemplate: "person-beneficiaries/{guid}",
            //    defaults: new { controller = "PersonBeneficiaries", action = "PutPersonBeneficiariesAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);


            //  routes.MapHttpRoute(
            //     name: "PostPersonBeneficiariesV11",
            //     routeTemplate: "person-beneficiaries",
            //     defaults: new { controller = "PersonBeneficiaries", action = "PostPersonBeneficiariesAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("POST"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            // );

            //  routes.MapHttpRoute(
            //      name: "DefaultDeletePersonBeneficiaries",
            //      routeTemplate: "person-beneficiaries/{guid}",
            //      defaults: new { controller = "PersonBeneficiaries", action = "DeletePersonBeneficiariesAsync" },
            //      constraints: new
            //      {
            //          httpMethod = new HttpMethodConstraint("DELETE"),

            //      }
            // );
            #endregion Person Beneficiaries

            #region  Person Benefit Dependents  TEMPORARILY REMOVED

            //  routes.MapHttpRoute(
            //    name: "GetPersonBenefitDependentsByGuidV11",
            //    routeTemplate: "person-benefit-dependents/{guid}",
            //    defaults: new { controller = "PersonBenefitDependents", action = "GetPersonBenefitDependentsByGuidAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);

            //  routes.MapHttpRoute(
            //     name: "DefaultGetPersonBenefitDependentsByGuid",
            //     routeTemplate: "person-benefit-dependents/{guid}",
            //        defaults: new { controller = "PersonBenefitDependents", action = "GetPersonBenefitDependentsByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
            //     constraints: new
            //     {
            //         httpMethod = new HttpMethodConstraint("GET"),
            //         headerVersion = new HeaderVersionConstraint(11, true)
            //     }
            // );


            //  routes.MapHttpRoute(
            //    name: "GetPersonBenefitDependentsV11",
            //    routeTemplate: "person-benefit-dependents",
            //    defaults: new { controller = "PersonBenefitDependents", action = "GetPersonBenefitDependentsAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);

            //  routes.MapHttpRoute(
            //     name: "GetPersonBenefitDependents",
            //     routeTemplate: "person-benefit-dependents",
            //        defaults: new { controller = "PersonBenefitDependents", action = "GetPersonBenefitDependentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
            //     constraints: new
            //     {
            //         httpMethod = new HttpMethodConstraint("GET"),
            //         headerVersion = new HeaderVersionConstraint(11, true)
            //     }
            // );

            //  routes.MapHttpRoute(
            //    name: "PutPersonBenefitDependentsV11",
            //    routeTemplate: "person-benefit-dependents/{guid}",
            //    defaults: new { controller = "PersonBenefitDependents", action = "PutPersonBenefitDependentsAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            //);


            //  routes.MapHttpRoute(
            //     name: "PostPersonBenefitDependentsV11",
            //     routeTemplate: "person-benefit-dependents",
            //     defaults: new { controller = "PersonBenefitDependents", action = "PostPersonBenefitDependentsAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("POST"),
            //        headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
            //    }
            // );

            //  routes.MapHttpRoute(
            //      name: "DefaultDeletePersonBenefitDependents",
            //      routeTemplate: "person-benefit-dependents/{guid}",
            //      defaults: new { controller = "PersonBenefitDependents", action = "DeletePersonBenefitDependentsAsync" },
            //      constraints: new
            //      {
            //          httpMethod = new HttpMethodConstraint("DELETE"),

            //      }
            // );
            #endregion Person Benefit Dependents

            #region PersonContacts

            routes.MapHttpRoute(
                name: "GetPersonEmergencyContactsByGuid",
                routeTemplate: "person-contacts/{id}",
                defaults: new { controller = "PersonContacts", action = "GetPersonEmergencyContactsByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonEmergencyContactsByGuid",
                routeTemplate: "person-contacts/{id}",
                   defaults: new { controller = "PersonContacts", action = "GetPersonEmergencyContactsByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonEmergencyContactsAsync",
                routeTemplate: "person-contacts",
                defaults: new { controller = "PersonContacts", action = "GetPersonEmergencyContactsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonEmergencyContactsAsync",
                routeTemplate: "person-contacts",
                   defaults: new { controller = "PersonContacts", action = "GetPersonEmergencyContactsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PostPersonEmergencyContactAsync",
                routeTemplate: "person-contacts",
                defaults: new { controller = "PersonContacts", action = "PostPersonContactAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutPersonEmergencyContactAsync",
                routeTemplate: "person-contacts/{id}",
                defaults: new { controller = "PersonContacts", action = "PutPersonContactAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeletePersonEmergencyContactAsync",
                routeTemplate: "person-contacts/{id}",
                defaults: new { controller = "PersonContacts", action = "DeletePersonContactAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Person Employment References

            routes.MapHttpRoute(
              name: "GetPersonEmploymentReferencesByGuidV10",
              routeTemplate: "person-employment-references/{guid}",
              defaults: new { controller = "PersonEmploymentReferences", action = "GetPersonEmploymentReferenceByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonEmploymentReferencesByGuid",
               routeTemplate: "person-employment-references/{guid}",
                  defaults: new { controller = "PersonEmploymentReferences", action = "GetPersonEmploymentReferenceByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonEmploymentReferencesV10",
              routeTemplate: "person-employment-references",
              defaults: new { controller = "PersonEmploymentReferences", action = "GetPersonEmploymentReferencesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetPersonEmploymentReferences",
               routeTemplate: "person-employment-references",
                  defaults: new { controller = "PersonEmploymentReferences", action = "GetPersonEmploymentReferencesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonEmploymentReferencesV10",
              routeTemplate: "person-employment-references/{guid}",
              defaults: new { controller = "PersonEmploymentReferences", action = "PutPersonEmploymentReferenceAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonEmploymentReferencesV10",
               routeTemplate: "person-employment-references",
               defaults: new { controller = "PersonEmploymentReferences", action = "PostPersonEmploymentReferenceAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonEmploymentReferences",
                routeTemplate: "person-employment-references/{guid}",
                defaults: new { controller = "PersonEmploymentReferences", action = "DeletePersonEmploymentReferenceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Person Employment References

            #region  Person Employment Proficiencies

            routes.MapHttpRoute(
              name: "GetPersonEmploymentProficienciesByGuidV10",
              routeTemplate: "person-employment-proficiencies/{guid}",
              defaults: new { controller = "PersonEmploymentProficiencies", action = "GetPersonEmploymentProficienciesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonEmploymentProficienciesByGuid",
               routeTemplate: "person-employment-proficiencies/{guid}",
                  defaults: new { controller = "PersonEmploymentProficiencies", action = "GetPersonEmploymentProficienciesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonEmploymentProficienciesV10",
              routeTemplate: "person-employment-proficiencies",
              defaults: new { controller = "PersonEmploymentProficiencies", action = "GetPersonEmploymentProficienciesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetPersonEmploymentProficiencies",
               routeTemplate: "person-employment-proficiencies",
                  defaults: new { controller = "PersonEmploymentProficiencies", action = "GetPersonEmploymentProficienciesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonEmploymentProficienciesV10",
              routeTemplate: "person-employment-proficiencies/{guid}",
              defaults: new { controller = "PersonEmploymentProficiencies", action = "PutPersonEmploymentProficienciesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonEmploymentProficienciesV10",
               routeTemplate: "person-employment-proficiencies",
               defaults: new { controller = "PersonEmploymentProficiencies", action = "PostPersonEmploymentProficienciesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonEmploymentProficiencies",
                routeTemplate: "person-employment-proficiencies/{guid}",
                defaults: new { controller = "PersonEmploymentProficiencies", action = "DeletePersonEmploymentProficienciesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Person Employment Proficiencies

            #region  PersonExternalEducation

            routes.MapHttpRoute(
              name: "GetPersonExternalEducationByGuidV1.0.0",
              routeTemplate: "person-external-education/{guid}",
              defaults: new { controller = "PersonExternalEducation", action = "GetPersonExternalEducationByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonExternalEducationByGuid",
               routeTemplate: "person-external-education/{guid}",
                  defaults: new { controller = "PersonExternalEducation", action = "GetPersonExternalEducationByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonExternalEducationV1.0.0",
              routeTemplate: "person-external-education",
              defaults: new { controller = "PersonExternalEducation", action = "GetPersonExternalEducationAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonExternalEducation",
               routeTemplate: "person-external-education",
                  defaults: new { controller = "PersonExternalEducation", action = "GetPersonExternalEducationAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonExternalEducationV1.0.0",
              routeTemplate: "person-external-education/{guid}",
              defaults: new { controller = "PersonExternalEducation", action = "PutPersonExternalEducationAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonExternalEducationV1.0.0",
               routeTemplate: "person-external-education",
               defaults: new { controller = "PersonExternalEducation", action = "PostPersonExternalEducationAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonExternalEducation",
                routeTemplate: "person-external-education/{guid}",
                defaults: new { controller = "PersonExternalEducation", action = "DeletePersonExternalEducationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "PersonExternalEducationUnsupported",
            routeTemplate: "person-external-education/{id}",
             defaults: new { controller = "PersonExternalEducation", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Person External Education

            #region  Person External Education Credentials

            routes.MapHttpRoute(
              name: "GetPersonExternalEducationCredentialsByGuidV1.0.0",
              routeTemplate: "person-external-education-credentials/{guid}",
              defaults: new { controller = "PersonExternalEducationCredentials", action = "GetPersonExternalEducationCredentialsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetPersonExternalEducationCredentialsByGuid",
               routeTemplate: "person-external-education-credentials/{guid}",
                  defaults: new { controller = "PersonExternalEducationCredentials", action = "GetPersonExternalEducationCredentialsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );


            routes.MapHttpRoute(
              name: "GetPersonExternalEducationCredentialsV1.0.0",
              routeTemplate: "person-external-education-credentials",
              defaults: new { controller = "PersonExternalEducationCredentials", action = "GetPersonExternalEducationCredentialsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetPersonExternalEducationCredentials",
               routeTemplate: "person-external-education-credentials",
                  defaults: new { controller = "PersonExternalEducationCredentials", action = "GetPersonExternalEducationCredentialsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "PutPersonExternalEducationCredentialsV1.0.0",
              routeTemplate: "person-external-education-credentials/{guid}",
              defaults: new { controller = "PersonExternalEducationCredentials", action = "PutPersonExternalEducationCredentialsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );


            routes.MapHttpRoute(
               name: "PostPersonExternalEducationCredentialsV1.0.0",
               routeTemplate: "person-external-education-credentials",
               defaults: new { controller = "PersonExternalEducationCredentials", action = "PostPersonExternalEducationCredentialsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonExternalEducationCredentials",
                routeTemplate: "person-external-education-credentials/{guid}",
                defaults: new { controller = "PersonExternalEducationCredentials", action = "DeletePersonExternalEducationCredentialsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            routes.MapHttpRoute(
            name: "PersonExternalEducationCredentialsUnsupported",
            routeTemplate: "person-external-education-credentials/{id}",
             defaults: new { controller = "PersonExternalEducationCredentials", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );

            #endregion Person External Education Credentials

            #region  Personal Pronouns

            routes.MapHttpRoute(
              name: "GetPersonalPronounsByGuidV1.0.0",
              routeTemplate: "personal-pronouns/{guid}",
              defaults: new { controller = "PersonalPronounTypes", action = "GetPersonalPronounsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetPersonalPronounsByGuid",
               routeTemplate: "personal-pronouns/{guid}",
                  defaults: new { controller = "PersonalPronounTypes", action = "GetPersonalPronounsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "GetPersonalPronounsV1.0.0",
              routeTemplate: "personal-pronouns",
              defaults: new { controller = "PersonalPronounTypes", action = "GetPersonalPronounsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetPersonalPronouns",
               routeTemplate: "personal-pronouns",
                  defaults: new { controller = "PersonalPronounTypes", action = "GetPersonalPronounsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "PutPersonalPronounsV1.0.0",
              routeTemplate: "personal-pronouns/{guid}",
              defaults: new { controller = "PersonalPronounTypes", action = "PutPersonalPronounsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "PostPersonalPronounsV1.0.0",
               routeTemplate: "personal-pronouns",
               defaults: new { controller = "PersonalPronounTypes", action = "PostPersonalPronounsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonalPronouns",
                routeTemplate: "personal-pronouns/{guid}",
                defaults: new { controller = "PersonalPronounTypes", action = "DeletePersonalPronounsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            routes.MapHttpRoute(
            name: "PersonalPronounsUnsupported",
            routeTemplate: "personal-pronouns/{id}",
             defaults: new { controller = "PersonalPronounTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );

            #endregion Personal Pronouns

            #region PersonAgreements

            routes.MapHttpRoute(
                name: "QueryPersonAgreementsByPostAsync",
                routeTemplate: "qapi/person-agreements",
                defaults: new { controller = "PersonAgreements", action = "QueryPersonAgreementsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdatePersonAgreementAsync",
                routeTemplate: "person-agreements",
                defaults: new { controller = "PersonAgreements", action = "UpdatePersonAgreementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region PersonalPronounTypes

            routes.MapHttpRoute(
                name: "GetPersonalPronounTypes",
                routeTemplate: "personal-pronoun-types",
                defaults: new { controller = "PersonalPronounTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region PersonalRelationshipStatuses

            routes.MapHttpRoute(
                name: "GetPersonalRelationshipStatusByGuid",
                routeTemplate: "personal-relationship-statuses/{id}",
                defaults: new { controller = "PersonalRelationshipStatuses", action = "GetPersonalRelationshipStatusByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonalRelationshipStatusByGuid",
                routeTemplate: "personal-relationship-statuses/{id}",
                   defaults: new { controller = "PersonalRelationshipStatuses", action = "GetPersonalRelationshipStatusByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetEedmPersonalRelationshipStatuses",
                routeTemplate: "personal-relationship-statuses",
                defaults: new { controller = "PersonalRelationshipStatuses", action = "GetPersonalRelationshipStatusesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEedmPersonalRelationshipStatuses",
                routeTemplate: "personal-relationship-statuses",
                   defaults: new { controller = "PersonalRelationshipStatuses", action = "GetPersonalRelationshipStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostPersonalRelationshipStatuses",
                routeTemplate: "personal-relationship-statuses",
                defaults: new { controller = "PersonalRelationshipStatuses", action = "PostPersonalRelationshipStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutPersonalRelationshipStatuses",
                routeTemplate: "personal-relationship-statuses/{id}",
                defaults: new { controller = "PersonalRelationshipStatuses", action = "PutPersonalRelationshipStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeletePersonalRelationshipStatuses",
                routeTemplate: "personal-relationship-statuses/{id}",
                defaults: new { controller = "PersonalRelationshipStatuses", action = "DeletePersonalRelationshipStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region PersonFilters

            routes.MapHttpRoute(
               name: "GetPersonFilterByIdV6_1_0",
               routeTemplate: "person-filters/{id}",
               defaults: new { controller = "PersonFilters", action = "GetPersonFilterByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0"))
               }
           );

            routes.MapHttpRoute(
                name: "GetPersonFilterByIdV6",
                routeTemplate: "person-filters/{id}",
                defaults: new { controller = "PersonFilters", action = "GetPersonFilterByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonFilterById",
                routeTemplate: "person-filters/{id}",
                   defaults: new { controller = "PersonFilters", action = "GetPersonFilterByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "GetPersonFiltersV6_1_0",
             routeTemplate: "person-filters",
               defaults: new { controller = "PersonFilters", action = "GetPersonFilters2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0"))
             }
         );

            routes.MapHttpRoute(
                name: "GetPersonFiltersV6",
              routeTemplate: "person-filters",
                defaults: new { controller = "PersonFilters", action = "GetPersonFiltersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
                name: "DefaultGetPersonFilters",
                routeTemplate: "person-filters",
                   defaults: new { controller = "PersonFilters", action = "GetPersonFilters2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "PutPersonFilterV6_1_0",
                routeTemplate: "person-filters/{id}",
                defaults: new { controller = "PersonFilters", action = "PutPersonFilterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PutPersonFilterV6",
                routeTemplate: "person-filters/{id}",
                defaults: new { controller = "PersonFilters", action = "PutPersonFilterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostPersonFilterV6_1_0",
                routeTemplate: "person-filters",
                defaults: new { controller = "PersonFilters", action = "PostPersonFilterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("6.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "6.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostPersonFilterV6",
                routeTemplate: "person-filters",
                defaults: new { controller = "PersonFilters", action = "PostPersonFilterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeletePersonFilter",
                routeTemplate: "person-filters/{id}",
                defaults: new { controller = "PersonFilters", action = "DeletePersonFilterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
            name: "PersonFilterUnsupported",
            routeTemplate: "person-filters/{id}",
             defaults: new { controller = "PersonFilters", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );
            #endregion

            #region PersonHold

            routes.MapHttpRoute(
                name: "GetActivePersonHoldByIdV6",
                routeTemplate: "person-holds/{id}",
                defaults: new { controller = "PersonHolds", action = "GetPersonsActiveHoldAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetActivePersonHoldById",
                routeTemplate: "person-holds/{id}",
                   defaults: new { controller = "PersonHolds", action = "GetPersonsActiveHoldAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
              name: "GetActivePersonHoldsByPersonIdV6",
                routeTemplate: "person-holds",
              defaults: new { controller = "PersonHolds", action = "GetPersonsActiveHoldsByPersonIdAsync", isEedmSupported = true },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "person" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
              name: "DefaultGetActivePersonHoldsByPersonId",
              routeTemplate: "person-holds",
                 defaults: new { controller = "PersonHolds", action = "GetPersonsActiveHoldsByPersonIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "person" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetActivePersonHoldsV6",
              routeTemplate: "person-holds",
                defaults: new { controller = "PersonHolds", action = "GetPersonsActiveHoldsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
                name: "DefaultGetActivePersonHolds",
                routeTemplate: "person-holds",
                   defaults: new { controller = "PersonHolds", action = "GetPersonsActiveHoldsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutActivePersonHoldV6",
                routeTemplate: "person-holds/{id}",
                defaults: new { controller = "PersonHolds", action = "PutPersonHoldAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostActivePersonHoldV6",
                routeTemplate: "person-holds",
                defaults: new { controller = "PersonHolds", action = "PostPersonHoldAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteActivePersonHold",
                routeTemplate: "person-holds/{id}",
                defaults: new { controller = "PersonHolds", action = "DeletePersonHoldAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region PersonHoldTypes

            routes.MapHttpRoute(
                name: "GetPersonHoldTypeByIdV6",
                routeTemplate: "person-hold-types/{id}",
                defaults: new { controller = "PersonHoldTypes", action = "GetPersonHoldTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonHoldTypeById",
                routeTemplate: "person-hold-types/{id}",
                   defaults: new { controller = "PersonHoldTypes", action = "GetPersonHoldTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetPersonHoldTypesV6",
               routeTemplate: "person-hold-types",
               defaults: new { controller = "PersonHoldTypes", action = "GetPersonHoldTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonHoldTypes",
                routeTemplate: "person-hold-types",
                   defaults: new { controller = "PersonHoldTypes", action = "GetPersonHoldTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutPersonHoldTypesV6",
                routeTemplate: "person-hold-types/{id}",
                defaults: new { controller = "PersonHoldTypes", action = "PutPersonHoldTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
           );

            routes.MapHttpRoute(
                name: "PostPersonHoldTypesV6",
                routeTemplate: "person-hold-types",
                defaults: new { controller = "PersonHoldTypes", action = "PostPersonHoldTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
             );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonHoldTypes",
                routeTemplate: "person-hold-types/{id}",
                defaults: new { controller = "PersonHoldTypes", action = "DeletePersonHoldTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );
            #endregion

            #region PersonsCredentials

            routes.MapHttpRoute(
                name: "GetHedmPersonCredentialsV11.1.0",
                routeTemplate: "persons-credentials",
                defaults: new { controller = "Persons", action = "GetPersonCredentials4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmPersonCredentialsV11",
                routeTemplate: "persons-credentials",
                defaults: new { controller = "Persons", action = "GetPersonCredentials3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmPersonCredentialsV8",
                routeTemplate: "persons-credentials",
                defaults: new { controller = "Persons", action = "GetPersonCredentials2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmPersonCredentialsV6",
               routeTemplate: "persons-credentials",
               defaults: new { controller = "Persons", action = "GetPersonCredentialsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetHedmPersonCredentials",
               routeTemplate: "persons-credentials",
                  defaults: new { controller = "Persons", action = "GetPersonCredentials4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true)
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmPersonCredentialsByGuidV11.1.0",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "GetPersonCredential4ByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmPersonCredentialsByGuidV11",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "GetPersonCredential3ByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmPersonCredentialsByGuidV8",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "GetPersonCredential2ByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmPersonCredentialsByGuidV6",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "GetPersonCredentialByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetHedmPersonCredentialsByGuid",
               routeTemplate: "persons-credentials/{id}",
                  defaults: new { controller = "Persons", action = "GetPersonCredential4ByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutHedmPersonCredentialsV11.1.0",
              routeTemplate: "persons-credentials/{id}",
              defaults: new { controller = "Persons", action = "PutPersonCredentialAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
              }
           );

            routes.MapHttpRoute(
               name: "PutHedmPersonCredentialsV11",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "PutPersonCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );

            routes.MapHttpRoute(
               name: "PutHedmPersonCredentialsV8",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "PutPersonCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
               name: "PutHedmPersonCredentialsV6",
               routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "PutPersonCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PostHedmPersonCredentialsV11.1.0",
               routeTemplate: "persons-credentials",
               defaults: new { controller = "Persons", action = "PostPersonCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
               }
            );

            routes.MapHttpRoute(
               name: "PostHedmPersonCredentialsV11",
               routeTemplate: "persons-credentials",
               defaults: new { controller = "Persons", action = "PostPersonCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );

            routes.MapHttpRoute(
              name: "PostHedmPersonCredentialsV8",
              routeTemplate: "persons-credentials",
              defaults: new { controller = "Persons", action = "PostPersonCredentialAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
               name: "PostHedmPersonCredentialsV6",
               routeTemplate: "persons-credentials",
               defaults: new { controller = "Persons", action = "PostPersonCredentialAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteHedmPersonCredentials",
                routeTemplate: "persons-credentials/{id}",
                defaults: new { controller = "Persons", action = "DeletePersonCredentialAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "PersonsCredentialsUnsupported",
              routeTemplate: "persons-credentials/{id}",
               defaults: new { controller = "Persons", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            #endregion

            #region PersonStipend
            routes.MapHttpRoute(
                name: "GetPersonStipendAsync",
                routeTemplate: "person-stipend",
                defaults: new { controller = "PersonStipend", action = "GetPersonStipendAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region  PersonMatchingRequests

            routes.MapHttpRoute(
                name: "PutPersonMatchingRequestsInitiationsProspectsV1.0.0",
                routeTemplate: "person-matching-requests/{guid}",
                defaults: new
                {
                    controller = "PersonMatchingRequests",
                    action = "PutPersonMatchingRequestsInitiationsProspectsAsync",
                    isEedmSupported = false,
                    RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
                },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationPersonMatchingRequestsInitiationsProspectsFormat, "1.0.0")),
                    headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")),

                }
            );

            routes.MapHttpRoute(
                name: "DefaultPutPersonMatchingRequestsInitiationsProspectsV1.0.0",
                routeTemplate: "person-matching-requests/{guid}",
                defaults: new
                {
                    controller = "PersonMatchingRequests",
                    action = "PutPersonMatchingRequestsInitiationsProspectsAsync",
                    isEedmSupported = false,
                    RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
                },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationPersonMatchingRequestsInitiationsProspectsFormat, "1.0.0")),
                    headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")),

                }
            );


            routes.MapHttpRoute(
              name: "PostPersonMatchingRequestsInitiationsProspectsV1.0.0",
              routeTemplate: "person-matching-requests",
              defaults: new
              {
                  controller = "PersonMatchingRequests",
                  action = "PostPersonMatchingRequestsInitiationsProspectsAsync",
                  isEedmSupported = true,
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationPersonMatchingRequestsInitiationsProspectsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
              name: "DefaultPostPersonMatchingRequestsInitiationsProspectsV1.0.0",
              routeTemplate: "person-matching-requests",
              defaults: new
              {
                  controller = "PersonMatchingRequests",
                  action = "PostPersonMatchingRequestsInitiationsProspectsAsync",
                  isEedmSupported = false,
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationPersonMatchingRequestsInitiationsProspectsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
            name: "PersonMatchingRequestsInitiationsProspectsUnsupported",
            routeTemplate: "person-matching-requests/{id}",
             defaults: new { controller = "PersonMatchingRequests", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationPersonMatchingRequestsInitiationsProspectsFormat, "1.0.0")),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            routes.MapHttpRoute(
              name: "GetPersonMatchingRequestsByGuidV1.0.0",
              routeTemplate: "person-matching-requests/{guid}",
              defaults: new { controller = "PersonMatchingRequests", action = "GetPersonMatchingRequestsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonMatchingRequestsByGuid",
               routeTemplate: "person-matching-requests/{guid}",
                  defaults: new { controller = "PersonMatchingRequests", action = "GetPersonMatchingRequestsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonMatchingRequestsV1.0.0",
              routeTemplate: "person-matching-requests",
              defaults: new { controller = "PersonMatchingRequests", action = "GetPersonMatchingRequestsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonMatchingRequests",
               routeTemplate: "person-matching-requests",
                  defaults: new { controller = "PersonMatchingRequests", action = "GetPersonMatchingRequestsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonMatchingRequestsV1.0.0",
              routeTemplate: "person-matching-requests/{guid}",
              defaults: new { controller = "PersonMatchingRequests", action = "PutPersonMatchingRequestsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonMatchingRequestsV1.0.0",
               routeTemplate: "person-matching-requests",
               defaults: new { controller = "PersonMatchingRequests", action = "PostPersonMatchingRequestsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonMatchingRequests",
                routeTemplate: "person-matching-requests/{guid}",
                defaults: new { controller = "PersonMatchingRequests", action = "DeletePersonMatchingRequestsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "PersonMatchingRequestsUnsupported",
            routeTemplate: "person-matching-requests/{id}",
             defaults: new { controller = "PersonMatchingRequests", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion PersonMatchingRequests

            #region  Person Sources

            routes.MapHttpRoute(
              name: "GetPersonSourcesByGuidV1.0.0",
              routeTemplate: "person-sources/{guid}",
              defaults: new { controller = "PersonSources", action = "GetPersonSourcesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonSourcesByGuid",
               routeTemplate: "person-sources/{guid}",
                  defaults: new { controller = "PersonSources", action = "GetPersonSourcesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonSourcesV1.0.0",
              routeTemplate: "person-sources",
              defaults: new { controller = "PersonSources", action = "GetPersonSourcesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonSources",
               routeTemplate: "person-sources",
                  defaults: new { controller = "PersonSources", action = "GetPersonSourcesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonSourcesV1.0.0",
              routeTemplate: "person-sources/{guid}",
              defaults: new { controller = "PersonSources", action = "PutPersonSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonSourcesV1.0.0",
               routeTemplate: "person-sources",
               defaults: new { controller = "PersonSources", action = "PostPersonSourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonSources",
                routeTemplate: "person-sources/{guid}",
                defaults: new { controller = "PersonSources", action = "DeletePersonSourcesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "PersonSourcesUnsupported",
            routeTemplate: "person-sources/{id}",
             defaults: new { controller = "PersonSources", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Person Sources

            #region PersonVisas

            routes.MapHttpRoute(
                name: "GetPersonVisaByIdV6",
                routeTemplate: "person-visas/{id}",
                defaults: new { controller = "PersonVisas", action = "GetPersonVisaByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonVisaByIdV11",
                routeTemplate: "person-visas/{id}",
                defaults: new { controller = "PersonVisas", action = "GetPersonVisaByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonVisaById",
                routeTemplate: "person-visas/{id}",
                   defaults: new { controller = "PersonVisas", action = "GetPersonVisaByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAllPersonVisasAsync",
                routeTemplate: "person-visas",
                defaults: new { controller = "PersonVisas", action = "GetAllPersonVisasAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllPersonVisasAsyncV11",
                routeTemplate: "person-visas",
                defaults: new { controller = "PersonVisas", action = "GetAllPersonVisas2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetAllPersonVisasAsync",
                routeTemplate: "person-visas",
                   defaults: new { controller = "PersonVisas", action = "GetAllPersonVisas2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "PUTPersonVisaV6",
                routeTemplate: "person-visas/{id}",
                defaults: new { controller = "PersonVisas", action = "PutPersonVisaAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PUTPersonVisaV11",
                routeTemplate: "person-visas/{id}",
                defaults: new { controller = "PersonVisas", action = "PutPersonVisaAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "POSTPostPersonVisaV6",
                routeTemplate: "person-visas",
                defaults: new { controller = "PersonVisas", action = "PostPersonVisaAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "POSTPostPersonVisaV11",
                routeTemplate: "person-visas",
                defaults: new { controller = "PersonVisas", action = "PostPersonVisaAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonVisa",
                routeTemplate: "person-visas/{id}",
                defaults: new { controller = "PersonVisas", action = "DeletePersonVisaAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region PersonalGuardianRelationships
            routes.MapHttpRoute(
                name: "GetPersonGuardiansRelationships",
                routeTemplate: "person-guardians",
                defaults: new { controller = "PersonGuardians", action = "GetPersonGuardianRelationshipsAllAndFilterAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonGuardiansRelationships",
                routeTemplate: "person-guardians",
                   defaults: new { controller = "PersonGuardians", action = "GetPersonGuardianRelationshipsAllAndFilterAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetPersonalGuardianRelationshipById",
                routeTemplate: "person-guardians/{id}",
                defaults: new { controller = "PersonGuardians", action = "GetPersonGuardianRelationshipByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonalGuardianRelationshipById",
                routeTemplate: "person-guardians/{id}",
                   defaults: new { controller = "PersonGuardians", action = "GetPersonGuardianRelationshipByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                 name: "PutPersonGuardian",
                 routeTemplate: "person-guardians/{id}",
                 defaults: new { controller = "PersonGuardians", action = "PutPersonGuardianRelationshipAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("PUT"),
                     headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                 }
            );

            routes.MapHttpRoute(
                name: "PostPersonGuardian",
                routeTemplate: "person-guardians",
                defaults: new { controller = "PersonGuardians", action = "PostPersonGuardianRelationshipAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                 name: "DeletePersonGuardian",
                 routeTemplate: "person-guardians/{id}",
                 defaults: new { controller = "PersonGuardians", action = "DeletePersonGuardianRelationshipAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("DELETE")
                 }
            );
            #endregion

            #region PersonalRelationships

            routes.MapHttpRoute(
              name: "GetPersonalRelationshipsv16.0.0",
              routeTemplate: "personal-relationships",
              defaults: new { controller = "PersonalRelationships", action = "GetPersonalRelationships2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "GetPersonalRelationshipsV6",
                routeTemplate: "personal-relationships",
                defaults: new { controller = "PersonalRelationships", action = "GetPersonalRelationshipsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );



            routes.MapHttpRoute(
                name: "DefaultGetPersonalRelationships",
                routeTemplate: "personal-relationships",
                   defaults: new { controller = "PersonalRelationships", action = "GetPersonalRelationships2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat,"16.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "GetPersonalRelationshipsByIdv16.0.0",
               routeTemplate: "personal-relationships/{id}",
               defaults: new { controller = "PersonalRelationships", action = "GetPersonalRelationships2ByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
                name: "GetPersonalRelationshipsByIdV6",
                routeTemplate: "personal-relationships/{id}",
                defaults: new { controller = "PersonalRelationships", action = "GetPersonalRelationshipByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetPersonalRelationshipsById",
                routeTemplate: "personal-relationships/{id}",
                   defaults: new { controller = "PersonalRelationships", action = "GetPersonalRelationships2ByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmPersonalRelationshipsV6",
               routeTemplate: "personal-relationships/{id}",
               defaults: new { controller = "PersonalRelationships", action = "PutPersonalRelationshipAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PutHedmPersonalRelationshipsV16.0.0",
               routeTemplate: "personal-relationships/{id}",
               defaults: new { controller = "PersonalRelationships", action = "PutPersonalRelationships2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "PostHedmPersonalRelationshipsV6",
               routeTemplate: "personal-relationships",
               defaults: new { controller = "PersonalRelationships", action = "PostPersonalRelationshipAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PostHedmPersonalRelationshipsV16.0.0",
               routeTemplate: "personal-relationships",
               defaults: new { controller = "PersonalRelationships", action = "PostPersonalRelationships2Async" , isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteHedmPersonalRelationships",
                routeTemplate: "personal-relationships/{id}",
                defaults: new { controller = "PersonalRelationships", action = "DeletePersonalRelationshipsAsync" , isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "PersonalRelationshipsUnsupported",
              routeTemplate: "personal-relationships/{id}",
               defaults: new { controller = "PersonalRelationships", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );


            #endregion           

            #region PersonPositions
            routes.MapHttpRoute(
                name: "GetPersonPositions",
                routeTemplate: "person-positions",
                defaults: new { controller = "PersonPositions", action = "GetPersonPositionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region PersonPositionWages

            routes.MapHttpRoute(
                name: "GetPersonPositionWages",
                routeTemplate: "person-position-wages",
                defaults: new { controller = "PersonPositionWages", action = "GetPersonPositionWagesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Person Publications

            routes.MapHttpRoute(
              name: "GetPersonPublicationsByGuidV10",
              routeTemplate: "person-publications/{guid}",
              defaults: new { controller = "PersonPublications", action = "GetPersonPublicationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPersonPublicationsByGuid",
               routeTemplate: "person-publications/{guid}",
                  defaults: new { controller = "PersonPublications", action = "GetPersonPublicationsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPersonPublicationsV10",
              routeTemplate: "person-publications",
              defaults: new { controller = "PersonPublications", action = "GetPersonPublicationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetPersonPublications",
               routeTemplate: "person-publications",
                  defaults: new { controller = "PersonPublications", action = "GetPersonPublicationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPersonPublicationsV10",
              routeTemplate: "person-publications/{guid}",
              defaults: new { controller = "PersonPublications", action = "PutPersonPublicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostPersonPublicationsV10",
               routeTemplate: "person-publications",
               defaults: new { controller = "PersonPublications", action = "PostPersonPublicationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePersonPublications",
                routeTemplate: "person-publications/{guid}",
                defaults: new { controller = "PersonPublications", action = "DeletePersonPublicationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Person Publications

            #region PersonalRelationTypes

            routes.MapHttpRoute(
                 name: "GetPersonalRelationTypesByGuidV6",
                 routeTemplate: "personal-relationship-types/{guid}",
                 defaults: new { controller = "PersonalRelationshipTypes", action = "GetPersonalRelationTypeByGuidAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                 }
            );

            routes.MapHttpRoute(
                 name: "GetPersonalRelationTypesByGuidV7",
                 routeTemplate: "personal-relationship-types/{guid}",
                 defaults: new { controller = "PersonalRelationshipTypes", action = "GetPersonalRelationTypeByGuidAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                 }
            );

            routes.MapHttpRoute(
                 name: "DefaultGetPersonalRelationTypesByGuid",
                 routeTemplate: "personal-relationship-types/{guid}",
                    defaults: new { controller = "PersonalRelationshipTypes", action = "GetPersonalRelationTypeByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(7, true, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                 }
            );

            routes.MapHttpRoute(
                name: "GetPersonalRelationTypeV6",
                routeTemplate: "personal-relationship-types",
                defaults: new { controller = "PersonalRelationshipTypes", action = "GetPersonalRelationTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "GetPersonalRelationTypeV7",
               routeTemplate: "personal-relationship-types",
               defaults: new { controller = "PersonalRelationshipTypes", action = "GetPersonalRelationTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetPersonalRelationType",
                routeTemplate: "personal-relationship-types",
                   defaults: new { controller = "PersonalRelationshipTypes", action = "GetPersonalRelationTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                 name: "PutPersonalRelationTypesByGuidV6",
                 routeTemplate: "personal-relationship-types/{guid}",
                 defaults: new { controller = "PersonalRelationshipTypes", action = "PutPersonalRelationType" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("PUT"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                 }
            );

            routes.MapHttpRoute(
                name: "PutPersonalRelationTypesByGuidV7",
                routeTemplate: "personal-relationship-types/{guid}",
                defaults: new { controller = "PersonalRelationshipTypes", action = "PutPersonalRelationType" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
           );

            routes.MapHttpRoute(
                name: "PostPersonalRelationTypeV6",
                routeTemplate: "personal-relationship-types",
                defaults: new { controller = "PersonalRelationshipTypes", action = "PostPersonalRelationType" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );


            routes.MapHttpRoute(
               name: "PostPersonalRelationTypeV7",
               routeTemplate: "personal-relationship-types",
               defaults: new { controller = "PersonalRelationshipTypes", action = "PostPersonalRelationType" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                 name: "DeletePersonalRelationTypesByGuid",
                 routeTemplate: "personal-relationship-types/{guid}",
                 defaults: new { controller = "PersonalRelationshipTypes", action = "DeletePersonalRelationType" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("DELETE")
                 }
            );

            #endregion PersonalRelationshipTypes

            #region PersonNameTypes

            routes.MapHttpRoute(
                name: "GetPersonNameTypeByIdV6",
                routeTemplate: "person-name-types/{id}",
                defaults: new { controller = "PersonNameTypes", action = "GetPersonNameTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "GetPersonNameTypeByIdV12",
               routeTemplate: "person-name-types/{id}",
               defaults: new { controller = "PersonNameTypes", action = "GetPersonNameTypeById2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
           );

            routes.MapHttpRoute(
              name: "DefaultGetPersonNameTypeById",
               routeTemplate: "person-name-types/{id}",
                  defaults: new { controller = "PersonNameTypes", action = "GetPersonNameTypeById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
          );

            routes.MapHttpRoute(
                name: "GetPersonNameTypesV6",
                routeTemplate: "person-name-types",
                defaults: new { controller = "PersonNameTypes", action = "GetPersonNameTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
           );

            routes.MapHttpRoute(
                name: "GetPersonNameTypesV12",
                routeTemplate: "person-name-types",
                defaults: new { controller = "PersonNameTypes", action = "GetPersonNameTypes2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
           );

            routes.MapHttpRoute(
               name: "DefaultGetPersonNameTypes",
                routeTemplate: "person-name-types",
                   defaults: new { controller = "PersonNameTypes", action = "GetPersonNameTypes2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(12, true)
                }
           );

            routes.MapHttpRoute(
               name: "PutPersonNameTypesV6",
               routeTemplate: "person-name-types/{id}",
               defaults: new { controller = "PersonNameTypes", action = "PutPersonNameTypes" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PutPersonNameTypesV12",
               routeTemplate: "person-name-types/{id}",
               defaults: new { controller = "PersonNameTypes", action = "PutPersonNameTypes" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
               }
           );

            routes.MapHttpRoute(
               name: "PostPersonNameTypesV6",
                routeTemplate: "person-name-types",
                defaults: new { controller = "PersonNameTypes", action = "PostPersonNameTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "PostPersonNameTypesV12",
                routeTemplate: "person-name-types",
                defaults: new { controller = "PersonNameTypes", action = "PostPersonNameTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
                }
            );

            routes.MapHttpRoute(
                name: "DeletePersonNameTypes",
                routeTemplate: "person-name-types/{id}",
                defaults: new { controller = "PersonNameTypes", action = "DeletePersonNameTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region PersonStatuses
            routes.MapHttpRoute(
                name: "GetPersonEmploymentStatuses",
                routeTemplate: "person-employment-statuses",
                defaults: new { controller = "PersonEmploymentStatuses", action = "GetPersonEmploymentStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region PetitionStatuses

            routes.MapHttpRoute(
                name: "GetPetitionStatuses",
                routeTemplate: "petition-statuses",
                defaults: new { controller = "PetitionStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Positions
            routes.MapHttpRoute(
                name: "GetPositions",
                routeTemplate: "positions",
                defaults: new { controller = "Positions", action = "GetPositionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region  Position Classifications

            routes.MapHttpRoute(
              name: "GetPositionClassificationsByGuidV12",
              routeTemplate: "position-classifications/{guid}",
              defaults: new { controller = "PositionClassifications", action = "GetPositionClassificationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPositionClassificationsByGuid",
               routeTemplate: "position-classifications/{guid}",
                  defaults: new { controller = "PositionClassifications", action = "GetPositionClassificationsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPositionClassificationsV12",
              routeTemplate: "position-classifications",
              defaults: new { controller = "PositionClassifications", action = "GetPositionClassificationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPositionClassifications",
               routeTemplate: "position-classifications",
                  defaults: new { controller = "PositionClassifications", action = "GetPositionClassificationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 12) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(12, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPositionClassificationsV12",
              routeTemplate: "position-classifications/{guid}",
              defaults: new { controller = "PositionClassifications", action = "PutPositionClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
          );


            routes.MapHttpRoute(
               name: "PostPositionClassificationsV12",
               routeTemplate: "position-classifications",
               defaults: new { controller = "PositionClassifications", action = "PostPositionClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(12, false, string.Format(HedtechIntegrationMediaTypeFormat, 12))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePositionClassifications",
                routeTemplate: "position-classifications/{guid}",
                defaults: new { controller = "PositionClassifications", action = "DeletePositionClassificationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Position Classifications

            #region PrivacyStatuses

            routes.MapHttpRoute(
                name: "GetPrivacyStatusByIdV6",
                routeTemplate: "privacy-statuses/{id}",
                defaults: new { controller = "PrivacyStatuses", action = "GetPrivacyStatusByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetPrivacyStatusById",
                routeTemplate: "privacy-statuses/{id}",
                   defaults: new { controller = "PrivacyStatuses", action = "GetPrivacyStatusByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetPrivacyStatusesV6",
               routeTemplate: "privacy-statuses",
               defaults: new { controller = "PrivacyStatuses", action = "GetPrivacyStatusesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "GetPrivacyStatuses",
               routeTemplate: "privacy-statuses",
                  defaults: new { controller = "PrivacyStatuses", action = "GetPrivacyStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "PutPrivacyStatusesV6",
               routeTemplate: "privacy-statuses/{id}",
               defaults: new { controller = "PrivacyStatuses", action = "PutPrivacyStatusAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostPrivacyStatusV6",
                routeTemplate: "privacy-statuses",
                defaults: new { controller = "PrivacyStatuses", action = "PostPrivacyStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeletePrivacyStatus",
                routeTemplate: "privacy-statuses/{id}",
                defaults: new { controller = "PrivacyStatuses", action = "DeletePrivacyStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Proficiency Licensing Authorities

            routes.MapHttpRoute(
              name: "GetProficiencyLicensingAuthorityByGuidV10",
              routeTemplate: "proficiency-licensing-authorities/{guid}",
              defaults: new { controller = "ProficiencyLicensingAuthorities", action = "GetProficiencyLicensingAuthorityByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetProficiencyLicensingAuthorityByGuid",
               routeTemplate: "proficiency-licensing-authorities/{guid}",
                  defaults: new { controller = "ProficiencyLicensingAuthorities", action = "GetProficiencyLicensingAuthorityByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetProficiencyLicensingAuthoritiesV10",
              routeTemplate: "proficiency-licensing-authorities",
              defaults: new { controller = "ProficiencyLicensingAuthorities", action = "GetProficiencyLicensingAuthoritiesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetProficiencyLicensingAuthorities",
               routeTemplate: "proficiency-licensing-authorities",
                  defaults: new { controller = "ProficiencyLicensingAuthorities", action = "GetProficiencyLicensingAuthoritiesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutProficiencyLicensingAuthoritiesV10",
              routeTemplate: "proficiency-licensing-authorities/{guid}",
              defaults: new { controller = "ProficiencyLicensingAuthorities", action = "PutProficiencyLicensingAuthorityAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostProficiencyLicensingAuthoritiesV10",
               routeTemplate: "proficiency-licensing-authorities",
               defaults: new { controller = "ProficiencyLicensingAuthorities", action = "PostProficiencyLicensingAuthorityAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteProficiencyLicensingAuthorities",
                routeTemplate: "proficiency-licensing-authorities/{guid}",
                defaults: new { controller = "ProficiencyLicensingAuthorities", action = "DeleteProficiencyLicensingAuthorityAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Proficiency Licensing Authorities

            #region ProfileApplications

            routes.MapHttpRoute(
                name: "AllProfileApplications",
                routeTemplate: "students/{studentId}/profile-applications",
                defaults: new { controller = "ProfileApplications", action = "GetProfileApplicationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region  Prospect Opportunities

            routes.MapHttpRoute(
                name: "PutProspectOpportunitiesSubmissionsV1.0.0",
                routeTemplate: "prospect-opportunities/{guid}",
                defaults: new
                {
                    controller = "ProspectOpportunities",
                    action = "PutProspectOpportunitiesSubmissionsAsync",
                    isEedmSupported = true,
                    RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
                },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationProspectOpportunitiesSubmissionsFormat, "1.0.0")),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")),

                }
            );

            routes.MapHttpRoute(
                name: "DefaultPutProspectOpportunitiesSubmissionsV1.0.0",
                routeTemplate: "prospect-opportunities/{guid}",
                defaults: new
                {
                    controller = "ProspectOpportunities",
                    action = "PutProspectOpportunitiesSubmissionsAsync",
                    isEedmSupported = false,
                    RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
                },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationProspectOpportunitiesSubmissionsFormat, "1.0.0")),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0")),

                }
            );

            routes.MapHttpRoute(
              name: "PostProspectOpportunitiesSubmissionsV1.0.0",
              routeTemplate: "prospect-opportunities",
              defaults: new
              {
                  controller = "ProspectOpportunities",
                  action = "PostProspectOpportunitiesSubmissionsAsync",
                  isEedmSupported = true,
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationProspectOpportunitiesSubmissionsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
            );

            routes.MapHttpRoute(
             name: "DefaultPostProspectOpportunitiesSubmissionsV1.0.0",
             routeTemplate: "prospect-opportunities",
             defaults: new
             {
                 controller = "ProspectOpportunities",
                 action = "PostProspectOpportunitiesSubmissionsAsync",
                 isEedmSupported = false,
                 RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
             },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationProspectOpportunitiesSubmissionsFormat, "1.0.0")),
                 headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
           );

            routes.MapHttpRoute(
            name: "ProspectOpportunitiesSubmissionsUnsupported",
            routeTemplate: "prospect-opportunities/{id}",
             defaults: new { controller = "ProspectOpportunities", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationProspectOpportunitiesSubmissionsFormat, "1.0.0")),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            routes.MapHttpRoute(
              name: "GetProspectOpportunitiesByGuidVema",
              routeTemplate: "prospect-opportunities/{guid}",
              defaults: new { controller = "ProspectOpportunities", action = "GetProspectOpportunitiesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetProspectOpportunitiesByGuid",
               routeTemplate: "prospect-opportunities/{guid}",
                  defaults: new { controller = "ProspectOpportunities", action = "GetProspectOpportunitiesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetProspectOpportunitiesVema",
              routeTemplate: "prospect-opportunities",
              defaults: new { controller = "ProspectOpportunities", action = "GetProspectOpportunitiesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetProspectOpportunities",
               routeTemplate: "prospect-opportunities",
                  defaults: new { controller = "ProspectOpportunities", action = "GetProspectOpportunitiesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutProspectOpportunitiesVema",
              routeTemplate: "prospect-opportunities/{guid}",
              defaults: new { controller = "ProspectOpportunities", action = "PutProspectOpportunitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostProspectOpportunitiesVema",
               routeTemplate: "prospect-opportunities",
               defaults: new { controller = "ProspectOpportunities", action = "PostProspectOpportunitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteProspectOpportunities",
                routeTemplate: "prospect-opportunities/{guid}",
                defaults: new { controller = "ProspectOpportunities", action = "DeleteProspectOpportunitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "ProspectOpportunitiesUnsupported",
            routeTemplate: "prospect-opportunities/{id}",
             defaults: new { controller = "ProspectOpportunities", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Prospect Opportunities

            #region Prospect Opportunity Sources

            routes.MapHttpRoute(
              name: "GetProspectOpportunitySourcesByGuidV100",
              routeTemplate: "prospect-opportunity-sources/{guid}",
              defaults: new { controller = "ProspectOpportunitySources", action = "GetProspectOpportunitySourcesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetProspectOpportunitySourcesByGuid",
               routeTemplate: "prospect-opportunity-sources/{guid}",
                  defaults: new { controller = "ProspectOpportunitySources", action = "GetProspectOpportunitySourcesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetProspectOpportunitySourcesV100",
              routeTemplate: "prospect-opportunity-sources",
              defaults: new { controller = "ProspectOpportunitySources", action = "GetProspectOpportunitySourcesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "GetProspectOpportunitySources",
               routeTemplate: "prospect-opportunity-sources",
                  defaults: new { controller = "ProspectOpportunitySources", action = "GetProspectOpportunitySourcesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutProspectOpportunitySourcesV100",
              routeTemplate: "prospect-opportunity-sources/{guid}",
              defaults: new { controller = "ProspectOpportunitySources", action = "PutProspectOpportunitySourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostProspectOpportunitySourcesV100",
               routeTemplate: "prospect-opportunity-sources",
               defaults: new { controller = "ProspectOpportunitySources", action = "PostProspectOpportunitySourcesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteProspectOpportunitySources",
                routeTemplate: "prospect-opportunity-sources/{guid}",
                defaults: new { controller = "ProspectOpportunitySources", action = "DeleteProspectOpportunitySourcesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );


            routes.MapHttpRoute(
            name: "ProspectOpportunitySourcesUnsupported",
            routeTemplate: "prospect-opportunity-sources/{id}",
             defaults: new { controller = "ProspectOpportunitySources", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );
            #endregion Prospect Opportunity Sources

            #region ProspectSources

            routes.MapHttpRoute(
                name: "GetProspectSources",
                routeTemplate: "prospect-sources",
                defaults: new { controller = "ProspectSources", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region PhoneNumbers

            routes.MapHttpRoute(
                name: "GetPhoneNumbersByPersonId",
                routeTemplate: "phone-numbers/{personId}",
                defaults: new { controller = "PhoneNumbers", action = "GetPersonPhones" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPhoneNumbersByIdList",
                routeTemplate: "qapi/phone-numbers",
                defaults: new { controller = "PhoneNumbers", action = "QueryPhoneNumbersAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPilotPhoneNumbersByIdList",
                routeTemplate: "qapi/phone-numbers",
                defaults: new { controller = "PhoneNumbers", action = "QueryPilotPhoneNumbersAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianJsonPilotMediaTypeFormat, 1))
                }
            );

            #endregion

            #region PhoneTypes

            routes.MapHttpRoute(
               name: "GetPhoneTypeById",
               routeTemplate: "phone-types/{id}",
               defaults: new { controller = "PhoneTypes", action = "GetPhoneTypeByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetPhoneTypeById",
               routeTemplate: "phone-types/{id}",
               defaults: new { controller = "PhoneTypes", action = "GetPhoneTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
                name: "GetHeDMPhoneTypes",
                routeTemplate: "phone-types",
                defaults: new { controller = "PhoneTypes", action = "GetPhoneTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetPhoneTypes",
                routeTemplate: "phone-types",
                defaults: new { controller = "PhoneTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetHeDMPhoneTypes",
                routeTemplate: "phone-types",
                defaults: new { controller = "PhoneTypes", action = "GetPhoneTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutHeDMPhoneTypes",
               routeTemplate: "phone-types/{id}",
               defaults: new { controller = "PhoneTypes", action = "PutPhoneTypesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostHeDMPhoneTypes",
                routeTemplate: "phone-types",
                defaults: new { controller = "PhoneTypes", action = "PostPhoneTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHeDMPhoneTypes",
                routeTemplate: "phone-types/{id}",
                defaults: new { controller = "PhoneTypes", action = "DeletePhoneTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );
            #endregion

            #region Photos
            routes.MapHttpRoute(
                name: "PersonPhoto",
                routeTemplate: "photos/people/{id}",
                defaults: new { userId = 0, controller = "Photos", action = "GetPersonPhoto" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region PlanningConfiguration

            routes.MapHttpRoute(
                name: "GetPlanningConfiguration",
                routeTemplate: "configuration/planning",
                defaults: new { controller = "PlanningConfiguration", action = "GetPlanningConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region PlanningStudents

            // OBSOLETE Please use ProgramEvaluation3 route.
            routes.MapHttpRoute(
                name: "ProgramEvaluation",
                routeTemplate: "students/{id}/evaluation/{program}",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "GetEvaluationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // OBSOLETE as of API V1.11 Please use ProgramEvaluation3.
            routes.MapHttpRoute(
                name: "ProgramEvaluation2",
                routeTemplate: "students/{id}/evaluation",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "GetEvaluationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );
            // OBSOLETE as of API V1.13 Please use ProgramEvaluation4.
            routes.MapHttpRoute(
                name: "ProgramEvaluation3",
                routeTemplate: "students/{id}/evaluation",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "GetEvaluation2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "ProgramEvaluation4",
                routeTemplate: "students/{id}/evaluation",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "GetEvaluation3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            // OBSOLETE as of API V1.11 Please use QueryEvaluations2.
            routes.MapHttpRoute(
                name: "QueryEvaluations",
                routeTemplate: "qapi/students/{id}/evaluation",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "QueryEvaluationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );
            // OBSOLETE as of API V1.13 Please use QueryEvaluations3.
            routes.MapHttpRoute(
                name: "QueryEvaluations2",
                routeTemplate: "qapi/students/{id}/evaluation",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "QueryEvaluations2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
               name: "QueryEvaluations3",
               routeTemplate: "qapi/students/{id}/evaluation",
               defaults: new { userId = 0, controller = "PlanningStudents", action = "QueryEvaluations3Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(3, true)
               }
           );

            routes.MapHttpRoute(
                name: "GetEvaluationNotices",
                routeTemplate: "students/{studentId}/evaluation-notices/{programCode}",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "GetEvaluationNoticesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true),
                }
            );

            routes.MapHttpRoute(
                 name: "GetPlanningStudent",
                 routeTemplate: "students/{studentId}",
                 defaults: new { userId = 0, controller = "Students", action = "GetPlanningStudentAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-planning-student.v{0}+json", 1)),
                 }
             );

            routes.MapHttpRoute(
                name: "QueryPlanningStudents",
                routeTemplate: "qapi/students",
                defaults: new { userId = 0, controller = "PlanningStudents", action = "QueryPlanningStudentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-planning-student.v{0}+json", 1)),
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAddAuthorizationsAsync",
                routeTemplate: "students/{studentId}/add-authorizations",
                defaults: new { userId = 0, controller = "AddAuthorizations", action = "GetStudentAddAuthorizationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true),
                }
            );

            #endregion

            #region PreferredSections

            routes.MapHttpRoute(
                name: "GetPreferredSections",
                routeTemplate: "students/{studentId}/preferred-sections",
                defaults: new { controller = "PreferredSections", action = "GetPreferredSectionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdatePreferredSections",
                routeTemplate: "students/{studentId}/preferred-sections",
                defaults: new { controller = "PreferredSections", action = "UpdatePreferredSectionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeletePreferredSections",
                routeTemplate: "students/{studentId}/preferred-sections/{sectionId}",
                defaults: new { controller = "PreferredSections", action = "DeletePreferredSectionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Prefixes

            routes.MapHttpRoute(
                name: "GetPrefixes",
                routeTemplate: "prefixes",
                defaults: new { controller = "Prefixes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Colleague Finance Web Configurations

            routes.MapHttpRoute(
             name: "GetColleagueFinanceWebConfigurationsAsync",
             routeTemplate: "cf-web-configurations",
             defaults: new { controller = "ColleagueFinanceWebConfigurations", action = "GetColleagueFinanceWebConfigurationsAsync" },
             constraints: new
             {
                httpMethod = new HttpMethodConstraint("GET"),
                headerVersion = new HeaderVersionConstraint(1, false)
             }
         );
            #endregion

            #region  Procurement Receipts

            routes.MapHttpRoute(
             name: "GetProcurementReceiptsByGuidV13_1_0",
             routeTemplate: "procurement-receipts/{guid}",
             defaults: new { controller = "ProcurementReceipts", action = "GetProcurementReceiptsByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("13.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "13.1.0"))
             }
         );

            routes.MapHttpRoute(
              name: "GetProcurementReceiptsByGuidV13",
              routeTemplate: "procurement-receipts/{guid}",
              defaults: new { controller = "ProcurementReceipts", action = "GetProcurementReceiptsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetProcurementReceiptsByGuid",
               routeTemplate: "procurement-receipts/{guid}",
                  defaults: new { controller = "ProcurementReceipts", action = "GetProcurementReceiptsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "13.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("13.1.0", true)
               }
           );

            routes.MapHttpRoute(
             name: "GetProcurementReceiptsV13_1_0",
             routeTemplate: "procurement-receipts",
             defaults: new { controller = "ProcurementReceipts", action = "GetProcurementReceiptsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("13.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "13.1.0"))
             }
         );

            routes.MapHttpRoute(
              name: "GetProcurementReceiptsV13",
              routeTemplate: "procurement-receipts",
              defaults: new { controller = "ProcurementReceipts", action = "GetProcurementReceiptsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetProcurementReceipts",
               routeTemplate: "procurement-receipts",
                  defaults: new { controller = "ProcurementReceipts", action = "GetProcurementReceiptsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "13.1.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("13.1.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutProcurementReceiptsV13_1_0",
              routeTemplate: "procurement-receipts/{guid}",
              defaults: new { controller = "ProcurementReceipts", action = "PutProcurementReceiptsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("13.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "13.1.0"))
              }
          );

            routes.MapHttpRoute(
              name: "PutProcurementReceiptsV13",
              routeTemplate: "procurement-receipts/{guid}",
              defaults: new { controller = "ProcurementReceipts", action = "PutProcurementReceiptsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
              name: "PostProcurementReceiptsV13_1_0",
              routeTemplate: "procurement-receipts",
              defaults: new { controller = "ProcurementReceipts", action = "PostProcurementReceiptsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint("13.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "13.1.0"))
             }
          );

            routes.MapHttpRoute(
               name: "PostProcurementReceiptsV13",
               routeTemplate: "procurement-receipts",
               defaults: new { controller = "ProcurementReceipts", action = "PostProcurementReceiptsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteProcurementReceipts",
                routeTemplate: "procurement-receipts/{guid}",
                defaults: new { controller = "ProcurementReceipts", action = "DeleteProcurementReceiptsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
                 name: "ProcurementReceiptsUnsupported",
                 routeTemplate: "procurement-receipts/{id}",
                 defaults: new { controller = "ProcurementReceipts", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
             );

            #endregion Procurement Receipts

            #region Programs

            routes.MapHttpRoute(
                name: "GetPrograms",
                routeTemplate: "programs",
                defaults: new { controller = "Programs", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // OBSOLETE as of API V2.1. Please use GetActivePrograms2.
            routes.MapHttpRoute(
                name: "GetActivePrograms",
                routeTemplate: "programs/active",
                defaults: new { controller = "Programs", action = "GetActiveProgramsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetActivePrograms2",
                routeTemplate: "programs/active",
                defaults: new { controller = "Programs", action = "GetActivePrograms2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRequirements",
                routeTemplate: "programs/{id}/{catalog}",
                defaults: new { controller = "Programs", action = "GetRequirementsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Projects

            routes.MapHttpRoute(
                name: "GetProjects",
                routeTemplate: "projects",
                defaults: new { controller = "Projects", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetProjectTypes",
                routeTemplate: "project-types",
                defaults: new { controller = "ProjectTypes", action = "GetProjectTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetProjectItemCodes",
                routeTemplate: "project-item-codes",
                defaults: new { controller = "ProjectItemCodes", action = "GetProjectItemCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetProject",
                routeTemplate: "projects/{projectId}",
                defaults: new { controller = "Projects", action = "GetProjectAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Publication Types

            routes.MapHttpRoute(
              name: "GetPublicationTypesByGuidV10",
              routeTemplate: "publication-types/{guid}",
              defaults: new { controller = "PublicationTypes", action = "GetPublicationTypesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPublicationTypesByGuid",
               routeTemplate: "publication-types/{guid}",
                  defaults: new { controller = "PublicationTypes", action = "GetPublicationTypesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPublicationTypesV10",
              routeTemplate: "publication-types",
              defaults: new { controller = "PublicationTypes", action = "GetPublicationTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetPublicationTypes",
               routeTemplate: "publication-types",
                  defaults: new { controller = "PublicationTypes", action = "GetPublicationTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPublicationTypesV10",
              routeTemplate: "publication-types/{guid}",
              defaults: new { controller = "PublicationTypes", action = "PutPublicationTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostPublicationTypesV10",
               routeTemplate: "publication-types",
               defaults: new { controller = "PublicationTypes", action = "PostPublicationTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePublicationTypes",
                routeTemplate: "publication-types/{guid}",
                defaults: new { controller = "PublicationTypes", action = "DeletePublicationTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Publication Types

            #region  Purchasing Arrangements

            routes.MapHttpRoute(
              name: "GetPurchasingArrangementsByGuidV13",
              routeTemplate: "purchasing-arrangements/{guid}",
              defaults: new { controller = "PurchasingArrangements", action = "GetPurchasingArrangementsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPurchasingArrangementsByGuid",
               routeTemplate: "purchasing-arrangements/{guid}",
                  defaults: new { controller = "PurchasingArrangements", action = "GetPurchasingArrangementsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPurchasingArrangementsV13",
              routeTemplate: "purchasing-arrangements",
              defaults: new { controller = "PurchasingArrangements", action = "GetPurchasingArrangementsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
               name: "GetPurchasingArrangements",
               routeTemplate: "purchasing-arrangements",
                  defaults: new { controller = "PurchasingArrangements", action = "GetPurchasingArrangementsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPurchasingArrangementsV13",
              routeTemplate: "purchasing-arrangements/{guid}",
              defaults: new { controller = "PurchasingArrangements", action = "PutPurchasingArrangementsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );


            routes.MapHttpRoute(
               name: "PostPurchasingArrangementsV13",
               routeTemplate: "purchasing-arrangements",
               defaults: new { controller = "PurchasingArrangements", action = "PostPurchasingArrangementsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePurchasingArrangements",
                routeTemplate: "purchasing-arrangements/{guid}",
                defaults: new { controller = "PurchasingArrangements", action = "DeletePurchasingArrangementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Purchasing Arrangements

            #region  Purchase Classifications

            routes.MapHttpRoute(
              name: "GetPurchaseClassificationsByGuidV10",
              routeTemplate: "purchase-classifications/{guid}",
              defaults: new { controller = "PurchaseClassifications", action = "GetPurchaseClassificationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPurchaseClassificationsByGuid",
               routeTemplate: "purchase-classifications/{guid}",
                  defaults: new { controller = "PurchaseClassifications", action = "GetPurchaseClassificationsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPurchaseClassificationsV10",
              routeTemplate: "purchase-classifications",
              defaults: new { controller = "PurchaseClassifications", action = "GetPurchaseClassificationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetPurchaseClassifications",
               routeTemplate: "purchase-classifications",
                  defaults: new { controller = "PurchaseClassifications", action = "GetPurchaseClassificationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPurchaseClassificationsV10",
              routeTemplate: "purchase-classifications/{guid}",
              defaults: new { controller = "PurchaseClassifications", action = "PutPurchaseClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostPurchaseClassificationsV10",
               routeTemplate: "purchase-classifications",
               defaults: new { controller = "PurchaseClassifications", action = "PostPurchaseClassificationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePurchaseClassifications",
                routeTemplate: "purchase-classifications/{guid}",
                defaults: new { controller = "PurchaseClassifications", action = "DeletePurchaseClassificationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Purchase Classifications

            #region PurchaseOrders


            routes.MapHttpRoute(
              name: "GetPurchaseOrdersByGuidV10",
              routeTemplate: "purchase-orders/{guid}",
              defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrdersByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
              name: "GetPurchaseOrdersByGuidV11",
              routeTemplate: "purchase-orders/{guid}",
              defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrdersByGuidAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
              name: "GetPurchaseOrder",
              routeTemplate: "purchase-orders/{purchaseOrderId}",
              defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrderAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, false)
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetPurchaseOrdersByGuid",
               routeTemplate: "purchase-orders/{guid}",
                  defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrdersByGuidAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetPurchaseOrdersV10",
              routeTemplate: "purchase-orders",
              defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrdersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
              name: "GetPurchaseOrdersV11",
              routeTemplate: "purchase-orders",
              defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrdersAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "DefaultGetPurchaseOrders",
               routeTemplate: "purchase-orders",
                  defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrdersAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutPurchaseOrdersV10",
              routeTemplate: "purchase-orders/{guid}",
              defaults: new { controller = "PurchaseOrders", action = "PutPurchaseOrdersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
              name: "PutPurchaseOrdersV11",
              routeTemplate: "purchase-orders/{guid}",
              defaults: new { controller = "PurchaseOrders", action = "PutPurchaseOrdersAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "PostPurchaseOrdersV10",
               routeTemplate: "purchase-orders",
               defaults: new { controller = "PurchaseOrders", action = "PostPurchaseOrdersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
               name: "PostPurchaseOrdersV11",
               routeTemplate: "purchase-orders",
               defaults: new { controller = "PurchaseOrders", action = "PostPurchaseOrdersAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeletePurchaseOrders",
                routeTemplate: "purchase-orders/{guid}",
                defaults: new { controller = "PurchaseOrders", action = "DeletePurchaseOrdersAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
                name: "GetPurchaseOrderSummaryByPersonIdAsync",
                routeTemplate: "purchase-orders-summary/{personId}",
                defaults: new { controller = "PurchaseOrders", action = "GetPurchaseOrderSummaryByPersonIdAsync" },
                constraints: new
                {
                httpMethod = new HttpMethodConstraint("GET"),
                headerVersion = new HeaderVersionConstraint(1, false)
                });
            #endregion

            #region Quick Registration

            routes.MapHttpRoute(
                name: "GetStudentQuickRegistrationSectionsAsync",
                routeTemplate: "students/{studentId}/quick-registration-sections",
                defaults: new { controller = "StudentQuickRegistration", action = "GetStudentQuickRegistrationSectionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Receivables

            routes.MapHttpRoute(
                name: "GetAccountHolder2",
                routeTemplate: "receivables/account-holder/{personId}",
                defaults: new { controller = "Receivables", action = "GetAccountHolder2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );
            //WARNING: This route is obsolete as of API 1.16. Use QueryAccountHoldersByPost3
            routes.MapHttpRoute(
                name: "QueryAccountHoldersByPost2",
                routeTemplate: "qapi/receivables/account-holder",
                defaults: new { controller = "Receivables", action = "QueryAccountHoldersByPostAsync2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "QueryAccountHoldersByPost3",
                routeTemplate: "qapi/receivables/account-holder",
                defaults: new { controller = "Receivables", action = "QueryAccountHoldersByPost3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetReceivableTypes",
                routeTemplate: "receivables/receivable-types",
                defaults: new { controller = "Receivables", action = "GetReceivableTypes" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetChargeCodes",
                routeTemplate: "receivables/charge-codes",
                defaults: new { controller = "Receivables", action = "GetChargeCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            //WARNING: This route is obsolete as of API 1.12. Use QueryInvoices instead which is a qapi and is asynchronous.
            routes.MapHttpRoute(
                name: "GetInvoices",
                routeTemplate: "receivables/invoices",
                defaults: new { controller = "Receivables", action = "GetInvoices" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "invoiceIds" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryReceivableInvoices",
                routeTemplate: "qapi/receivable-invoices",
                defaults: new { controller = "Receivables", action = "QueryInvoicesByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryReceivableInvoicesPayments",
                routeTemplate: "qapi/receivable-invoices",
                defaults: new { controller = "Receivables", action = "QueryInvoicePaymentsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format("application/vnd.ellucian-invoice-payment.v{0}+json", 1)),
                }
            );

            //WARNING: This route is obsolete as of API 1.16. Use QueryAccountHolderPaymentPlanOptions2Async
            routes.MapHttpRoute(
                name: "QueryAccountHolderPaymentPlanOptionsAsync",
                routeTemplate: "qapi/receivables/account-holder/payment-plan-options",
                defaults: new { controller = "Receivables", action = "QueryAccountHolderPaymentPlanOptionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "QueryAccountHolderPaymentPlanOptions2Async",
                routeTemplate: "qapi/receivables/account-holder/payment-plan-options",
                defaults: new { controller = "Receivables", action = "QueryAccountHolderPaymentPlanOptions2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region Recruiter

            routes.MapHttpRoute(
                name: "RecruiterApplicationStatuses",
                routeTemplate: "recruiter-application-statuses",
                defaults: new { controller = "Recruiter", action = "PostApplicationStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
               name: "RecruiterApplications",
               routeTemplate: "recruiter-applications",
               defaults: new { controller = "Recruiter", action = "PostApplicationAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            routes.MapHttpRoute(
               name: "RecruiterTestScores",
               routeTemplate: "recruiter-test-scores",
               defaults: new { controller = "Recruiter", action = "PostTestScoresAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            routes.MapHttpRoute(
               name: "RecruiterTranscriptCourses",
               routeTemplate: "recruiter-transcript-courses",
               defaults: new { controller = "Recruiter", action = "PostTranscriptCoursesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            routes.MapHttpRoute(
               name: "RecruiterCommunicationHistory",
               routeTemplate: "recruiter-communication-history",
               defaults: new { controller = "Recruiter", action = "PostCommunicationHistoryAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            routes.MapHttpRoute(
               name: "RecruiterCommunicationHistoryRequest",
               routeTemplate: "recruiter-communication-history-request",
               defaults: new { controller = "Recruiter", action = "PostCommunicationHistoryRequestAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            routes.MapHttpRoute(
               name: "RecruiterConnectionStatus",
               routeTemplate: "recruiter-connection-status",
               defaults: new { controller = "Recruiter", action = "PostConnectionStatusAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );

            #endregion

            #region Races

            routes.MapHttpRoute(
                name: "GetRaceById2",
                routeTemplate: "races/{id}",
                defaults: new { controller = "Races", action = "GetRaceById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetRaceById2",
                routeTemplate: "races/{id}",
                defaults: new { controller = "Races", action = "GetRaceById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetEedmRaces2",
                routeTemplate: "races",
                defaults: new { controller = "Races", action = "GetRaces2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetEedmRaces2",
                routeTemplate: "races",
                defaults: new { controller = "Races", action = "GetRaces2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRaces",
                routeTemplate: "races",
                defaults: new { controller = "Races", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutRaces",
                routeTemplate: "races/{id}",
                defaults: new { controller = "Races", action = "PutRaces" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostRaces",
                routeTemplate: "races",
                defaults: new { controller = "Races", action = "PostRaces" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteRaces",
                routeTemplate: "races/{id}",
                defaults: new { controller = "Races", action = "DeleteRaces" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );



            #endregion

            #region RecurringVouchers
            routes.MapHttpRoute(
                name: "GetRecurringVoucher",
                routeTemplate: "recurring-vouchers/{recurringVoucherId}",
                defaults: new { controller = "RecurringVouchers", action = "GetRecurringVoucherAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region RegistrationOptions

            routes.MapHttpRoute(
                name: "GetRegistrationOptions",
                routeTemplate: "students/{studentId}/registration-options",
                defaults: new { controller = "RegistrationOptions", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Region Iso Codes

            routes.MapHttpRoute(
              name: "GetRegionIsoCodesByGuidV100",
              routeTemplate: "region-iso-codes/{guid}",
              defaults: new { controller = "RegionIsoCodes", action = "GetRegionIsoCodesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRegionIsoCodesByGuid",
               routeTemplate: "region-iso-codes/{guid}",
                  defaults: new { controller = "RegionIsoCodes", action = "GetRegionIsoCodesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetRegionIsoCodesV100",
              routeTemplate: "region-iso-codes",
              defaults: new { controller = "RegionIsoCodes", action = "GetRegionIsoCodesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "GetRegionIsoCodes",
               routeTemplate: "region-iso-codes",
                  defaults: new { controller = "RegionIsoCodes", action = "GetRegionIsoCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutRegionIsoCodesV100",
              routeTemplate: "region-iso-codes/{guid}",
              defaults: new { controller = "RegionIsoCodes", action = "PutRegionIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostRegionIsoCodesV100",
               routeTemplate: "region-iso-codes",
               defaults: new { controller = "RegionIsoCodes", action = "PostRegionIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRegionIsoCodes",
                routeTemplate: "region-iso-codes/{guid}",
                defaults: new { controller = "RegionIsoCodes", action = "DeleteRegionIsoCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );


            routes.MapHttpRoute(
            name: "RegionIsoCodesUnsupported",
            routeTemplate: "region-iso-codes/{id}",
             defaults: new { controller = "RegionIsoCodes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );
            #endregion Region Iso Codes

            #region  Regions

            routes.MapHttpRoute(
              name: "GetRegionsByGuidV1.0.0",
              routeTemplate: "regions/{guid}",
              defaults: new { controller = "Regions", action = "GetRegionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetRegionsByGuid",
               routeTemplate: "regions/{guid}",
                  defaults: new { controller = "Regions", action = "GetRegionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
             );

            routes.MapHttpRoute(
              name: "GetRegionsV1.0.0",
              routeTemplate: "regions",
              defaults: new { controller = "Regions", action = "GetRegionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "GetRegions",
               routeTemplate: "regions",
                  defaults: new { controller = "Regions", action = "GetRegionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
             );

            routes.MapHttpRoute(
              name: "PutRegionsV1.0.0",
              routeTemplate: "regions/{guid}",
              defaults: new { controller = "Regions", action = "PutRegionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "PostRegionsV1.0.0",
               routeTemplate: "regions",
               defaults: new { controller = "Regions", action = "PostRegionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
             );

            routes.MapHttpRoute(
                name: "DefaultDeleteRegions",
                routeTemplate: "regions/{guid}",
                defaults: new { controller = "Regions", action = "DeleteRegionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            routes.MapHttpRoute(
            name: "RegionsUnsupported",
            routeTemplate: "regions/{id}",
             defaults: new { controller = "Regions", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );

            #endregion Regions

            #region RehireTypes

            routes.MapHttpRoute(
                name: "GetRehireTypeByIdV7",
                routeTemplate: "rehire-types/{id}",
                defaults: new { controller = "RehireTypes", action = "GetRehireTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetRehireTypeById",
                routeTemplate: "rehire-types/{id}",
                defaults: new { controller = "RehireTypes", action = "GetRehireTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetRehireTypesV7",
                routeTemplate: "rehire-types",
                defaults: new { controller = "RehireTypes", action = "GetRehireTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetRehireTypes",
                routeTemplate: "rehire-types",
                defaults: new { controller = "RehireTypes", action = "GetRehireTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutRehireTypesV7",
               routeTemplate: "rehire-types/{id}",
               defaults: new { controller = "RehireTypes", action = "PutRehireTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostRehireTypesV7",
                routeTemplate: "rehire-types",
                defaults: new { controller = "RehireTypes", action = "PostRehireTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteRehireTypes",
                routeTemplate: "rehire-types/{id}",
                defaults: new { controller = "RehireTypes", action = "DeleteRehireTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region Relationships

            routes.MapHttpRoute(
                name: "GetPersonPrimaryRelationships",
                routeTemplate: "persons/{personId}/relationships",
                defaults: new { controller = "Relationships", action = "GetPersonPrimaryRelationshipsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                 name: "PostRelationships",
                 routeTemplate: "persons/{personId}/relationships",
                 defaults: new { controller = "Relationships", action = "PostRelationshipAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("POST"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );

            #endregion

            #region  Relationship Statuses

            routes.MapHttpRoute(
              name: "GetRelationshipStatusesByGuidV100",
              routeTemplate: "relationship-statuses/{guid}",
              defaults: new { controller = "RelationshipStatuses", action = "GetRelationshipStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRelationshipStatusesByGuid",
               routeTemplate: "relationship-statuses/{guid}",
                  defaults: new { controller = "RelationshipStatuses", action = "GetRelationshipStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetRelationshipStatusesV100",
              routeTemplate: "relationship-statuses",
              defaults: new { controller = "RelationshipStatuses", action = "GetRelationshipStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "GetRelationshipStatuses",
               routeTemplate: "relationship-statuses",
                  defaults: new { controller = "RelationshipStatuses", action = "GetRelationshipStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutRelationshipStatusesV100",
              routeTemplate: "relationship-statuses/{guid}",
              defaults: new { controller = "RelationshipStatuses", action = "PutRelationshipStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostRelationshipStatusesV100",
               routeTemplate: "relationship-statuses",
               defaults: new { controller = "RelationshipStatuses", action = "PostRelationshipStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRelationshipStatuses",
                routeTemplate: "relationship-statuses/{guid}",
                defaults: new { controller = "RelationshipStatuses", action = "DeleteRelationshipStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "RelationshipStatusesUnsupported",
            routeTemplate: "relationship-statuses/{id}",
             defaults: new { controller = "RelationshipStatuses", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Relationship Statuses

            #region RelationshipTypes

            routes.MapHttpRoute(
                name: "GetRelationshipTypesV1",
                routeTemplate: "relationship-types",
                defaults: new { controller = "RelationshipTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
              name: "GetRelationshipTypesByGuidV1.0.0",
              routeTemplate: "relationship-types/{guid}",
              defaults: new { controller = "RelationshipTypes", action = "GetRelationshipTypesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRelationshipTypesByGuid",
               routeTemplate: "relationship-types/{guid}",
                  defaults: new { controller = "RelationshipTypes", action = "GetRelationshipTypesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetRelationshipTypesV1.0.0",
              routeTemplate: "relationship-types",
              defaults: new { controller = "RelationshipTypes", action = "GetRelationshipTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRelationshipTypes",
               routeTemplate: "relationship-types",
                  defaults: new { controller = "RelationshipTypes", action = "GetRelationshipTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutRelationshipTypesV1.0.0",
              routeTemplate: "relationship-types/{guid}",
              defaults: new { controller = "RelationshipTypes", action = "PutRelationshipTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostRelationshipTypesV1.0.0",
               routeTemplate: "relationship-types",
               defaults: new { controller = "RelationshipTypes", action = "PostRelationshipTypesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRelationshipTypes",
                routeTemplate: "relationship-types/{guid}",
                defaults: new { controller = "RelationshipTypes", action = "DeleteRelationshipTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "RelationshipTypesUnsupported",
            routeTemplate: "relationship-types/{id}",
             defaults: new { controller = "RelationshipTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion

            #region Religions

            routes.MapHttpRoute(
                name: "GetReligionById",
                routeTemplate: "religions/{id}",
                defaults: new { controller = "Religions", action = "GetReligionByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetReligionById",
                routeTemplate: "religions/{id}",
                   defaults: new { controller = "Religions", action = "GetReligionByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetReligions",
                routeTemplate: "religions",
                defaults: new { controller = "Religions", action = "GetReligionsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetReligions",
                routeTemplate: "religions",
                   defaults: new { controller = "Religions", action = "GetReligionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutReligions",
                routeTemplate: "religions/{id}",
                defaults: new { controller = "Religions", action = "PutReligionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostReligions",
                routeTemplate: "religions",
                defaults: new { controller = "Religions", action = "PostReligionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteReligions",
                routeTemplate: "religions/{id}",
                defaults: new { controller = "Religions", action = "DeleteReligionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );



            #endregion

            #region Requirements

            routes.MapHttpRoute(
                name: "GetRequirement",
                routeTemplate: "requirements/{id}",
                defaults: new { controller = "Requirements", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryRequirementsByPost",
                routeTemplate: "qapi/requirements",
                defaults: new { controller = "Requirements", action = "QueryRequirementsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Requisitions

            routes.MapHttpRoute(
                 name: "GetRequisition",
                 routeTemplate: "requisitions/{requisitionId}",
                 defaults: new { controller = "Requisitions", action = "GetRequisitionAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, false)
                 }
             );

            routes.MapHttpRoute(
              name: "GetRequisitionsByGuidV11",
              routeTemplate: "requisitions/{guid}",
              defaults: new { controller = "Requisitions", action = "GetRequisitionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRequisitionsByGuid",
               routeTemplate: "requisitions/{guid}",
                  defaults: new { controller = "Requisitions", action = "GetRequisitionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetRequisitionsV11",
              routeTemplate: "requisitions",
              defaults: new { controller = "Requisitions", action = "GetRequisitionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetRequisitions",
               routeTemplate: "requisitions",
                  defaults: new { controller = "Requisitions", action = "GetRequisitionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutRequisitionsV11",
              routeTemplate: "requisitions/{guid}",
              defaults: new { controller = "Requisitions", action = "PutRequisitionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostRequisitionsV11",
               routeTemplate: "requisitions",
               defaults: new { controller = "Requisitions", action = "PostRequisitionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRequisitions",
                routeTemplate: "requisitions/{guid}",
                defaults: new { controller = "Requisitions", action = "DeleteRequisitionsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
             name: "RequisitionsUnsupported",
             routeTemplate: "requisitions/{id}",
              defaults: new { controller = "Requisitions", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
           );

            routes.MapHttpRoute(
                 name: "GetRequisitionsSummaryByPersonId",
                 routeTemplate: "requisitions-summary/{personId}",
                 defaults: new { controller = "Requisitions", action = "GetRequisitionsSummaryByPersonIdAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, false)
                 }
             );            

            routes.MapHttpRoute(
               name: "PostRequisition",
               routeTemplate: "requisitions",
               defaults: new { controller = "Requisitions", action = "PostRequisitionAsync"},
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(1, false)
              }
           );

            routes.MapHttpRoute(
                 name: "GetRequisitionForModifyWithLineItemDefaults",
                 routeTemplate: "requisitions-modify/{requisitionId}",
                 defaults: new { controller = "Requisitions", action = "GetRequisitionForModifyWithLineItemDefaultsAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(1, false)
                 }
             );
            #endregion

            #region ResidenceLife

            routes.MapHttpRoute(
                name: "Create",
                routeTemplate: "residence-life-receivable-invoices",
                defaults: new { controller = "ResidenceLifeReceivableInvoices", action = "PostReceivableInvoice" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateResidenceLifeDeposit",
                routeTemplate: "residence-life-deposits",
                defaults: new { controller = "ResidenceLifeDeposits", action = "PostDeposit" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region ResidencyTypes

            routes.MapHttpRoute(
               name: "GetResidencyTypeByIdAsyncV6",
               routeTemplate: "residency-types/{guid}",
               defaults: new { controller = "ResidencyTypes", action = "GetResidencyTypeByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );


            routes.MapHttpRoute(
               name: "DefaultResidencyTypeByGuid",
               routeTemplate: "residency-types/{guid}",
                  defaults: new { controller = "ResidencyTypes", action = "GetResidencyTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetResidencyTypesV6",
              routeTemplate: "residency-types",
              defaults: new { controller = "ResidencyTypes", action = "GetResidencyTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetResidencyTypesV6",
               routeTemplate: "residency-types",
                  defaults: new { controller = "ResidencyTypes", action = "GetResidencyTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );


            routes.MapHttpRoute(
              name: "DefaultPutResidencyTypeV6",
              routeTemplate: "residency-types/{id}",
              defaults: new { controller = "ResidencyTypes", action = "PutResidencyTypeAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT")
              }
          );

            routes.MapHttpRoute(
               name: "DefaultPostResidencyType",
               routeTemplate: "residency-types",
               defaults: new { controller = "ResidencyTypes", action = "PostResidencyTypeAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST")
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteResidencyType",
                routeTemplate: "residency-types/{guid}",
                defaults: new { controller = "ResidencyTypes", action = "DeleteResidencyTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
           );


            #endregion

            #region Resources

            routes.MapHttpRoute(
                name: "GetApiResources",
                routeTemplate: "resources",
                   defaults: new { controller = "Resources", action = "GetResources" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                }
            );

            #endregion

            #region RestrictionTypes

            //WARNING: This route is obsolete as of HeDM Version 4. Replaced by GetPersonRestrictionTypeById2.
            routes.MapHttpRoute(
                name: "GetPersonRestrictionTypeByGuid",
                routeTemplate: "restriction-types/{guid}",
                defaults: new { controller = "PersonRestrictionTypes", action = "GetRestrictionTypeByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(HedtechIntegrationMediaTypeFormat, 1), string.Format(HedtechIntegrationMediaTypeFormat, 3))
                }
            );

            //WARNING: This route is obsolete as of HeDM Version 4. Replaced by GetPersonRestrictionTypes2.
            routes.MapHttpRoute(
                name: "GetPersonRestrictionTypes",
                routeTemplate: "restriction-types",
                defaults: new { controller = "PersonRestrictionTypes", action = "GetRestrictionTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(HedtechIntegrationMediaTypeFormat, 1), string.Format(HedtechIntegrationMediaTypeFormat, 3))
                }
            );

            routes.MapHttpRoute(
                name: "GetRestrictions",
                routeTemplate: "restriction-types",
                defaults: new { controller = "RestrictionTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Roles

            routes.MapHttpRoute(
                name: "GetRole",
                routeTemplate: "roles",
                defaults: new { controller = "Roles", action = "GetRolesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Rooms

            routes.MapHttpRoute(
              name: "GetHedmRoomsV10",
                routeTemplate: "rooms",
              defaults: new { controller = "Rooms", action = "GetHedmRooms4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
                }
            );

            routes.MapHttpRoute(
              name: "GetHedmRoomsV6",
                routeTemplate: "rooms",
              defaults: new { controller = "Rooms", action = "GetHedmRooms3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                 name: "GetRooms",
                 routeTemplate: "rooms",
                 defaults: new { controller = "Rooms", action = "GetRoomsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );


            routes.MapHttpRoute(
              name: "DefaultGetHedmRooms",
                routeTemplate: "rooms",
              defaults: new { controller = "Rooms", action = "GetHedmRooms4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(10, true)
                }
            );

            routes.MapHttpRoute(
              name: "GetHedmRoomByIdV10",
               routeTemplate: "rooms/{id}",
              defaults: new { controller = "Rooms", action = "GetHedmRoomById2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
               }
           );

            routes.MapHttpRoute(
              name: "GetHedmRoomByIdV6",
               routeTemplate: "rooms/{id}",
              defaults: new { controller = "Rooms", action = "GetHedmRoomById2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
              name: "DefaultGetHedmRoomById",
               routeTemplate: "rooms/{id}",
              defaults: new { controller = "Rooms", action = "GetHedmRoomById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)

               }
           );

            routes.MapHttpRoute(
               name: "PutRoomV6",
               routeTemplate: "rooms/{id}",
                defaults: new { controller = "Rooms", action = "PutRoom" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "PutRoomV10",
               routeTemplate: "rooms/{id}",
                defaults: new { controller = "Rooms", action = "PutRoom" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
               }
           );

            routes.MapHttpRoute(
               name: "PostRoomV6",
              routeTemplate: "rooms",
              defaults: new { controller = "Rooms", action = "PostRoom" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "PostRoomV10",
              routeTemplate: "rooms",
              defaults: new { controller = "Rooms", action = "PostRoom" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DeleteRoom",
               routeTemplate: "rooms/{id}",
                defaults: new { controller = "Rooms", action = "DeleteRoom" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
           );
            #endregion

            #region rooms qapi

            routes.MapHttpRoute(
              name: "QueryRoomAvailabilityByPostV6",
              routeTemplate: "qapi/rooms",
             defaults: new { controller = "Rooms", action = "QueryAvailableRoomsByPost3Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationQapiMediaTypeFormat, "room-availability", 6)),
             }
          );

            routes.MapHttpRoute(
              name: "QueryRoomAvailabilityByPostV10",
              routeTemplate: "qapi/rooms",
             defaults: new { controller = "Rooms", action = "QueryAvailableRoomsByPost4Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationQapiMediaTypeFormat, "room-availability", 10)),
             }
          );

            routes.MapHttpRoute(
             name: "QueryRoomsMinimumByPostV6",
             routeTemplate: "qapi/rooms",
            defaults: new { controller = "Rooms", action = "QueryRoomsMinimumByPostAsync", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationQapiMediaTypeFormat, "room-minimum", 6)),
            }
        );
            #endregion

            #region RoomCharacteristics

            routes.MapHttpRoute(
               name: "GetRoomCharacteristicByGuidV8",
               routeTemplate: "room-characteristics/{id}",
               defaults: new { controller = "RoomCharacteristics", action = "GetRoomCharacteristicByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
           );

            routes.MapHttpRoute(
               name: "GetRoomCharacteristicByGuid",
               routeTemplate: "room-characteristics/{id}",
               defaults: new { controller = "RoomCharacteristics", action = "GetRoomCharacteristicByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetRoomCharacteristicByGuid",
                routeTemplate: "room-characteristics/{id}",
                defaults: new { controller = "RoomCharacteristics", action = "GetRoomCharacteristicByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRoomCharacteristicsV8",
                routeTemplate: "room-characteristics",
                defaults: new { controller = "RoomCharacteristics", action = "GetRoomCharacteristicsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "GetRoomCharacteristics",
                routeTemplate: "room-characteristics",
                defaults: new { controller = "RoomCharacteristics", action = "GetRoomCharacteristicsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetRoomCharacteristics",
                routeTemplate: "room-characteristics",
                defaults: new { controller = "RoomCharacteristics", action = "GetRoomCharacteristicsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostRoomCharacteristicV8",
                routeTemplate: "room-characteristics",
                defaults: new { controller = "RoomCharacteristics", action = "PostRoomCharacteristicAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PostRoomCharacteristic",
                routeTemplate: "room-characteristics",
                defaults: new { controller = "RoomCharacteristics", action = "PostRoomCharacteristicAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutRoomCharacteristicV8",
                routeTemplate: "room-characteristics/{id}",
                defaults: new { controller = "RoomCharacteristics", action = "PutRoomCharacteristicAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PutRoomCharacteristic",
                routeTemplate: "room-characteristics/{id}",
                defaults: new { controller = "RoomCharacteristics", action = "PutRoomCharacteristicAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteRoomCharacteristic",
                routeTemplate: "room-characteristics/{id}",
                defaults: new { controller = "RoomCharacteristics", action = "DeleteRoomCharacteristicAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Roommate Characteristics

            routes.MapHttpRoute(
              name: "GetRoommateCharacteristicsByGuidV8",
              routeTemplate: "roommate-characteristics/{guid}",
              defaults: new { controller = "RoommateCharacteristics", action = "GetRoommateCharacteristicsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRoommateCharacteristicsByGuid",
               routeTemplate: "roommate-characteristics/{guid}",
                  defaults: new { controller = "RoommateCharacteristics", action = "GetRoommateCharacteristicsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetRoommateCharacteristicsV8",
              routeTemplate: "roommate-characteristics",
              defaults: new { controller = "RoommateCharacteristics", action = "GetRoommateCharacteristicsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "GetRoommateCharacteristics",
               routeTemplate: "roommate-characteristics",
                  defaults: new { controller = "RoommateCharacteristics", action = "GetRoommateCharacteristicsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutRoommateCharacteristicsV8",
              routeTemplate: "roommate-characteristics/{guid}",
              defaults: new { controller = "RoommateCharacteristics", action = "PutRoommateCharacteristicsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostRoommateCharacteristicsV8",
               routeTemplate: "roommate-characteristics",
               defaults: new { controller = "RoommateCharacteristics", action = "PostRoommateCharacteristicsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRoommateCharacteristics",
                routeTemplate: "roommate-characteristics/{guid}",
                defaults: new { controller = "RoommateCharacteristics", action = "DeleteRoommateCharacteristicsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Roommate Characteristics

            #region  Room Rates

            routes.MapHttpRoute(
              name: "GetRoomRatesByGuidV10",
              routeTemplate: "room-rates/{guid}",
              defaults: new { controller = "RoomRates", action = "GetRoomRatesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRoomRatesByGuid",
               routeTemplate: "room-rates/{guid}",
                  defaults: new { controller = "RoomRates", action = "GetRoomRatesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetRoomRatesV10",
              routeTemplate: "room-rates",
              defaults: new { controller = "RoomRates", action = "GetRoomRatesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetRoomRates",
               routeTemplate: "room-rates",
                  defaults: new { controller = "RoomRates", action = "GetRoomRatesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutRoomRatesV10",
              routeTemplate: "room-rates/{guid}",
              defaults: new { controller = "RoomRates", action = "PutRoomRatesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostRoomRatesV10",
               routeTemplate: "room-rates",
               defaults: new { controller = "RoomRates", action = "PostRoomRatesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRoomRates",
                routeTemplate: "room-rates/{guid}",
                defaults: new { controller = "RoomRates", action = "DeleteRoomRatesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Room Rates

            #region Room Types

            routes.MapHttpRoute(
              name: "GetRoomTypesByGuidV6",
              routeTemplate: "room-types/{id}",
              defaults: new { controller = "RoomTypes", action = "GetRoomTypeByIdAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetRoomTypesByGuid",
               routeTemplate: "room-types/{id}",
                  defaults: new { controller = "RoomTypes", action = "GetRoomTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetHedmRoomTypesV6",
              routeTemplate: "room-types",
              defaults: new { controller = "RoomTypes", action = "GetRoomTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "GetHedmRoomTypes",
               routeTemplate: "room-types",
                  defaults: new { controller = "RoomTypes", action = "GetRoomTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutRoomTypeV6",
              routeTemplate: "room-types/{id}",
              defaults: new { controller = "RoomTypes", action = "PutRoomType" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
               name: "PostRoomTypeV6",
               routeTemplate: "room-types",
               defaults: new { controller = "RoomTypes", action = "PostRoomType" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteRoomType",
                routeTemplate: "room-types/{id}",
                defaults: new { controller = "RoomTypes", action = "DeleteRoomType" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion

            #region Schools

            routes.MapHttpRoute(
                name: "GetSchools",
                routeTemplate: "schools",
                defaults: new { controller = "Schools", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region SectionDescriptionTypes

            routes.MapHttpRoute(
                name: "GetSectionDescriptionTypeById",
                routeTemplate: "section-description-types/{guid}",
                defaults: new { controller = "SectionDescriptionTypes", action = "GetSectionDescriptionTypeByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetSectionDescriptionTypeById",
                routeTemplate: "section-description-types/{guid}",
                   defaults: new { controller = "SectionDescriptionTypes", action = "GetSectionDescriptionTypeByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionDescriptionTypes",
                routeTemplate: "section-description-types",
                defaults: new { controller = "SectionDescriptionTypes", action = "GetSectionDescriptionTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetSectionDescriptionTypes",
                routeTemplate: "section-description-types",
                   defaults: new { controller = "SectionDescriptionTypes", action = "GetSectionDescriptionTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PutSectionDescriptionTypes",
                routeTemplate: "section-description-types/{guid}",
                defaults: new { controller = "SectionDescriptionTypes", action = "PutSectionDescriptionTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostSectionDescriptionTypes",
                routeTemplate: "section-description-types",
                defaults: new { controller = "SectionDescriptionTypes", action = "PostSectionDescriptionTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteSectionDescriptionTypes",
                routeTemplate: "section-description-types/{guid}",
                defaults: new { controller = "SectionDescriptionTypes", action = "DeleteSectionDescriptionTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "SectionDescriptionTypesUnsupported",
              routeTemplate: "section-description-types/{id}",
               defaults: new { controller = "SectionDescriptionTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion

            #region SectionGradeTypes

            routes.MapHttpRoute(
                name: "GetSectionGradeTypeByIdV6",
                routeTemplate: "section-grade-types/{id}",
                defaults: new { controller = "SectionGradeTypes", action = "GetSectionGradeTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetSectionGradeTypeById",
                routeTemplate: "section-grade-types/{id}",
                   defaults: new { controller = "SectionGradeTypes", action = "GetSectionGradeTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true),
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionGradeTypesV6",
                routeTemplate: "section-grade-types",
                defaults: new { controller = "SectionGradeTypes", action = "GetSectionGradeTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetSectionGradeTypes",
                routeTemplate: "section-grade-types",
                   defaults: new { controller = "SectionGradeTypes", action = "GetSectionGradeTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutSectionGradeTypesV6",
                routeTemplate: "section-grade-types/{id}",
                defaults: new { controller = "SectionGradeTypes", action = "PutSectionGradeTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostSectionGradeTypesV6",
                routeTemplate: "section-grade-types",
                defaults: new { controller = "SectionGradeTypes", action = "PostSectionGradeTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteSectionGradeTypes",
                routeTemplate: "section-grade-types/{id}",
                defaults: new { controller = "SectionGradeTypes", action = "DeleteSectionGradeTypesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Section Instructors

            routes.MapHttpRoute(
              name: "GetSectionInstructorsByGuidV10",
              routeTemplate: "section-instructors/{guid}",
              defaults: new { controller = "SectionInstructors", action = "GetSectionInstructorsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetSectionInstructorsByGuid",
               routeTemplate: "section-instructors/{guid}",
                  defaults: new { controller = "SectionInstructors", action = "GetSectionInstructorsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetSectionInstructorsV10",
              routeTemplate: "section-instructors",
              defaults: new { controller = "SectionInstructors", action = "GetSectionInstructorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetSectionInstructors",
               routeTemplate: "section-instructors",
                  defaults: new { controller = "SectionInstructors", action = "GetSectionInstructorsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutSectionInstructorsV10",
              routeTemplate: "section-instructors/{guid}",
              defaults: new { controller = "SectionInstructors", action = "PutSectionInstructorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostSectionInstructorsV10",
               routeTemplate: "section-instructors",
               defaults: new { controller = "SectionInstructors", action = "PostSectionInstructorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteSectionInstructors",
                routeTemplate: "section-instructors/{guid}",
                defaults: new { controller = "SectionInstructors", action = "DeleteSectionInstructorsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Section Instructors

            #region SectionPermission

            routes.MapHttpRoute(
                name: "GetSectionPermission",
                routeTemplate: "sections/{sectionId}/section-permission",
                defaults: new { controller = "SectionPermissions", action = "GetSectionPermissionAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region SectionRegistrations

            routes.MapHttpRoute(
                name: "GetHedmSectionRegistration7",
                routeTemplate: "section-registrations/{guid}",
                defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistration2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmSectionRegistration6",
                routeTemplate: "section-registrations/{guid}",
                defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrationAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
              name: "GetSectionRegistrationsByGuidV1600",
              routeTemplate: "section-registrations/{guid}",
              defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrationByGuid3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
              name: "GetSectionRegistrationsGradeOptionsByGuidV1",
              routeTemplate: "section-registrations/{guid}",
              defaults: new { controller = "SectionRegistrationsGradeOptions", action = "GetSectionRegistrationsGradeOptionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationSectionRegistrationGradeOptionsFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "DefaultGetHedmSectionRegistration",
                routeTemplate: "section-registrations/{guid}",
                defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrationByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmSectionRegistrations7",
                routeTemplate: "section-registrations",
                defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrations2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetHedmSectionRegistrations6",
                routeTemplate: "section-registrations",
                defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrationsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
              name: "GetSectionRegistrationsV1600",
              routeTemplate: "section-registrations",
              defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrations3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
              name: "GetSectionRegistrationsGradeOptionsV1",
              routeTemplate: "section-registrations",
              defaults: new { controller = "SectionRegistrationsGradeOptions", action = "GetSectionRegistrationsGradeOptionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationSectionRegistrationGradeOptionsFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "DefaultGetHedmSectionRegistrations",
                routeTemplate: "section-registrations",
                defaults: new { controller = "SectionRegistrations", action = "GetSectionRegistrations3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
               name: "PostSectionRegistrationsV1600",
               routeTemplate: "section-registrations",
               defaults: new { controller = "SectionRegistrations", action = "PostSectionRegistrations3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "PostHedmSectionRegistration7",
                routeTemplate: "section-registrations",
                defaults: new { controller = "SectionRegistrations", action = "PostSectionRegistration2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmSectionRegistration6",
                routeTemplate: "section-registrations",
                defaults: new { controller = "SectionRegistrations", action = "PostSectionRegistrationAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "PostSectionRegistrationsGradeOptionsV1",
               routeTemplate: "section-registrations",
               defaults: new { controller = "SectionRegistrationsGradeOptions", action = "PostSectionRegistrationsGradeOptionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationSectionRegistrationGradeOptionsFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
              name: "PutSectionRegistrationsV1600",
              routeTemplate: "section-registrations/{guid}",
              defaults: new { controller = "SectionRegistrations", action = "PutSectionRegistrations3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "PutHedmSectionRegistration7",
                routeTemplate: "section-registrations/{guid}",
                defaults: new { controller = "SectionRegistrations", action = "PutSectionRegistration2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutHedmSectionRegistration6",
                routeTemplate: "section-registrations/{guid}",
                defaults: new { controller = "SectionRegistrations", action = "PutSectionRegistrationAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
              name: "PutSectionRegistrationsGradeOptionsV1",
              routeTemplate: "section-registrations/{guid}",
              defaults: new { controller = "SectionRegistrationsGradeOptions", action = "PutSectionRegistrationsGradeOptionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationSectionRegistrationGradeOptionsFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "DeleteHedmSectionRegistration",
                routeTemplate: "section-registrations/{guid}",
                defaults: new { controller = "SectionRegistrations", action = "DeleteSectionRegistrationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
              name: "SectionRegistrationsUnsupported",
              routeTemplate: "section-registrations/{guid}",
               defaults: new { controller = "SectionRegistrations", action = "NotAcceptableStatusException", guid = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion            

            #region SectionRegistrationStatuses

            routes.MapHttpRoute(
                name: "GetSectionRegistrationStatusById2V6",
                routeTemplate: "section-registration-statuses/{id}",
                defaults: new { controller = "SectionRegistrationStatuses", action = "GetSectionRegistrationStatusById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionRegistrationStatusById3V8",
                routeTemplate: "section-registration-statuses/{id}",
                defaults: new { controller = "SectionRegistrationStatuses", action = "GetSectionRegistrationStatusById3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetSectionRegistrationStatusById",
                routeTemplate: "section-registration-statuses/{id}",
                defaults: new { controller = "SectionRegistrationStatuses", action = "GetSectionRegistrationStatusById3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true),
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionRegistrationStatuses2V6",
                routeTemplate: "section-registration-statuses",
                defaults: new { controller = "SectionRegistrationStatuses", action = "GetSectionRegistrationStatuses2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionRegistrationStatuses3V8",
                routeTemplate: "section-registration-statuses",
                defaults: new { controller = "SectionRegistrationStatuses", action = "GetSectionRegistrationStatuses3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetSectionRegistrationStatuses3V8",
                routeTemplate: "section-registration-statuses",
                defaults: new { controller = "SectionRegistrationStatuses", action = "GetSectionRegistrationStatuses3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
           );

            routes.MapHttpRoute(
                name: "PutSectionRegistrationStatusesV6",
                routeTemplate: "section-registration-statuses/{id}",
                defaults: new { controller = "SectionRegistrationStatuses", action = "PutSectionRegistrationStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutSectionRegistrationStatusesV8",
                routeTemplate: "section-registration-statuses/{id}",
                defaults: new { controller = "SectionRegistrationStatuses", action = "PutSectionRegistrationStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PostSectionRegistrationStatusesV6",
                routeTemplate: "section-registration-statuses",
                defaults: new { controller = "SectionRegistrationStatuses", action = "PostSectionRegistrationStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostSectionRegistrationStatusesV8",
                routeTemplate: "section-registration-statuses",
                defaults: new { controller = "SectionRegistrationStatuses", action = "PostSectionRegistrationStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteSectionRegistrationStatuses",
                routeTemplate: "section-registration-statuses/{id}",
                defaults: new { controller = "SectionRegistrationStatuses", action = "DeleteSectionRegistrationStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
            name: "SectionRegistrationStatusesUnsupported",
            routeTemplate: "section-registration-statuses/{id}",
             defaults: new { controller = "SectionRegistrationStatuses", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );
            #endregion

            #region SectionMaximum

            routes.MapHttpRoute(
              name: "GetHedmSectionsMaximumV6",
              routeTemplate: "sections",
              defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionsMaximum2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
              }
           );

            routes.MapHttpRoute(
              name: "GetHedmSectionsMaximumV8",
               routeTemplate: "sections",
              defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionsMaximum3Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "GetHedmSectionsMaximumV11",
               routeTemplate: "sections",
              defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionsMaximum4Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "GetHedmSectionsMaximumV16.0.0",
               routeTemplate: "sections",
              defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionsMaximum5Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationSectionsMaximumMediaTypeFormat, "16.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionMaximumByGuidV6",
               routeTemplate: "sections/{id}",
               defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionMaximumByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionMaximumByGuidV8",
               routeTemplate: "sections/{id}",
               defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionMaximumByGuid3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 8))
               }
           );

            routes.MapHttpRoute(
              name: "GetHedmSectionMaximumByGuidV11",
              routeTemplate: "sections/{id}",
              defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionMaximumByGuid4Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "GetHedmSectionMaximumByGuidV16.0.0",
              routeTemplate: "sections/{id}",
              defaults: new { controller = "SectionsMaximum", action = "GetHedmSectionMaximumByGuid5Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationSectionsMaximumMediaTypeFormat, "16.0.0"))
              }
            );

            routes.MapHttpRoute(
              name: "PostHedmSectionMaximumV6",
               routeTemplate: "sections",
               defaults: new { controller = "SectionsMaximum", action = "PostHedmSectionMaximumAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostHedmSectionMaximumV8",
                routeTemplate: "sections",
                defaults: new { controller = "SectionsMaximum", action = "PostHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmSectionMaximumV11",
                routeTemplate: "sections",
                defaults: new { controller = "SectionsMaximum", action = "PostHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostHedmSectionMaximumV16.0.0",
                routeTemplate: "sections",
                defaults: new { controller = "SectionsMaximum", action = "PostHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationSectionsMaximumMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmSectionMaximumV6",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "PutHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmSectionMaximumV8",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "PutHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmSectionMaximumV11",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "PutHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
               name: "PutHedmSectionMaximumV16.0.0",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "PutHedmSectionMaximumAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationSectionsMaximumMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
                 name: "DeleteHedmSectionMaximumV6",
                 routeTemplate: "sections/{id}",
                 defaults: new { controller = "SectionsMaximum", action = "DeleteHedmSectionMaximumByGuidAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("DELETE"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 6))
                 }
             );

            routes.MapHttpRoute(
                name: "DeleteHedmSectionMaximumV8",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "DeleteHedmSectionMaximumByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmSectionMaximumV11",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "DeleteHedmSectionMaximumByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMaximumMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteHedmSectionMaximumV16.0.0",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "SectionsMaximum", action = "DeleteHedmSectionMaximumByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationSectionsMaximumMediaTypeFormat, "16.0.0"))
                }
            );

            #endregion

            #region Sections

            #region HEDM Sections v16

            routes.MapHttpRoute(
               name: "GetHedmSectionsV16",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "GetHedmSections6Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionByGuidV16",
               routeTemplate: "sections/{guid}",
               defaults: new { controller = "Sections", action = "GetHedmSectionByGuid6Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "PostHedmSectionV16",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "PostHedmSection6Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
                name: "PutHedmSectionV16",
                routeTemplate: "sections/{guid}",
                defaults: new { controller = "Sections", action = "PutHedmSection6Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionByGuidV16Default",
               routeTemplate: "sections/{guid}",
               defaults: new { controller = "Sections", action = "GetHedmSectionByGuid6Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionV16Default",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "GetHedmSections6Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            #endregion HEDM Sections v16

            #region HEDM Sections v11

            routes.MapHttpRoute(
               name: "GetHedmSectionsV11",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "GetHedmSections5Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionByGuidV11",
               routeTemplate: "sections/{guid}",
               defaults: new { controller = "Sections", action = "GetHedmSectionByGuid5Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );

            routes.MapHttpRoute(
               name: "PostHedmSectionV11",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "PostHedmSection5Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
            );

            routes.MapHttpRoute(
                name: "PutHedmSectionV11",
                routeTemplate: "sections/{guid}",
                defaults: new { controller = "Sections", action = "PutHedmSection5Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionByGuidV11Default",
               routeTemplate: "sections/{guid}",
               defaults: new { controller = "Sections", action = "GetHedmSectionByGuid5Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionV11Default",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "GetHedmSections5Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );
            #endregion HEDM Sections v11

            #region HEDM Sections v8

            routes.MapHttpRoute(
               name: "GetHedmSectionsV8",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "GetHedmSections4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionByGuidV8",
               routeTemplate: "sections/{id}",
               defaults: new { controller = "Sections", action = "GetHedmSectionByGuid3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
               name: "PostHedmSectionV8",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "PostHedmSection4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
               }
            );

            routes.MapHttpRoute(
                name: "PutHedmSectionV8",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "Sections", action = "PutHedmSection4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            #endregion

            #region HEDM Sections v6

            routes.MapHttpRoute(
               name: "GetHedmSectionsV6",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "GetHedmSections2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "GetHedmSectionByGuidV6",
               routeTemplate: "sections/{id}",
               defaults: new { controller = "Sections", action = "GetHedmSectionByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "PostHedmSectionV6",
               routeTemplate: "sections",
               defaults: new { controller = "Sections", action = "PostHedmSection2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "PutHedmSectionV6",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "Sections", action = "PutHedmSection2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            #endregion HEDM Sections v6

            routes.MapHttpRoute(
                name: "DeleteHedmSectionDefault",
                routeTemplate: "sections/{id}",
                defaults: new { controller = "Sections", action = "DeleteHedmSectionByGuid2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            //WARNING: This route is obsolete as of Api version 1.3. Replaced by GetSections2 route.
            routes.MapHttpRoute(
                name: "GetSections",
                routeTemplate: "sections",
                defaults: new { controller = "Sections", action = "GetSectionsAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "sectionIds" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            //WARNING: This route is obsolete as of Api version 1.4. Replaced by QuerySectionsByPost route.
            routes.MapHttpRoute(
                name: "GetSections2",
                routeTemplate: "sections",
                defaults: new { controller = "Sections", action = "GetSections2Async" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "sectionIds" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            //WARNING: This route is obsolete as of Api version 1.5. Replaced by QuerySectionsByPost2 route.
            routes.MapHttpRoute(
                name: "QuerySectionsByPost",
                routeTemplate: "qapi/sections",
                defaults: new { controller = "Sections", action = "QuerySectionsByPostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            //WARNING: This route is obsolete as of Api version 1.6. Replaced by QuerySectionsByPost3 route.
            routes.MapHttpRoute(
                name: "QuerySectionsByPost2",
                routeTemplate: "qapi/sections",
                defaults: new { controller = "Sections", action = "QuerySectionsByPost2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "QuerySectionsByPost3",
                routeTemplate: "qapi/sections",
                defaults: new { controller = "Sections", action = "QuerySectionsByPost3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );


            // WARNING: This route is obsolete as of Api version 1.3. Use GetSection3 route.
            routes.MapHttpRoute(
                name: "GetSection",
                routeTemplate: "sections/{sectionId}",
                defaults: new { controller = "Sections", action = "GetSectionAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This route is obsolete as of Api version 1.5. Use GetSection3 route.
            routes.MapHttpRoute(
                name: "GetSection2",
                routeTemplate: "sections/{sectionId}",
                defaults: new { controller = "Sections", action = "GetSection2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetSection3",
                routeTemplate: "sections/{sectionId}",
                defaults: new { controller = "Sections", action = "GetSection3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionRoster",
                routeTemplate: "sections/{sectionId}/roster",
                defaults: new { controller = "Sections", action = "GetSectionRosterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionRoster2",
                routeTemplate: "sections/{sectionId}/roster",
                defaults: new { controller = "Sections", action = "GetSectionRoster2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionWaitlist",
                routeTemplate: "sections/{sectionId}/waitlist",
                defaults: new { controller = "Sections", action = "GetSectionWaitlistAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionWaitlist2",
                routeTemplate: "sections/{sectionId}/waitlist",
                defaults: new { controller = "Sections", action = "GetSectionWaitlist2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetStudentWaitlistStatuses",
               routeTemplate: "waitlist-statuses",
               defaults: new { controller = "Sections", action = "GetStudentWaitlistStatusesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );


            routes.MapHttpRoute(
               name: "GetSectionWaitlistConfig",
               routeTemplate: "sections/{sectionId}/waitlist-config",
               defaults: new { controller = "Sections", action = "GetSectionWaitlistConfigAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetStudentSectionWaitlistsByStudentAndSectionId",
              routeTemplate: "sections/{sectionId}/waitlist-info",
              defaults: new { controller = "Sections", action = "GetStudentSectionWaitlistsByStudentAndSectionIdAsync" },
             constraints: new
             {
                 isSingle = new QueryStringConstraint(new List<string> { "studentId" }),
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(1, true)
             }
          );

            //WARNING: This route is obsolete, replaced by v2.
            routes.MapHttpRoute(
               name: "PutCollectionOfStudentGrades",
               routeTemplate: "sections/{sectionId}/grades",
               defaults: new { controller = "Sections", action = "PutCollectionOfStudentGradesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
           );

            //WARNING: This route is obsolete as of API 1.12, replaced by v3.
            routes.MapHttpRoute(
               name: "PutCollectionOfStudentGrades2",
               routeTemplate: "sections/{sectionId}/grades",
               defaults: new { controller = "Sections", action = "PutCollectionOfStudentGrades2Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(2, false)
               }
           );

            //WARNING: This route is obsolete as of API 1.13, replaced by v4 for non-ILP callers and by v1 with the json ILP media type for ILP callers.
            routes.MapHttpRoute(
               name: "PutCollectionOfStudentGrades3",
               routeTemplate: "sections/{sectionId}/grades",
               defaults: new { controller = "Sections", action = "PutCollectionOfStudentGrades3Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(3, false)
               }
           );

            routes.MapHttpRoute(
                name: "PutIlpCollectionOfStudentGrades1",
                routeTemplate: "sections/{sectionId}/grades",
                defaults: new { controller = "Sections", action = "PutIlpCollectionOfStudentGrades1Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianJsonIlpMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "PutCollectionOfStudentGrades4",
                routeTemplate: "sections/{sectionId}/grades",
                defaults: new { controller = "Sections", action = "PutCollectionOfStudentGrades4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(4, true)
                }
            );

            routes.MapHttpRoute(
                 name: "PutSection",
                 routeTemplate: "sections/{guid}",
                 defaults: new { controller = "Sections", action = "PutSectionAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("PUT"),
                     headerVersion = new HeaderVersionConstraint(1, false, string.Format(HedtechIntegrationMediaTypeFormat, 1), string.Format(HedtechIntegrationMediaTypeFormat, 3))
                 }
             );

            routes.MapHttpRoute(
                name: "QuerySectionsRegistrationDates",
                routeTemplate: "qapi/sections/registration-dates",
                defaults: new { controller = "Sections", action = "QuerySectionRegistrationDatesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSectionAddAuthorizations",
                routeTemplate: "sections/{sectionId}/add-authorizations",
                defaults: new { controller = "AddAuthorizations", action = "GetSectionAddAuthorizationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
              name: "SectionUnsupported",
              routeTemplate: "sections/{id}",
               defaults: new { controller = "Sections", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            routes.MapHttpRoute(
               name: "QuerySectionEventsICal",
               routeTemplate: "qapi/sections/section-events-ical",
               defaults: new { controller = "Sections", action = "QuerySectionEventsICalAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );


            #endregion

            #region SectionCrosslists

            routes.MapHttpRoute(
               name: "GetDataModelSectionCrosslistsV6",
               routeTemplate: "section-crosslists",
               defaults: new { controller = "SectionCrosslists", action = "GetDataModelSectionCrosslistsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetDataModelSectionCrosslists",
               routeTemplate: "section-crosslists",
                  defaults: new { controller = "SectionCrosslists", action = "GetDataModelSectionCrosslistsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
            );

            routes.MapHttpRoute(
               name: "GetDataModelSectionCrosslistsByGuidV6",
               routeTemplate: "section-crosslists/{id}",
               defaults: new { controller = "SectionCrosslists", action = "GetDataModelSectionCrosslistsByGuidAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetDataModelSectionCrosslistsByGuid",
               routeTemplate: "section-crosslists/{id}",
                  defaults: new { controller = "SectionCrosslists", action = "GetDataModelSectionCrosslistsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
            );

            routes.MapHttpRoute(
               name: "PostDataModelSectionCrosslistsV6",
               routeTemplate: "section-crosslists",
               defaults: new { controller = "SectionCrosslists", action = "PostDataModelSectionCrosslistsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "PutDataModelSectionCrosslistsV6",
                routeTemplate: "section-crosslists/{id}",
                defaults: new { controller = "SectionCrosslists", action = "PutDataModelSectionCrosslistsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteDataModelSectionCrosslists",
                routeTemplate: "section-crosslists/{id}",
                defaults: new { controller = "SectionCrosslists", action = "DeleteDataModelSectionCrosslistsByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region SectionTextbooks

            routes.MapHttpRoute(
                name: "PutSectionBook",
                routeTemplate: "section-textbooks",
                defaults: new { controller = "SectionTextbooks", action = "UpdateSectionBookAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region SectionGradingComplete

            routes.MapHttpRoute(
                name: "GetMidtermSectionGradingComplete",
                routeTemplate: "sections/{sectionId}/midterm-grading-complete",
                defaults: new { controller = "Sections", action = "GetSectionMidtermGradingCompleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostMidtermSectionGradingComplete",
                routeTemplate: "sections/{sectionId}/midterm-grading-complete",
                defaults: new { controller = "Sections", action = "PostSectionMidtermGradingCompleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Section Statuses

            routes.MapHttpRoute(
              name: "GetSectionStatusesByGuidV11",
              routeTemplate: "section-statuses/{guid}",
              defaults: new { controller = "SectionStatuses", action = "GetSectionStatusesByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetSectionStatusesByGuid",
               routeTemplate: "section-statuses/{guid}",
                  defaults: new { controller = "SectionStatuses", action = "GetSectionStatusesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetSectionStatusesV11",
              routeTemplate: "section-statuses",
              defaults: new { controller = "SectionStatuses", action = "GetSectionStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetSectionStatuses",
               routeTemplate: "section-statuses",
                  defaults: new { controller = "SectionStatuses", action = "GetSectionStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutSectionStatusesV11",
              routeTemplate: "section-statuses/{guid}",
              defaults: new { controller = "SectionStatuses", action = "PutSectionStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostSectionStatusesV11",
               routeTemplate: "section-statuses",
               defaults: new { controller = "SectionStatuses", action = "PostSectionStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteSectionStatuses",
                routeTemplate: "section-statuses/{guid}",
                defaults: new { controller = "SectionStatuses", action = "DeleteSectionStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Section Statuses

            #region  Section Title Types

            routes.MapHttpRoute(
              name: "GetSectionTitleTypesByGuidV1",
              routeTemplate: "section-title-types/{guid}",
              defaults: new { controller = "SectionTitleTypes", action = "GetSectionTitleTypeByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetSectionTitleTypesByGuid",
               routeTemplate: "section-title-types/{guid}",
                  defaults: new { controller = "SectionTitleTypes", action = "GetSectionTitleTypeByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetSectionTitleTypesV1",
              routeTemplate: "section-title-types",
              defaults: new { controller = "SectionTitleTypes", action = "GetSectionTitleTypesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetSectionTitleTypes",
               routeTemplate: "section-title-types",
                  defaults: new { controller = "SectionTitleTypes", action = "GetSectionTitleTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutSectionTitleTypesV1",
              routeTemplate: "section-title-types/{guid}",
              defaults: new { controller = "SectionTitleTypes", action = "PutSectionTitleTypeAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostSectionTitleTypesV1",
               routeTemplate: "section-title-types",
               defaults: new { controller = "SectionTitleTypes", action = "PostSectionTitleTypeAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteSectionTitleTypes",
                routeTemplate: "section-title-types/{guid}",
                defaults: new { controller = "SectionTitleTypes", action = "DeleteSectionTitleTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
              name: "SectionTitleTypesUnsupported",
              routeTemplate: "section-title-types/{id}",
               defaults: new { controller = "SectionTitleTypes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion Section Title Types

            #region  SectionTransferStatuses
            routes.MapHttpRoute(
                name: "GetSectionTransferStatuses",
                routeTemplate: "section-transfer-statuses",
                defaults: new { controller = "SectionTransferStatuses", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion SectionTransferStatuses

            #region Sessions

            // WARNING: This is an obsolete route!!!  See PostSessionLogin2
            routes.MapHttpRoute(
                name: "PostSessionLogin",
                routeTemplate: "session/login",
                defaults: new { controller = "Session", action = "PostLoginAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "PostSessionLogin2",
                routeTemplate: "session/login",
                defaults: new { controller = "Session", action = "PostLogin2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route!!!  See PostSessionProxyLogin2
            routes.MapHttpRoute(
                name: "PostSessionProxyLogin",
                routeTemplate: "session/proxy-login",
                defaults: new { controller = "Session", action = "PostProxyLoginAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "PostSessionProxyLogin2",
                routeTemplate: "session/proxy-login",
                defaults: new { controller = "Session", action = "PostProxyLogin2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostSessionLogout",
                routeTemplate: "session/logout",
                defaults: new { controller = "Session", action = "PostLogoutAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostSessionChangepassword",
                routeTemplate: "session/change-password",
                defaults: new { controller = "Session", action = "PostNewPasswordAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostSessionToken",
                routeTemplate: "session/token",
                defaults: new { controller = "Session", action = "PostTokenAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            routes.MapHttpRoute(
                name: "PutSessionProxyAccess",
                routeTemplate: "session/proxy-subjects",
                defaults: new { controller = "Session", action = "PutSessionProxySubjectsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostUserIdRecoveryRequest",
                routeTemplate: "session/recover-user-id",
                defaults: new { controller = "Session", action = "PostUserIdRecoveryRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostResetPasswordTokenRequest",
                routeTemplate: "session/password-reset-token-request",
                defaults: new { controller = "Session", action = "PostResetPasswordTokenRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostResetPassword",
                routeTemplate: "session/reset-password",
                defaults: new { controller = "Session", action = "PostResetPasswordAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region SessionCycles

            routes.MapHttpRoute(
                name: "GetSessionCycles",
                routeTemplate: "session-cycles",
                defaults: new { controller = "SessionCycles", action = "GetAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );
            #endregion

            #region  ShippingMethods

            routes.MapHttpRoute(
              name: "GetShippingMethodsByGuidV11",
              routeTemplate: "shipping-methods/{guid}",
              defaults: new { controller = "ShippingMethods", action = "GetShippingMethodsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetShippingMethodsByGuid",
               routeTemplate: "shipping-methods/{guid}",
                  defaults: new { controller = "ShippingMethods", action = "GetShippingMethodsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetShippingMethodsV11",
              routeTemplate: "shipping-methods",
              defaults: new { controller = "ShippingMethods", action = "GetShippingMethodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetShippingMethods",
               routeTemplate: "shipping-methods",
                  defaults: new { controller = "ShippingMethods", action = "GetShippingMethodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutShippingMethodsV11",
              routeTemplate: "shipping-methods/{guid}",
              defaults: new { controller = "ShippingMethods", action = "PutShippingMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );


            routes.MapHttpRoute(
               name: "PostShippingMethodsV11",
               routeTemplate: "shipping-methods",
               defaults: new { controller = "ShippingMethods", action = "PostShippingMethodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteShippingMethods",
                routeTemplate: "shipping-methods/{guid}",
                defaults: new { controller = "ShippingMethods", action = "DeleteShippingMethodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion ShippingMethods

            #region  ShipToDestinations

            routes.MapHttpRoute(
              name: "GetShipToDestinationsByGuidV10",
              routeTemplate: "ship-to-destinations/{guid}",
              defaults: new { controller = "ShipToDestinations", action = "GetShipToDestinationsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
              name: "GetShipToCodes",
              routeTemplate: "ship-to-codes",
              defaults: new { controller = "ShipToDestinations", action = "GetShipToCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, false)
              }
         );

            routes.MapHttpRoute(
               name: "DefaultGetShipToDestinationsByGuid",
               routeTemplate: "ship-to-destinations/{guid}",
                  defaults: new { controller = "ShipToDestinations", action = "GetShipToDestinationsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetShipToDestinationsV10",
              routeTemplate: "ship-to-destinations",
              defaults: new { controller = "ShipToDestinations", action = "GetShipToDestinationsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetShipToDestinations",
               routeTemplate: "ship-to-destinations",
                  defaults: new { controller = "ShipToDestinations", action = "GetShipToDestinationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutShipToDestinationsV10",
              routeTemplate: "ship-to-destinations/{guid}",
              defaults: new { controller = "ShipToDestinations", action = "PutShipToDestinationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostShipToDestinationsV10",
               routeTemplate: "ship-to-destinations",
               defaults: new { controller = "ShipToDestinations", action = "PostShipToDestinationsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteShipToDestinations",
                routeTemplate: "ship-to-destinations/{guid}",
                defaults: new { controller = "ShipToDestinations", action = "DeleteShipToDestinationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion External Employment Statuses

            #region ShoppingSheets

            routes.MapHttpRoute(
                name: "GetShoppingSheets",
                routeTemplate: "students/{studentId}/shopping-sheets",
                defaults: new { controller = "ShoppingSheets", action = "GetShoppingSheetsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Sites

            routes.MapHttpRoute(
               name: "GetHedmSiteByIdV6",
               routeTemplate: "sites/{id}",
               defaults: new { controller = "Sites", action = "GetHedmSiteByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetHedmSiteById",
               routeTemplate: "sites/{id}",
                  defaults: new { controller = "Sites", action = "GetHedmSiteByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "GetHedmSitesV6",
                routeTemplate: "sites",
                defaults: new { controller = "Sites", action = "GetHedmSitesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetHedmSites",
                routeTemplate: "sites",
                   defaults: new { controller = "Sites", action = "GetHedmSitesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(name: "PutSitesV6",
                routeTemplate: "sites/{id}",
                defaults: new { controller = "Sites", action = "PutSiteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "PostSitesV6",
                routeTemplate: "sites",
                defaults: new { controller = "Sites", action = "PostSiteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );


            routes.MapHttpRoute(
                name: "DefaultDeleteSite",
                routeTemplate: "sites/{id}",
                defaults: new { controller = "Sites", action = "DeleteSiteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region SocialMediaTypes

            routes.MapHttpRoute(
                name: "GetSocialMediaTypeByIdV6",
                routeTemplate: "social-media-types/{id}",
                defaults: new { controller = "SocialMediaTypes", action = "GetSocialMediaTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6), string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetSocialMediaTypeById",
                routeTemplate: "social-media-types/{id}",
                   defaults: new { controller = "SocialMediaTypes", action = "GetSocialMediaTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
               name: "GetSocialMediaTypesV6",
               routeTemplate: "social-media-types",
               defaults: new { controller = "SocialMediaTypes", action = "GetSocialMediaTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6), string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "GetSocialMediaTypes",
               routeTemplate: "social-media-types",
                  defaults: new { controller = "SocialMediaTypes", action = "GetSocialMediaTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "PutSocialMediaTypeV6",
               routeTemplate: "social-media-types/{id}",
               defaults: new { controller = "SocialMediaTypes", action = "PutSocialMediaTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6), string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostSocialMediaTypeV6",
                routeTemplate: "social-media-types",
                defaults: new { controller = "SocialMediaTypes", action = "PostSocialMediaTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6), string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteSocialMediaType",
                routeTemplate: "social-media-types/{id}",
                defaults: new { controller = "SocialMediaTypes", action = "DeleteSocialMediaTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region Sources

            routes.MapHttpRoute(
                 name: "GetSourceByIdV6",
                 routeTemplate: "sources/{id}",
                 defaults: new { controller = "Sources", action = "GetSourceByIdAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                 }
             );

            routes.MapHttpRoute(
                 name: "DefaultGetSourceById",
                 routeTemplate: "sources/{id}",
                    defaults: new { controller = "Sources", action = "GetSourceByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, true)
                 }
             );

            routes.MapHttpRoute(
                name: "GetSourcesV6",
                routeTemplate: "sources",
                defaults: new { controller = "Sources", action = "GetSourcesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
             );

            routes.MapHttpRoute(
               name: "DefaultGetSources",
                routeTemplate: "sources",
                   defaults: new { controller = "Sources", action = "GetSourcesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
           );

            routes.MapHttpRoute(
              name: "PutSourcesV6",
               routeTemplate: "sources/{id}",
               defaults: new { controller = "Sources", action = "PutSourcesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
          );

            routes.MapHttpRoute(
              name: "PostSourcesV6",
               routeTemplate: "sources",
               defaults: new { controller = "Sources", action = "PostSourcesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DefaultDeleteSources",
               routeTemplate: "sources/{id}",
               defaults: new { controller = "Sources", action = "DeleteSourcesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE"),
               }
           );

            #endregion

            #region SourceContexts

            routes.MapHttpRoute(
                 name: "GetSourceContextsByIdV6",
                 routeTemplate: "source-contexts/{id}",
                 defaults: new { controller = "SourceContext", action = "GetSourceContextsByIdAsync", isEedmSupported = true },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
                 }
             );

            routes.MapHttpRoute(
                name: "DefaultGetSourceContextsById",
                routeTemplate: "source-contexts/{id}",
                   defaults: new { controller = "SourceContext", action = "GetSourceContextsByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSourceContextsV6",
                routeTemplate: "source-contexts",
                defaults: new { controller = "SourceContext", action = "GetSourceContextsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetSourceContexts",
               routeTemplate: "source-contexts",
                  defaults: new { controller = "SourceContext", action = "GetSourceContextsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutSourceContextsV6",
              routeTemplate: "source-contexts/{id}",
              defaults: new { controller = "SourceContext", action = "PutSourceContextsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
              }
          );

            routes.MapHttpRoute(
              name: "PostSourceContextsV6",
              routeTemplate: "source-contexts",
              defaults: new { controller = "SourceContext", action = "PostSourceContextsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
              }
          );
            routes.MapHttpRoute(
               name: "DefaultDeleteSourceContexts",
               routeTemplate: "source-contexts/{id}",
               defaults: new { controller = "SourceContext", action = "DeleteSourceContextsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("DELETE")
               }
           );

            #endregion

            #region Specializations

            routes.MapHttpRoute(
                name: "GetSpecializations",
                routeTemplate: "specializations",
                defaults: new { controller = "Specializations", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region SpecialNeeds

            routes.MapHttpRoute(
                name: "GetSpecialNeeds",
                routeTemplate: "special-needs",
                defaults: new { controller = "SpecialNeeds", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Staff
            routes.MapHttpRoute(
                name: "GetStaffRestrictions",
                routeTemplate: "staff/{staffId}/restrictions",
                defaults: new { controller = "Staff", action = "GetStaffRestrictions" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStaff",
                routeTemplate: "staff/{staffId}",
                defaults: new { controller = "Staff", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region States

            routes.MapHttpRoute(
                name: "GetStates",
                routeTemplate: "states",
                defaults: new { controller = "States", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region  Student Academic Credentials

            routes.MapHttpRoute(
              name: "GetStudentAcademicCredentialsByGuidV100",
              routeTemplate: "student-academic-credentials/{guid}",
              defaults: new { controller = "StudentAcademicCredentials", action = "GetStudentAcademicCredentialsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicCredentialsByGuid",
               routeTemplate: "student-academic-credentials/{guid}",
                  defaults: new { controller = "StudentAcademicCredentials", action = "GetStudentAcademicCredentialsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentAcademicCredentialsV100",
              routeTemplate: "student-academic-credentials",
              defaults: new { controller = "StudentAcademicCredentials", action = "GetStudentAcademicCredentialsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicCredentials",
               routeTemplate: "student-academic-credentials",
                  defaults: new { controller = "StudentAcademicCredentials", action = "GetStudentAcademicCredentialsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
               name: "PostStudentAcademicCredentialsV100",
               routeTemplate: "student-academic-credentials",
               defaults: new { controller = "StudentAcademicCredentials", action = "PostStudentAcademicCredentialsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
              name: "PutStudentAcademicCredentialsV100",
              routeTemplate: "student-academic-credentials/{guid}",
              defaults: new { controller = "StudentAcademicCredentials", action = "PutStudentAcademicCredentialsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentAcademicCredentials",
                routeTemplate: "student-academic-credentials/{guid}",
                defaults: new { controller = "StudentAcademicCredentials", action = "DeleteStudentAcademicCredentialsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "StudentAcademicCredentialsUnsupported",
            routeTemplate: "student-academic-credentials/{id}",
             defaults: new { controller = "StudentAcademicCredentials", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Student Academic Credentials

            #region StudentAcademicPeriodProfiles

            routes.MapHttpRoute(
                name: "GetStudentAcademicPeriodProfilesV11",
                routeTemplate: "student-academic-period-profiles",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "GetStudentAcademicPeriodProfiles2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicPeriodProfilesV7",
                routeTemplate: "student-academic-period-profiles",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "GetStudentAcademicPeriodProfilesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetStudentAcademicPeriodProfiles",
                routeTemplate: "student-academic-period-profiles",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "GetStudentAcademicPeriodProfiles2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicPeriodProfileByGuidV11",
                routeTemplate: "student-academic-period-profiles/{id}",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "GetStudentAcademicPeriodProfileByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicPeriodProfileByGuidV7",
                routeTemplate: "student-academic-period-profiles/{id}",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "GetStudentAcademicPeriodProfileByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                 name: "DefaultGetStudentAcademicPeriodProfileByGuid",
                 routeTemplate: "student-academic-period-profiles/{id}",
                 defaults: new { controller = "StudentAcademicPeriodProfiles", action = "GetStudentAcademicPeriodProfileByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint(11, true)
                 }
             );

            routes.MapHttpRoute(
               name: "PostStudentAcademicPeriodProfilesV11",
               routeTemplate: "student-academic-period-profiles",
               defaults: new { controller = "StudentAcademicPeriodProfiles", action = "CreateStudentAcademicPeriodProfilesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
               name: "PostStudentAcademicPeriodProfilesV7",
               routeTemplate: "student-academic-period-profiles",
               defaults: new { controller = "StudentAcademicPeriodProfiles", action = "CreateStudentAcademicPeriodProfilesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PutStudentAcademicPeriodProfilesV11",
                routeTemplate: "student-academic-period-profiles/{id}",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "UpdateStudentAcademicPeriodProfilesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentAcademicPeriodProfilesV7",
                routeTemplate: "student-academic-period-profiles/{id}",
                defaults: new { controller = "StudentAcademicPeriodProfiles", action = "UpdateStudentAcademicPeriodProfilesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
              name: "DefaultDeleteStudentAcademicPeriodProfiles",
              routeTemplate: "student-academic-period-profiles/{id}",
              defaults: new { controller = "StudentAcademicPeriodProfiles", action = "DeleteStudentAcademicPeriodProfilesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("DELETE"),
              }
          );

            #endregion

            #region  StudentAcademicPeriods

            routes.MapHttpRoute(
              name: "GetStudentAcademicPeriodsByGuidV1.0.0",
              routeTemplate: "student-academic-periods/{guid}",
              defaults: new { controller = "StudentAcademicPeriods", action = "GetStudentAcademicPeriodsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicPeriodsByGuid",
               routeTemplate: "student-academic-periods/{guid}",
                  defaults: new { controller = "StudentAcademicPeriods", action = "GetStudentAcademicPeriodsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentAcademicPeriodsV1.0.0",
              routeTemplate: "student-academic-periods",
              defaults: new { controller = "StudentAcademicPeriods", action = "GetStudentAcademicPeriodsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicPeriods",
               routeTemplate: "student-academic-periods",
                  defaults: new { controller = "StudentAcademicPeriods", action = "GetStudentAcademicPeriodsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentAcademicPeriodsV1.0.0",
              routeTemplate: "student-academic-periods/{guid}",
              defaults: new { controller = "StudentAcademicPeriods", action = "PutStudentAcademicPeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentAcademicPeriodsV1.0.0",
               routeTemplate: "student-academic-periods",
               defaults: new { controller = "StudentAcademicPeriods", action = "PostStudentAcademicPeriodsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentAcademicPeriods",
                routeTemplate: "student-academic-periods/{guid}",
                defaults: new { controller = "StudentAcademicPeriods", action = "DeleteStudentAcademicPeriodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "StudentAcademicPeriodsUnsupported",
            routeTemplate: "student-academic-periods/{id}",
             defaults: new { controller = "StudentAcademicPeriods", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Student Academic Periods

            #region  StudentAcademicPeriodStatuses

            routes.MapHttpRoute(
             name: "GetStudentAcademicPeriodStatusesByGuidV1.0.0",
             routeTemplate: "student-academic-period-statuses/{guid}",
             defaults: new { controller = "StudentAcademicPeriodStatuses", action = "GetStudentAcademicPeriodStatusesByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
             }
         );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicPeriodStatusesByGuid",
               routeTemplate: "student-academic-period-statuses/{guid}",
                  defaults: new { controller = "StudentAcademicPeriodStatuses", action = "GetStudentAcademicPeriodStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentAcademicPeriodStatusesV1.0.0",
              routeTemplate: "student-academic-period-statuses",
              defaults: new { controller = "StudentAcademicPeriodStatuses", action = "GetStudentAcademicPeriodStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicPeriodStatuses",
               routeTemplate: "student-academic-period-statuses",
                  defaults: new { controller = "StudentAcademicPeriodStatuses", action = "GetStudentAcademicPeriodStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentAcademicPeriodStatusesV1.0.0",
              routeTemplate: "student-academic-period-statuses/{guid}",
              defaults: new { controller = "StudentAcademicPeriodStatuses", action = "PutStudentAcademicPeriodStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentAcademicPeriodStatusesV1.0.0",
               routeTemplate: "student-academic-period-statuses",
               defaults: new { controller = "StudentAcademicPeriodStatuses", action = "PostStudentAcademicPeriodStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentAcademicPeriodStatuses",
                routeTemplate: "student-academic-period-statuses/{guid}",
                defaults: new { controller = "StudentAcademicPeriodStatuses", action = "DeleteStudentAcademicPeriodStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "StudentAcademicPeriodStatusesUnsupported",
            routeTemplate: "student-academic-period-statuses/{id}",
             defaults: new { controller = "StudentAcademicPeriodStatuses", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion StudentAcademicPeriodStatuses

            #region StudentAcademicPrograms

            routes.MapHttpRoute(
            name: "PutStudentAcademicProgramsSubmissionsV1.0.0",
            routeTemplate: "student-academic-programs/{id}",
            defaults: new
            {
                controller = "StudentAcademicPrograms",
                action = "UpdateStudentAcademicProgramsSubmissionsAsync",
                isEedmSupported = true,
                RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0")
            },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentAcademicProgramSubmissionsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("17.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0")),

            }
          );

            routes.MapHttpRoute(
            name: "DefaultPutStudentAcademicProgramsSubmissionsV1.0.0",
            routeTemplate: "student-academic-programs/{id}",
            defaults: new
            {
                controller = "StudentAcademicPrograms",
                action = "UpdateStudentAcademicProgramsSubmissionsAsync",
                isEedmSupported = false,
                RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0")
            },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentAcademicProgramSubmissionsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("17.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0")),

            }
          );

            routes.MapHttpRoute(
              name: "PostStudentAcademicProgramsSubmissionsV1.0.0",
              routeTemplate: "student-academic-programs",
              defaults: new
              {
                  controller = "StudentAcademicPrograms",
                  action = "CreateStudentAcademicProgramsSubmissionsAsync",
                  isEedmSupported = true,
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentAcademicProgramSubmissionsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("17.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
              }
            );

            routes.MapHttpRoute(
             name: "DefaultPostStudentAcademicProgramsSubmissionsV1.0.0",
             routeTemplate: "student-academic-programs",
             defaults: new
             {
                 controller = "StudentAcademicPrograms",
                 action = "CreateStudentAcademicProgramsSubmissionsAsync",
                 isEedmSupported = false,
                 RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0")
             },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentAcademicProgramSubmissionsFormat, "1.0.0")),
                 headerVersion = new HeaderVersionConstraint("17.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
             }
           );

            routes.MapHttpRoute(
             name: "StudentAcademicProgramsSubmissionsUnsupported",
             routeTemplate: "student-academic-programs/{id}",
              defaults: new { controller = "StudentAcademicPrograms", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                     contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentAcademicProgramSubmissionsFormat, "1.0.0")),
                     headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                 }
           );

            routes.MapHttpRoute(
               name: "GetStudentAcademicProgramsV17_0_0",
               routeTemplate: "student-academic-programs",
               defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicPrograms4Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("17.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentAcademicProgramsV16_0_0",
               routeTemplate: "student-academic-programs",
               defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicPrograms3Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
                name: "GetStudentAcademicProgramsV11",
                routeTemplate: "student-academic-programs",
                defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicPrograms2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicProgramsV6",
                routeTemplate: "student-academic-programs",
                defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicProgramsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetStudentAcademicPrograms",
                routeTemplate: "student-academic-programs",
                   defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicPrograms4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("17.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicProgramsByGuidV17_0_0",
                routeTemplate: "student-academic-programs/{id}",
                defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicProgramsByGuid4Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("17.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAcademicProgramsByGuidV16_0_0",
                routeTemplate: "student-academic-programs/{id}",
                defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicProgramsByGuid3Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
               name: "GetStudentAcademicProgramsByGuidV11",
               routeTemplate: "student-academic-programs/{id}",
               defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicProgramsByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );

            routes.MapHttpRoute(
                name: "GetStudentAcademicProgramsByGuidV6",
                routeTemplate: "student-academic-programs/{id}",
                defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicProgramsByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                 name: "DefaultGetStudentAcademicProgramsByGuid",
                 routeTemplate: "student-academic-programs/{id}",
                    defaults: new { controller = "StudentAcademicPrograms", action = "GetStudentAcademicProgramsByGuid4Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0") },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("GET"),
                     headerVersion = new HeaderVersionConstraint("17.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
                 }
             );

            routes.MapHttpRoute(
               name: "PostStudentAcademicProgramsV17_0_0",
               routeTemplate: "student-academic-programs",
               defaults: new { controller = "StudentAcademicPrograms", action = "CreateStudentAcademicPrograms3Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("17.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
               }
           );

            routes.MapHttpRoute(
               name: "PostStudentAcademicProgramsV16_0_0",
               routeTemplate: "student-academic-programs",
               defaults: new { controller = "StudentAcademicPrograms", action = "CreateStudentAcademicPrograms3Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PostStudentAcademicProgramsV11",
              routeTemplate: "student-academic-programs",
              defaults: new { controller = "StudentAcademicPrograms", action = "CreateStudentAcademicPrograms2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
             name: "PostStudentAcademicProgramsV6",
             routeTemplate: "student-academic-programs",
             defaults: new { controller = "StudentAcademicPrograms", action = "CreateStudentAcademicProgramsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
             }
         );

            routes.MapHttpRoute(
              name: "PutStudentAcademicProgramsV17_0_0",
              routeTemplate: "student-academic-programs/{id}",
              defaults: new { controller = "StudentAcademicPrograms", action = "UpdateStudentAcademicPrograms3Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("17.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "17.0.0"))
              }
          );

            routes.MapHttpRoute(
                name: "PutStudentAcademicProgramsV16_0_0",
                routeTemplate: "student-academic-programs/{id}",
                defaults: new { controller = "StudentAcademicPrograms", action = "UpdateStudentAcademicPrograms3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
               name: "PutStudentAcademicProgramsV11",
               routeTemplate: "student-academic-programs/{id}",
               defaults: new { controller = "StudentAcademicPrograms", action = "UpdateStudentAcademicPrograms2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
               }
           );


            routes.MapHttpRoute(
              name: "PutStudentAcademicPrograms",
              routeTemplate: "student-academic-programs/{id}",
              defaults: new { controller = "StudentAcademicPrograms", action = "UpdateStudentAcademicProgramsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
              }
          );

            routes.MapHttpRoute(
              name: "DefaultDeleteStudentAcademicPrograms",
              routeTemplate: "student-academic-programs/{id}",
              defaults: new { controller = "StudentAcademicPrograms", action = "DeleteStudentAcademicProgramsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("DELETE"),
              }
           );

            routes.MapHttpRoute(
              name: "StudentAcademicProgramsUnsupported",
              routeTemplate: "student-academic-programs/{id}",
               defaults: new { controller = "StudentAcademicPrograms", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion

            #region  Student Academic Standings

            routes.MapHttpRoute(
              name: "GetStudentAcademicStandingsByGuidV8",
              routeTemplate: "student-academic-standings/{guid}",
              defaults: new { controller = "StudentAcademicStandings", action = "GetStudentAcademicStandingsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAcademicStandingsByGuid",
               routeTemplate: "student-academic-standings/{guid}",
                  defaults: new { controller = "StudentAcademicStandings", action = "GetStudentAcademicStandingsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentAcademicStandingsV8",
              routeTemplate: "student-academic-standings",
              defaults: new { controller = "StudentAcademicStandings", action = "GetStudentAcademicStandingsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "GetStudentAcademicStandings",
               routeTemplate: "student-academic-standings",
                  defaults: new { controller = "StudentAcademicStandings", action = "GetStudentAcademicStandingsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentAcademicStandingsV8",
              routeTemplate: "student-academic-standings/{guid}",
              defaults: new { controller = "StudentAcademicStandings", action = "PutStudentAcademicStandingsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentAcademicStandingsV8",
               routeTemplate: "student-academic-standings",
               defaults: new { controller = "StudentAcademicStandings", action = "PostStudentAcademicStandingsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentAcademicStandings",
                routeTemplate: "student-academic-standings/{guid}",
                defaults: new { controller = "StudentAcademicStandings", action = "DeleteStudentAcademicStandingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Student Academic Standings            

            #region  Student Advisor Relationships

            routes.MapHttpRoute(
              name: "GetStudentAdvisorRelationshipsByGuidV8",
              routeTemplate: "student-advisor-relationships/{guid}",
              defaults: new { controller = "StudentAdvisorRelationships", action = "GetStudentAdvisorRelationshipsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetStudentAdvisorRelationshipsByGuidV10",
              routeTemplate: "student-advisor-relationships/{guid}",
              defaults: new { controller = "StudentAdvisorRelationships", action = "GetStudentAdvisorRelationshipsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAdvisorRelationshipsByGuid",
               routeTemplate: "student-advisor-relationships/{guid}",
                  defaults: new { controller = "StudentAdvisorRelationships", action = "GetStudentAdvisorRelationshipsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentAdvisorRelationshipsV8",
              routeTemplate: "student-advisor-relationships",
              defaults: new { controller = "StudentAdvisorRelationships", action = "GetStudentAdvisorRelationshipsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "GetStudentAdvisorRelationshipsV10",
              routeTemplate: "student-advisor-relationships",
              defaults: new { controller = "StudentAdvisorRelationships", action = "GetStudentAdvisorRelationshipsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetStudentAdvisorRelationships",
               routeTemplate: "student-advisor-relationships",
                  defaults: new { controller = "StudentAdvisorRelationships", action = "GetStudentAdvisorRelationshipsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentAdvisorRelationshipsV8",
              routeTemplate: "student-advisor-relationships/{guid}",
              defaults: new { controller = "StudentAdvisorRelationships", action = "PutStudentAdvisorRelationshipsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
              name: "PutStudentAdvisorRelationshipsV10",
              routeTemplate: "student-advisor-relationships/{guid}",
              defaults: new { controller = "StudentAdvisorRelationships", action = "PutStudentAdvisorRelationshipsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentAdvisorRelationshipsV8",
               routeTemplate: "student-advisor-relationships",
               defaults: new { controller = "StudentAdvisorRelationships", action = "PostStudentAdvisorRelationshipsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
               name: "PostStudentAdvisorRelationshipsV10",
               routeTemplate: "student-advisor-relationships",
               defaults: new { controller = "StudentAdvisorRelationships", action = "PostStudentAdvisorRelationshipsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentAdvisorRelationships",
                routeTemplate: "student-advisor-relationships/{guid}",
                defaults: new { controller = "StudentAdvisorRelationships", action = "DeleteStudentAdvisorRelationshipsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Student Advisor Relationships

            #region StudentAwards
            routes.MapHttpRoute(
                name: "GetAllStudentAwards",
                routeTemplate: "students/{studentId}/awards",
                defaults: new { controller = "StudentAwards", action = "GetStudentAwardsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAwardsForYear",
                routeTemplate: "students/{studentId}/awards/{year}",
                defaults: new { controller = "StudentAwards", action = "GetStudentAwardsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAward",
                routeTemplate: "students/{studentId}/awards/{year}/{awardId}",
                defaults: new { controller = "StudentAwards", action = "GetStudentAwardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryStudentAwardSummary",
                routeTemplate: "qapi/student-award-summary",
                defaults: new { controller = "StudentAwards", action = "QueryStudentAwardSummary" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            //"Obsolete as of version 1.7. Instead, use PUT students/{studentId}/awards/{year}"
            routes.MapHttpRoute(
                name: "PostStudentAwardsForYear",
                routeTemplate: "students/{studentId}/awards/{year}",
                defaults: new { controller = "StudentAwards", action = "PostStudentAwards" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            //"Obsolete as of version 1.7. Instead, use PUT students/{studentId}/awards/{year}"
            routes.MapHttpRoute(
                name: "PostStudentAward",
                routeTemplate: "students/{studentId}/awards/{year}/{awardId}",
                defaults: new { controller = "StudentAwards", action = "PostStudentAward" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentAwardPacakge",
                routeTemplate: "students/{studentId}/awards/{year}",
                defaults: new { controller = "StudentAwards", action = "PutStudentAwardPackageAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentAward",
                routeTemplate: "students/{studentId}/awards/{year}/{awardId}",
                defaults: new { controller = "StudentAwards", action = "PutStudentAwardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentAffiliations

            routes.MapHttpRoute(
                name: "QueryStudentAffiliations",
                routeTemplate: "qapi/student-affiliations",
                defaults: new { controller = "StudentAffiliations", action = "QueryStudentAffiliationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  StudentAptitudeAssessments

            routes.MapHttpRoute(
             name: "GetStudentAptitudeAssessmentsByGuidV16",
             routeTemplate: "student-aptitude-assessments/{guid}",
             defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessmentsByGuid3Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
            );

            routes.MapHttpRoute(
             name: "GetStudentAptitudeAssessmentsByGuidV11",
             routeTemplate: "student-aptitude-assessments/{guid}",
             defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessmentsByGuid2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
            );

            routes.MapHttpRoute(
             name: "GetStudentAptitudeAssessmentsByGuidV9",
             routeTemplate: "student-aptitude-assessments/{guid}",
             defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessmentsByGuidAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAptitudeAssessmentsByGuid",
               routeTemplate: "student-aptitude-assessments/{guid}",
                  defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessmentsByGuid3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
             );

            routes.MapHttpRoute(
             name: "GetStudentAptitudeAssessmentsV16",
             routeTemplate: "student-aptitude-assessments",
             defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessments3Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
            );

            routes.MapHttpRoute(
             name: "GetStudentAptitudeAssessmentsV11",
             routeTemplate: "student-aptitude-assessments",
             defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessments2Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
            );

            routes.MapHttpRoute(
             name: "GetStudentAptitudeAssessmentsV9",
             routeTemplate: "student-aptitude-assessments",
             defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessmentsAsync", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentAptitudeAssessments",
               routeTemplate: "student-aptitude-assessments",
                  defaults: new { controller = "StudentAptitudeAssessments", action = "GetStudentAptitudeAssessments3Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
               }
            );

            routes.MapHttpRoute(
            name: "PutStudentAptitudeAssessmentsV16",
            routeTemplate: "student-aptitude-assessments/{guid}",
            defaults: new { controller = "StudentAptitudeAssessments", action = "PutStudentAptitudeAssessments3Async", isEedmSupported = true },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            }
            );

            routes.MapHttpRoute(
             name: "PutStudentAptitudeAssessmentsV11",
             routeTemplate: "student-aptitude-assessments/{guid}",
             defaults: new { controller = "StudentAptitudeAssessments", action = "PutStudentAptitudeAssessments2Async",  isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
             }
            );

            routes.MapHttpRoute(
             name: "PutStudentAptitudeAssessmentsV9",
             routeTemplate: "student-aptitude-assessments/{guid}",
             defaults: new { controller = "StudentAptitudeAssessments", action = "PutStudentAptitudeAssessmentsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("PUT"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
           );

            routes.MapHttpRoute(
              name: "PostStudentAptitudeAssessmentsV16",
              routeTemplate: "student-aptitude-assessments",
              defaults: new { controller = "StudentAptitudeAssessments", action = "PostStudentAptitudeAssessments3Async", isEedmSupported = true },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
             }
            );

            routes.MapHttpRoute(
               name: "PostStudentAptitudeAssessmentsV11",
               routeTemplate: "student-aptitude-assessments",
               defaults: new { controller = "StudentAptitudeAssessments", action = "PostStudentAptitudeAssessments2Async" , isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
              name: "PostStudentAptitudeAssessmentsV9",
              routeTemplate: "student-aptitude-assessments",
              defaults: new { controller = "StudentAptitudeAssessments", action = "PostStudentAptitudeAssessmentsAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
             }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentAptitudeAssessments",
                routeTemplate: "student-aptitude-assessments/{guid}",
                defaults: new { controller = "StudentAptitudeAssessments", action = "DeleteStudentAptitudeAssessmentsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            routes.MapHttpRoute(
            name: "StudentAptitudeAssessmentsUnsupported",
            routeTemplate: "student-aptitude-assessments/{guid}",
             defaults: new { controller = "StudentAptitudeAssessments", action = "NotAcceptableStatusException", guid = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );
            #endregion StudentAptitudeAssessments

            #region  Student Attendance

            routes.MapHttpRoute(
                name: "QueryStudentAttendances",
                routeTemplate: "qapi/student-attendances",
                defaults: new { controller = "StudentAttendance", action = "QueryStudentAttendancesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentAttendance",
                routeTemplate: "student-attendances",
                defaults: new { controller = "StudentAttendance", action = "PutStudentAttendanceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            routes.MapHttpRoute(
                name: "PutSectionAttendances",
                routeTemplate: "section-attendances",
                defaults: new { controller = "SectionAttendances", action = "PutSectionAttendancesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion Student Attendance

            #region  StudentSectionAttendances

            routes.MapHttpRoute(
                name: "QueryStudentSectionAttendances",
                routeTemplate: "qapi/student-section-attendances",
                defaults: new { controller = "StudentSectionAttendances", action = "QueryStudentSectionAttendancesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion StudentSectionAttendances

            #region StudentAwardYears

            //WARNING: Obsolete as of API 1.8. Use GetStudentAwardYears2Async route
            routes.MapHttpRoute(
                name: "GetStudentAwardYears",
                routeTemplate: "students/{studentId}/award-years",
                defaults: new { controller = "StudentAwardYears", action = "GetStudentAwardYears" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAwardYears2",
                routeTemplate: "students/{studentId}/award-years",
                defaults: new { controller = "StudentAwardYears", action = "GetStudentAwardYears2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            //WARNING: Obsolete as of API 1.8. Use GetStudentAwardYear2Async route
            routes.MapHttpRoute(
                name: "GetStudentAwardYear",
                routeTemplate: "students/{studentId}/award-years/{awardYear}",
                defaults: new { controller = "StudentAwardYears", action = "GetStudentAwardYear" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentAwardYear2",
                routeTemplate: "students/{studentId}/award-years/{awardYear}",
                defaults: new { controller = "StudentAwardYears", action = "GetStudentAwardYear2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            //WARNING: Obsolete as of API 1.8. Use UpdateStudentAwardYear2 route
            routes.MapHttpRoute(
                name: "UpdateStudentAwardYear",
                routeTemplate: "students/{studentId}/award-years",
                defaults: new { controller = "StudentAwardYears", action = "UpdateStudentAwardYear" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateStudentAwardYear2",
                routeTemplate: "students/{studentId}/award-years",
                defaults: new { controller = "StudentAwardYears", action = "UpdateStudentAwardYear2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region StudentBudgetComponents
            routes.MapHttpRoute(
                name: "GetStudentBudgetComponents",
                routeTemplate: "students/{studentId}/financial-aid-budget-components",
                defaults: new { controller = "StudentFinancialAidBudgetComponents", action = "GetStudentFinancialAidBudgetComponentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            routes.MapHttpRoute(
                name: "GetStudentBudgetComponentsForYearAsync",
                routeTemplate: "students/{studentId}/financial-aid-budget-components/{awardYear}",
                defaults: new { controller = "StudentFinancialAidBudgetComponents", action = "GetStudentFinancialAidBudgetComponentsForYearAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region StudentClassifications

            routes.MapHttpRoute(
               name: "GetStudentClassificationById",
               routeTemplate: "student-classifications/{id}",
               defaults: new { controller = "StudentClassifications", action = "GetStudentClassificationByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultGetStudentClassificationById",
                routeTemplate: "student-classifications/{id}",
                   defaults: new { controller = "StudentClassifications", action = "GetStudentClassificationByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentClassifications",
                routeTemplate: "student-classifications",
                defaults: new { controller = "StudentClassifications", action = "GetStudentClassificationsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetStudentClassifications",
                routeTemplate: "student-classifications",
                   defaults: new { controller = "StudentClassifications", action = "GetStudentClassificationsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, true)
                }
            );

            routes.MapHttpRoute(
               name: "PutStudentClassification",
               routeTemplate: "student-classifications/{id}",
               defaults: new { controller = "StudentClassifications", action = "PutStudentClassificationAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostStudentClassification",
                routeTemplate: "student-classifications",
                defaults: new { controller = "StudentClassifications", action = "PostStudentClassificationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentClassification",
                routeTemplate: "student-classifications/{id}",
                defaults: new { controller = "StudentClassifications", action = "DeleteStudentClassificationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region StudentCharges

            //routes.MapHttpRoute(
            //    name: "GetStudentChargesByIdDefault",
            //    routeTemplate: "student-charges/{id}",
            //    defaults: new { controller = "StudentCharges", action = "GetStudentChargesByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", true)
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "GetAllStudentChargesDefault",
            //    routeTemplate: "student-charges",
            //    defaults: new { controller = "StudentCharges", action = "GetStudentChargesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", true)
            //    }
            //);

            routes.MapHttpRoute(
                name: "GetStudentChargesByIdDefault",
                routeTemplate: "student-charges/{id}",
                defaults: new { controller = "StudentCharges", action = "GetByIdAsync1", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentChargesDefault",
                routeTemplate: "student-charges",
                defaults: new { controller = "StudentCharges", action = "GetAsync1", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentChargesById",
                routeTemplate: "student-charges/{id}",
                defaults: new { controller = "StudentCharges", action = "GetByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentCharges",
                routeTemplate: "student-charges",
                defaults: new { controller = "StudentCharges", action = "GetAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentCharges",
                routeTemplate: "student-charges/{id}",
                defaults: new { controller = "StudentCharges", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentCharges",
                routeTemplate: "student-charges",
                defaults: new { controller = "StudentCharges", action = "CreateAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentChargesByIdV11",
                routeTemplate: "student-charges/{id}",
                defaults: new { controller = "StudentCharges", action = "GetByIdAsync1", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentChargesV11",
                routeTemplate: "student-charges",
                defaults: new { controller = "StudentCharges", action = "GetAsync1", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentChargesV11",
                routeTemplate: "student-charges/{id}",
                defaults: new { controller = "StudentCharges", action = "UpdateAsync1" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentChargesV11",
                routeTemplate: "student-charges",
                defaults: new { controller = "StudentCharges", action = "CreateAsync1", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteStudentCharges",
                routeTemplate: "student-charges/{id}",
                defaults: new { controller = "StudentCharges", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            //routes.MapHttpRoute(
            //    name: "GetStudentChargesByIdV16_0_0",
            //    routeTemplate: "student-charges/{id}",
            //    defaults: new { controller = "StudentCharges", action = "GetStudentChargesByIdAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "GetAllStudentChargesV16_0_0",
            //    routeTemplate: "student-charges",
            //    defaults: new { controller = "StudentCharges", action = "GetStudentChargesAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "PutStudentChargesV16_0_0",
            //    routeTemplate: "student-charges/{id}",
            //    defaults: new { controller = "StudentCharges", action = "UpdateStudentChargesAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "PostStudentChargesV16_0_0",
            //    routeTemplate: "student-charges",
            //    defaults: new { controller = "StudentCharges", action = "CreateStudentChargesAsync", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("POST"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            routes.MapHttpRoute(
            name: "StudentChargesUnsupported",
            routeTemplate: "student-charges/{id}",
             defaults: new { controller = "StudentCharges", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );

            #endregion

            #region StudentCohorts

            routes.MapHttpRoute(
               name: "GetStudentCohortByIdV710",
               routeTemplate: "student-cohorts/{id}",
               defaults: new { controller = "StudentCohorts", action = "GetStudentCohortByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("7.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "7.1.0"))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentCohortByIdV7",
               routeTemplate: "student-cohorts/{id}",
               defaults: new { controller = "StudentCohorts", action = "GetStudentCohortByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentCohortById",
               routeTemplate: "student-cohorts/{id}",
               defaults: new { controller = "StudentCohorts", action = "GetStudentCohortByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "DefaultStudentCohortById",
                routeTemplate: "student-cohorts/{id}",
                   defaults: new { controller = "StudentCohorts", action = "GetStudentCohortByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "7.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("7.1.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "GetStudentCohortsV710",
               routeTemplate: "student-cohorts",
               defaults: new { controller = "StudentCohorts", action = "GetStudentCohortsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("7.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "7.1.0"))
               }
           );

            routes.MapHttpRoute(
               name: "GetStudentCohortsV7",
               routeTemplate: "student-cohorts",
               defaults: new { controller = "StudentCohorts", action = "GetStudentCohortsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
               name: "GetStudentCohorts",
               routeTemplate: "student-cohorts",
               defaults: new { controller = "StudentCohorts", action = "GetStudentCohortsAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "DefaultStudentCohorts",
                routeTemplate: "student-cohorts",
                   defaults: new { controller = "StudentCohorts", action = "GetStudentCohortsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "7.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("7.1.0", true)
                }
            );

            routes.MapHttpRoute(
               name: "PutStudentCohortV710",
               routeTemplate: "student-cohorts/{id}",
               defaults: new { controller = "StudentCohorts", action = "PutStudentCohortAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint("7.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "7.1.0"))
               }
           );

            routes.MapHttpRoute(
               name: "PutStudentCohortV7",
               routeTemplate: "student-cohorts/{id}",
               defaults: new { controller = "StudentCohorts", action = "PutStudentCohortAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
               name: "PutStudentCohort",
               routeTemplate: "student-cohorts/{id}",
               defaults: new { controller = "StudentCohorts", action = "PutStudentCohortAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostStudentCohortV710",
                routeTemplate: "student-cohorts",
                defaults: new { controller = "StudentCohorts", action = "PostStudentCohortAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("7.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "7.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentCohortV7",
                routeTemplate: "student-cohorts",
                defaults: new { controller = "StudentCohorts", action = "PostStudentCohortAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentCohort",
                routeTemplate: "student-cohorts",
                defaults: new { controller = "StudentCohorts", action = "PostStudentCohortAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentCohort",
                routeTemplate: "student-cohorts/{id}",
                defaults: new { controller = "StudentCohorts", action = "DeleteStudentCohortAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
            name: "StudentCohortsUnsupported",
            routeTemplate: "student-cohorts/{id}",
             defaults: new { controller = "StudentCohorts", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion

            #region  Student Cohort Assignments

            routes.MapHttpRoute(
              name: "GetStudentCohortAssignmentsByGuidV100",
              routeTemplate: "student-cohort-assignments/{guid}",
              defaults: new { controller = "StudentCohortAssignments", action = "GetStudentCohortAssignmentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentCohortAssignmentsByGuid",
               routeTemplate: "student-cohort-assignments/{guid}",
                  defaults: new { controller = "StudentCohortAssignments", action = "GetStudentCohortAssignmentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentCohortAssignmentsV100",
              routeTemplate: "student-cohort-assignments",
              defaults: new { controller = "StudentCohortAssignments", action = "GetStudentCohortAssignmentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentCohortAssignments",
               routeTemplate: "student-cohort-assignments",
                  defaults: new { controller = "StudentCohortAssignments", action = "GetStudentCohortAssignmentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentCohortAssignmentsV100",
              routeTemplate: "student-cohort-assignments/{guid}",
              defaults: new { controller = "StudentCohortAssignments", action = "PutStudentCohortAssignmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentCohortAssignmentsV100",
               routeTemplate: "student-cohort-assignments",
               defaults: new { controller = "StudentCohortAssignments", action = "PostStudentCohortAssignmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentCohortAssignments",
                routeTemplate: "student-cohort-assignments/{guid}",
                defaults: new { controller = "StudentCohortAssignments", action = "DeleteStudentCohortAssignmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "StudentCohortAssignmentsUnsupported",
            routeTemplate: "student-cohort-assignments/{id}",
             defaults: new { controller = "StudentCohortAssignments", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Student Cohort Assignments

            #region  Student Course Transfers

            routes.MapHttpRoute(
              name: "GetStudentCourseTransferByGuidV13",
              routeTemplate: "student-course-transfers/{guid}",
              defaults: new { controller = "StudentCourseTransfer", action = "GetStudentCourseTransfer2ByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
              name: "GetStudentCourseTransferByGuidV11",
              routeTemplate: "student-course-transfers/{guid}",
              defaults: new { controller = "StudentCourseTransfer", action = "GetStudentCourseTransferByGuidAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentCourseTransferByGuid",
               routeTemplate: "student-course-transfers/{guid}",
                  defaults: new { controller = "StudentCourseTransfer", action = "GetStudentCourseTransfer2ByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetStudentCourseTransferV13",
              routeTemplate: "student-course-transfers",
              defaults: new { controller = "StudentCourseTransfer", action = "GetStudentCourseTransfers2Async", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
              name: "GetStudentCourseTransferV11",
              routeTemplate: "student-course-transfers",
              defaults: new { controller = "StudentCourseTransfer", action = "GetStudentCourseTransfersAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "GetStudentCourseTransfer",
               routeTemplate: "student-course-transfers",
                  defaults: new { controller = "StudentCourseTransfer", action = "GetStudentCourseTransfers2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 13) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(13, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentCourseTransferV13",
              routeTemplate: "student-course-transfers/{guid}",
              defaults: new { controller = "StudentCourseTransfer", action = "PutStudentCourseTransferAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
          );

            routes.MapHttpRoute(
              name: "PutStudentCourseTransferV11",
              routeTemplate: "student-course-transfers/{guid}",
              defaults: new { controller = "StudentCourseTransfer", action = "PutStudentCourseTransferAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
          );

            routes.MapHttpRoute(
               name: "PostStudentCourseTransferV13",
               routeTemplate: "student-course-transfers",
               defaults: new { controller = "StudentCourseTransfer", action = "PostStudentCourseTransferAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(13, false, string.Format(HedtechIntegrationMediaTypeFormat, 13))
              }
           );

            routes.MapHttpRoute(
               name: "PostStudentCourseTransferV11",
               routeTemplate: "student-course-transfers",
               defaults: new { controller = "StudentCourseTransfer", action = "PostStudentCourseTransferAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentCourseTransfer",
                routeTemplate: "student-course-transfers/{guid}",
                defaults: new { controller = "StudentCourseTransfer", action = "DeleteStudentCourseTransferAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Student Course Transfers

            #region StudentDefaultAwardPeriods

            routes.MapHttpRoute(
                name: "GetStudentDefaultAwardPeriods",
                routeTemplate: "students/{studentId}/default-award-periods",
                defaults: new { controller = "StudentDefaultAwardPeriod", action = "GetStudentDefaultAwardPeriodsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentFinancialAidAwards

            routes.MapHttpRoute(
                name: "GetStudentFinancialAidAwardById11",
                routeTemplate: "student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentFinancialAidAwardById7",
                routeTemplate: "student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentFinancialAidAwards11",
                routeTemplate: "student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "Get2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentFinancialAidAwards7",
                routeTemplate: "student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentFinancialAidAwardByIdDefault",
                routeTemplate: "student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentFinancialAidAwardsDefault",
                routeTemplate: "student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "Get2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentFinancialAidAward11",
                routeTemplate: "student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentFinancialAidAward7",
                routeTemplate: "student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentFinancialAidAward11",
                routeTemplate: "student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "CreateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentFinancialAidAward7",
                routeTemplate: "student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "CreateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteStudentFinancialAidAward",
                routeTemplate: "student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

           routes.MapHttpRoute(
           name: "StudentFinancialAidAwardUnsupported",
           routeTemplate: "student-financial-aid-awards/{id}",
           defaults: new { controller = "StudentFinancialAidAwards", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                  headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
              }
           );
            #endregion

            #region  Student Financial Aid Academic Progress Statuses

            routes.MapHttpRoute(
              name: "GetStudentFinancialAidAcademicProgressStatusesByGuidV15",
              routeTemplate: "student-financial-aid-academic-progress-statuses/{guid}",
              defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "GetStudentFinancialAidAcademicProgressStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentFinancialAidAcademicProgressStatusesByGuid",
               routeTemplate: "student-financial-aid-academic-progress-statuses/{guid}",
                  defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "GetStudentFinancialAidAcademicProgressStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentFinancialAidAcademicProgressStatusesV15",
              routeTemplate: "student-financial-aid-academic-progress-statuses",
              defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "GetStudentFinancialAidAcademicProgressStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentFinancialAidAcademicProgressStatuses",
               routeTemplate: "student-financial-aid-academic-progress-statuses",
                  defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "GetStudentFinancialAidAcademicProgressStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 15) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(15, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentFinancialAidAcademicProgressStatusesV15",
              routeTemplate: "student-financial-aid-academic-progress-statuses/{guid}",
              defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "PutStudentFinancialAidAcademicProgressStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentFinancialAidAcademicProgressStatusesV15",
               routeTemplate: "student-financial-aid-academic-progress-statuses",
               defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "PostStudentFinancialAidAcademicProgressStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(15, false, string.Format(HedtechIntegrationMediaTypeFormat, 15))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentFinancialAidAcademicProgressStatuses",
                routeTemplate: "student-financial-aid-academic-progress-statuses/{guid}",
                defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "DeleteStudentFinancialAidAcademicProgressStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            routes.MapHttpRoute(
              name: "StudentFinancialAidAcademicProgressStatuses",
              routeTemplate: "student-financial-aid-academic-progress-statuses/{id}",
               defaults: new { controller = "StudentFinancialAidAcademicProgressStatuses", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion Student Financial Aid Academic Progress Statuses

            #region RestrictedStudentFinancialAidAwards

            routes.MapHttpRoute(
                name: "GetRestrictedStudentFinancialAidAwardById11",
                routeTemplate: "restricted-student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetRestrictedById2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetRestrictedStudentFinancialAidAwardById7",
                routeTemplate: "restricted-student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetRestrictedByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetRestrictedAllStudentFinancialAidAwards11",
                routeTemplate: "restricted-student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetRestricted2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetRestrictedAllStudentFinancialAidAwards7",
                routeTemplate: "restricted-student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetRestrictedAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetRestrictedStudentFinancialAidAwardByIdDefault",
                routeTemplate: "restricted-student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetRestrictedById2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRestrictedAllStudentFinancialAidAwardsDefault",
                routeTemplate: "restricted-student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "GetRestricted2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, true)
                }
            );

            routes.MapHttpRoute(
                name: "PutRestrictedStudentFinancialAidAward11",
                routeTemplate: "restricted-student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PutRestrictedStudentFinancialAidAward7",
                routeTemplate: "restricted-student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PostRestrictedStudentFinancialAidAward11",
                routeTemplate: "restricted-student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "CreateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostRestrictedStudentFinancialAidAward7",
                routeTemplate: "restricted-student-financial-aid-awards",
                defaults: new { controller = "StudentFinancialAidAwards", action = "CreateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteRestrictedStudentFinancialAidAward",
                routeTemplate: "restricted-student-financial-aid-awards/{id}",
                defaults: new { controller = "StudentFinancialAidAwards", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
            name: "RestrictedStudentFinancialAidAwardUnsupported",
            routeTemplate: "restricted-student-financial-aid-awards/{id}",
            defaults: new { controller = "StudentFinancialAidAwards", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                   headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
               }
            );
            #endregion

            #region StudentFinancialAidChecklist

            routes.MapHttpRoute(
                name: "GetAllStudentChecklistsAsync",
                routeTemplate: "students/{studentId}/financial-aid-checklists",
                defaults: new { controller = "StudentFinancialAidChecklists", action = "GetAllStudentFinancialAidChecklistsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentFinancialAidChecklistAsync",
                routeTemplate: "students/{studentId}/financial-aid-checklists/{year}",
                defaults: new { controller = "StudentFinancialAidChecklists", action = "GetStudentFinancialAidChecklistAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateStudentFinancialAidChecklistAsync",
                routeTemplate: "students/{studentId}/financial-aid-checklists/{year}",
                defaults: new { controller = "StudentFinancialAidChecklists", action = "CreateStudentFinancialAidChecklistAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            #endregion

            #region StudentFinancialAidNeedSummaries

            routes.MapHttpRoute(
              name: "GetStudentFinancialAidNeedSummariesByIdV9",
              routeTemplate: "student-financial-aid-need-summaries/{id}",
              defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "GetStudentFinancialAidNeedSummariesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentFinancialAidNeedSummariesById",
               routeTemplate: "student-financial-aid-need-summaries/{id}",
                  defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "GetStudentFinancialAidNeedSummariesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentFinancialAidNeedSummariesV9",
              routeTemplate: "student-financial-aid-need-summaries",
              defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "GetStudentFinancialAidNeedSummariesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentFinancialAidNeedSummaries",
               routeTemplate: "student-financial-aid-need-summaries",
                  defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "GetStudentFinancialAidNeedSummariesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentFinancialAidNeedSummariesV9",
              routeTemplate: "student-financial-aid-need-summaries/{id}",
              defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "UpdateAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentFinancialAidNeedSummariesV9",
               routeTemplate: "student-financial-aid-need-summaries",
               defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "CreateAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentFinancialAidNeedSummaries",
                routeTemplate: "student-financial-aid-need-summaries/{id}",
                defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
           );
            routes.MapHttpRoute(
                name: "StudentFinancialAidNeedSummariesUnsupported",
                routeTemplate: "student-financial-aid-need-summaries/{id}",
                 defaults: new { controller = "StudentFinancialAidNeedSummaries", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                    constraints: new
                    {
                        httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                        headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                    }
          );

            #endregion

            #region  Student Grade Point Averages

            routes.MapHttpRoute(
              name: "GetStudentGradePointAveragesByGuidV100",
              routeTemplate: "student-grade-point-averages/{guid}",
              defaults: new { controller = "StudentGradePointAverages", action = "GetStudentGradePointAveragesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentGradePointAveragesByGuid",
               routeTemplate: "student-grade-point-averages/{guid}",
                  defaults: new { controller = "StudentGradePointAverages", action = "GetStudentGradePointAveragesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentGradePointAveragesV100",
              routeTemplate: "student-grade-point-averages",
              defaults: new { controller = "StudentGradePointAverages", action = "GetStudentGradePointAveragesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentGradePointAverages",
               routeTemplate: "student-grade-point-averages",
                  defaults: new { controller = "StudentGradePointAverages", action = "GetStudentGradePointAveragesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentGradePointAveragesV100",
              routeTemplate: "student-grade-point-averages/{guid}",
              defaults: new { controller = "StudentGradePointAverages", action = "PutStudentGradePointAveragesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentGradePointAveragesV100",
               routeTemplate: "student-grade-point-averages",
               defaults: new { controller = "StudentGradePointAverages", action = "PostStudentGradePointAveragesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentGradePointAverages",
                routeTemplate: "student-grade-point-averages/{guid}",
                defaults: new { controller = "StudentGradePointAverages", action = "DeleteStudentGradePointAveragesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "StudentGradePointAveragesUnsupported",
            routeTemplate: "student-grade-point-averages/{id}",
             defaults: new { controller = "StudentGradePointAverages", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );

            #endregion Student Grade Point Averages

            #region StudentDocuments

            routes.MapHttpRoute(
                name: "GetStudentDocumentsAsync",
                routeTemplate: "students/{studentId}/documents",
                defaults: new { controller = "StudentDocuments", action = "GetStudentDocumentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentLoanSummary
            routes.MapHttpRoute(
                name: "GetStudentLoanSummaryAsync",
                routeTemplate: "students/{studentId}/loan-summary",
                defaults: new { controller = "StudentLoanSummary", action = "GetStudentLoanSummaryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region StudentLoanLimitations
            routes.MapHttpRoute(
                name: "GetStudentLoanLimitations",
                routeTemplate: "students/{studentId}/loan-limits",
                defaults: new { controller = "StudentLoanLimitations", action = "GetStudentLoanLimitationsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region StudentNsldsInformation
            routes.MapHttpRoute(
                name: "GetStudentNsldsInformation",
                routeTemplate: "students/{studentId}/nslds-information",
                defaults: new { controller = "StudentNsldsInformation", action = "GetStudentNsldsInformationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region StudentOutsideAwards

            routes.MapHttpRoute(
                name: "CreateOutsideAward",
                routeTemplate: "outside-awards",
                defaults: new { controller = "OutsideAwards", action = "CreateOutsideAwardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetOutsideAwards",
                routeTemplate: "students/{studentId}/outside-awards/{year}",
                defaults: new { controller = "OutsideAwards", action = "GetOutsideAwardsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteOutsideAward",
                routeTemplate: "students/{studentId}/outside-awards/{id}",
                defaults: new { controller = "OutsideAwards", action = "DeleteOutsideAwardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
                name: "UpdateOutsideAward",
                routeTemplate: "outside-awards",
                defaults: new { controller = "OutsideAwards", action = "UpdateOutsideAwardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentPayments

            routes.MapHttpRoute(
                name: "GetStudentPaymentsByIdDefault",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "GetByIdAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentPaymentDefault",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "GetAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentPaymentsById",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "GetByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentPayments",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "GetAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentPayments",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentPayments",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "CreateAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            //routes.MapHttpRoute(
            //    name: "GetStudentPaymentsByIdV16_0_0",
            //    routeTemplate: "student-payments/{id}",
            //    defaults: new { controller = "StudentPayments", action = "GetByIdAsync2", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "GetAllStudentPaymentsV16_0_0",
            //    routeTemplate: "student-payments",
            //    defaults: new { controller = "StudentPayments", action = "GetAsync2", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            routes.MapHttpRoute(
                name: "GetStudentPaymentsByIdV11_1_0",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "GetByIdAsync2", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentPaymentsV11_1_0",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "GetAsync2", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentPaymentsByIdV11",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "GetByIdAsync2", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "GetAllStudentPaymentsV11",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "GetAsync2", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            //routes.MapHttpRoute(
            //    name: "GetStudentPaymentsByIdDefault",
            //    routeTemplate: "student-payments/{id}",
            //    defaults: new { controller = "StudentPayments", action = "GetByIdAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", true)
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "GetAllStudentPaymentDefault",
            //    routeTemplate: "student-payments",
            //    defaults: new { controller = "StudentPayments", action = "GetAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("GET"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", true)
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "PutStudentPaymentsV16_0_0",
            //    routeTemplate: "student-payments/{id}",
            //    defaults: new { controller = "StudentPayments", action = "UpdateAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "PostStudentPaymentsV16_0_0",
            //    routeTemplate: "student-payments",
            //    defaults: new { controller = "StudentPayments", action = "CreateAsync2", isEedmSupported = true },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("POST"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            routes.MapHttpRoute(
                name: "PutStudentPaymentsV11_1_0",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentPaymentsV11_1_0",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "CreateAsync2", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint("11.1.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "11.1.0"))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentPaymentsV11",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "UpdateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentPaymentsV11",
                routeTemplate: "student-payments",
                defaults: new { controller = "StudentPayments", action = "CreateAsync2", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteStudentPayments",
                routeTemplate: "student-payments/{id}",
                defaults: new { controller = "StudentPayments", action = "DeleteAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
            name: "StudentPaymentsUnsupported",
            routeTemplate: "student-payments/{id}",
             defaults: new { controller = "StudentPayments", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );

            #endregion

            #region StudentTerms

            routes.MapHttpRoute(
                name: "QueryStudentAcademicTerm",
                routeTemplate: "qapi/student-terms",
                defaults: new { controller = "StudentTerms", action = "QueryStudentTermsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryStudentAcademicTermGpa",
                routeTemplate: "qapi/student-terms-gpa",
                defaults: new { controller = "StudentTerms", action = "QueryPilotStudentTermsGpaAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false, string.Format(EllucianJsonPilotMediaTypeFormat, 1))
                }
            );

            #endregion

            #region Students

            // WARNING: This route is obsolete as of Api version 1.5. Use GetAcademicHistory2 route.
            routes.MapHttpRoute(
                name: "GetAcademicHistory",
                routeTemplate: "students/{studentId}/academic-credits",
                defaults: new { controller = "Students", action = "GetAcademicHistoryAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            // WARNING: This route is obsolete as of Api version 1.11. Use GetAcademicHistory3 route.
            routes.MapHttpRoute(
                name: "GetAcademicHistory2",
                routeTemplate: "students/{studentId}/academic-credits",
                defaults: new { controller = "Students", action = "GetAcademicHistory2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            // WARNING: This route is obsolete as of Api version 1.18. Use GetAcademicHistory4 route.
            routes.MapHttpRoute(
                name: "GetAcademicHistory3",
                routeTemplate: "students/{studentId}/academic-credits",
                defaults: new { controller = "Students", action = "GetAcademicHistory3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetAcademicHistory4",
                routeTemplate: "students/{studentId}/academic-credits",
                defaults: new { controller = "Students", action = "GetAcademicHistory4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(4, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentsV7",
                routeTemplate: "students",
                defaults: new { controller = "Students", action = "GetStudentsAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentsV16.0.0",
                routeTemplate: "students",
                defaults: new { controller = "Students", action = "GetStudents2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetStudents",
                routeTemplate: "students",
                defaults: new { controller = "Students", action = "GetStudents2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentsByGuidV7",
                routeTemplate: "students/{guid}",
                defaults: new { userId = 0, controller = "Students", action = "GetStudentsByGuidAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentsByGuidV16.0.0",
                routeTemplate: "students/{guid}",
                defaults: new { userId = 0, controller = "Students", action = "GetStudentsByGuid2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
                }
            );

            routes.MapHttpRoute(
                name: "GetStudent",
                routeTemplate: "students/{studentId}",
                defaults: new { userId = 0, controller = "Students", action = "GetStudentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
           );

            // Undocumented route created for reference by Api Client for self-service in anticipation of obsolescence of version1 for privacy in 1.16
            routes.MapHttpRoute(
                name: "GetStudent2",
                routeTemplate: "students/{studentId}",
                defaults: new { userId = 0, controller = "Students", action = "GetStudentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentsByGuid",
               routeTemplate: "students/{guid}",
               defaults: new { userId = 0, controller = "Students", action = "GetStudentsByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("16.0.0", true)
               }
            );

            // This route is obsolete as of version 1.11 - use "GetStudentRestrictions2" route instead.
            routes.MapHttpRoute(
                name: "GetStudentRestrictions",
                routeTemplate: "students/{studentId}/restrictions",
                defaults: new { controller = "Students", action = "GetStudentRestrictionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            //WARNING: Obsolete as of API 1.16. Use version 3 of this API instead.
            routes.MapHttpRoute(
                name: "GetStudentRestrictions2",
                routeTemplate: "students/{studentId}/restrictions",
                defaults: new { controller = "Students", action = "GetStudentRestrictionsAsync2" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentRestrictions3",
                routeTemplate: "students/{studentId}/restrictions",
                defaults: new { controller = "Students", action = "GetStudentRestrictions3Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            routes.MapHttpRoute(
                name: "QueryStudentRestrictions",
                routeTemplate: "qapi/student-restrictions",
                defaults: new { controller = "Students", action = "PostStudentRestrictionsQuery" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            // WARNING: This is an obsolete route as of Api version 1.10. Use GetStudentPrograms2 route
            routes.MapHttpRoute(
               name: "GetStudentPrograms",
               routeTemplate: "students/{studentId}/programs",
               defaults: new { userId = 0, controller = "Students", action = "GetStudentProgramsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
            );

            routes.MapHttpRoute(
              name: "GetStudentPrograms2",
              routeTemplate: "students/{studentId}/programs",
              defaults: new { userId = 0, controller = "Students", action = "GetStudentPrograms2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(2, true)
              }
            );

            // WARNING: This is an obsolete route as of Api version 1.9. Use GetTranscriptRestrictions2Async route
            routes.MapHttpRoute(
                name: "GetTranscriptRestrictions",
                routeTemplate: "students/{studentId}/transcript-restrictions",
                defaults: new { controller = "Students", action = "GetTranscriptRestrictionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetTranscriptRestrictions2",
                routeTemplate: "students/{studentId}/transcript-restrictions",
                defaults: new { controller = "Students", action = "GetTranscriptRestrictions2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );


            routes.MapHttpRoute(
                name: "GetStudentUngradedTerms",
                routeTemplate: "students/{studentId}/ungraded-terms",
                defaults: new { controller = "Students", action = "GetUngradedTermsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostSearchStudent",
                routeTemplate: "students-query/",
                defaults: new { controller = "Students", action = "PostSearchStudentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostStudentIds",
                routeTemplate: "qapi/query-student-ids",
                defaults: new { controller = "Students", action = "PostStudentIdsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
               name: "QueryStudentByPost2",
               routeTemplate: "qapi/students",
               defaults: new { controller = "Students", action = "QueryStudentByPost2Async" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(2, true)
               }
            );

            routes.MapHttpRoute(
                name: "QueryStudentsById4",
                routeTemplate: "qapi/students",
                defaults: new { controller = "Students", action = "QueryStudentsById4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(4, false, "application/vnd.ellucian-batch.v4+json")
                }
            );

            routes.MapHttpRoute(
              name: "PostTranscriptOrder",
              routeTemplate: "transcript-orders/",
              defaults: new { controller = "Students", action = "PostTranscriptOrderAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
            );

            routes.MapHttpRoute(
                name: "GetTranscriptOrderStatus",
                routeTemplate: "transcript-orders/{orderId}/{currentStatusCode}",
                defaults: new { controller = "Students", action = "GetTranscriptOrderStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetUnofficialTranscript",
                routeTemplate: "students/{studentId}/unofficial-transcript",
                defaults: new { controller = "Students", action = "GetUnofficialTranscriptAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "Register",
                routeTemplate: "students/{studentId}/register",
                defaults: new { controller = "Students", action = "RegisterAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  New route is GET persons/{id}/emergency-information
            routes.MapHttpRoute(
                name: "GetStudentEmergencyInformation",
                routeTemplate: "students/{studentId}/emergency-information",
                defaults: new { controller = "Students", action = "GetEmergencyInformationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  New route is PUT persons/{id}/emergency-information
            routes.MapHttpRoute(
                name: "PutStudentEmergencyInformation",
                routeTemplate: "students/{studentId}/emergency-information",
                defaults: new { controller = "Students", action = "PutEmergencyInformation" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            routes.MapHttpRoute(
               name: "PutStudentsV7",
               routeTemplate: "students/{guid}",
               defaults: new { controller = "Students", action = "PutStudentAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
           );

            routes.MapHttpRoute(
                name: "PostStudentsV7",
                routeTemplate: "students",
                defaults: new { controller = "Students", action = "PostStudentAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );


            // routes.MapHttpRoute(
            //    name: "PutStudentsV16.0.0",
            //    routeTemplate: "students/{guid}",
            //    defaults: new { controller = "Students", action = "PutStudentAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("PUT"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            //routes.MapHttpRoute(
            //    name: "PostStudentsV16.0.0",
            //    routeTemplate: "students",
            //    defaults: new { controller = "Students", action = "PostStudentAsync" },
            //    constraints: new
            //    {
            //        httpMethod = new HttpMethodConstraint("POST"),
            //        headerVersion = new HeaderVersionConstraint("16.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "16.0.0"))
            //    }
            //);

            routes.MapHttpRoute(
                name: "DeleteStudentsByGuid",
                routeTemplate: "students/{guid}",
                defaults: new { controller = "Students", action = "DeleteStudentByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            routes.MapHttpRoute(
              name: "StudentsGetByIdUnsupported",
              routeTemplate: "students/{id}",
               defaults: new { controller = "Students", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );

            routes.MapHttpRoute(
              name: "StudentsUnsupported",
              routeTemplate: "students",
               defaults: new { controller = "Students", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion

            #region StudentLoads

            routes.MapHttpRoute(
                name: "GetStudentLoads",
                routeTemplate: "student-loads",
                defaults: new { controller = "StudentLoads", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentPetitions

            routes.MapHttpRoute(
                name: "GetStudentPetition",
                routeTemplate: "student-petitions/{studentPetitionId}/{sectionId}",
                defaults: new { controller = "StudentPetitions", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
            name: "AddStudentPetition",
            routeTemplate: "student-petitions",
            defaults: new { controller = "StudentPetitions", action = "PostStudentPetitionAsync" },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("POST"),
                headerVersion = new HeaderVersionConstraint(1, true)
            }
        );

            routes.MapHttpRoute(
               name: "GetStudentPetitions",
               routeTemplate: "student-petitions/{studentId}",
               defaults: new { controller = "StudentPetitions", action = "GetAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );

            #endregion

            #region StudentPetitionReasons

            routes.MapHttpRoute(
                name: "GetStudentPetitionReasons",
                routeTemplate: "student-petition-reasons",
                defaults: new { controller = "StudentPetitionReasons", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentPrograms

            routes.MapHttpRoute(
                name: "GetStudentProgramsByIdList",
                routeTemplate: "qapi/student-programs",
                defaults: new { controller = "StudentPrograms", action = "QueryStudentProgramsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "AddStudentProgram",
                routeTemplate: "students/{studentId}/programs",
                defaults: new { controller = "StudentPrograms", action = "AddStudentProgramAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateStudentProgram",
                routeTemplate: "students/{studentId}/programs",
                defaults: new { controller = "StudentPrograms", action = "UpdateStudentProgramAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region StudentRegistrationEligibilities

            routes.MapHttpRoute(
                name: "GetStudentRegistrationEligibilitiesByGuidV9",
                routeTemplate: "student-registration-eligibilities/{guid}",
                defaults: new { controller = "StudentRegistrationEligibilities", action = "GetStudentRegistrationEligibilitiesByGuidAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentRegistrationEligibilitiesByGuid",
               routeTemplate: "student-registration-eligibilities/{guid}",
                  defaults: new { controller = "StudentRegistrationEligibilities", action = "GetStudentRegistrationEligibilitiesByGuidAsync", RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentRegistrationEligibilitiesV9",
              routeTemplate: "student-registration-eligibilities",
              defaults: new { controller = "StudentRegistrationEligibilities", action = "GetStudentRegistrationEligibilitiesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetStudentRegistrationEligibilities",
               routeTemplate: "student-registration-eligibilities",
                  defaults: new { controller = "StudentRegistrationEligibilities", action = "GetStudentRegistrationEligibilitiesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentRegistrationEligibilitiesV9",
              routeTemplate: "student-registration-eligibilities/{guid}",
              defaults: new { controller = "StudentRegistrationEligibilities", action = "PutStudentRegistrationEligibilitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentRegistrationEligibilitiesV9",
               routeTemplate: "student-registration-eligibilities",
               defaults: new { controller = "StudentRegistrationEligibilities", action = "PostStudentRegistrationEligibilitiesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentRegistrationEligibilities",
                routeTemplate: "student-registration-eligibilities/{guid}",
                defaults: new { controller = "StudentRegistrationEligibilities", action = "DeleteStudentRegistrationEligibilitiesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            #endregion

            #region StudentRequests



            routes.MapHttpRoute(
              name: "GetStudentTranscriptRequest",
              routeTemplate: "students/student-transcript-request/{requestId}",
              defaults: new { controller = "StudentRequests", action = "GetStudentTranscriptRequestAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
          );

            routes.MapHttpRoute(
             name: "GetStudentEnrollmentRequest",
             routeTemplate: "students/student-enrollment-request/{requestId}",
             defaults: new { controller = "StudentRequests", action = "GetStudentEnrollmentRequestAsync" },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("GET"),
                 headerVersion = new HeaderVersionConstraint(1, true)
             }
         );

            routes.MapHttpRoute(
                name: "CreateStudentTranscriptRequests",
                routeTemplate: "students/{studentId}/student-transcript-request",
                defaults: new { controller = "StudentRequests", action = "PostStudentTranscriptRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateStudentEnrollmentRequests",
                routeTemplate: "students/{studentId}/student-enrollment-request",
                defaults: new { controller = "StudentRequests", action = "PostStudentEnrollmentRequestAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentEnrollmentRequests",
                routeTemplate: "students/{studentId}/student-enrollment-requests",
                defaults: new { controller = "StudentRequests", action = "GetStudentEnrollmentRequestsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetStudentTranscriptRequests",
                routeTemplate: "students/{studentId}/student-transcript-requests",
                defaults: new { controller = "StudentRequests", action = "GetStudentTranscriptRequestsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
        name: "GetStudentRequestFee",
        routeTemplate: "students/{studentId}/student-request/{requestId}/student-request-fees",
        defaults: new { controller = "StudentRequests", action = "GetStudentRequestFeeAsync" },
        constraints: new
        {
            httpMethod = new HttpMethodConstraint("GET"),
            headerVersion = new HeaderVersionConstraint(1, true)
        }
        );

            #endregion

            #region  StudentResidentialCategories

            routes.MapHttpRoute(
              name: "GetStudentResidentialCategoriesByGuidV10",
              routeTemplate: "student-residential-categories/{guid}",
              defaults: new { controller = "StudentResidentialCategories", action = "GetStudentResidentialCategoriesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );
            routes.MapHttpRoute(
               name: "DefaultGetStudentResidentialCategoriesByGuid",
               routeTemplate: "student-residential-categories/{guid}",
                  defaults: new { controller = "StudentResidentialCategories", action = "GetStudentResidentialCategoriesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "GetStudentResidentialCategoriesV10",
              routeTemplate: "student-residential-categories",
              defaults: new { controller = "StudentResidentialCategories", action = "GetStudentResidentialCategoriesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );
            routes.MapHttpRoute(
               name: "GetStudentResidentialCategories",
               routeTemplate: "student-residential-categories",
                  defaults: new { controller = "StudentResidentialCategories", action = "GetStudentResidentialCategoriesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );
            routes.MapHttpRoute(
              name: "PutStudentResidentialCategoriesV10",
              routeTemplate: "student-residential-categories/{guid}",
              defaults: new { controller = "StudentResidentialCategories", action = "PutStudentResidentialCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "PostStudentResidentialCategoriesV10",
               routeTemplate: "student-residential-categories",
               defaults: new { controller = "StudentResidentialCategories", action = "PostStudentResidentialCategoriesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );
            routes.MapHttpRoute(
                name: "DefaultDeleteStudentResidentialCategories",
                routeTemplate: "student-residential-categories/{guid}",
                defaults: new { controller = "StudentResidentialCategories", action = "DeleteStudentResidentialCategoriesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Student Residential Categories

            #region  StudentSectionWaitlists           

            routes.MapHttpRoute(
              name: "GetStudentSectionWaitlistsByGuidV10",
              routeTemplate: "student-section-waitlists/{guid}",
              defaults: new { controller = "StudentSectionWaitlists", action = "GetStudentSectionWaitlistsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentSectionWaitlistsByGuid",
               routeTemplate: "student-section-waitlists/{guid}",
                  defaults: new { controller = "StudentSectionWaitlists", action = "GetStudentSectionWaitlistsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentSectionWaitlistsV10",
              routeTemplate: "student-section-waitlists",
              defaults: new { controller = "StudentSectionWaitlists", action = "GetStudentSectionWaitlistsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );

            routes.MapHttpRoute(
               name: "GetStudentSectionWaitlists",
               routeTemplate: "student-section-waitlists",
                  defaults: new { controller = "StudentSectionWaitlists", action = "GetStudentSectionWaitlistsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 10) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(10, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentSectionWaitlistsV10",
              routeTemplate: "student-section-waitlists/{guid}",
              defaults: new { controller = "StudentSectionWaitlists", action = "PutStudentSectionWaitlistsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentSectionWaitlistsV10",
               routeTemplate: "student-section-waitlists",
               defaults: new { controller = "StudentSectionWaitlists", action = "PostStudentSectionWaitlistsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(10, false, string.Format(HedtechIntegrationMediaTypeFormat, 10))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentSectionWaitlists",
                routeTemplate: "student-section-waitlists/{guid}",
                defaults: new { controller = "StudentSectionWaitlists", action = "DeleteStudentSectionWaitlistsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion StudentSectionWaitlists

            #region StudentStandings

            routes.MapHttpRoute(
                name: "GetStudentStandingsByIdList",
                routeTemplate: "qapi/student-standings",
                defaults: new { controller = "StudentStandings", action = "QueryStudentStandingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentStatements

            routes.MapHttpRoute(
                name: "GetStudentStatement",
                routeTemplate: "account-holders/{accountHolderId}/statement/{timeframeId}",
                defaults: new { controller = "StudentStatements", action = "GetStudentStatementAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1)),
                }
            );

            #endregion

            #region StudentStatuses

            routes.MapHttpRoute(
               name: "GetStudentStatusesV7",
               routeTemplate: "student-statuses",
               defaults: new { controller = "StudentStatuses", action = "GetStudentStatusesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentStatusesV6",
               routeTemplate: "student-statuses",
               defaults: new { controller = "StudentStatuses", action = "GetStudentStatusesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentStatuses",
               routeTemplate: "student-statuses",
                  defaults: new { controller = "StudentStatuses", action = "GetStudentStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentStatusesByGuidV7",
               routeTemplate: "student-statuses/{id}",
               defaults: new { controller = "StudentStatuses", action = "GetStudentStatusByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentStatusesByGuidV6",
               routeTemplate: "student-statuses/{id}",
               defaults: new { controller = "StudentStatuses", action = "GetStudentStatusByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentStatusesByGuid",
               routeTemplate: "student-statuses/{id}",
                  defaults: new { controller = "StudentStatuses", action = "GetStudentStatusByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
            );

            routes.MapHttpRoute(
               name: "PostStudentStatusesV7",
               routeTemplate: "student-statuses",
               defaults: new { controller = "StudentStatuses", action = "PostStudentStatusAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "PostStudentStatusesV6",
               routeTemplate: "student-statuses",
               defaults: new { controller = "StudentStatuses", action = "PostStudentStatusAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "PutStudentStatusesV7",
                routeTemplate: "student-statuses/{id}",
                defaults: new { controller = "StudentStatuses", action = "PutStudentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentStatusesV6",
                routeTemplate: "student-statuses/{id}",
                defaults: new { controller = "StudentStatuses", action = "PutStudentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentStatuses",
                routeTemplate: "student-statuses/{id}",
                defaults: new { controller = "StudentStatuses", action = "DeleteStudentStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region  StudentTags

            routes.MapHttpRoute(
              name: "GetStudentTagsByGuidV7",
              routeTemplate: "student-tags/{guid}",
              defaults: new { controller = "StudentTags", action = "GetStudentTagByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetStudentTagsByGuid",
               routeTemplate: "student-tags/{guid}",
                  defaults: new { controller = "StudentTags", action = "GetStudentTagByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetStudentTagsV7",
              routeTemplate: "student-tags",
              defaults: new { controller = "StudentTags", action = "GetStudentTagsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
              }
          );

            routes.MapHttpRoute(
               name: "GetStudentTags",
               routeTemplate: "student-tags",
                  defaults: new { controller = "StudentTags", action = "GetStudentTagsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentTagsV7",
              routeTemplate: "student-tags/{guid}",
              defaults: new { controller = "StudentTags", action = "PutStudentTagAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
              }
          );


            routes.MapHttpRoute(
               name: "PostStudentTagsV7",
               routeTemplate: "student-tags",
               defaults: new { controller = "StudentTags", action = "PostStudentTagAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentTags",
                routeTemplate: "student-tags/{guid}",
                defaults: new { controller = "StudentTags", action = "DeleteStudentTagAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion StudentTags

            #region  Student Tag Assignments

            routes.MapHttpRoute(
              name: "GetStudentTagAssignmentsByGuidV1",
              routeTemplate: "student-tag-assignments/{guid}",
              defaults: new { controller = "StudentTagAssignments", action = "GetStudentTagAssignmentsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );
            routes.MapHttpRoute(
               name: "DefaultGetStudentTagAssignmentsByGuid",
               routeTemplate: "student-tag-assignments/{guid}",
                  defaults: new { controller = "StudentTagAssignments", action = "GetStudentTagAssignmentsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "GetStudentTagAssignmentsV1",
              routeTemplate: "student-tag-assignments",
              defaults: new { controller = "StudentTagAssignments", action = "GetStudentTagAssignmentsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );
            routes.MapHttpRoute(
               name: "GetStudentTagAssignments",
               routeTemplate: "student-tag-assignments",
                  defaults: new { controller = "StudentTagAssignments", action = "GetStudentTagAssignmentsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );
            routes.MapHttpRoute(
              name: "PutStudentTagAssignmentsV1.0.0",
              routeTemplate: "student-tag-assignments/{guid}",
              defaults: new { controller = "StudentTagAssignments", action = "PutStudentTagAssignmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "PostStudentTagAssignmentsV1.0.0",
               routeTemplate: "student-tag-assignments",
               defaults: new { controller = "StudentTagAssignments", action = "PostStudentTagAssignmentsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );
            routes.MapHttpRoute(
                name: "DefaultDeleteStudentTagAssignments",
                routeTemplate: "student-tag-assignments/{guid}",
                defaults: new { controller = "StudentTagAssignments", action = "DeleteStudentTagAssignmentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
              name: "StudentTagAssignmentsUnsupported",
              routeTemplate: "student-tag-assignments/{id}",
               defaults: new { controller = "StudentTagAssignments", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                  constraints: new
                  {
                      httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                      headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                  }
            );
            #endregion Student Tag Assignments

            #region  Student Transcript Grades

            routes.MapHttpRoute(
            name: "PutStudentTranscriptGradesAdjustmentsV1.0.0",
            routeTemplate: "student-transcript-grades/{guid}",
            defaults: new
            {
                controller = "StudentTranscriptGrades",
                action = "PutStudentTranscriptGradesAdjustmentsAsync",
                isEedmSupported = true,
                RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
            },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentTranscriptGradesAdjustmentsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            }
           );

            routes.MapHttpRoute(
            name: "DefaultPutStudentTranscriptGradesAdjustmentsV1.0.0",
            routeTemplate: "student-transcript-grades/{guid}",
            defaults: new
            {
                controller = "StudentTranscriptGrades",
                action = "PutStudentTranscriptGradesAdjustmentsAsync",
                isEedmSupported = false,
                RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
            },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentTranscriptGradesAdjustmentsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
            }
           );

            routes.MapHttpRoute(
              name: "PostStudentTranscriptGradesAdjustmentsV1.0.0",
              routeTemplate: "student-transcript-grades",
              defaults: new
              {
                  controller = "StudentTranscriptGrades",
                  action = "PostStudentTranscriptGradesAdjustmentsAsync",
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentTranscriptGradesAdjustmentsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );


            routes.MapHttpRoute(
             name: "DefaultPostStudentTranscriptGradesAdjustmentsV1.0.0",
             routeTemplate: "student-transcript-grades",
             defaults: new
             {
                 controller = "StudentTranscriptGrades",
                 action = "PostStudentTranscriptGradesAdjustmentsAsync",
                 RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
             },
             constraints: new
             {
                 httpMethod = new HttpMethodConstraint("POST"),
                 contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentTranscriptGradesAdjustmentsFormat, "1.0.0")),
                 headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
             }
          );

            routes.MapHttpRoute(
              name: "GetStudentTranscriptGradesByGuidV1.0.0",
              routeTemplate: "student-transcript-grades/{guid}",
              defaults: new { controller = "StudentTranscriptGrades", action = "GetStudentTranscriptGradesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
              name: "GetStudentTranscriptGradesOptionsByGuidV1.0.0",
              routeTemplate: "student-transcript-grades/{guid}",
              defaults: new { controller = "StudentTranscriptGradesOptions", action = "GetStudentTranscriptGradesOptionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationStudentTranscriptGradesOptionsFormat, "1.0.0"))
              }
            );


            routes.MapHttpRoute(
               name: "DefaultGetStudentTranscriptGradesByGuid",
               routeTemplate: "student-transcript-grades/{guid}",
                  defaults: new { controller = "StudentTranscriptGrades", action = "GetStudentTranscriptGradesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "GetStudentTranscriptGradesV1.0.0",
              routeTemplate: "student-transcript-grades",
              defaults: new { controller = "StudentTranscriptGrades", action = "GetStudentTranscriptGradesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
              name: "GetStudentTranscriptGradesOptionsV1.0.0",
              routeTemplate: "student-transcript-grades",
              defaults: new { controller = "StudentTranscriptGradesOptions", action = "GetStudentTranscriptGradesOptionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationStudentTranscriptGradesOptionsFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
              name: "PutStudentTranscriptGradesOptionsV1.0.0",
              routeTemplate: "student-transcript-grades/{guid}",
              defaults: new { controller = "StudentTranscriptGradesOptions", action = "PutStudentTranscriptGradesOptionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationStudentTranscriptGradesOptionsFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentTranscriptGrades",
               routeTemplate: "student-transcript-grades",
                  defaults: new { controller = "StudentTranscriptGrades", action = "GetStudentTranscriptGradesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
            );

            routes.MapHttpRoute(
              name: "PutStudentTranscriptGradesV1.0.0",
              routeTemplate: "student-transcript-grades/{guid}",
              defaults: new { controller = "StudentTranscriptGrades", action = "PutStudentTranscriptGradesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );



            routes.MapHttpRoute(
               name: "PostStudentTranscriptGradesV1.0.0",
               routeTemplate: "student-transcript-grades",
               defaults: new { controller = "StudentTranscriptGrades", action = "PostStudentTranscriptGradesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
              name: "PostStudentTranscriptGradesOptionsV1.0.0",
              routeTemplate: "student-transcript-grades",
              defaults: new { controller = "StudentTranscriptGradesOptions", action = "PostStudentTranscriptGradesOptionsAsync", isEedmSupported = false },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationStudentTranscriptGradesOptionsFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentTranscriptGrades",
                routeTemplate: "student-transcript-grades/{guid}",
                defaults: new { controller = "StudentTranscriptGrades", action = "DeleteStudentTranscriptGradesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );

            routes.MapHttpRoute(
            name: "StudentTranscriptGradesUnsupported",
            routeTemplate: "student-transcript-grades/{id}",
             defaults: new { controller = "StudentTranscriptGrades", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );

            #endregion Student Transcript Grades

            #region StudentTypes

            routes.MapHttpRoute(
               name: "GetStudentTypesV7",
               routeTemplate: "student-types",
               defaults: new { controller = "StudentTypes", action = "GetStudentTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentTypesV6",
               routeTemplate: "student-types",
               defaults: new { controller = "StudentTypes", action = "GetStudentTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "GetStudentTypes",
                routeTemplate: "student-types",
                defaults: new { controller = "StudentTypes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentTypes",
               routeTemplate: "student-types",
                  defaults: new { controller = "StudentTypes", action = "GetStudentTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentTypesByGuidV7",
               routeTemplate: "student-types/{id}",
               defaults: new { controller = "StudentTypes", action = "GetStudentTypeByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "GetStudentTypesByGuidV6",
               routeTemplate: "student-types/{id}",
               defaults: new { controller = "StudentTypes", action = "GetStudentTypeByIdAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentTypesByGuid",
               routeTemplate: "student-types/{id}",
                  defaults: new { controller = "StudentTypes", action = "GetStudentTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 7) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(7, true)
               }
            );

            routes.MapHttpRoute(
               name: "PostStudentTypesV7",
               routeTemplate: "student-types",
               defaults: new { controller = "StudentTypes", action = "PostStudentTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
               }
            );

            routes.MapHttpRoute(
               name: "PostStudentTypesV6",
               routeTemplate: "student-types",
               defaults: new { controller = "StudentTypes", action = "PostStudentTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("POST"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
            );

            routes.MapHttpRoute(
                name: "PutStudentTypesV7",
                routeTemplate: "student-types/{id}",
                defaults: new { controller = "StudentTypes", action = "PutStudentTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(7, false, string.Format(HedtechIntegrationMediaTypeFormat, 7))
                }
            );

            routes.MapHttpRoute(
                name: "PutStudentTypesV6",
                routeTemplate: "student-types/{id}",
                defaults: new { controller = "StudentTypes", action = "PutStudentTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteStudentTypes",
                routeTemplate: "student-types/{id}",
                defaults: new { controller = "StudentTypes", action = "DeleteStudentTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region  StudentUnverifiedGrades

            routes.MapHttpRoute(
            name: "PutStudentUnverifiedGradesSubmissionsV1.0.0",
            routeTemplate: "student-unverified-grades/{guid}",
            defaults: new
            {
                controller = "StudentUnverifiedGradesSubmissions",
                action = "PutStudentUnverifiedGradesSubmissionsAsync",
                isEedmSupported = true,
                RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
            },
            constraints: new
            {
                httpMethod = new HttpMethodConstraint("PUT"),
                contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentUnverifiedGradesSubmissionsFormat, "1.0.0")),
                headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")),

            }
          );

            routes.MapHttpRoute(
           name: "DefaultPutStudentUnverifiedGradesSubmissionsV1.0.0",
           routeTemplate: "student-unverified-grades/{guid}",
           defaults: new
           {
               controller = "StudentUnverifiedGradesSubmissions",
               action = "PutStudentUnverifiedGradesSubmissionsAsync",
               isEedmSupported = false,
               RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
           },
           constraints: new
           {
               httpMethod = new HttpMethodConstraint("PUT"),
               contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentUnverifiedGradesSubmissionsFormat, "1.0.0")),
               headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")),

           }
         );

            routes.MapHttpRoute(
              name: "PostStudentUnverifiedGradesSubmissionsV1.0.0",
              routeTemplate: "student-unverified-grades",
              defaults: new
              {
                  controller = "StudentUnverifiedGradesSubmissions",
                  action = "PostStudentUnverifiedGradesSubmissionsAsync",
                  isEedmSupported = true,
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentUnverifiedGradesSubmissionsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
              name: "DefaultPostStudentUnverifiedGradesSubmissionsV1.0.0",
              routeTemplate: "student-unverified-grades",
              defaults: new
              {
                  controller = "StudentUnverifiedGradesSubmissions",
                  action = "PostStudentUnverifiedGradesSubmissionsAsync",
                  isEedmSupported = false,
                  RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
              },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  contentType = new ContentTypeConstraint(string.Format(HedtechIntegrationStudentUnverifiedGradesSubmissionsFormat, "1.0.0")),
                  headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
              name: "GetStudentUnverifiedGradesByGuidV1.0.0",
              routeTemplate: "student-unverified-grades/{guid}",
              defaults: new { controller = "StudentUnverifiedGrades", action = "GetStudentUnverifiedGradesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetStudentUnverifiedGradesByGuid",
               routeTemplate: "student-unverified-grades/{guid}",
                  defaults: new
                  {
                      controller = "StudentUnverifiedGrades",
                      action = "GetStudentUnverifiedGradesByGuidAsync",
                      isEedmSupported = true,
                      RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0")
                  },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "GetStudentUnverifiedGradesV1.0.0",
              routeTemplate: "student-unverified-grades",
              defaults: new { controller = "StudentUnverifiedGrades", action = "GetStudentUnverifiedGradesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
            );


            routes.MapHttpRoute(
               name: "DefaultGetStudentUnverifiedGrades",
               routeTemplate: "student-unverified-grades",
                  defaults: new { controller = "StudentUnverifiedGrades", action = "GetStudentUnverifiedGradesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
               }
           );

            routes.MapHttpRoute(
              name: "PutStudentUnverifiedGradesV1.0.0",
              routeTemplate: "student-unverified-grades/{guid}",
              defaults: new { controller = "StudentUnverifiedGrades", action = "PutStudentUnverifiedGradesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
               name: "PostStudentUnverifiedGradesV1.0.0",
               routeTemplate: "student-unverified-grades",
               defaults: new { controller = "StudentUnverifiedGrades", action = "PostStudentUnverifiedGradesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );


            routes.MapHttpRoute(
                name: "DefaultDeleteStudentUnverifiedGrades",
                routeTemplate: "student-unverified-grades/{guid}",
                defaults: new { controller = "StudentUnverifiedGrades", action = "DeleteStudentUnverifiedGradesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );

            routes.MapHttpRoute(
            name: "StudentUnverifiedGradesUnsupported",
            routeTemplate: "student-unverified-grades/{id}",
             defaults: new { controller = "StudentUnverifiedGrades", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
            );
            #endregion Student Unverified Grades

            #region StudentWaiverReasons

            routes.MapHttpRoute(
                name: "GetStudentWaiverReasons",
                routeTemplate: "student-waiver-reasons",
                defaults: new { controller = "StudentWaiverReasons", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region StudentWaivers

            routes.MapHttpRoute(
                name: "GetSectionStudentWaivers",
                routeTemplate: "sections/{sectionId}/student-waivers",
                defaults: new { controller = "StudentWaivers", action = "GetSectionStudentWaiversAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateStudentWaiver",
                routeTemplate: "students/{studentId}/student-waiver",
                defaults: new { controller = "StudentWaivers", action = "PostStudentWaiverAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            // WARNING: This is an obsolete route!!!  New route is GET student-waiver/{studentWaiverId}
            routes.MapHttpRoute(
                name: "GetStudentWaiver",
                routeTemplate: "students/{studentId}/student-waiver/{studentWaiverId}",
                defaults: new { controller = "StudentWaivers", action = "GetStudentWaiverAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
              name: "GetStudentWaiver2",
              routeTemplate: "student-waiver/{id}",
              defaults: new { controller = "StudentWaivers", action = "GetStudentWaiver2Async" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
          );

            routes.MapHttpRoute(
              name: "GetStudentWaivers",
              routeTemplate: "students/{studentId}/student-waivers",
              defaults: new { controller = "StudentWaivers", action = "GetStudentWaiversAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(1, true)
              }
          );

            #endregion

            #region Subjects

            routes.MapHttpRoute(
               name: "GetSubjectByGuid2AsyncV6",
               routeTemplate: "subjects/{id}",
               defaults: new { controller = "Subjects", action = "GetSubjectByGuid2Async", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6)),
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetSubjectByGuid2Async",
               routeTemplate: "subjects/{id}",
                  defaults: new { controller = "Subjects", action = "GetSubjectByGuid2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true),
               }
           );

            routes.MapHttpRoute(
                name: "GetEedmSubjects2AsyncV6",
                routeTemplate: "subjects",
                defaults: new { controller = "Subjects", action = "GetSubjects2Async", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "GetSubjects",
                routeTemplate: "subjects",
                defaults: new { controller = "Subjects", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetSubjects2Async",
                routeTemplate: "subjects",
                   defaults: new { controller = "Subjects", action = "GetSubjects2Async", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, true)
                }
            );

            routes.MapHttpRoute(name: "PutSubjectV6",
                routeTemplate: "subjects/{id}",
                defaults: new { controller = "Subjects", action = "PutSubject" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "PostSubjectV6",
                routeTemplate: "subjects",
                defaults: new { controller = "Subjects", action = "PostSubject" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DeleteSubject",
                routeTemplate: "subjects/{id}",
                defaults: new { controller = "Subjects", action = "DeleteSubject" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Subregions

            routes.MapHttpRoute(
              name: "GetSubregionsByGuidV100",
              routeTemplate: "subregions/{guid}",
              defaults: new { controller = "Subregions", action = "GetSubregionsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetSubregionsByGuid",
               routeTemplate: "subregions/{guid}",
                  defaults: new { controller = "Subregions", action = "GetSubregionsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetSubregionsV100",
              routeTemplate: "subregions",
              defaults: new { controller = "Subregions", action = "GetSubregionsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "GetSubregions",
               routeTemplate: "subregions",
                  defaults: new { controller = "Subregions", action = "GetSubregionsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutSubregionsV100",
              routeTemplate: "subregions/{guid}",
              defaults: new { controller = "Subregions", action = "PutSubregionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostSubregionsV100",
               routeTemplate: "subregions",
               defaults: new { controller = "Subregions", action = "PostSubregionsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteSubregions",
                routeTemplate: "subregions/{guid}",
                defaults: new { controller = "Subregions", action = "DeleteSubregionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );


            routes.MapHttpRoute(
            name: "SubregionsUnsupported",
            routeTemplate: "subregions/{id}",
             defaults: new { controller = "Subregions", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );
            #endregion Subregions

            #region  Subregion Iso Codes

            routes.MapHttpRoute(
              name: "GetSubregionIsoCodesByGuidV100",
              routeTemplate: "subregion-iso-codes/{guid}",
              defaults: new { controller = "SubregionIsoCodes", action = "GetSubregionIsoCodesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetSubregionIsoCodesByGuid",
               routeTemplate: "subregion-iso-codes/{guid}",
                  defaults: new { controller = "SubregionIsoCodes", action = "GetSubregionIsoCodesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );


            routes.MapHttpRoute(
              name: "GetSubregionIsoCodesV100",
              routeTemplate: "subregion-iso-codes",
              defaults: new { controller = "SubregionIsoCodes", action = "GetSubregionIsoCodesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );

            routes.MapHttpRoute(
               name: "GetSubregionIsoCodes",
               routeTemplate: "subregion-iso-codes",
                  defaults: new { controller = "SubregionIsoCodes", action = "GetSubregionIsoCodesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0") },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint("1.0.0", true)
               }
           );

            routes.MapHttpRoute(
              name: "PutSubregionIsoCodesV100",
              routeTemplate: "subregion-iso-codes/{guid}",
              defaults: new { controller = "SubregionIsoCodes", action = "PutSubregionIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
          );


            routes.MapHttpRoute(
               name: "PostSubregionIsoCodesV100",
               routeTemplate: "subregion-iso-codes",
               defaults: new { controller = "SubregionIsoCodes", action = "PostSubregionIsoCodesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint("1.0.0", false, string.Format(HedtechIntegrationMediaTypeFormat, "1.0.0"))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteSubregionIsoCodes",
                routeTemplate: "subregion-iso-codes/{guid}",
                defaults: new { controller = "SubregionIsoCodes", action = "DeleteSubregionIsoCodesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );


            routes.MapHttpRoute(
            name: "SubregionIsoCodesUnsupported",
            routeTemplate: "subregion-iso-codes/{id}",
             defaults: new { controller = "SubregionIsoCodes", action = "NotAcceptableStatusException", id = UrlParameter.Optional },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET", "PUT", "POST"),
                    headerVersion = new HeaderVersionConstraint("*", false, string.Format(HedtechIntegrationMediaTypeFormat, "*"))
                }
          );
            #endregion Subregion Iso Codes

            #region Suffixes

            routes.MapHttpRoute(
                name: "GetSuffixes",
                routeTemplate: "suffixes",
                defaults: new { controller = "Suffixes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region TaxForms
            routes.MapHttpRoute(
               name: "GetTaxForms",
               routeTemplate: "tax-form-codes",
               defaults: new { controller = "TaxForms", action = "GetTaxFormsAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );


            #endregion

            #region TaxFormBoxCodes
            routes.MapHttpRoute(
               name: "GetAllTaxFormBoxCodes",
               routeTemplate: "tax-form-boxcodes",
               defaults: new { controller = "TaxFormBoxCodes", action = "GetAllTaxFormBoxCodesAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, false)
               }
           );
            #endregion

            #region TaxFormConsents
            routes.MapHttpRoute(
                name: "GetTaxFormConsents",
                routeTemplate: "tax-form-consents/{personId}/{taxFormId}",
                defaults: new { controller = "TaxFormConsents", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateTaxFormConsent",
                routeTemplate: "tax-form-consents",
                defaults: new { controller = "TaxFormConsents", action = "PostAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region TaxFormConfiguration
            routes.MapHttpRoute(
                name: "GetTaxFormConfiguration",
                routeTemplate: "configuration/tax-forms/{taxFormId}",
                defaults: new { controller = "Configuration", action = "GetTaxFormConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Tax Form PDFs

            routes.MapHttpRoute(
                name: "GetTaxFormW2Pdf2",
                routeTemplate: "persons/{personId}/formW2s/{recordId}",
                defaults: new { controller = "HumanResourcesTaxFormPdfs", action = "GetW2TaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "GetTaxFormW2Pdf",
                routeTemplate: "persons/{personId}/formW2s/{recordId}",
                defaults: new { controller = "HumanResourcesTaxFormPdfs", action = "GetW2TaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetTaxForm1095cPdf2",
                routeTemplate: "persons/{personId}/form1095cs/{recordId}",
                defaults: new { controller = "HumanResourcesTaxFormPdfs", action = "Get1095cTaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "GetTaxForm1095cPdf",
                routeTemplate: "persons/{personId}/form1095cs/{recordId}",
                defaults: new { controller = "HumanResourcesTaxFormPdfs", action = "Get1095cTaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "Get1098TaxFormPdf2",
                routeTemplate: "persons/{personId}/form1098ts/{recordId}",
                defaults: new { controller = "StudentTaxFormPdfs", action = "Get1098TaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "Get1098TaxFormPdf",
                routeTemplate: "persons/{personId}/form1098ts/{recordId}",
                defaults: new { controller = "StudentTaxFormPdfs", action = "Get1098TaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetT4TaxFormPdf",
                routeTemplate: "persons/{personId}/formT4s/{recordId}",
                defaults: new { controller = "HumanResourcesTaxFormPdfs", action = "GetT4TaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "GetT4aTaxFormPdf",
                routeTemplate: "persons/{personId}/formT4as/{recordId}",
                defaults: new { controller = "ColleagueFinanceTaxFormPdfs", action = "GetFormT4aPdfAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "GetT2202aTaxFormPdf",
                routeTemplate: "persons/{personId}/formT2202as/{recordId}",
                defaults: new { controller = "StudentTaxFormPdfs", action = "GetT2202aTaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
               name: "Get1099MiscTaxFormPdf",
               routeTemplate: "persons/{personId}/form1099Miscs/{recordId}",
               defaults: new { controller = "ColleagueFinanceTaxFormPdfs", action = "Get1099MiscTaxFormPdfAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
               }
           );
            #endregion

            #region Tax Form Statements

            routes.MapHttpRoute(
                name: "GetW2TaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/FormW2",
                defaults: new { controller = "HumanResourcesTaxFormStatements", action = "GetW2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetTaxFormW2cPdf",
                routeTemplate: "persons/{personId}/formW2cs/{recordId}",
                defaults: new { controller = "HumanResourcesTaxFormPdfs", action = "GetW2cTaxFormPdf" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true, string.Format(EllucianPDFMediaTypeFormat, 1))
                }
            );

            routes.MapHttpRoute(
                name: "Get1095CTaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/Form1095C",
                defaults: new { controller = "HumanResourcesTaxFormStatements", action = "Get1095cAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetT4TaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/FormT4",
                defaults: new { controller = "HumanResourcesTaxFormStatements", action = "GetT4Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "Get1098TaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/Form1098",
                defaults: new { controller = "StudentTaxFormStatements", action = "Get1098Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetT2202ATaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/FormT2202A",
                defaults: new { controller = "StudentTaxFormStatements", action = "GetT2202aAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetT4ATaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/FormT4A",
                defaults: new { controller = "ColleagueFinanceTaxFormStatements", action = "GetT4aAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
               name: "Get1099MITaxFormStatements",
               routeTemplate: "tax-form-statements/{personId}/Form1099MI",
               defaults: new { controller = "ColleagueFinanceTaxFormStatements", action = "Get1099MIAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
           );

            // This route points to an obsolete controller method.
            routes.MapHttpRoute(
                name: "GetTaxFormStatements",
                routeTemplate: "tax-form-statements/{personId}/{taxFormId}",
                defaults: new { controller = "TaxFormStatements", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );


            #endregion

            #region Terms

            routes.MapHttpRoute(
                name: "GetTerm",
                routeTemplate: "terms",
                defaults: new { controller = "Terms", action = "GetAsync" },
                //
                // Note: this route has a conflict with the GetAllTerms route defined below - each is defined to hit the api/terms
                // template via GET, but direct to different action methods. We need to do this because we need a GET that returns
                // everything, but we also need a GET which takes a query string of a single route to retrieve. This latter route
                // CANNOT accept the term as part of the Url (like api/terms/{id}) because term IDs usually have forward slashes in
                // them. To get around this problem we use the QueryStringConstraint custom constraint class defined in Infrastructure;
                // this class will inspect the query string of a request and look to see if it contains a provided set of parameters.
                //
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true),
                    isSingle = new QueryStringConstraint(new List<string> { "id" })
                }
            );

            routes.MapHttpRoute(
                name: "GetAllTerms",
                routeTemplate: "terms",
                defaults: new { controller = "Terms", action = "GetAllTermsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetPlanningTerms",
                routeTemplate: "terms/planning",
                defaults: new { controller = "Terms", action = "GetPlanningTermsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetRegistrationTerms",
                routeTemplate: "terms/registration",
                defaults: new { controller = "Terms", action = "GetRegistrationTermsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Tests

            routes.MapHttpRoute(
                name: "GetTests",
                routeTemplate: "tests",
                defaults: new { controller = "Tests", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region TestResults

            // WARNING: This is an obsolete route!!!  Use GetTestResults2
            routes.MapHttpRoute(
                name: "GetTestResults",
                routeTemplate: "students/{studentId}/test-results",
                defaults: new { controller = "TestResults", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetTestResults2",
                routeTemplate: "students/{studentId}/test-results",
                defaults: new { controller = "TestResults", action = "Get2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            // WARNING: This is an obsolete route!!!  Use GetTestResults2ByIdList
            routes.MapHttpRoute(
                name: "GetTestResultsByIdList",
                routeTemplate: "qapi/test-results",
                defaults: new { controller = "TestResults", action = "QueryTestResultsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetTestResults2ByIdList",
                routeTemplate: "qapi/test-results",
                defaults: new { controller = "TestResults", action = "QueryTestResults2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region TextDocuments

            routes.MapHttpRoute(
                name: "GetTextDocumentAsync",
                routeTemplate: "text-documents/{documentId}",
                defaults: new { controller = "TextDocuments", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Time Management Configuration
            routes.MapHttpRoute(
                name: "GetTimeManagementConfigurationAsync",
                routeTemplate: "time-management-configuration",
                defaults: new { controller = "TimeManagementConfiguration", action = "GetTimeManagementConfigurationAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Time Entry Comments
            routes.MapHttpRoute(
                name: "GetTimeEntryCommentsAsync",
                routeTemplate: "time-entry-comments",
                defaults: new { controller = "TimeEntryComments", action = "GetTimeEntryCommentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );


            routes.MapHttpRoute(
                name: "CreateTimeEntryCommentsAsync",
                routeTemplate: "time-entry-comments",
                defaults: new { controller = "TimeEntryComments", action = "CreateTimeEntryCommentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            #region Timecards

            #region V1 obsolete
            routes.MapHttpRoute(
                name: "GetTimecardsAsync",
                routeTemplate: "timecards",
                defaults: new { controller = "Timecards", action = "GetTimecardsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetTimecardAsync",
                routeTemplate: "timecards/{id}",
                defaults: new { controller = "Timecards", action = "GetTimecardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "CreateTimecardAsync",
                routeTemplate: "timecards",
                defaults: new { controller = "Timecards", action = "CreateTimecardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateTimecardAsync",
                routeTemplate: "timecards/{id}",
                defaults: new { controller = "Timecards", action = "UpdateTimecardAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );
            #endregion

            routes.MapHttpRoute(
                name: "GetTimecards2Async",
                routeTemplate: "timecards",
                defaults: new { controller = "Timecards", action = "GetTimecards2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetTimecard2Async",
                routeTemplate: "timecards/{id}",
                defaults: new { controller = "Timecards", action = "GetTimecard2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateTimecard2Async",
                routeTemplate: "timecards",
                defaults: new { controller = "Timecards", action = "CreateTimecard2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(2, false)
                }
            );

            routes.MapHttpRoute(
                name: "BulkCreateTimecard2Async",
                routeTemplate: "timecards",
                defaults: new { controller = "Timecards", action = "BulkCreateTimecardsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(3, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateTimecard2Async",
                routeTemplate: "timecards/{id}",
                defaults: new { controller = "Timecards", action = "UpdateTimecard2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );


            #endregion

            #region Timecard Histories

            routes.MapHttpRoute(
                name: "GetTimecardHistoriesAsync",
                routeTemplate: "timecard-histories",
                defaults: new { controller = "TimecardHistories", action = "GetTimecardHistoriesAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string>() { "startDate", "endDate" }, false),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetTimecardHistories2Async",
                routeTemplate: "timecard-histories",
                defaults: new { controller = "TimecardHistories", action = "GetTimecardHistories2Async" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string>() { "startDate", "endDate" }, true),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region Time History Comments

            #region V1 obsolete
            routes.MapHttpRoute(
                name: "GetTimeHistoryCommentsAsync",
                routeTemplate: "qapi/time-history-comments",
                defaults: new { controller = "TimeHistoryComments", action = "GetTimeHistoryCommentsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );
            #endregion

            routes.MapHttpRoute(
                name: "GetTimeHistoryComments2Async",
                routeTemplate: "time-history-comments",
                defaults: new { controller = "TimeHistoryComments", action = "GetTimeHistoryComments2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );

            #endregion

            #region TimecardStatuses

            routes.MapHttpRoute(
                name: "CreateTimecardStatusAsync",
                routeTemplate: "timecards/{id}/timecard-statuses",
                defaults: new { controller = "TimecardStatuses", action = "CreateTimecardStatusAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "CreateTimecardStatusesAsync",
                routeTemplate: "timecard-statuses",
                defaults: new { controller = "TimecardStatuses", action = "CreateTimecardStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetTimecardStatusesByTimecardIdAsync",
                routeTemplate: "timecards/{id}/timecard-statuses",
                defaults: new { controller = "TimecardStatuses", action = "GetTimecardStatusesByTimecardIdAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetLatestTimecardStatusesAsync",
                routeTemplate: "timecard-statuses",
                defaults: new { controller = "TimecardStatuses", action = "GetLatestTimecardStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetTimecardStatusesByTimecardIdsAsync",
                routeTemplate: "qapi/timecard-statuses",
                defaults: new { controller = "TimecardStatuses", action = "QueryTimecardStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Topic Codes

            routes.MapHttpRoute(
                name: "GetTopicCodes",
                routeTemplate: "topic-codes",
                defaults: new { controller = "TopicCodes", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region TranscriptCategories

            routes.MapHttpRoute(
                name: "GetTranscriptCategories",
                routeTemplate: "transcript-categories",
                defaults: new { controller = "TranscriptCategories", action = "GetAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region TranscriptGroupings

            routes.MapHttpRoute(
                name: "GetSelectableTranscriptGroupings",
                routeTemplate: "transcript-groupings/selectable",
                defaults: new { controller = "TranscriptGroupings", action = "GetSelectableTranscriptGroupingsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region Users

            routes.MapHttpRoute(
                name: "GetUsers",
                routeTemplate: "users",
                defaults: new { controller = "Users", action = "GetUsers" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostUserProxyPermissions",
                routeTemplate: "users/{userId}/proxy-permissions",
                defaults: new { controller = "Users", action = "PostUserProxyPermissionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetUserProxyPermissions",
                routeTemplate: "users/{userId}/proxy-permissions",
                defaults: new { controller = "Users", action = "GetUserProxyPermissionsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetUserProxySubjects",
                routeTemplate: "users/{userId}/proxy-subjects",
                defaults: new { controller = "Users", action = "GetUserProxySubjectsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostProxyCandidate",
                routeTemplate: "users/{userId}/proxy-candidates",
                defaults: new { controller = "Users", action = "PostProxyCandidateAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetProxyCandidatesAsync",
                routeTemplate: "users/{userId}/proxy-candidates",
                defaults: new { controller = "Users", action = "GetUserProxyCandidatesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "PostProxyUserAsync",
                routeTemplate: "users/proxy-users",
                defaults: new { controller = "Users", action = "PostProxyUserAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetSelfservicePreferenceAsync",
                routeTemplate: "users/{personId}/self-service-preferences/{preferenceType}",
                defaults: new { controller = "Users", action = "GetSelfservicePreferenceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "UpdateSelfservicePreferenceAsync",
                routeTemplate: "users/{personId}/self-service-preferences/{preferenceType}",
                defaults: new { controller = "Users", action = "UpdateSelfservicePreferenceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            routes.MapHttpRoute(
                name: "DeleteSelfservicePreferenceAsync",
                routeTemplate: "users/{personId}/self-service-preferences/{preferenceType}",
                defaults: new { controller = "Users", action = "DeleteSelfServicePreferenceAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  Vendor Payment Terms

            routes.MapHttpRoute(
              name: "GetVendorPaymentTermsByGuidV8",
              routeTemplate: "vendor-payment-terms/{guid}",
              defaults: new { controller = "VendorPaymentTerms", action = "GetVendorPaymentTermsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetVendorPaymentTermsByGuid",
               routeTemplate: "vendor-payment-terms/{guid}",
                  defaults: new { controller = "VendorPaymentTerms", action = "GetVendorPaymentTermsByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
             );


            routes.MapHttpRoute(
              name: "GetVendorPaymentTermsV8",
              routeTemplate: "vendor-payment-terms",
              defaults: new { controller = "VendorPaymentTerms", action = "GetVendorPaymentTermsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
               name: "GetVendorPaymentTerms",
               routeTemplate: "vendor-payment-terms",
                  defaults: new { controller = "VendorPaymentTerms", action = "GetVendorPaymentTermsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
            );

            routes.MapHttpRoute(
              name: "PutVendorPaymentTermsV8",
              routeTemplate: "vendor-payment-terms/{guid}",
              defaults: new { controller = "VendorPaymentTerms", action = "PutVendorPaymentTermsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
               name: "PostVendorPaymentTermsV8",
               routeTemplate: "vendor-payment-terms",
               defaults: new { controller = "VendorPaymentTerms", action = "PostVendorPaymentTermsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteVendorPaymentTerms",
                routeTemplate: "vendor-payment-terms/{guid}",
                defaults: new { controller = "VendorPaymentTerms", action = "DeleteVendorPaymentTermsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );
            #endregion Vendor Payment Terms

            #region  Vendors

            routes.MapHttpRoute(
              name: "GetVendorsByGuidV8",
              routeTemplate: "vendors/{guid}",
              defaults: new { controller = "Vendors", action = "GetVendorsByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "GetVendorsByGuidV11",
              routeTemplate: "vendors/{guid}",
              defaults: new { controller = "Vendors", action = "GetVendorsByGuidAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "DefaultGetVendorsByGuid",
               routeTemplate: "vendors/{guid}",
                  defaults: new { controller = "Vendors", action = "GetVendorsByGuidAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
            );

            routes.MapHttpRoute(
              name: "GetVendorsV8",
              routeTemplate: "vendors",
              defaults: new { controller = "Vendors", action = "GetVendorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "GetVendorsV11",
              routeTemplate: "vendors",
              defaults: new { controller = "Vendors", action = "GetVendorsAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "GetVendors",
               routeTemplate: "vendors",
                  defaults: new { controller = "Vendors", action = "GetVendorsAsync2", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 11) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(11, true)
               }
             );

            routes.MapHttpRoute(
              name: "PutVendorsV8",
              routeTemplate: "vendors/{guid}",
              defaults: new { controller = "Vendors", action = "PutVendorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );

            routes.MapHttpRoute(
              name: "PutVendorsV11",
              routeTemplate: "vendors/{guid}",
              defaults: new { controller = "Vendors", action = "PutVendorsAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
               name: "PostVendorsV8",
               routeTemplate: "vendors",
               defaults: new { controller = "Vendors", action = "PostVendorsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
            );
            routes.MapHttpRoute(
               name: "PostVendorsV11",
               routeTemplate: "vendors",
               defaults: new { controller = "Vendors", action = "PostVendorsAsync2", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(11, false, string.Format(HedtechIntegrationMediaTypeFormat, 11))
              }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteVendors",
                routeTemplate: "vendors/{guid}",
                defaults: new { controller = "Vendors", action = "DeleteVendorsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
            );
                        
            routes.MapHttpRoute(
                 name: "SearchVendors",
                 routeTemplate: "qapi/vendors",
                 defaults: new { controller = "Vendors", action = "QueryVendorsByPostAsync" },
                 constraints: new
                 {
                     httpMethod = new HttpMethodConstraint("POST"),
                     headerVersion = new HeaderVersionConstraint(1, true)
                 }
             );

            #endregion Vendors

            #region Version

            routes.MapHttpRoute(
                name: "GetVersion",
                routeTemplate: "version",
                defaults: new { controller = "Version", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region  VeteranStatuses

            routes.MapHttpRoute(
              name: "GetVeteranStatusesByGuidV9",
              routeTemplate: "veteran-statuses/{guid}",
              defaults: new { controller = "VeteranStatuses", action = "GetVeteranStatusesByGuidAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetVeteranStatusesByGuid",
               routeTemplate: "veteran-statuses/{guid}",
                  defaults: new { controller = "VeteranStatuses", action = "GetVeteranStatusesByGuidAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetVeteranStatusesV9",
              routeTemplate: "veteran-statuses",
              defaults: new { controller = "VeteranStatuses", action = "GetVeteranStatusesAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );

            routes.MapHttpRoute(
               name: "GetVeteranStatuses",
               routeTemplate: "veteran-statuses",
                  defaults: new { controller = "VeteranStatuses", action = "GetVeteranStatusesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 9) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(9, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutVeteranStatusesV9",
              routeTemplate: "veteran-statuses/{guid}",
              defaults: new { controller = "VeteranStatuses", action = "PutVeteranStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
          );


            routes.MapHttpRoute(
               name: "PostVeteranStatusesV9",
               routeTemplate: "veteran-statuses",
               defaults: new { controller = "VeteranStatuses", action = "PostVeteranStatusesAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(9, false, string.Format(HedtechIntegrationMediaTypeFormat, 9))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteVeteranStatuses",
                routeTemplate: "veteran-statuses/{guid}",
                defaults: new { controller = "VeteranStatuses", action = "DeleteVeteranStatusesAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion VeteranStatuses

            #region VisaTypes

            routes.MapHttpRoute(
                name: "GetVisaTypeByIdV6",
                routeTemplate: "visa-types/{id}",
                defaults: new { controller = "VisaTypes", action = "GetVisaTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
               name: "DefaultGetVisaTypeById",
               routeTemplate: "visa-types/{id}",
                  defaults: new { controller = "VisaTypes", action = "GetVisaTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
               name: "GetVisaTypesV6",
               routeTemplate: "visa-types",
               defaults: new { controller = "VisaTypes", action = "GetVisaTypesAsync", isEedmSupported = true },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
               name: "DefaultGetVisaTypesV6",
               routeTemplate: "visa-types",
               defaults: new { controller = "VisaTypes", action = "GetVisaTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 6) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(6, true)
               }
           );

            routes.MapHttpRoute(
                name: "GetVisaTypes",
                routeTemplate: "visa-types",
                defaults: new { controller = "VisaTypes", action = "Get" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
               name: "PutVisaTypeV6",
               routeTemplate: "visa-types/{id}",
               defaults: new { controller = "VisaTypes", action = "PutVisaTypeAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("PUT"),
                   headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
               }
           );

            routes.MapHttpRoute(
                name: "PostVisaTypeV6",
                routeTemplate: "visa-types",
                defaults: new { controller = "VisaTypes", action = "PostVisaTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(6, false, string.Format(HedtechIntegrationMediaTypeFormat, 6))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultDeleteVisaType",
                routeTemplate: "visa-types/{id}",
                defaults: new { controller = "VisaTypes", action = "DeleteVisaTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE")
                }
            );

            #endregion

            #region VendorClassifications

            routes.MapHttpRoute(
                name: "GetVendorTypes",
                routeTemplate: "vendor-classifications",
                defaults: new { controller = "VendorClassifications", action = "GetVendorTypesAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetVendorTypes",
                routeTemplate: "vendor-classifications",
                defaults: new { controller = "VendorClassifications", action = "GetVendorTypesAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true)
                }
            );

            routes.MapHttpRoute(
                name: "GetVendorTypesById",
                routeTemplate: "vendor-classifications/{guid}",
                defaults: new { controller = "VendorClassifications", action = "GetVendorTypeByIdAsync", isEedmSupported = true },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );

            routes.MapHttpRoute(
                name: "DefaultGetVendorTypesById",
                routeTemplate: "vendor-classifications/{guid}",
                defaults: new { controller = "VendorClassifications", action = "GetVendorTypeByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(8, true),
                }
            );

            routes.MapHttpRoute(
                name: "PostVendorTypes",
                routeTemplate: "vendor-classifications",
                defaults: new { controller = "VendorClassifications", action = "PostVendorTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("POST"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
                }
            );


            routes.MapHttpRoute(
                name: "PutVendorTypes",
                routeTemplate: "vendor-classifications/{guid}",
                defaults: new { controller = "VendorClassifications", action = "PutVendorTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("PUT"),
                    headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8)),
                }
            );


            routes.MapHttpRoute(
                name: "DeleteVendorTypes",
                routeTemplate: "vendor-classifications/{guid}",
                defaults: new { controller = "VendorClassifications", action = "DeleteVendorTypeAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),
                }
            );

            #endregion

            #region  Vendor Hold Reasons

            routes.MapHttpRoute(
              name: "GetVendorHoldReasonsByGuidV8",
              routeTemplate: "vendor-hold-reasons/{guid}",
              defaults: new { controller = "VendorHoldReasons", action = "GetVendorHoldReasonsByIdAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetVendorHoldReasonsByGuid",
               routeTemplate: "vendor-hold-reasons/{guid}",
                  defaults: new { controller = "VendorHoldReasons", action = "GetVendorHoldReasonsByIdAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );


            routes.MapHttpRoute(
              name: "GetVendorHoldReasonsV8",
              routeTemplate: "vendor-hold-reasons",
              defaults: new { controller = "VendorHoldReasons", action = "GetVendorHoldReasonsAsync", isEedmSupported = true },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("GET"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );

            routes.MapHttpRoute(
               name: "DefaultGetVendorHoldReasons",
               routeTemplate: "vendor-hold-reasons",
                  defaults: new { controller = "VendorHoldReasons", action = "GetVendorHoldReasonsAsync", isEedmSupported = true, RequestedContentType = string.Format(HedtechIntegrationMediaTypeFormat, 8) },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(8, true)
               }
           );

            routes.MapHttpRoute(
              name: "PutVendorHoldReasonsV8Async",
              routeTemplate: "vendor-hold-reasons/{guid}",
              defaults: new { controller = "VendorHoldReasons", action = "PutVendorHoldReasonsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("PUT"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
          );


            routes.MapHttpRoute(
               name: "PostVendorHoldReasonsV8Async",
               routeTemplate: "vendor-hold-reasons",
               defaults: new { controller = "VendorHoldReasons", action = "PostVendorHoldReasonsAsync" },
              constraints: new
              {
                  httpMethod = new HttpMethodConstraint("POST"),
                  headerVersion = new HeaderVersionConstraint(8, false, string.Format(HedtechIntegrationMediaTypeFormat, 8))
              }
           );

            routes.MapHttpRoute(
                name: "DefaultDeleteVendorHoldReasonsAsync",
                routeTemplate: "vendor-hold-reasons/{guid}",
                defaults: new { controller = "VendorHoldReasons", action = "DeleteVendorHoldReasonsAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("DELETE"),

                }
           );
            #endregion Accounts Payable Sources

            #region Vouchers
            // WARNING: This is an obsolete route as of Api version 1.15. Use GetVoucher2 route
            routes.MapHttpRoute(
                name: "GetVoucher",
                routeTemplate: "vouchers/{voucherId}",
                defaults: new { controller = "Vouchers", action = "GetVoucherAsync" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, false)
                }
            );

            routes.MapHttpRoute(
                name: "GetVoucher2",
                routeTemplate: "vouchers/{voucherId}",
                defaults: new { controller = "Vouchers", action = "GetVoucher2Async" },
                constraints: new
                {
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(2, true)
                }
            );
            #endregion

            #region WorkTasks

            routes.MapHttpRoute(
                name: "GetWorkTasks",
                routeTemplate: "work-tasks",
                defaults: new { controller = "WorkTasks", action = "GetAsync" },
                constraints: new
                {
                    isSingle = new QueryStringConstraint(new List<string> { "personId" }),
                    httpMethod = new HttpMethodConstraint("GET"),
                    headerVersion = new HeaderVersionConstraint(1, true)
                }
            );

            #endregion

            #region YearlyCycles

            routes.MapHttpRoute(
                name: "GetYearlyCycles",
                routeTemplate: "yearly-cycles",
                defaults: new { controller = "YearlyCycles", action = "GetAsync" },
               constraints: new
               {
                   httpMethod = new HttpMethodConstraint("GET"),
                   headerVersion = new HeaderVersionConstraint(1, true)
               }
            );
            #endregion

            routes.MapRoute(
                name: "Default MVC",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
        }
    }
}

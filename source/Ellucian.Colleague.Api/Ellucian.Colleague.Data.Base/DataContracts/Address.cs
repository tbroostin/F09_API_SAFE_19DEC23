//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:24:21 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: ADDRESS
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Address")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:24:21 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "ADDRESS", EntityType = "PHYS")]
	public class Address : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: ZIP
		/// </summary>
		[DataMember(Order = 0, Name = "ZIP")]
		public string Zip { get; set; }
		
		/// <summary>
		/// CDD Name: STATE
		/// </summary>
		[DataMember(Order = 1, Name = "STATE")]
		public string State { get; set; }
		
		/// <summary>
		/// CDD Name: CITY
		/// </summary>
		[DataMember(Order = 2, Name = "CITY")]
		public string City { get; set; }
		
		/// <summary>
		/// CDD Name: ADDRESS.LINES
		/// </summary>
		[DataMember(Order = 4, Name = "ADDRESS.LINES")]
		public List<string> AddressLines { get; set; }
		
		/// <summary>
		/// CDD Name: ADDRESS.ROUTE.CODE
		/// </summary>
		[DataMember(Order = 7, Name = "ADDRESS.ROUTE.CODE")]
		public string AddressRouteCode { get; set; }
		
		/// <summary>
		/// CDD Name: COUNTY
		/// </summary>
		[DataMember(Order = 9, Name = "COUNTY")]
		public string County { get; set; }
		
		/// <summary>
		/// CDD Name: COUNTRY
		/// </summary>
		[DataMember(Order = 10, Name = "COUNTRY")]
		public string Country { get; set; }
		
		/// <summary>
		/// CDD Name: RESIDENTS
		/// </summary>
		[DataMember(Order = 11, Name = "RESIDENTS")]
		public List<string> Residents { get; set; }
		
		/// <summary>
		/// CDD Name: ADDRESS.PHONES
		/// </summary>
		[DataMember(Order = 17, Name = "ADDRESS.PHONES")]
		public List<string> AddressPhones { get; set; }
		
		/// <summary>
		/// CDD Name: ADDRESS.CHAPTER
		/// </summary>
		[DataMember(Order = 18, Name = "ADDRESS.CHAPTER")]
		public List<string> AddressChapter { get; set; }
		
		/// <summary>
		/// CDD Name: CARRIER.ROUTE
		/// </summary>
		[DataMember(Order = 21, Name = "CARRIER.ROUTE")]
		public string CarrierRoute { get; set; }
		
		/// <summary>
		/// CDD Name: ADDRESS.PHONE.TYPE
		/// </summary>
		[DataMember(Order = 25, Name = "ADDRESS.PHONE.TYPE")]
		public List<string> AddressPhoneType { get; set; }
		
		/// <summary>
		/// CDD Name: ADDRESS.PHONE.EXTENSION
		/// </summary>
		[DataMember(Order = 26, Name = "ADDRESS.PHONE.EXTENSION")]
		public List<string> AddressPhoneExtension { get; set; }
		
		/// <summary>
		/// CDD Name: INTL.LOCALITY
		/// </summary>
		[DataMember(Order = 47, Name = "INTL.LOCALITY")]
		public string IntlLocality { get; set; }
		
		/// <summary>
		/// CDD Name: INTL.REGION
		/// </summary>
		[DataMember(Order = 48, Name = "INTL.REGION")]
		public string IntlRegion { get; set; }
		
		/// <summary>
		/// CDD Name: INTL.SUB.REGION
		/// </summary>
		[DataMember(Order = 49, Name = "INTL.SUB.REGION")]
		public string IntlSubRegion { get; set; }
		
		/// <summary>
		/// CDD Name: INTL.POSTAL.CODE
		/// </summary>
		[DataMember(Order = 50, Name = "INTL.POSTAL.CODE")]
		public string IntlPostalCode { get; set; }
		
		/// <summary>
		/// CDD Name: DELIVERY.POINT
		/// </summary>
		[DataMember(Order = 51, Name = "DELIVERY.POINT")]
		public string DeliveryPoint { get; set; }
		
		/// <summary>
		/// CDD Name: CORRECTION.DIGIT
		/// </summary>
		[DataMember(Order = 52, Name = "CORRECTION.DIGIT")]
		public string CorrectionDigit { get; set; }
		
		/// <summary>
		/// CDD Name: LATITUDE
		/// </summary>
		[DataMember(Order = 53, Name = "LATITUDE")]
		[DisplayFormat(DataFormatString = "{0:N6}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? Latitude { get; set; }
		
		/// <summary>
		/// CDD Name: LONGITUDE
		/// </summary>
		[DataMember(Order = 54, Name = "LONGITUDE")]
		[DisplayFormat(DataFormatString = "{0:N6}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? Longitude { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<AddressAdrPhones> AdrPhonesEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: ADR.PHONES
			
			AdrPhonesEntityAssociation = new List<AddressAdrPhones>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(AddressPhones != null)
			{
				int numAdrPhones = AddressPhones.Count;
				if (AddressPhoneType !=null && AddressPhoneType.Count > numAdrPhones) numAdrPhones = AddressPhoneType.Count;
				if (AddressPhoneExtension !=null && AddressPhoneExtension.Count > numAdrPhones) numAdrPhones = AddressPhoneExtension.Count;

				for (int i = 0; i < numAdrPhones; i++)
				{

					string value0 = "";
					if (AddressPhones != null && i < AddressPhones.Count)
					{
						value0 = AddressPhones[i];
					}


					string value1 = "";
					if (AddressPhoneType != null && i < AddressPhoneType.Count)
					{
						value1 = AddressPhoneType[i];
					}


					string value2 = "";
					if (AddressPhoneExtension != null && i < AddressPhoneExtension.Count)
					{
						value2 = AddressPhoneExtension[i];
					}

					AdrPhonesEntityAssociation.Add(new AddressAdrPhones( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class AddressAdrPhones
	{
		public string AddressPhonesAssocMember;	
		public string AddressPhoneTypeAssocMember;	
		public string AddressPhoneExtensionAssocMember;	
		public AddressAdrPhones() {}
		public AddressAdrPhones(
			string inAddressPhones,
			string inAddressPhoneType,
			string inAddressPhoneExtension)
		{
			AddressPhonesAssocMember = inAddressPhones;
			AddressPhoneTypeAssocMember = inAddressPhoneType;
			AddressPhoneExtensionAssocMember = inAddressPhoneExtension;
		}
	}
}
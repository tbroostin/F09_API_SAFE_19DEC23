//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:26:28 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: CC.CODES
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "CcCodes")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:26:28 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "CC.CODES", EntityType = "PHYS")]
	public class CcCodes : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: CC.DESCRIPTION
		/// </summary>
		[DataMember(Order = 0, Name = "CC.DESCRIPTION")]
		public string CcDescription { get; set; }
		
		/// <summary>
		/// CDD Name: CC.OFFICE
		/// </summary>
		[DataMember(Order = 1, Name = "CC.OFFICE")]
		public string CcOffice { get; set; }
		
		/// <summary>
		/// CDD Name: CC.FA.YEAR
		/// </summary>
		[DataMember(Order = 8, Name = "CC.FA.YEAR")]
		public string CcFaYear { get; set; }
		
		/// <summary>
		/// CDD Name: CC.EXPLANATION
		/// </summary>
		[DataMember(Order = 10, Name = "CC.EXPLANATION")]
		public string CcExplanation { get; set; }
		
		/// <summary>
		/// CDD Name: CC.URL
		/// </summary>
		[DataMember(Order = 13, Name = "CC.URL")]
		public List<string> CcUrl { get; set; }
		
		/// <summary>
		/// CDD Name: CC.TITLE
		/// </summary>
		[DataMember(Order = 14, Name = "CC.TITLE")]
		public List<string> CcTitle { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<CcCodesCcUrls> CcUrlsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: CC.URLS
			
			CcUrlsEntityAssociation = new List<CcCodesCcUrls>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(CcUrl != null)
			{
				int numCcUrls = CcUrl.Count;
				if (CcTitle !=null && CcTitle.Count > numCcUrls) numCcUrls = CcTitle.Count;

				for (int i = 0; i < numCcUrls; i++)
				{

					string value0 = "";
					if (CcUrl != null && i < CcUrl.Count)
					{
						value0 = CcUrl[i];
					}


					string value1 = "";
					if (CcTitle != null && i < CcTitle.Count)
					{
						value1 = CcTitle[i];
					}

					CcUrlsEntityAssociation.Add(new CcCodesCcUrls( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class CcCodesCcUrls
	{
		public string CcUrlAssocMember;	
		public string CcTitleAssocMember;	
		public CcCodesCcUrls() {}
		public CcCodesCcUrls(
			string inCcUrl,
			string inCcTitle)
		{
			CcUrlAssocMember = inCcUrl;
			CcTitleAssocMember = inCcTitle;
		}
	}
}
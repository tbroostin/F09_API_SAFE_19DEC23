//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 5/29/2018 2:34:45 PM by user tylerchristiansen
//
//     Type: ENTITY
//     Entity: DFLTS
//     Application: CORE
//     Environment: dvcoll_wstst01
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Dflts")]
	[ColleagueDataContract(GeneratedDateTime = "5/29/2018 2:34:45 PM", User = "tylerchristiansen")]
	[EntityDataContract(EntityName = "DFLTS", EntityType = "PERM")]
	public class Dflts : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: DFLTS.HOST.INSTITUTION.CODE
		/// </summary>
		[DataMember(Order = 28, Name = "DFLTS.HOST.INSTITUTION.CODE")]
		public string DfltsHostInstitutionCode { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.LOOKUP.TYPE
		/// </summary>
		[DataMember(Order = 111, Name = "DFLTS.LOOKUP.TYPE")]
		public string DfltsLookupType { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.SOC.ID.SUBR
		/// </summary>
		[DataMember(Order = 119, Name = "DFLTS.SOC.ID.SUBR")]
		public string DfltsSocIdSubr { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.CAMPUS.CALENDAR
		/// </summary>
		[DataMember(Order = 135, Name = "DFLTS.CAMPUS.CALENDAR")]
		public string DfltsCampusCalendar { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.PRIVACY.CODES
		/// </summary>
		[DataMember(Order = 137, Name = "DFLTS.PRIVACY.CODES")]
		public List<string> DfltsPrivacyCodes { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.PRIVACY.MSGS
		/// </summary>
		[DataMember(Order = 138, Name = "DFLTS.PRIVACY.MSGS")]
		public List<string> DfltsPrivacyMsgs { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.RECORD.DENIAL.MSG
		/// </summary>
		[DataMember(Order = 139, Name = "DFLTS.RECORD.DENIAL.MSG")]
		public string DfltsRecordDenialMsg { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.WEB.ADREL.TYPE
		/// </summary>
		[DataMember(Order = 140, Name = "DFLTS.WEB.ADREL.TYPE")]
		public string DfltsWebAdrelType { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.WEB.ADR.CHG.SOURCE
		/// </summary>
		[DataMember(Order = 141, Name = "DFLTS.WEB.ADR.CHG.SOURCE")]
		public string DfltsWebAdrChgSource { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.LDAP.CONTEXT.SUBR
		/// </summary>
		[DataMember(Order = 174, Name = "DFLTS.LDAP.CONTEXT.SUBR")]
		public string DfltsLdapContextSubr { get; set; }
		
		/// <summary>
		/// CDD Name: DFLTS.EMAIL.ALL.ALWAYS.COPY
		/// </summary>
		[DataMember(Order = 230, Name = "DFLTS.EMAIL.ALL.ALWAYS.COPY")]
		public string DfltsEmailAllAlwaysCopy { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<DfltsDfltsPrivacy> DfltsPrivacyEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: DFLTS.PRIVACY
			
			DfltsPrivacyEntityAssociation = new List<DfltsDfltsPrivacy>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(DfltsPrivacyCodes != null)
			{
				int numDfltsPrivacy = DfltsPrivacyCodes.Count;
				if (DfltsPrivacyMsgs !=null && DfltsPrivacyMsgs.Count > numDfltsPrivacy) numDfltsPrivacy = DfltsPrivacyMsgs.Count;

				for (int i = 0; i < numDfltsPrivacy; i++)
				{

					string value0 = "";
					if (DfltsPrivacyCodes != null && i < DfltsPrivacyCodes.Count)
					{
						value0 = DfltsPrivacyCodes[i];
					}


					string value1 = "";
					if (DfltsPrivacyMsgs != null && i < DfltsPrivacyMsgs.Count)
					{
						value1 = DfltsPrivacyMsgs[i];
					}

					DfltsPrivacyEntityAssociation.Add(new DfltsDfltsPrivacy( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class DfltsDfltsPrivacy
	{
		public string DfltsPrivacyCodesAssocMember;	
		public string DfltsPrivacyMsgsAssocMember;	
		public DfltsDfltsPrivacy() {}
		public DfltsDfltsPrivacy(
			string inDfltsPrivacyCodes,
			string inDfltsPrivacyMsgs)
		{
			DfltsPrivacyCodesAssocMember = inDfltsPrivacyCodes;
			DfltsPrivacyMsgsAssocMember = inDfltsPrivacyMsgs;
		}
	}
}
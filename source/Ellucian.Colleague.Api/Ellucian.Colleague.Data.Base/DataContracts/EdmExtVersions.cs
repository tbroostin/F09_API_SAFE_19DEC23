//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 6/22/2018 10:00:46 AM by user dvcoll-srm
//
//     Type: ENTITY
//     Entity: EDM.EXT.VERSIONS
//     Application: CORE
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "EdmExtVersions")]
	[ColleagueDataContract(GeneratedDateTime = "6/22/2018 10:00:46 AM", User = "dvcoll-srm")]
	[EntityDataContract(EntityName = "EDM.EXT.VERSIONS", EntityType = "PHYS")]
	public class EdmExtVersions : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: EDMV.DESCRIPTION
		/// </summary>
		[DataMember(Order = 0, Name = "EDMV.DESCRIPTION")]
		public string EdmvDescription { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.RESOURCE.NAME
		/// </summary>
		[DataMember(Order = 1, Name = "EDMV.RESOURCE.NAME")]
		public string EdmvResourceName { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.COLUMN.NAME
		/// </summary>
		[DataMember(Order = 2, Name = "EDMV.COLUMN.NAME")]
		public List<string> EdmvColumnName { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.JSON.LABEL
		/// </summary>
		[DataMember(Order = 3, Name = "EDMV.JSON.LABEL")]
		public List<string> EdmvJsonLabel { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.VERSION.NUMBER
		/// </summary>
		[DataMember(Order = 4, Name = "EDMV.VERSION.NUMBER")]
		public string EdmvVersionNumber { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.JSON.PATH
		/// </summary>
		[DataMember(Order = 6, Name = "EDMV.JSON.PATH")]
		public List<string> EdmvJsonPath { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.JSON.PROPERTY.TYPE
		/// </summary>
		[DataMember(Order = 7, Name = "EDMV.JSON.PROPERTY.TYPE")]
		public List<string> EdmvJsonPropertyType { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.EXTENDED.SCHEMA.TYPE
		/// </summary>
		[DataMember(Order = 8, Name = "EDMV.EXTENDED.SCHEMA.TYPE")]
		public string EdmvExtendedSchemaType { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.FILE.NAME
		/// </summary>
		[DataMember(Order = 9, Name = "EDMV.FILE.NAME")]
		public List<string> EdmvFileName { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.LENGTH
		/// </summary>
		[DataMember(Order = 10, Name = "EDMV.LENGTH")]
		public List<int?> EdmvLength { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.DATABASE.USAGE.TYPE
		/// </summary>
		[DataMember(Order = 11, Name = "EDMV.DATABASE.USAGE.TYPE")]
		public List<string> EdmvDatabaseUsageType { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.DATE.TIME.LINK
		/// </summary>
		[DataMember(Order = 12, Name = "EDMV.DATE.TIME.LINK")]
		public List<string> EdmvDateTimeLink { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.CONVERSION
		/// </summary>
		[DataMember(Order = 13, Name = "EDMV.CONVERSION")]
		public List<string> EdmvConversion { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.FIELD.NUMBER
		/// </summary>
		[DataMember(Order = 20, Name = "EDMV.FIELD.NUMBER")]
		public List<int?> EdmvFieldNumber { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.ASSOCIATION.CONTROLLER
		/// </summary>
		[DataMember(Order = 21, Name = "EDMV.ASSOCIATION.CONTROLLER")]
		public List<string> EdmvAssociationController { get; set; }
		
		/// <summary>
		/// CDD Name: EDMV.SECONDARY.FILE.NAME
		/// </summary>
		[DataMember(Order = 22, Name = "EDMV.SECONDARY.FILE.NAME")]
		public List<string> EdmvSecondaryFileName { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<EdmExtVersionsEdmvColumns> EdmvColumnsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: EDMV.COLUMNS
			
			EdmvColumnsEntityAssociation = new List<EdmExtVersionsEdmvColumns>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(EdmvColumnName != null)
			{
				int numEdmvColumns = EdmvColumnName.Count;
				if (EdmvJsonLabel !=null && EdmvJsonLabel.Count > numEdmvColumns) numEdmvColumns = EdmvJsonLabel.Count;
				if (EdmvJsonPath !=null && EdmvJsonPath.Count > numEdmvColumns) numEdmvColumns = EdmvJsonPath.Count;
				if (EdmvJsonPropertyType !=null && EdmvJsonPropertyType.Count > numEdmvColumns) numEdmvColumns = EdmvJsonPropertyType.Count;
				if (EdmvFileName !=null && EdmvFileName.Count > numEdmvColumns) numEdmvColumns = EdmvFileName.Count;
				if (EdmvLength !=null && EdmvLength.Count > numEdmvColumns) numEdmvColumns = EdmvLength.Count;
				if (EdmvDatabaseUsageType !=null && EdmvDatabaseUsageType.Count > numEdmvColumns) numEdmvColumns = EdmvDatabaseUsageType.Count;
				if (EdmvDateTimeLink !=null && EdmvDateTimeLink.Count > numEdmvColumns) numEdmvColumns = EdmvDateTimeLink.Count;
				if (EdmvConversion !=null && EdmvConversion.Count > numEdmvColumns) numEdmvColumns = EdmvConversion.Count;
				if (EdmvFieldNumber !=null && EdmvFieldNumber.Count > numEdmvColumns) numEdmvColumns = EdmvFieldNumber.Count;
				if (EdmvAssociationController !=null && EdmvAssociationController.Count > numEdmvColumns) numEdmvColumns = EdmvAssociationController.Count;
				if (EdmvSecondaryFileName !=null && EdmvSecondaryFileName.Count > numEdmvColumns) numEdmvColumns = EdmvSecondaryFileName.Count;

				for (int i = 0; i < numEdmvColumns; i++)
				{

					string value0 = "";
					if (EdmvColumnName != null && i < EdmvColumnName.Count)
					{
						value0 = EdmvColumnName[i];
					}


					string value1 = "";
					if (EdmvJsonLabel != null && i < EdmvJsonLabel.Count)
					{
						value1 = EdmvJsonLabel[i];
					}


					string value2 = "";
					if (EdmvJsonPath != null && i < EdmvJsonPath.Count)
					{
						value2 = EdmvJsonPath[i];
					}


					string value3 = "";
					if (EdmvJsonPropertyType != null && i < EdmvJsonPropertyType.Count)
					{
						value3 = EdmvJsonPropertyType[i];
					}


					string value4 = "";
					if (EdmvFileName != null && i < EdmvFileName.Count)
					{
						value4 = EdmvFileName[i];
					}


					int? value5 = null;
					if (EdmvLength != null && i < EdmvLength.Count)
					{
						value5 = EdmvLength[i];
					}


					string value6 = "";
					if (EdmvDatabaseUsageType != null && i < EdmvDatabaseUsageType.Count)
					{
						value6 = EdmvDatabaseUsageType[i];
					}


					string value7 = "";
					if (EdmvDateTimeLink != null && i < EdmvDateTimeLink.Count)
					{
						value7 = EdmvDateTimeLink[i];
					}


					string value8 = "";
					if (EdmvConversion != null && i < EdmvConversion.Count)
					{
						value8 = EdmvConversion[i];
					}


					int? value9 = null;
					if (EdmvFieldNumber != null && i < EdmvFieldNumber.Count)
					{
						value9 = EdmvFieldNumber[i];
					}


					string value10 = "";
					if (EdmvAssociationController != null && i < EdmvAssociationController.Count)
					{
						value10 = EdmvAssociationController[i];
					}


					string value11 = "";
					if (EdmvSecondaryFileName != null && i < EdmvSecondaryFileName.Count)
					{
						value11 = EdmvSecondaryFileName[i];
					}

					EdmvColumnsEntityAssociation.Add(new EdmExtVersionsEdmvColumns( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class EdmExtVersionsEdmvColumns
	{
		public string EdmvColumnNameAssocMember;	
		public string EdmvJsonLabelAssocMember;	
		public string EdmvJsonPathAssocMember;	
		public string EdmvJsonPropertyTypeAssocMember;	
		public string EdmvFileNameAssocMember;	
		public int? EdmvLengthAssocMember;	
		public string EdmvDatabaseUsageTypeAssocMember;	
		public string EdmvDateTimeLinkAssocMember;	
		public string EdmvConversionAssocMember;	
		public int? EdmvFieldNumberAssocMember;	
		public string EdmvAssociationControllerAssocMember;	
		public string EdmvSecondaryFileNameAssocMember;	
		public EdmExtVersionsEdmvColumns() {}
		public EdmExtVersionsEdmvColumns(
			string inEdmvColumnName,
			string inEdmvJsonLabel,
			string inEdmvJsonPath,
			string inEdmvJsonPropertyType,
			string inEdmvFileName,
			int? inEdmvLength,
			string inEdmvDatabaseUsageType,
			string inEdmvDateTimeLink,
			string inEdmvConversion,
			int? inEdmvFieldNumber,
			string inEdmvAssociationController,
			string inEdmvSecondaryFileName)
		{
			EdmvColumnNameAssocMember = inEdmvColumnName;
			EdmvJsonLabelAssocMember = inEdmvJsonLabel;
			EdmvJsonPathAssocMember = inEdmvJsonPath;
			EdmvJsonPropertyTypeAssocMember = inEdmvJsonPropertyType;
			EdmvFileNameAssocMember = inEdmvFileName;
			EdmvLengthAssocMember = inEdmvLength;
			EdmvDatabaseUsageTypeAssocMember = inEdmvDatabaseUsageType;
			EdmvDateTimeLinkAssocMember = inEdmvDateTimeLink;
			EdmvConversionAssocMember = inEdmvConversion;
			EdmvFieldNumberAssocMember = inEdmvFieldNumber;
			EdmvAssociationControllerAssocMember = inEdmvAssociationController;
			EdmvSecondaryFileNameAssocMember = inEdmvSecondaryFileName;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 6/28/2021 11:27:08 AM by user dvcoll-srm
//
//     Type: ENTITY
//     Entity: EDM.EXTENSIONS
//     Application: CORE
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "EdmExtensions")]
	[ColleagueDataContract(GeneratedDateTime = "6/28/2021 11:27:08 AM", User = "dvcoll-srm")]
	[EntityDataContract(EntityName = "EDM.EXTENSIONS", EntityType = "PHYS")]
	public class EdmExtensions : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.ENTITY
		/// </summary>
		[DataMember(Order = 0, Name = "EDME.PRIMARY.ENTITY")]
		public string EdmePrimaryEntity { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.VERSIONS
		/// </summary>
		[DataMember(Order = 2, Name = "EDME.VERSIONS")]
		public List<string> EdmeVersions { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.RESOURCE.NAME
		/// </summary>
		[DataMember(Order = 3, Name = "EDME.RESOURCE.NAME")]
		public string EdmeResourceName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.RESOURCE.ENTITIES
		/// </summary>
		[DataMember(Order = 8, Name = "EDME.RESOURCE.ENTITIES")]
		public List<string> EdmeResourceEntities { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.RESOURCE.KEYS
		/// </summary>
		[DataMember(Order = 9, Name = "EDME.RESOURCE.KEYS")]
		public List<string> EdmeResourceKeys { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDX.ELEMENT.NAME
		/// </summary>
		[DataMember(Order = 10, Name = "EDME.EDX.ELEMENT.NAME")]
		public List<string> EdmeEdxElementName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDX.FILE.NAME
		/// </summary>
		[DataMember(Order = 11, Name = "EDME.EDX.FILE.NAME")]
		public List<string> EdmeEdxFileName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDX.SUBSCRIBER
		/// </summary>
		[DataMember(Order = 12, Name = "EDME.EDX.SUBSCRIBER")]
		public List<string> EdmeEdxSubscriber { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDX.DOCUMENT.NAME
		/// </summary>
		[DataMember(Order = 13, Name = "EDME.EDX.DOCUMENT.NAME")]
		public List<string> EdmeEdxDocumentName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDX.TRIGGER.CONDITION
		/// </summary>
		[DataMember(Order = 14, Name = "EDME.EDX.TRIGGER.CONDITION")]
		public List<string> EdmeEdxTriggerCondition { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDX.GUID.SUBROUTINE
		/// </summary>
		[DataMember(Order = 15, Name = "EDME.EDX.GUID.SUBROUTINE")]
		public List<string> EdmeEdxGuidSubroutine { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.EDIT.SUBROUTINE
		/// </summary>
		[DataMember(Order = 16, Name = "EDME.EDIT.SUBROUTINE")]
		public string EdmeEditSubroutine { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.GUID.SOURCE
		/// </summary>
		[DataMember(Order = 17, Name = "EDME.PRIMARY.GUID.SOURCE")]
		public string EdmePrimaryGuidSource { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PAGE.LIMIT
		/// </summary>
		[DataMember(Order = 18, Name = "EDME.PAGE.LIMIT")]
		public int? EdmePageLimit { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.SELECT.CRITERIA
		/// </summary>
		[DataMember(Order = 19, Name = "EDME.SELECT.CRITERIA")]
		public string EdmeSelectCriteria { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.HTTP.METHODS
		/// </summary>
		[DataMember(Order = 20, Name = "EDME.HTTP.METHODS")]
		public List<string> EdmeHttpMethods { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.HTTP.PERMISSIONS
		/// </summary>
		[DataMember(Order = 21, Name = "EDME.HTTP.PERMISSIONS")]
		public List<string> EdmeHttpPermissions { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.GUID.DB.TYPE
		/// </summary>
		[DataMember(Order = 22, Name = "EDME.PRIMARY.GUID.DB.TYPE")]
		public string EdmePrimaryGuidDbType { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.GUID.FILE.NAME
		/// </summary>
		[DataMember(Order = 23, Name = "EDME.PRIMARY.GUID.FILE.NAME")]
		public string EdmePrimaryGuidFileName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.API.STATUS
		/// </summary>
		[DataMember(Order = 24, Name = "EDME.API.STATUS")]
		public string EdmeApiStatus { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.COMMENTS
		/// </summary>
		[DataMember(Order = 25, Name = "EDME.COMMENTS")]
		public string EdmeComments { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.APPLICATION
		/// </summary>
		[DataMember(Order = 26, Name = "EDME.PRIMARY.APPLICATION")]
		public string EdmePrimaryApplication { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.TABLE.NAME
		/// </summary>
		[DataMember(Order = 27, Name = "EDME.PRIMARY.TABLE.NAME")]
		public string EdmePrimaryTableName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PARENT.API
		/// </summary>
		[DataMember(Order = 28, Name = "EDME.PARENT.API")]
		public string EdmeParentApi { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.TYPE
		/// </summary>
		[DataMember(Order = 29, Name = "EDME.TYPE")]
		public string EdmeType { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PROCESS.ID
		/// </summary>
		[DataMember(Order = 30, Name = "EDME.PROCESS.ID")]
		public string EdmeProcessId { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.PRIMARY.KEY
		/// </summary>
		[DataMember(Order = 31, Name = "EDME.PRIMARY.KEY")]
		public string EdmePrimaryKey { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.SECONDARY.KEY
		/// </summary>
		[DataMember(Order = 32, Name = "EDME.SECONDARY.KEY")]
		public string EdmeSecondaryKey { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.SECONDARY.KEY.POS
		/// </summary>
		[DataMember(Order = 33, Name = "EDME.SECONDARY.KEY.POS")]
		public int? EdmeSecondaryKeyPos { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.NO.MOD
		/// </summary>
		[DataMember(Order = 34, Name = "EDME.NO.MOD")]
		public string EdmeNoMod { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.NK.ELEMENT.NAME
		/// </summary>
		[DataMember(Order = 35, Name = "EDME.NK.ELEMENT.NAME")]
		public List<string> EdmeNkElementName { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.NK.STRATEGY
		/// </summary>
		[DataMember(Order = 36, Name = "EDME.NK.STRATEGY")]
		public List<string> EdmeNkStrategy { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.NK.SUBR
		/// </summary>
		[DataMember(Order = 37, Name = "EDME.NK.SUBR")]
		public List<string> EdmeNkSubr { get; set; }
		
		/// <summary>
		/// CDD Name: EDME.NK.REC.ID
		/// </summary>
		[DataMember(Order = 38, Name = "EDME.NK.REC.ID")]
		public List<string> EdmeNkRecId { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<EdmExtensionsEdmeResources> EdmeResourcesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<EdmExtensionsEdmeEdxDelivery> EdmeEdxDeliveryEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<EdmExtensionsEdmeMethods> EdmeMethodsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<EdmExtensionsEdmeNewKeyStrategy> EdmeNewKeyStrategyEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: EDME.RESOURCES
			
			EdmeResourcesEntityAssociation = new List<EdmExtensionsEdmeResources>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(EdmeResourceEntities != null)
			{
				int numEdmeResources = EdmeResourceEntities.Count;
				if (EdmeResourceKeys !=null && EdmeResourceKeys.Count > numEdmeResources) numEdmeResources = EdmeResourceKeys.Count;

				for (int i = 0; i < numEdmeResources; i++)
				{

					string value0 = "";
					if (EdmeResourceEntities != null && i < EdmeResourceEntities.Count)
					{
						value0 = EdmeResourceEntities[i];
					}


					string value1 = "";
					if (EdmeResourceKeys != null && i < EdmeResourceKeys.Count)
					{
						value1 = EdmeResourceKeys[i];
					}

					EdmeResourcesEntityAssociation.Add(new EdmExtensionsEdmeResources( value0, value1));
				}
			}
			// EntityAssociation Name: EDME.EDX.DELIVERY
			
			EdmeEdxDeliveryEntityAssociation = new List<EdmExtensionsEdmeEdxDelivery>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(EdmeEdxElementName != null)
			{
				int numEdmeEdxDelivery = EdmeEdxElementName.Count;
				if (EdmeEdxFileName !=null && EdmeEdxFileName.Count > numEdmeEdxDelivery) numEdmeEdxDelivery = EdmeEdxFileName.Count;
				if (EdmeEdxSubscriber !=null && EdmeEdxSubscriber.Count > numEdmeEdxDelivery) numEdmeEdxDelivery = EdmeEdxSubscriber.Count;
				if (EdmeEdxDocumentName !=null && EdmeEdxDocumentName.Count > numEdmeEdxDelivery) numEdmeEdxDelivery = EdmeEdxDocumentName.Count;
				if (EdmeEdxTriggerCondition !=null && EdmeEdxTriggerCondition.Count > numEdmeEdxDelivery) numEdmeEdxDelivery = EdmeEdxTriggerCondition.Count;
				if (EdmeEdxGuidSubroutine !=null && EdmeEdxGuidSubroutine.Count > numEdmeEdxDelivery) numEdmeEdxDelivery = EdmeEdxGuidSubroutine.Count;

				for (int i = 0; i < numEdmeEdxDelivery; i++)
				{

					string value0 = "";
					if (EdmeEdxElementName != null && i < EdmeEdxElementName.Count)
					{
						value0 = EdmeEdxElementName[i];
					}


					string value1 = "";
					if (EdmeEdxFileName != null && i < EdmeEdxFileName.Count)
					{
						value1 = EdmeEdxFileName[i];
					}


					string value2 = "";
					if (EdmeEdxSubscriber != null && i < EdmeEdxSubscriber.Count)
					{
						value2 = EdmeEdxSubscriber[i];
					}


					string value3 = "";
					if (EdmeEdxDocumentName != null && i < EdmeEdxDocumentName.Count)
					{
						value3 = EdmeEdxDocumentName[i];
					}


					string value4 = "";
					if (EdmeEdxTriggerCondition != null && i < EdmeEdxTriggerCondition.Count)
					{
						value4 = EdmeEdxTriggerCondition[i];
					}


					string value5 = "";
					if (EdmeEdxGuidSubroutine != null && i < EdmeEdxGuidSubroutine.Count)
					{
						value5 = EdmeEdxGuidSubroutine[i];
					}

					EdmeEdxDeliveryEntityAssociation.Add(new EdmExtensionsEdmeEdxDelivery( value0, value1, value2, value3, value4, value5));
				}
			}
			// EntityAssociation Name: EDME.METHODS
			
			EdmeMethodsEntityAssociation = new List<EdmExtensionsEdmeMethods>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(EdmeHttpMethods != null)
			{
				int numEdmeMethods = EdmeHttpMethods.Count;
				if (EdmeHttpPermissions !=null && EdmeHttpPermissions.Count > numEdmeMethods) numEdmeMethods = EdmeHttpPermissions.Count;

				for (int i = 0; i < numEdmeMethods; i++)
				{

					string value0 = "";
					if (EdmeHttpMethods != null && i < EdmeHttpMethods.Count)
					{
						value0 = EdmeHttpMethods[i];
					}


					string value1 = "";
					if (EdmeHttpPermissions != null && i < EdmeHttpPermissions.Count)
					{
						value1 = EdmeHttpPermissions[i];
					}

					EdmeMethodsEntityAssociation.Add(new EdmExtensionsEdmeMethods( value0, value1));
				}
			}
			// EntityAssociation Name: EDME.NEW.KEY.STRATEGY
			
			EdmeNewKeyStrategyEntityAssociation = new List<EdmExtensionsEdmeNewKeyStrategy>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(EdmeNkElementName != null)
			{
				int numEdmeNewKeyStrategy = EdmeNkElementName.Count;
				if (EdmeNkStrategy !=null && EdmeNkStrategy.Count > numEdmeNewKeyStrategy) numEdmeNewKeyStrategy = EdmeNkStrategy.Count;
				if (EdmeNkSubr !=null && EdmeNkSubr.Count > numEdmeNewKeyStrategy) numEdmeNewKeyStrategy = EdmeNkSubr.Count;
				if (EdmeNkRecId !=null && EdmeNkRecId.Count > numEdmeNewKeyStrategy) numEdmeNewKeyStrategy = EdmeNkRecId.Count;

				for (int i = 0; i < numEdmeNewKeyStrategy; i++)
				{

					string value0 = "";
					if (EdmeNkElementName != null && i < EdmeNkElementName.Count)
					{
						value0 = EdmeNkElementName[i];
					}


					string value1 = "";
					if (EdmeNkStrategy != null && i < EdmeNkStrategy.Count)
					{
						value1 = EdmeNkStrategy[i];
					}


					string value2 = "";
					if (EdmeNkSubr != null && i < EdmeNkSubr.Count)
					{
						value2 = EdmeNkSubr[i];
					}


					string value3 = "";
					if (EdmeNkRecId != null && i < EdmeNkRecId.Count)
					{
						value3 = EdmeNkRecId[i];
					}

					EdmeNewKeyStrategyEntityAssociation.Add(new EdmExtensionsEdmeNewKeyStrategy( value0, value1, value2, value3));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class EdmExtensionsEdmeResources
	{
		public string EdmeResourceEntitiesAssocMember;	
		public string EdmeResourceKeysAssocMember;	
		public EdmExtensionsEdmeResources() {}
		public EdmExtensionsEdmeResources(
			string inEdmeResourceEntities,
			string inEdmeResourceKeys)
		{
			EdmeResourceEntitiesAssocMember = inEdmeResourceEntities;
			EdmeResourceKeysAssocMember = inEdmeResourceKeys;
		}
	}
	
	[Serializable]
	public class EdmExtensionsEdmeEdxDelivery
	{
		public string EdmeEdxElementNameAssocMember;	
		public string EdmeEdxFileNameAssocMember;	
		public string EdmeEdxSubscriberAssocMember;	
		public string EdmeEdxDocumentNameAssocMember;	
		public string EdmeEdxTriggerConditionAssocMember;	
		public string EdmeEdxGuidSubroutineAssocMember;	
		public EdmExtensionsEdmeEdxDelivery() {}
		public EdmExtensionsEdmeEdxDelivery(
			string inEdmeEdxElementName,
			string inEdmeEdxFileName,
			string inEdmeEdxSubscriber,
			string inEdmeEdxDocumentName,
			string inEdmeEdxTriggerCondition,
			string inEdmeEdxGuidSubroutine)
		{
			EdmeEdxElementNameAssocMember = inEdmeEdxElementName;
			EdmeEdxFileNameAssocMember = inEdmeEdxFileName;
			EdmeEdxSubscriberAssocMember = inEdmeEdxSubscriber;
			EdmeEdxDocumentNameAssocMember = inEdmeEdxDocumentName;
			EdmeEdxTriggerConditionAssocMember = inEdmeEdxTriggerCondition;
			EdmeEdxGuidSubroutineAssocMember = inEdmeEdxGuidSubroutine;
		}
	}
	
	[Serializable]
	public class EdmExtensionsEdmeMethods
	{
		public string EdmeHttpMethodsAssocMember;	
		public string EdmeHttpPermissionsAssocMember;	
		public EdmExtensionsEdmeMethods() {}
		public EdmExtensionsEdmeMethods(
			string inEdmeHttpMethods,
			string inEdmeHttpPermissions)
		{
			EdmeHttpMethodsAssocMember = inEdmeHttpMethods;
			EdmeHttpPermissionsAssocMember = inEdmeHttpPermissions;
		}
	}
	
	[Serializable]
	public class EdmExtensionsEdmeNewKeyStrategy
	{
		public string EdmeNkElementNameAssocMember;	
		public string EdmeNkStrategyAssocMember;	
		public string EdmeNkSubrAssocMember;	
		public string EdmeNkRecIdAssocMember;	
		public EdmExtensionsEdmeNewKeyStrategy() {}
		public EdmExtensionsEdmeNewKeyStrategy(
			string inEdmeNkElementName,
			string inEdmeNkStrategy,
			string inEdmeNkSubr,
			string inEdmeNkRecId)
		{
			EdmeNkElementNameAssocMember = inEdmeNkElementName;
			EdmeNkStrategyAssocMember = inEdmeNkStrategy;
			EdmeNkSubrAssocMember = inEdmeNkSubr;
			EdmeNkRecIdAssocMember = inEdmeNkRecId;
		}
	}
}
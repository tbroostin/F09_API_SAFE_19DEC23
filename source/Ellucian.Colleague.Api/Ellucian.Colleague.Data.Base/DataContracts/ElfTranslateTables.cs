//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:32:16 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: ELF.TRANSLATE.TABLES
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "ElfTranslateTables")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:32:16 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "ELF.TRANSLATE.TABLES", EntityType = "PHYS")]
	public class ElfTranslateTables : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: ELFT.DESC
		/// </summary>
		[DataMember(Order = 0, Name = "ELFT.DESC")]
		public string ElftDesc { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.ORIG.CODES
		/// </summary>
		[DataMember(Order = 1, Name = "ELFT.ORIG.CODES")]
		public List<string> ElftOrigCodes { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.NEW.CODES
		/// </summary>
		[DataMember(Order = 2, Name = "ELFT.NEW.CODES")]
		public List<string> ElftNewCodes { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.ACTION.CODES.1
		/// </summary>
		[DataMember(Order = 3, Name = "ELFT.ACTION.CODES.1")]
		public List<string> ElftActionCodes1 { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.ACTION.CODES.2
		/// </summary>
		[DataMember(Order = 4, Name = "ELFT.ACTION.CODES.2")]
		public List<string> ElftActionCodes2 { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.ACTION.CODES.3
		/// </summary>
		[DataMember(Order = 5, Name = "ELFT.ACTION.CODES.3")]
		public List<string> ElftActionCodes3 { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.ACTION.CODES.4
		/// </summary>
		[DataMember(Order = 6, Name = "ELFT.ACTION.CODES.4")]
		public List<string> ElftActionCodes4 { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.ORIG.CODE.FIELD
		/// </summary>
		[DataMember(Order = 7, Name = "ELFT.ORIG.CODE.FIELD")]
		public string ElftOrigCodeField { get; set; }
		
		/// <summary>
		/// CDD Name: ELFT.NEW.CODE.FIELD
		/// </summary>
		[DataMember(Order = 8, Name = "ELFT.NEW.CODE.FIELD")]
		public string ElftNewCodeField { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<ElfTranslateTablesElftbl> ElftblEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: ELFTBL
			
			ElftblEntityAssociation = new List<ElfTranslateTablesElftbl>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(ElftOrigCodes != null)
			{
				int numElftbl = ElftOrigCodes.Count;
				if (ElftNewCodes !=null && ElftNewCodes.Count > numElftbl) numElftbl = ElftNewCodes.Count;
				if (ElftActionCodes1 !=null && ElftActionCodes1.Count > numElftbl) numElftbl = ElftActionCodes1.Count;
				if (ElftActionCodes2 !=null && ElftActionCodes2.Count > numElftbl) numElftbl = ElftActionCodes2.Count;
				if (ElftActionCodes3 !=null && ElftActionCodes3.Count > numElftbl) numElftbl = ElftActionCodes3.Count;
				if (ElftActionCodes4 !=null && ElftActionCodes4.Count > numElftbl) numElftbl = ElftActionCodes4.Count;

				for (int i = 0; i < numElftbl; i++)
				{

					string value0 = "";
					if (ElftOrigCodes != null && i < ElftOrigCodes.Count)
					{
						value0 = ElftOrigCodes[i];
					}


					string value1 = "";
					if (ElftNewCodes != null && i < ElftNewCodes.Count)
					{
						value1 = ElftNewCodes[i];
					}


					string value2 = "";
					if (ElftActionCodes1 != null && i < ElftActionCodes1.Count)
					{
						value2 = ElftActionCodes1[i];
					}


					string value3 = "";
					if (ElftActionCodes2 != null && i < ElftActionCodes2.Count)
					{
						value3 = ElftActionCodes2[i];
					}


					string value4 = "";
					if (ElftActionCodes3 != null && i < ElftActionCodes3.Count)
					{
						value4 = ElftActionCodes3[i];
					}


					string value5 = "";
					if (ElftActionCodes4 != null && i < ElftActionCodes4.Count)
					{
						value5 = ElftActionCodes4[i];
					}

					ElftblEntityAssociation.Add(new ElfTranslateTablesElftbl( value0, value1, value2, value3, value4, value5));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class ElfTranslateTablesElftbl
	{
		public string ElftOrigCodesAssocMember;	
		public string ElftNewCodesAssocMember;	
		public string ElftActionCodes1AssocMember;	
		public string ElftActionCodes2AssocMember;	
		public string ElftActionCodes3AssocMember;	
		public string ElftActionCodes4AssocMember;	
		public ElfTranslateTablesElftbl() {}
		public ElfTranslateTablesElftbl(
			string inElftOrigCodes,
			string inElftNewCodes,
			string inElftActionCodes1,
			string inElftActionCodes2,
			string inElftActionCodes3,
			string inElftActionCodes4)
		{
			ElftOrigCodesAssocMember = inElftOrigCodes;
			ElftNewCodesAssocMember = inElftNewCodes;
			ElftActionCodes1AssocMember = inElftActionCodes1;
			ElftActionCodes2AssocMember = inElftActionCodes2;
			ElftActionCodes3AssocMember = inElftActionCodes3;
			ElftActionCodes4AssocMember = inElftActionCodes4;
		}
	}
}
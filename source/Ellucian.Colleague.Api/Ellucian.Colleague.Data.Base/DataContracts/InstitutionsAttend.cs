//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/10/2017 7:47:16 AM by user bsf1
//
//     Type: ENTITY
//     Entity: INSTITUTIONS.ATTEND
//     Application: CORE
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "InstitutionsAttend")]
	[ColleagueDataContract(GeneratedDateTime = "10/10/2017 7:47:16 AM", User = "bsf1")]
	[EntityDataContract(EntityName = "INSTITUTIONS.ATTEND", EntityType = "PHYS")]
	public class InstitutionsAttend : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: INSTA.START.DATES
		/// </summary>
		[DataMember(Order = 0, Name = "INSTA.START.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> InstaStartDates { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.END.DATES
		/// </summary>
		[DataMember(Order = 1, Name = "INSTA.END.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> InstaEndDates { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.YEAR.ATTEND.START
		/// </summary>
		[DataMember(Order = 2, Name = "INSTA.YEAR.ATTEND.START")]
		public List<int?> InstaYearAttendStart { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.YEAR.ATTEND.END
		/// </summary>
		[DataMember(Order = 3, Name = "INSTA.YEAR.ATTEND.END")]
		public List<string> InstaYearAttendEnd { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.TRANSCRIPT.TYPE
		/// </summary>
		[DataMember(Order = 4, Name = "INSTA.TRANSCRIPT.TYPE")]
		public List<string> InstaTranscriptType { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.TRANSCRIPT.DATE
		/// </summary>
		[DataMember(Order = 5, Name = "INSTA.TRANSCRIPT.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> InstaTranscriptDate { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.TRANSCRIPT.STATUS
		/// </summary>
		[DataMember(Order = 6, Name = "INSTA.TRANSCRIPT.STATUS")]
		public List<string> InstaTranscriptStatus { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.GRAD.TYPE
		/// </summary>
		[DataMember(Order = 7, Name = "INSTA.GRAD.TYPE")]
		public string InstaGradType { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.EXT.CREDITS
		/// </summary>
		[DataMember(Order = 8, Name = "INSTA.EXT.CREDITS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? InstaExtCredits { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.EXT.GPA
		/// </summary>
		[DataMember(Order = 9, Name = "INSTA.EXT.GPA")]
		[DisplayFormat(DataFormatString = "{0:N3}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? InstaExtGpa { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.RANK.PERCENT
		/// </summary>
		[DataMember(Order = 10, Name = "INSTA.RANK.PERCENT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? InstaRankPercent { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.RANK.NUMERATOR
		/// </summary>
		[DataMember(Order = 11, Name = "INSTA.RANK.NUMERATOR")]
		public int? InstaRankNumerator { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.RANK.DENOMINATOR
		/// </summary>
		[DataMember(Order = 12, Name = "INSTA.RANK.DENOMINATOR")]
		public int? InstaRankDenominator { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.COMMENTS
		/// </summary>
		[DataMember(Order = 14, Name = "INSTA.COMMENTS")]
		public string InstaComments { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.ACAD.CREDENTIALS
		/// </summary>
		[DataMember(Order = 15, Name = "INSTA.ACAD.CREDENTIALS")]
		public List<string> InstaAcadCredentials { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.CREDENTIALS.END.DATE
		/// </summary>
		[DataMember(Order = 30, Name = "INSTA.CREDENTIALS.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? InstaCredentialsEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: INSTA.INTG.HS.GRAD.DATE
		/// </summary>
		[DataMember(Order = 31, Name = "INSTA.INTG.HS.GRAD.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? InstaIntgHsGradDate { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<InstitutionsAttendDatesAttended> DatesAttendedEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<InstitutionsAttendYearsAttended> YearsAttendedEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<InstitutionsAttendTranscript> TranscriptEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: DATES.ATTENDED
			
			DatesAttendedEntityAssociation = new List<InstitutionsAttendDatesAttended>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(InstaStartDates != null)
			{
				int numDatesAttended = InstaStartDates.Count;
				if (InstaEndDates !=null && InstaEndDates.Count > numDatesAttended) numDatesAttended = InstaEndDates.Count;

				for (int i = 0; i < numDatesAttended; i++)
				{

					DateTime? value0 = null;
					if (InstaStartDates != null && i < InstaStartDates.Count)
					{
						value0 = InstaStartDates[i];
					}


					DateTime? value1 = null;
					if (InstaEndDates != null && i < InstaEndDates.Count)
					{
						value1 = InstaEndDates[i];
					}

					DatesAttendedEntityAssociation.Add(new InstitutionsAttendDatesAttended( value0, value1));
				}
			}
			// EntityAssociation Name: YEARS.ATTENDED
			
			YearsAttendedEntityAssociation = new List<InstitutionsAttendYearsAttended>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(InstaYearAttendStart != null)
			{
				int numYearsAttended = InstaYearAttendStart.Count;
				if (InstaYearAttendEnd !=null && InstaYearAttendEnd.Count > numYearsAttended) numYearsAttended = InstaYearAttendEnd.Count;

				for (int i = 0; i < numYearsAttended; i++)
				{

					int? value0 = null;
					if (InstaYearAttendStart != null && i < InstaYearAttendStart.Count)
					{
						value0 = InstaYearAttendStart[i];
					}


					string value1 = "";
					if (InstaYearAttendEnd != null && i < InstaYearAttendEnd.Count)
					{
						value1 = InstaYearAttendEnd[i];
					}

					YearsAttendedEntityAssociation.Add(new InstitutionsAttendYearsAttended( value0, value1));
				}
			}
			// EntityAssociation Name: TRANSCRIPT
			
			TranscriptEntityAssociation = new List<InstitutionsAttendTranscript>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(InstaTranscriptType != null)
			{
				int numTranscript = InstaTranscriptType.Count;
				if (InstaTranscriptDate !=null && InstaTranscriptDate.Count > numTranscript) numTranscript = InstaTranscriptDate.Count;
				if (InstaTranscriptStatus !=null && InstaTranscriptStatus.Count > numTranscript) numTranscript = InstaTranscriptStatus.Count;

				for (int i = 0; i < numTranscript; i++)
				{

					string value0 = "";
					if (InstaTranscriptType != null && i < InstaTranscriptType.Count)
					{
						value0 = InstaTranscriptType[i];
					}


					DateTime? value1 = null;
					if (InstaTranscriptDate != null && i < InstaTranscriptDate.Count)
					{
						value1 = InstaTranscriptDate[i];
					}


					string value2 = "";
					if (InstaTranscriptStatus != null && i < InstaTranscriptStatus.Count)
					{
						value2 = InstaTranscriptStatus[i];
					}

					TranscriptEntityAssociation.Add(new InstitutionsAttendTranscript( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class InstitutionsAttendDatesAttended
	{
		public DateTime? InstaStartDatesAssocMember;	
		public DateTime? InstaEndDatesAssocMember;	
		public InstitutionsAttendDatesAttended() {}
		public InstitutionsAttendDatesAttended(
			DateTime? inInstaStartDates,
			DateTime? inInstaEndDates)
		{
			InstaStartDatesAssocMember = inInstaStartDates;
			InstaEndDatesAssocMember = inInstaEndDates;
		}
	}
	
	[Serializable]
	public class InstitutionsAttendYearsAttended
	{
		public int? InstaYearAttendStartAssocMember;	
		public string InstaYearAttendEndAssocMember;	
		public InstitutionsAttendYearsAttended() {}
		public InstitutionsAttendYearsAttended(
			int? inInstaYearAttendStart,
			string inInstaYearAttendEnd)
		{
			InstaYearAttendStartAssocMember = inInstaYearAttendStart;
			InstaYearAttendEndAssocMember = inInstaYearAttendEnd;
		}
	}
	
	[Serializable]
	public class InstitutionsAttendTranscript
	{
		public string InstaTranscriptTypeAssocMember;	
		public DateTime? InstaTranscriptDateAssocMember;	
		public string InstaTranscriptStatusAssocMember;	
		public InstitutionsAttendTranscript() {}
		public InstitutionsAttendTranscript(
			string inInstaTranscriptType,
			DateTime? inInstaTranscriptDate,
			string inInstaTranscriptStatus)
		{
			InstaTranscriptTypeAssocMember = inInstaTranscriptType;
			InstaTranscriptDateAssocMember = inInstaTranscriptDate;
			InstaTranscriptStatusAssocMember = inInstaTranscriptStatus;
		}
	}
}
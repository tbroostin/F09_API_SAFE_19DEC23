//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 1/13/2020 1:32:56 PM by user dvcoll-srm
//
//     Type: ENTITY
//     Entity: INTG.COLLECT.SETTINGS
//     Application: CORE
//     Environment: dvcoll_wstst01
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "IntgCollectSettings")]
	[ColleagueDataContract(GeneratedDateTime = "1/13/2020 1:32:56 PM", User = "dvcoll-srm")]
	[EntityDataContract(EntityName = "INTG.COLLECT.SETTINGS", EntityType = "PHYS")]
	public class IntgCollectSettings : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: ICL.ETHOS.RESOURCES
		/// </summary>
		[DataMember(Order = 0, Name = "ICL.ETHOS.RESOURCES")]
		public List<string> IclEthosResources { get; set; }
		
		/// <summary>
		/// CDD Name: ICL.ETHOS.PROPERTY.NAMES
		/// </summary>
		[DataMember(Order = 1, Name = "ICL.ETHOS.PROPERTY.NAMES")]
		public List<string> IclEthosPropertyNames { get; set; }
		
		/// <summary>
		/// CDD Name: ICL.COLL.LDM.FIELD.NAME
		/// </summary>
		[DataMember(Order = 2, Name = "ICL.COLL.LDM.FIELD.NAME")]
		public string IclCollLdmFieldName { get; set; }
		
		/// <summary>
		/// CDD Name: ICL.COLL.ENTITY
		/// </summary>
		[DataMember(Order = 3, Name = "ICL.COLL.ENTITY")]
		public string IclCollEntity { get; set; }
		
		/// <summary>
		/// CDD Name: ICL.COLL.VALCODE.ID
		/// </summary>
		[DataMember(Order = 4, Name = "ICL.COLL.VALCODE.ID")]
		public string IclCollValcodeId { get; set; }
		
		/// <summary>
		/// CDD Name: ICL.COLL.DEFAULT.TITLE
		/// </summary>
		[DataMember(Order = 5, Name = "ICL.COLL.DEFAULT.TITLE")]
		public string IclCollDefaultTitle { get; set; }
		
		/// <summary>
		/// CDD Name: ICL.COLL.DEFAULT.DESC
		/// </summary>
		[DataMember(Order = 6, Name = "ICL.COLL.DEFAULT.DESC")]
		public string IclCollDefaultDesc { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<IntgCollectSettingsCollectResources> CollectResourcesEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: COLLECT.RESOURCES
			
			CollectResourcesEntityAssociation = new List<IntgCollectSettingsCollectResources>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(IclEthosResources != null)
			{
				int numCollectResources = IclEthosResources.Count;
				if (IclEthosPropertyNames !=null && IclEthosPropertyNames.Count > numCollectResources) numCollectResources = IclEthosPropertyNames.Count;

				for (int i = 0; i < numCollectResources; i++)
				{

					string value0 = "";
					if (IclEthosResources != null && i < IclEthosResources.Count)
					{
						value0 = IclEthosResources[i];
					}


					string value1 = "";
					if (IclEthosPropertyNames != null && i < IclEthosPropertyNames.Count)
					{
						value1 = IclEthosPropertyNames[i];
					}

					CollectResourcesEntityAssociation.Add(new IntgCollectSettingsCollectResources( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class IntgCollectSettingsCollectResources
	{
		public string IclEthosResourcesAssocMember;	
		public string IclEthosPropertyNamesAssocMember;	
		public IntgCollectSettingsCollectResources() {}
		public IntgCollectSettingsCollectResources(
			string inIclEthosResources,
			string inIclEthosPropertyNames)
		{
			IclEthosResourcesAssocMember = inIclEthosResources;
			IclEthosPropertyNamesAssocMember = inIclEthosPropertyNames;
		}
	}
}
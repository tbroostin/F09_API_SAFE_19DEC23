//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:35:35 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: MAILING
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Mailing")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:35:35 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "MAILING", EntityType = "PHYS")]
	public class Mailing : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECEIVED
		/// </summary>
		[DataMember(Order = 5, Name = "MAILING.CORR.RECEIVED")]
		public List<string> MailingCorrReceived { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECEIVED.DATE
		/// </summary>
		[DataMember(Order = 6, Name = "MAILING.CORR.RECEIVED.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> MailingCorrReceivedDate { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECVD.STATUS
		/// </summary>
		[DataMember(Order = 23, Name = "MAILING.CORR.RECVD.STATUS")]
		public List<string> MailingCorrRecvdStatus { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECVD.INSTANCE
		/// </summary>
		[DataMember(Order = 24, Name = "MAILING.CORR.RECVD.INSTANCE")]
		public List<string> MailingCorrRecvdInstance { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECVD.COMMENT
		/// </summary>
		[DataMember(Order = 25, Name = "MAILING.CORR.RECVD.COMMENT")]
		public List<string> MailingCorrRecvdComment { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CURRENT.CRC.CODE
		/// </summary>
		[DataMember(Order = 26, Name = "MAILING.CURRENT.CRC.CODE")]
		public List<string> MailingCurrentCrcCode { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECVD.ASGN.DT
		/// </summary>
		[DataMember(Order = 30, Name = "MAILING.CORR.RECVD.ASGN.DT")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> MailingCorrRecvdAsgnDt { get; set; }
		
		/// <summary>
		/// CDD Name: MAILING.CORR.RECVD.ACT.DT
		/// </summary>
		[DataMember(Order = 31, Name = "MAILING.CORR.RECVD.ACT.DT")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> MailingCorrRecvdActDt { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<MailingChCorr> ChCorrEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: CH.CORR
			
			ChCorrEntityAssociation = new List<MailingChCorr>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(MailingCorrReceived != null)
			{
				int numChCorr = MailingCorrReceived.Count;
				if (MailingCorrReceivedDate !=null && MailingCorrReceivedDate.Count > numChCorr) numChCorr = MailingCorrReceivedDate.Count;
				if (MailingCorrRecvdStatus !=null && MailingCorrRecvdStatus.Count > numChCorr) numChCorr = MailingCorrRecvdStatus.Count;
				if (MailingCorrRecvdInstance !=null && MailingCorrRecvdInstance.Count > numChCorr) numChCorr = MailingCorrRecvdInstance.Count;
				if (MailingCorrRecvdComment !=null && MailingCorrRecvdComment.Count > numChCorr) numChCorr = MailingCorrRecvdComment.Count;
				if (MailingCorrRecvdAsgnDt !=null && MailingCorrRecvdAsgnDt.Count > numChCorr) numChCorr = MailingCorrRecvdAsgnDt.Count;
				if (MailingCorrRecvdActDt !=null && MailingCorrRecvdActDt.Count > numChCorr) numChCorr = MailingCorrRecvdActDt.Count;

				for (int i = 0; i < numChCorr; i++)
				{

					string value0 = "";
					if (MailingCorrReceived != null && i < MailingCorrReceived.Count)
					{
						value0 = MailingCorrReceived[i];
					}


					DateTime? value1 = null;
					if (MailingCorrReceivedDate != null && i < MailingCorrReceivedDate.Count)
					{
						value1 = MailingCorrReceivedDate[i];
					}


					string value2 = "";
					if (MailingCorrRecvdStatus != null && i < MailingCorrRecvdStatus.Count)
					{
						value2 = MailingCorrRecvdStatus[i];
					}


					string value3 = "";
					if (MailingCorrRecvdInstance != null && i < MailingCorrRecvdInstance.Count)
					{
						value3 = MailingCorrRecvdInstance[i];
					}


					string value4 = "";
					if (MailingCorrRecvdComment != null && i < MailingCorrRecvdComment.Count)
					{
						value4 = MailingCorrRecvdComment[i];
					}


					DateTime? value5 = null;
					if (MailingCorrRecvdAsgnDt != null && i < MailingCorrRecvdAsgnDt.Count)
					{
						value5 = MailingCorrRecvdAsgnDt[i];
					}


					DateTime? value6 = null;
					if (MailingCorrRecvdActDt != null && i < MailingCorrRecvdActDt.Count)
					{
						value6 = MailingCorrRecvdActDt[i];
					}

					ChCorrEntityAssociation.Add(new MailingChCorr( value0, value1, value2, value3, value4, value5, value6));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class MailingChCorr
	{
		public string MailingCorrReceivedAssocMember;	
		public DateTime? MailingCorrReceivedDateAssocMember;	
		public string MailingCorrRecvdStatusAssocMember;	
		public string MailingCorrRecvdInstanceAssocMember;	
		public string MailingCorrRecvdCommentAssocMember;	
		public DateTime? MailingCorrRecvdAsgnDtAssocMember;	
		public DateTime? MailingCorrRecvdActDtAssocMember;	
		public MailingChCorr() {}
		public MailingChCorr(
			string inMailingCorrReceived,
			DateTime? inMailingCorrReceivedDate,
			string inMailingCorrRecvdStatus,
			string inMailingCorrRecvdInstance,
			string inMailingCorrRecvdComment,
			DateTime? inMailingCorrRecvdAsgnDt,
			DateTime? inMailingCorrRecvdActDt)
		{
			MailingCorrReceivedAssocMember = inMailingCorrReceived;
			MailingCorrReceivedDateAssocMember = inMailingCorrReceivedDate;
			MailingCorrRecvdStatusAssocMember = inMailingCorrRecvdStatus;
			MailingCorrRecvdInstanceAssocMember = inMailingCorrRecvdInstance;
			MailingCorrRecvdCommentAssocMember = inMailingCorrRecvdComment;
			MailingCorrRecvdAsgnDtAssocMember = inMailingCorrRecvdAsgnDt;
			MailingCorrRecvdActDtAssocMember = inMailingCorrRecvdActDt;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 4/16/2019 3:10:29 PM by user balvano3
//
//     Type: ENTITY
//     Entity: PERSON
//     Application: CORE
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Person")]
	[ColleagueDataContract(GeneratedDateTime = "4/16/2019 3:10:29 PM", User = "balvano3")]
	[EntityDataContract(EntityName = "PERSON", EntityType = "PHYS")]
	public class Person : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: LAST.NAME
		/// </summary>
		[DataMember(Order = 0, Name = "LAST.NAME")]
		public string LastName { get; set; }
		
		/// <summary>
		/// CDD Name: FIRST.NAME
		/// </summary>
		[DataMember(Order = 2, Name = "FIRST.NAME")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// CDD Name: MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 3, Name = "MIDDLE.NAME")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PREFIX
		/// </summary>
		[DataMember(Order = 4, Name = "PREFIX")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// CDD Name: PREFERRED.ADDRESS
		/// </summary>
		[DataMember(Order = 5, Name = "PREFERRED.ADDRESS")]
		public string PreferredAddress { get; set; }
		
		/// <summary>
		/// CDD Name: SSN
		/// </summary>
		[DataMember(Order = 7, Name = "SSN")]
		public string Ssn { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.STATUS
		/// </summary>
		[DataMember(Order = 9, Name = "PERSON.STATUS")]
		public string PersonStatus { get; set; }
		
		/// <summary>
		/// CDD Name: CURRENT.EMPLOYER
		/// </summary>
		[DataMember(Order = 10, Name = "CURRENT.EMPLOYER")]
		public List<string> CurrentEmployer { get; set; }
		
		/// <summary>
		/// CDD Name: GENDER
		/// </summary>
		[DataMember(Order = 11, Name = "GENDER")]
		public string Gender { get; set; }
		
		/// <summary>
		/// CDD Name: MARITAL.STATUS
		/// </summary>
		[DataMember(Order = 12, Name = "MARITAL.STATUS")]
		public string MaritalStatus { get; set; }
		
		/// <summary>
		/// CDD Name: BIRTH.DATE
		/// </summary>
		[DataMember(Order = 13, Name = "BIRTH.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? BirthDate { get; set; }
		
		/// <summary>
		/// CDD Name: PREFERRED.NAME
		/// </summary>
		[DataMember(Order = 14, Name = "PREFERRED.NAME")]
		public string PreferredName { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.ADDRESSES
		/// </summary>
		[DataMember(Order = 16, Name = "PERSON.ADDRESSES")]
		public List<string> PersonAddresses { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.MAIL.LABEL
		/// </summary>
		[DataMember(Order = 17, Name = "PERSON.MAIL.LABEL")]
		public List<string> PersonMailLabel { get; set; }
		
		/// <summary>
		/// CDD Name: NICKNAME
		/// </summary>
		[DataMember(Order = 21, Name = "NICKNAME")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.CHANGE.DATE
		/// </summary>
		[DataMember(Order = 24, Name = "PERSON.CHANGE.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? PersonChangeDate { get; set; }
		
		/// <summary>
		/// CDD Name: SUFFIX
		/// </summary>
		[DataMember(Order = 28, Name = "SUFFIX")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// CDD Name: WHERE.USED
		/// </summary>
		[DataMember(Order = 30, Name = "WHERE.USED")]
		public List<string> WhereUsed { get; set; }
		
		/// <summary>
		/// CDD Name: INTERESTS
		/// </summary>
		[DataMember(Order = 32, Name = "INTERESTS")]
		public List<string> Interests { get; set; }
		
		/// <summary>
		/// CDD Name: DECEASED.DATE
		/// </summary>
		[DataMember(Order = 39, Name = "DECEASED.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? DeceasedDate { get; set; }
		
		/// <summary>
		/// CDD Name: BIRTH.NAME.LAST
		/// </summary>
		[DataMember(Order = 40, Name = "BIRTH.NAME.LAST")]
		public string BirthNameLast { get; set; }
		
		/// <summary>
		/// CDD Name: BIRTH.NAME.FIRST
		/// </summary>
		[DataMember(Order = 41, Name = "BIRTH.NAME.FIRST")]
		public string BirthNameFirst { get; set; }
		
		/// <summary>
		/// CDD Name: BIRTH.NAME.MIDDLE
		/// </summary>
		[DataMember(Order = 42, Name = "BIRTH.NAME.MIDDLE")]
		public string BirthNameMiddle { get; set; }
		
		/// <summary>
		/// CDD Name: NAME.HISTORY.LAST.NAME
		/// </summary>
		[DataMember(Order = 43, Name = "NAME.HISTORY.LAST.NAME")]
		public List<string> NameHistoryLastName { get; set; }
		
		/// <summary>
		/// CDD Name: NAME.HISTORY.FIRST.NAME
		/// </summary>
		[DataMember(Order = 44, Name = "NAME.HISTORY.FIRST.NAME")]
		public List<string> NameHistoryFirstName { get; set; }
		
		/// <summary>
		/// CDD Name: NAME.HISTORY.MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 45, Name = "NAME.HISTORY.MIDDLE.NAME")]
		public List<string> NameHistoryMiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PREFERRED.RESIDENCE
		/// </summary>
		[DataMember(Order = 46, Name = "PREFERRED.RESIDENCE")]
		public string PreferredResidence { get; set; }
		
		/// <summary>
		/// CDD Name: PARENTS
		/// </summary>
		[DataMember(Order = 47, Name = "PARENTS")]
		public List<string> Parents { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDRESSES
		/// </summary>
		[DataMember(Order = 53, Name = "FORMER.ADDRESSES")]
		public List<string> FormerAddresses { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.FORMATTED.NAMES
		/// </summary>
		[DataMember(Order = 58, Name = "PERSON.FORMATTED.NAMES")]
		public List<string> PersonFormattedNames { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.FORMATTED.NAME.TYPES
		/// </summary>
		[DataMember(Order = 59, Name = "PERSON.FORMATTED.NAME.TYPES")]
		public List<string> PersonFormattedNameTypes { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.COUNTRY.ENTRY.DATE
		/// </summary>
		[DataMember(Order = 62, Name = "PERSON.COUNTRY.ENTRY.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? PersonCountryEntryDate { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.CORP.INDICATOR
		/// </summary>
		[DataMember(Order = 65, Name = "PERSON.CORP.INDICATOR")]
		public string PersonCorpIndicator { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.EMAIL.TYPES
		/// </summary>
		[DataMember(Order = 66, Name = "PERSON.EMAIL.TYPES")]
		public List<string> PersonEmailTypes { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.EMAIL.ADDRESSES
		/// </summary>
		[DataMember(Order = 67, Name = "PERSON.EMAIL.ADDRESSES")]
		public List<string> PersonEmailAddresses { get; set; }
		
		/// <summary>
		/// CDD Name: RESIDENCE.COUNTRY
		/// </summary>
		[DataMember(Order = 68, Name = "RESIDENCE.COUNTRY")]
		public string ResidenceCountry { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.ALT.IDS
		/// </summary>
		[DataMember(Order = 70, Name = "PERSON.ALT.IDS")]
		public List<string> PersonAltIds { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.ALT.ID.TYPES
		/// </summary>
		[DataMember(Order = 71, Name = "PERSON.ALT.ID.TYPES")]
		public List<string> PersonAltIdTypes { get; set; }
		
		/// <summary>
		/// CDD Name: DENOMINATION
		/// </summary>
		[DataMember(Order = 119, Name = "DENOMINATION")]
		public string Denomination { get; set; }
		
		/// <summary>
		/// CDD Name: VISA.ISSUED.DATE
		/// </summary>
		[DataMember(Order = 126, Name = "VISA.ISSUED.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? VisaIssuedDate { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.SEASONAL.START
		/// </summary>
		[DataMember(Order = 132, Name = "ADDR.SEASONAL.START")]
		public List<string> AddrSeasonalStart { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.SEASONAL.END
		/// </summary>
		[DataMember(Order = 133, Name = "ADDR.SEASONAL.END")]
		public List<string> AddrSeasonalEnd { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.MODIFIER.LINE
		/// </summary>
		[DataMember(Order = 134, Name = "ADDR.MODIFIER.LINE")]
		public List<string> AddrModifierLine { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.TYPE
		/// </summary>
		[DataMember(Order = 135, Name = "ADDR.TYPE")]
		public List<string> AddrType { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.MAIL.RULES
		/// </summary>
		[DataMember(Order = 136, Name = "ADDR.MAIL.RULES")]
		public List<string> AddrMailRules { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.EFFECTIVE.START
		/// </summary>
		[DataMember(Order = 138, Name = "ADDR.EFFECTIVE.START")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> AddrEffectiveStart { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.EFFECTIVE.END
		/// </summary>
		[DataMember(Order = 139, Name = "ADDR.EFFECTIVE.END")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> AddrEffectiveEnd { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.RELATION.STATUS
		/// </summary>
		[DataMember(Order = 140, Name = "ADDR.RELATION.STATUS")]
		public List<string> AddrRelationStatus { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.LOCAL.EXT
		/// </summary>
		[DataMember(Order = 141, Name = "ADDR.LOCAL.EXT")]
		public List<string> AddrLocalExt { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.LOCAL.PHONE
		/// </summary>
		[DataMember(Order = 142, Name = "ADDR.LOCAL.PHONE")]
		public List<string> AddrLocalPhone { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.LOCAL.PHONE.TYPE
		/// </summary>
		[DataMember(Order = 143, Name = "ADDR.LOCAL.PHONE.TYPE")]
		public List<string> AddrLocalPhoneType { get; set; }
		
		/// <summary>
		/// CDD Name: PENDING.MOVE.ADDRESS
		/// </summary>
		[DataMember(Order = 144, Name = "PENDING.MOVE.ADDRESS")]
		public List<string> PendingMoveAddress { get; set; }
		
		/// <summary>
		/// CDD Name: ADDR.CHAPTERS
		/// </summary>
		[DataMember(Order = 145, Name = "ADDR.CHAPTERS")]
		public List<string> AddrChapters { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.SEASONAL.START
		/// </summary>
		[DataMember(Order = 154, Name = "FORMER.ADDR.SEASONAL.START")]
		public List<string> FormerAddrSeasonalStart { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.SEASONAL.END
		/// </summary>
		[DataMember(Order = 155, Name = "FORMER.ADDR.SEASONAL.END")]
		public List<string> FormerAddrSeasonalEnd { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.MODIFIER.LINE
		/// </summary>
		[DataMember(Order = 156, Name = "FORMER.ADDR.MODIFIER.LINE")]
		public List<string> FormerAddrModifierLine { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.TYPE
		/// </summary>
		[DataMember(Order = 157, Name = "FORMER.ADDR.TYPE")]
		public List<string> FormerAddrType { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.MAIL.RULES
		/// </summary>
		[DataMember(Order = 158, Name = "FORMER.ADDR.MAIL.RULES")]
		public List<string> FormerAddrMailRules { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.EFFECTIVE.START
		/// </summary>
		[DataMember(Order = 159, Name = "FORMER.ADDR.EFFECTIVE.START")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FormerAddrEffectiveStart { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.EFFECTIVE.END
		/// </summary>
		[DataMember(Order = 160, Name = "FORMER.ADDR.EFFECTIVE.END")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FormerAddrEffectiveEnd { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.RELATION.STATUS
		/// </summary>
		[DataMember(Order = 161, Name = "FORMER.ADDR.RELATION.STATUS")]
		public List<string> FormerAddrRelationStatus { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.LOCAL.EXT
		/// </summary>
		[DataMember(Order = 162, Name = "FORMER.LOCAL.EXT")]
		public List<string> FormerLocalExt { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.LOCAL.PHONE
		/// </summary>
		[DataMember(Order = 163, Name = "FORMER.LOCAL.PHONE")]
		public List<string> FormerLocalPhone { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.LOCAL.PHONE.TYPE
		/// </summary>
		[DataMember(Order = 164, Name = "FORMER.LOCAL.PHONE.TYPE")]
		public List<string> FormerLocalPhoneType { get; set; }
		
		/// <summary>
		/// CDD Name: FORMER.ADDR.CHAPTERS
		/// </summary>
		[DataMember(Order = 165, Name = "FORMER.ADDR.CHAPTERS")]
		public List<string> FormerAddrChapters { get; set; }
		
		/// <summary>
		/// CDD Name: RESIDENCE.STATE
		/// </summary>
		[DataMember(Order = 169, Name = "RESIDENCE.STATE")]
		public string ResidenceState { get; set; }
		
		/// <summary>
		/// CDD Name: VISA.TYPE
		/// </summary>
		[DataMember(Order = 170, Name = "VISA.TYPE")]
		public string VisaType { get; set; }
		
		/// <summary>
		/// CDD Name: VISA.EXP.DATE
		/// </summary>
		[DataMember(Order = 171, Name = "VISA.EXP.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? VisaExpDate { get; set; }
		
		/// <summary>
		/// CDD Name: ALIEN.ID
		/// </summary>
		[DataMember(Order = 172, Name = "ALIEN.ID")]
		public string AlienId { get; set; }
		
		/// <summary>
		/// CDD Name: CITIZENSHIP
		/// </summary>
		[DataMember(Order = 179, Name = "CITIZENSHIP")]
		public string Citizenship { get; set; }
		
		/// <summary>
		/// CDD Name: PRIVACY.FLAG
		/// </summary>
		[DataMember(Order = 185, Name = "PRIVACY.FLAG")]
		public string PrivacyFlag { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PHONE.TYPE
		/// </summary>
		[DataMember(Order = 188, Name = "PERSONAL.PHONE.TYPE")]
		public List<string> PersonalPhoneType { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PHONE.NUMBER
		/// </summary>
		[DataMember(Order = 189, Name = "PERSONAL.PHONE.NUMBER")]
		public List<string> PersonalPhoneNumber { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PHONE.EXTENSION
		/// </summary>
		[DataMember(Order = 190, Name = "PERSONAL.PHONE.EXTENSION")]
		public List<string> PersonalPhoneExtension { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.EMPLOYMENT
		/// </summary>
		[DataMember(Order = 194, Name = "PERSON.EMPLOYMENT")]
		public List<string> PersonEmployment { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.INSTITUTIONS.ATTEND
		/// </summary>
		[DataMember(Order = 196, Name = "PERSON.INSTITUTIONS.ATTEND")]
		public List<string> PersonInstitutionsAttend { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.PRIMARY.LANGUAGE
		/// </summary>
		[DataMember(Order = 197, Name = "PERSON.PRIMARY.LANGUAGE")]
		public string PersonPrimaryLanguage { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.SECONDARY.LANGUAGE
		/// </summary>
		[DataMember(Order = 198, Name = "PERSON.SECONDARY.LANGUAGE")]
		public List<string> PersonSecondaryLanguage { get; set; }
		
		/// <summary>
		/// CDD Name: DRIVER.LICENSE.NO
		/// </summary>
		[DataMember(Order = 204, Name = "DRIVER.LICENSE.NO")]
		public string DriverLicenseNo { get; set; }
		
		/// <summary>
		/// CDD Name: DRIVER.LICENSE.STATE
		/// </summary>
		[DataMember(Order = 205, Name = "DRIVER.LICENSE.STATE")]
		public string DriverLicenseState { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.PREFERRED.EMAIL
		/// </summary>
		[DataMember(Order = 218, Name = "PERSON.PREFERRED.EMAIL")]
		public List<string> PersonPreferredEmail { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.WEBSITE.ADDRESS
		/// </summary>
		[DataMember(Order = 219, Name = "PERSON.WEBSITE.ADDRESS")]
		public string PersonWebsiteAddress { get; set; }
		
		/// <summary>
		/// CDD Name: PER.ETHNICS
		/// </summary>
		[DataMember(Order = 230, Name = "PER.ETHNICS")]
		public List<string> PerEthnics { get; set; }
		
		/// <summary>
		/// CDD Name: PER.RACES
		/// </summary>
		[DataMember(Order = 231, Name = "PER.RACES")]
		public List<string> PerRaces { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.CHGTIME
		/// </summary>
		[DataMember(Order = 235, Name = "PERSON.CHGTIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? PersonChgtime { get; set; }
		
		/// <summary>
		/// CDD Name: PROFESSIONAL.SUFFIXES
		/// </summary>
		[DataMember(Order = 236, Name = "PROFESSIONAL.SUFFIXES")]
		public List<string> ProfessionalSuffixes { get; set; }
		
		/// <summary>
		/// CDD Name: GENDER.IDENTITY
		/// </summary>
		[DataMember(Order = 237, Name = "GENDER.IDENTITY")]
		public string GenderIdentity { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PRONOUN
		/// </summary>
		[DataMember(Order = 238, Name = "PERSONAL.PRONOUN")]
		public string PersonalPronoun { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.CHOSEN.FIRST.NAME
		/// </summary>
		[DataMember(Order = 239, Name = "PERSON.CHOSEN.FIRST.NAME")]
		public string PersonChosenFirstName { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.CHOSEN.MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 240, Name = "PERSON.CHOSEN.MIDDLE.NAME")]
		public string PersonChosenMiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.CHOSEN.LAST.NAME
		/// </summary>
		[DataMember(Order = 241, Name = "PERSON.CHOSEN.LAST.NAME")]
		public string PersonChosenLastName { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonPseason> PseasonEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonInt> IntEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonNamehist> NamehistEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonFseason> FseasonEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonPFormat> PFormatEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonPeopleEmail> PeopleEmailEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonPersonAlt> PersonAltEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonPerphone> PerphoneEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: PSEASON
			
			PseasonEntityAssociation = new List<PersonPseason>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonAddresses != null)
			{
				int numPseason = PersonAddresses.Count;
				if (AddrSeasonalStart !=null && AddrSeasonalStart.Count > numPseason) numPseason = AddrSeasonalStart.Count;
				if (AddrSeasonalEnd !=null && AddrSeasonalEnd.Count > numPseason) numPseason = AddrSeasonalEnd.Count;
				if (AddrModifierLine !=null && AddrModifierLine.Count > numPseason) numPseason = AddrModifierLine.Count;
				if (AddrType !=null && AddrType.Count > numPseason) numPseason = AddrType.Count;
				if (AddrMailRules !=null && AddrMailRules.Count > numPseason) numPseason = AddrMailRules.Count;
				if (AddrEffectiveStart !=null && AddrEffectiveStart.Count > numPseason) numPseason = AddrEffectiveStart.Count;
				if (AddrEffectiveEnd !=null && AddrEffectiveEnd.Count > numPseason) numPseason = AddrEffectiveEnd.Count;
				if (AddrRelationStatus !=null && AddrRelationStatus.Count > numPseason) numPseason = AddrRelationStatus.Count;
				if (AddrLocalExt !=null && AddrLocalExt.Count > numPseason) numPseason = AddrLocalExt.Count;
				if (AddrLocalPhone !=null && AddrLocalPhone.Count > numPseason) numPseason = AddrLocalPhone.Count;
				if (AddrLocalPhoneType !=null && AddrLocalPhoneType.Count > numPseason) numPseason = AddrLocalPhoneType.Count;
				if (PendingMoveAddress !=null && PendingMoveAddress.Count > numPseason) numPseason = PendingMoveAddress.Count;
				if (AddrChapters !=null && AddrChapters.Count > numPseason) numPseason = AddrChapters.Count;

				for (int i = 0; i < numPseason; i++)
				{

					string value0 = "";
					if (PersonAddresses != null && i < PersonAddresses.Count)
					{
						value0 = PersonAddresses[i];
					}


					string value1 = "";
					if (AddrSeasonalStart != null && i < AddrSeasonalStart.Count)
					{
						value1 = AddrSeasonalStart[i];
					}


					string value2 = "";
					if (AddrSeasonalEnd != null && i < AddrSeasonalEnd.Count)
					{
						value2 = AddrSeasonalEnd[i];
					}


					string value3 = "";
					if (AddrModifierLine != null && i < AddrModifierLine.Count)
					{
						value3 = AddrModifierLine[i];
					}


					string value4 = "";
					if (AddrType != null && i < AddrType.Count)
					{
						value4 = AddrType[i];
					}


					string value5 = "";
					if (AddrMailRules != null && i < AddrMailRules.Count)
					{
						value5 = AddrMailRules[i];
					}


					DateTime? value6 = null;
					if (AddrEffectiveStart != null && i < AddrEffectiveStart.Count)
					{
						value6 = AddrEffectiveStart[i];
					}


					DateTime? value7 = null;
					if (AddrEffectiveEnd != null && i < AddrEffectiveEnd.Count)
					{
						value7 = AddrEffectiveEnd[i];
					}


					string value8 = "";
					if (AddrRelationStatus != null && i < AddrRelationStatus.Count)
					{
						value8 = AddrRelationStatus[i];
					}


					string value9 = "";
					if (AddrLocalExt != null && i < AddrLocalExt.Count)
					{
						value9 = AddrLocalExt[i];
					}


					string value10 = "";
					if (AddrLocalPhone != null && i < AddrLocalPhone.Count)
					{
						value10 = AddrLocalPhone[i];
					}


					string value11 = "";
					if (AddrLocalPhoneType != null && i < AddrLocalPhoneType.Count)
					{
						value11 = AddrLocalPhoneType[i];
					}


					string value12 = "";
					if (PendingMoveAddress != null && i < PendingMoveAddress.Count)
					{
						value12 = PendingMoveAddress[i];
					}


					string value13 = "";
					if (AddrChapters != null && i < AddrChapters.Count)
					{
						value13 = AddrChapters[i];
					}

					PseasonEntityAssociation.Add(new PersonPseason( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13));
				}
			}
			// EntityAssociation Name: INT
			
			IntEntityAssociation = new List<PersonInt>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(Interests != null)
			{
				int numInt = Interests.Count;

				for (int i = 0; i < numInt; i++)
				{

					string value0 = "";
					if (Interests != null && i < Interests.Count)
					{
						value0 = Interests[i];
					}

					IntEntityAssociation.Add(new PersonInt( value0));
				}
			}
			// EntityAssociation Name: NAMEHIST
			
			NamehistEntityAssociation = new List<PersonNamehist>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(NameHistoryLastName != null)
			{
				int numNamehist = NameHistoryLastName.Count;
				if (NameHistoryFirstName !=null && NameHistoryFirstName.Count > numNamehist) numNamehist = NameHistoryFirstName.Count;
				if (NameHistoryMiddleName !=null && NameHistoryMiddleName.Count > numNamehist) numNamehist = NameHistoryMiddleName.Count;

				for (int i = 0; i < numNamehist; i++)
				{

					string value0 = "";
					if (NameHistoryLastName != null && i < NameHistoryLastName.Count)
					{
						value0 = NameHistoryLastName[i];
					}


					string value1 = "";
					if (NameHistoryFirstName != null && i < NameHistoryFirstName.Count)
					{
						value1 = NameHistoryFirstName[i];
					}


					string value2 = "";
					if (NameHistoryMiddleName != null && i < NameHistoryMiddleName.Count)
					{
						value2 = NameHistoryMiddleName[i];
					}

					NamehistEntityAssociation.Add(new PersonNamehist( value0, value1, value2));
				}
			}
			// EntityAssociation Name: FSEASON
			
			FseasonEntityAssociation = new List<PersonFseason>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FormerAddresses != null)
			{
				int numFseason = FormerAddresses.Count;
				if (FormerAddrSeasonalStart !=null && FormerAddrSeasonalStart.Count > numFseason) numFseason = FormerAddrSeasonalStart.Count;
				if (FormerAddrSeasonalEnd !=null && FormerAddrSeasonalEnd.Count > numFseason) numFseason = FormerAddrSeasonalEnd.Count;
				if (FormerAddrModifierLine !=null && FormerAddrModifierLine.Count > numFseason) numFseason = FormerAddrModifierLine.Count;
				if (FormerAddrType !=null && FormerAddrType.Count > numFseason) numFseason = FormerAddrType.Count;
				if (FormerAddrMailRules !=null && FormerAddrMailRules.Count > numFseason) numFseason = FormerAddrMailRules.Count;
				if (FormerAddrEffectiveStart !=null && FormerAddrEffectiveStart.Count > numFseason) numFseason = FormerAddrEffectiveStart.Count;
				if (FormerAddrEffectiveEnd !=null && FormerAddrEffectiveEnd.Count > numFseason) numFseason = FormerAddrEffectiveEnd.Count;
				if (FormerAddrRelationStatus !=null && FormerAddrRelationStatus.Count > numFseason) numFseason = FormerAddrRelationStatus.Count;
				if (FormerLocalExt !=null && FormerLocalExt.Count > numFseason) numFseason = FormerLocalExt.Count;
				if (FormerLocalPhone !=null && FormerLocalPhone.Count > numFseason) numFseason = FormerLocalPhone.Count;
				if (FormerLocalPhoneType !=null && FormerLocalPhoneType.Count > numFseason) numFseason = FormerLocalPhoneType.Count;
				if (FormerAddrChapters !=null && FormerAddrChapters.Count > numFseason) numFseason = FormerAddrChapters.Count;

				for (int i = 0; i < numFseason; i++)
				{

					string value0 = "";
					if (FormerAddresses != null && i < FormerAddresses.Count)
					{
						value0 = FormerAddresses[i];
					}


					string value1 = "";
					if (FormerAddrSeasonalStart != null && i < FormerAddrSeasonalStart.Count)
					{
						value1 = FormerAddrSeasonalStart[i];
					}


					string value2 = "";
					if (FormerAddrSeasonalEnd != null && i < FormerAddrSeasonalEnd.Count)
					{
						value2 = FormerAddrSeasonalEnd[i];
					}


					string value3 = "";
					if (FormerAddrModifierLine != null && i < FormerAddrModifierLine.Count)
					{
						value3 = FormerAddrModifierLine[i];
					}


					string value4 = "";
					if (FormerAddrType != null && i < FormerAddrType.Count)
					{
						value4 = FormerAddrType[i];
					}


					string value5 = "";
					if (FormerAddrMailRules != null && i < FormerAddrMailRules.Count)
					{
						value5 = FormerAddrMailRules[i];
					}


					DateTime? value6 = null;
					if (FormerAddrEffectiveStart != null && i < FormerAddrEffectiveStart.Count)
					{
						value6 = FormerAddrEffectiveStart[i];
					}


					DateTime? value7 = null;
					if (FormerAddrEffectiveEnd != null && i < FormerAddrEffectiveEnd.Count)
					{
						value7 = FormerAddrEffectiveEnd[i];
					}


					string value8 = "";
					if (FormerAddrRelationStatus != null && i < FormerAddrRelationStatus.Count)
					{
						value8 = FormerAddrRelationStatus[i];
					}


					string value9 = "";
					if (FormerLocalExt != null && i < FormerLocalExt.Count)
					{
						value9 = FormerLocalExt[i];
					}


					string value10 = "";
					if (FormerLocalPhone != null && i < FormerLocalPhone.Count)
					{
						value10 = FormerLocalPhone[i];
					}


					string value11 = "";
					if (FormerLocalPhoneType != null && i < FormerLocalPhoneType.Count)
					{
						value11 = FormerLocalPhoneType[i];
					}


					string value12 = "";
					if (FormerAddrChapters != null && i < FormerAddrChapters.Count)
					{
						value12 = FormerAddrChapters[i];
					}

					FseasonEntityAssociation.Add(new PersonFseason( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12));
				}
			}
			// EntityAssociation Name: P.FORMAT
			
			PFormatEntityAssociation = new List<PersonPFormat>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonFormattedNames != null)
			{
				int numPFormat = PersonFormattedNames.Count;
				if (PersonFormattedNameTypes !=null && PersonFormattedNameTypes.Count > numPFormat) numPFormat = PersonFormattedNameTypes.Count;

				for (int i = 0; i < numPFormat; i++)
				{

					string value0 = "";
					if (PersonFormattedNames != null && i < PersonFormattedNames.Count)
					{
						value0 = PersonFormattedNames[i];
					}


					string value1 = "";
					if (PersonFormattedNameTypes != null && i < PersonFormattedNameTypes.Count)
					{
						value1 = PersonFormattedNameTypes[i];
					}

					PFormatEntityAssociation.Add(new PersonPFormat( value0, value1));
				}
			}
			// EntityAssociation Name: PEOPLE.EMAIL
			
			PeopleEmailEntityAssociation = new List<PersonPeopleEmail>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonEmailTypes != null)
			{
				int numPeopleEmail = PersonEmailTypes.Count;
				if (PersonEmailAddresses !=null && PersonEmailAddresses.Count > numPeopleEmail) numPeopleEmail = PersonEmailAddresses.Count;
				if (PersonPreferredEmail !=null && PersonPreferredEmail.Count > numPeopleEmail) numPeopleEmail = PersonPreferredEmail.Count;

				for (int i = 0; i < numPeopleEmail; i++)
				{

					string value0 = "";
					if (PersonEmailTypes != null && i < PersonEmailTypes.Count)
					{
						value0 = PersonEmailTypes[i];
					}


					string value1 = "";
					if (PersonEmailAddresses != null && i < PersonEmailAddresses.Count)
					{
						value1 = PersonEmailAddresses[i];
					}


					string value2 = "";
					if (PersonPreferredEmail != null && i < PersonPreferredEmail.Count)
					{
						value2 = PersonPreferredEmail[i];
					}

					PeopleEmailEntityAssociation.Add(new PersonPeopleEmail( value0, value1, value2));
				}
			}
			// EntityAssociation Name: PERSON.ALT
			
			PersonAltEntityAssociation = new List<PersonPersonAlt>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonAltIds != null)
			{
				int numPersonAlt = PersonAltIds.Count;
				if (PersonAltIdTypes !=null && PersonAltIdTypes.Count > numPersonAlt) numPersonAlt = PersonAltIdTypes.Count;

				for (int i = 0; i < numPersonAlt; i++)
				{

					string value0 = "";
					if (PersonAltIds != null && i < PersonAltIds.Count)
					{
						value0 = PersonAltIds[i];
					}


					string value1 = "";
					if (PersonAltIdTypes != null && i < PersonAltIdTypes.Count)
					{
						value1 = PersonAltIdTypes[i];
					}

					PersonAltEntityAssociation.Add(new PersonPersonAlt( value0, value1));
				}
			}
			// EntityAssociation Name: PERPHONE
			
			PerphoneEntityAssociation = new List<PersonPerphone>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonalPhoneNumber != null)
			{
				int numPerphone = PersonalPhoneNumber.Count;
				if (PersonalPhoneType !=null && PersonalPhoneType.Count > numPerphone) numPerphone = PersonalPhoneType.Count;
				if (PersonalPhoneExtension !=null && PersonalPhoneExtension.Count > numPerphone) numPerphone = PersonalPhoneExtension.Count;

				for (int i = 0; i < numPerphone; i++)
				{

					string value0 = "";
					if (PersonalPhoneType != null && i < PersonalPhoneType.Count)
					{
						value0 = PersonalPhoneType[i];
					}


					string value1 = "";
					if (PersonalPhoneNumber != null && i < PersonalPhoneNumber.Count)
					{
						value1 = PersonalPhoneNumber[i];
					}


					string value2 = "";
					if (PersonalPhoneExtension != null && i < PersonalPhoneExtension.Count)
					{
						value2 = PersonalPhoneExtension[i];
					}

					PerphoneEntityAssociation.Add(new PersonPerphone( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class PersonPseason
	{
		public string PersonAddressesAssocMember;	
		public string AddrSeasonalStartAssocMember;	
		public string AddrSeasonalEndAssocMember;	
		public string AddrModifierLineAssocMember;	
		public string AddrTypeAssocMember;	
		public string AddrMailRulesAssocMember;	
		public DateTime? AddrEffectiveStartAssocMember;	
		public DateTime? AddrEffectiveEndAssocMember;	
		public string AddrRelationStatusAssocMember;	
		public string AddrLocalExtAssocMember;	
		public string AddrLocalPhoneAssocMember;	
		public string AddrLocalPhoneTypeAssocMember;	
		public string PendingMoveAddressAssocMember;	
		public string AddrChaptersAssocMember;	
		public PersonPseason() {}
		public PersonPseason(
			string inPersonAddresses,
			string inAddrSeasonalStart,
			string inAddrSeasonalEnd,
			string inAddrModifierLine,
			string inAddrType,
			string inAddrMailRules,
			DateTime? inAddrEffectiveStart,
			DateTime? inAddrEffectiveEnd,
			string inAddrRelationStatus,
			string inAddrLocalExt,
			string inAddrLocalPhone,
			string inAddrLocalPhoneType,
			string inPendingMoveAddress,
			string inAddrChapters)
		{
			PersonAddressesAssocMember = inPersonAddresses;
			AddrSeasonalStartAssocMember = inAddrSeasonalStart;
			AddrSeasonalEndAssocMember = inAddrSeasonalEnd;
			AddrModifierLineAssocMember = inAddrModifierLine;
			AddrTypeAssocMember = inAddrType;
			AddrMailRulesAssocMember = inAddrMailRules;
			AddrEffectiveStartAssocMember = inAddrEffectiveStart;
			AddrEffectiveEndAssocMember = inAddrEffectiveEnd;
			AddrRelationStatusAssocMember = inAddrRelationStatus;
			AddrLocalExtAssocMember = inAddrLocalExt;
			AddrLocalPhoneAssocMember = inAddrLocalPhone;
			AddrLocalPhoneTypeAssocMember = inAddrLocalPhoneType;
			PendingMoveAddressAssocMember = inPendingMoveAddress;
			AddrChaptersAssocMember = inAddrChapters;
		}
	}
	
	[Serializable]
	public class PersonInt
	{
		public string InterestsAssocMember;	
		public PersonInt() {}
		public PersonInt(
			string inInterests)
		{
			InterestsAssocMember = inInterests;
		}
	}
	
	[Serializable]
	public class PersonNamehist
	{
		public string NameHistoryLastNameAssocMember;	
		public string NameHistoryFirstNameAssocMember;	
		public string NameHistoryMiddleNameAssocMember;	
		public PersonNamehist() {}
		public PersonNamehist(
			string inNameHistoryLastName,
			string inNameHistoryFirstName,
			string inNameHistoryMiddleName)
		{
			NameHistoryLastNameAssocMember = inNameHistoryLastName;
			NameHistoryFirstNameAssocMember = inNameHistoryFirstName;
			NameHistoryMiddleNameAssocMember = inNameHistoryMiddleName;
		}
	}
	
	[Serializable]
	public class PersonFseason
	{
		public string FormerAddressesAssocMember;	
		public string FormerAddrSeasonalStartAssocMember;	
		public string FormerAddrSeasonalEndAssocMember;	
		public string FormerAddrModifierLineAssocMember;	
		public string FormerAddrTypeAssocMember;	
		public string FormerAddrMailRulesAssocMember;	
		public DateTime? FormerAddrEffectiveStartAssocMember;	
		public DateTime? FormerAddrEffectiveEndAssocMember;	
		public string FormerAddrRelationStatusAssocMember;	
		public string FormerLocalExtAssocMember;	
		public string FormerLocalPhoneAssocMember;	
		public string FormerLocalPhoneTypeAssocMember;	
		public string FormerAddrChaptersAssocMember;	
		public PersonFseason() {}
		public PersonFseason(
			string inFormerAddresses,
			string inFormerAddrSeasonalStart,
			string inFormerAddrSeasonalEnd,
			string inFormerAddrModifierLine,
			string inFormerAddrType,
			string inFormerAddrMailRules,
			DateTime? inFormerAddrEffectiveStart,
			DateTime? inFormerAddrEffectiveEnd,
			string inFormerAddrRelationStatus,
			string inFormerLocalExt,
			string inFormerLocalPhone,
			string inFormerLocalPhoneType,
			string inFormerAddrChapters)
		{
			FormerAddressesAssocMember = inFormerAddresses;
			FormerAddrSeasonalStartAssocMember = inFormerAddrSeasonalStart;
			FormerAddrSeasonalEndAssocMember = inFormerAddrSeasonalEnd;
			FormerAddrModifierLineAssocMember = inFormerAddrModifierLine;
			FormerAddrTypeAssocMember = inFormerAddrType;
			FormerAddrMailRulesAssocMember = inFormerAddrMailRules;
			FormerAddrEffectiveStartAssocMember = inFormerAddrEffectiveStart;
			FormerAddrEffectiveEndAssocMember = inFormerAddrEffectiveEnd;
			FormerAddrRelationStatusAssocMember = inFormerAddrRelationStatus;
			FormerLocalExtAssocMember = inFormerLocalExt;
			FormerLocalPhoneAssocMember = inFormerLocalPhone;
			FormerLocalPhoneTypeAssocMember = inFormerLocalPhoneType;
			FormerAddrChaptersAssocMember = inFormerAddrChapters;
		}
	}
	
	[Serializable]
	public class PersonPFormat
	{
		public string PersonFormattedNamesAssocMember;	
		public string PersonFormattedNameTypesAssocMember;	
		public PersonPFormat() {}
		public PersonPFormat(
			string inPersonFormattedNames,
			string inPersonFormattedNameTypes)
		{
			PersonFormattedNamesAssocMember = inPersonFormattedNames;
			PersonFormattedNameTypesAssocMember = inPersonFormattedNameTypes;
		}
	}
	
	[Serializable]
	public class PersonPeopleEmail
	{
		public string PersonEmailTypesAssocMember;	
		public string PersonEmailAddressesAssocMember;	
		public string PersonPreferredEmailAssocMember;	
		public PersonPeopleEmail() {}
		public PersonPeopleEmail(
			string inPersonEmailTypes,
			string inPersonEmailAddresses,
			string inPersonPreferredEmail)
		{
			PersonEmailTypesAssocMember = inPersonEmailTypes;
			PersonEmailAddressesAssocMember = inPersonEmailAddresses;
			PersonPreferredEmailAssocMember = inPersonPreferredEmail;
		}
	}
	
	[Serializable]
	public class PersonPersonAlt
	{
		public string PersonAltIdsAssocMember;	
		public string PersonAltIdTypesAssocMember;	
		public PersonPersonAlt() {}
		public PersonPersonAlt(
			string inPersonAltIds,
			string inPersonAltIdTypes)
		{
			PersonAltIdsAssocMember = inPersonAltIds;
			PersonAltIdTypesAssocMember = inPersonAltIdTypes;
		}
	}
	
	[Serializable]
	public class PersonPerphone
	{
		public string PersonalPhoneTypeAssocMember;	
		public string PersonalPhoneNumberAssocMember;	
		public string PersonalPhoneExtensionAssocMember;	
		public PersonPerphone() {}
		public PersonPerphone(
			string inPersonalPhoneType,
			string inPersonalPhoneNumber,
			string inPersonalPhoneExtension)
		{
			PersonalPhoneTypeAssocMember = inPersonalPhoneType;
			PersonalPhoneNumberAssocMember = inPersonalPhoneNumber;
			PersonalPhoneExtensionAssocMember = inPersonalPhoneExtension;
		}
	}
}
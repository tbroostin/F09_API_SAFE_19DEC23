//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:43:18 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: PERSON.EMER
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "PersonEmer")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:43:18 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "PERSON.EMER", EntityType = "PHYS")]
	public class PersonEmer : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: EMER.NAME
		/// </summary>
		[DataMember(Order = 0, Name = "EMER.NAME")]
		public List<string> EmerName { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.DAYTIME.PHONE
		/// </summary>
		[DataMember(Order = 1, Name = "EMER.DAYTIME.PHONE")]
		public List<string> EmerDaytimePhone { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.EVENING.PHONE
		/// </summary>
		[DataMember(Order = 2, Name = "EMER.EVENING.PHONE")]
		public List<string> EmerEveningPhone { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.OTHER.PHONE
		/// </summary>
		[DataMember(Order = 3, Name = "EMER.OTHER.PHONE")]
		public List<string> EmerOtherPhone { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.RELATIONSHIP
		/// </summary>
		[DataMember(Order = 4, Name = "EMER.RELATIONSHIP")]
		public List<string> EmerRelationship { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.CONTACT.DATE
		/// </summary>
		[DataMember(Order = 5, Name = "EMER.CONTACT.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> EmerContactDate { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.INSURANCE.INFO
		/// </summary>
		[DataMember(Order = 7, Name = "EMER.INSURANCE.INFO")]
		public string EmerInsuranceInfo { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.HEALTH.CONDITIONS
		/// </summary>
		[DataMember(Order = 8, Name = "EMER.HEALTH.CONDITIONS")]
		public List<string> EmerHealthConditions { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.HOSPITAL.PREF
		/// </summary>
		[DataMember(Order = 9, Name = "EMER.HOSPITAL.PREF")]
		public string EmerHospitalPref { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.LAST.CONFIRMED.DATE
		/// </summary>
		[DataMember(Order = 14, Name = "EMER.LAST.CONFIRMED.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? EmerLastConfirmedDate { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.EMERGENCY.CONTACT.FLAG
		/// </summary>
		[DataMember(Order = 15, Name = "EMER.EMERGENCY.CONTACT.FLAG")]
		public List<string> EmerEmergencyContactFlag { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.MISSING.CONTACT.FLAG
		/// </summary>
		[DataMember(Order = 16, Name = "EMER.MISSING.CONTACT.FLAG")]
		public List<string> EmerMissingContactFlag { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.CONTACT.ADDRESS
		/// </summary>
		[DataMember(Order = 17, Name = "EMER.CONTACT.ADDRESS")]
		public List<string> EmerContactAddress { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.ADDNL.INFORMATION
		/// </summary>
		[DataMember(Order = 18, Name = "EMER.ADDNL.INFORMATION")]
		public string EmerAddnlInformation { get; set; }
		
		/// <summary>
		/// CDD Name: EMER.OPTOUT
		/// </summary>
		[DataMember(Order = 19, Name = "EMER.OPTOUT")]
		public string EmerOptout { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonEmerEmerContacts> EmerContactsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: EMER.CONTACTS
			
			EmerContactsEntityAssociation = new List<PersonEmerEmerContacts>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(EmerName != null)
			{
				int numEmerContacts = EmerName.Count;
				if (EmerDaytimePhone !=null && EmerDaytimePhone.Count > numEmerContacts) numEmerContacts = EmerDaytimePhone.Count;
				if (EmerEveningPhone !=null && EmerEveningPhone.Count > numEmerContacts) numEmerContacts = EmerEveningPhone.Count;
				if (EmerOtherPhone !=null && EmerOtherPhone.Count > numEmerContacts) numEmerContacts = EmerOtherPhone.Count;
				if (EmerRelationship !=null && EmerRelationship.Count > numEmerContacts) numEmerContacts = EmerRelationship.Count;
				if (EmerContactDate !=null && EmerContactDate.Count > numEmerContacts) numEmerContacts = EmerContactDate.Count;
				if (EmerEmergencyContactFlag !=null && EmerEmergencyContactFlag.Count > numEmerContacts) numEmerContacts = EmerEmergencyContactFlag.Count;
				if (EmerMissingContactFlag !=null && EmerMissingContactFlag.Count > numEmerContacts) numEmerContacts = EmerMissingContactFlag.Count;
				if (EmerContactAddress !=null && EmerContactAddress.Count > numEmerContacts) numEmerContacts = EmerContactAddress.Count;

				for (int i = 0; i < numEmerContacts; i++)
				{

					string value0 = "";
					if (EmerName != null && i < EmerName.Count)
					{
						value0 = EmerName[i];
					}


					string value1 = "";
					if (EmerDaytimePhone != null && i < EmerDaytimePhone.Count)
					{
						value1 = EmerDaytimePhone[i];
					}


					string value2 = "";
					if (EmerEveningPhone != null && i < EmerEveningPhone.Count)
					{
						value2 = EmerEveningPhone[i];
					}


					string value3 = "";
					if (EmerOtherPhone != null && i < EmerOtherPhone.Count)
					{
						value3 = EmerOtherPhone[i];
					}


					string value4 = "";
					if (EmerRelationship != null && i < EmerRelationship.Count)
					{
						value4 = EmerRelationship[i];
					}


					DateTime? value5 = null;
					if (EmerContactDate != null && i < EmerContactDate.Count)
					{
						value5 = EmerContactDate[i];
					}


					string value6 = "";
					if (EmerEmergencyContactFlag != null && i < EmerEmergencyContactFlag.Count)
					{
						value6 = EmerEmergencyContactFlag[i];
					}


					string value7 = "";
					if (EmerMissingContactFlag != null && i < EmerMissingContactFlag.Count)
					{
						value7 = EmerMissingContactFlag[i];
					}


					string value8 = "";
					if (EmerContactAddress != null && i < EmerContactAddress.Count)
					{
						value8 = EmerContactAddress[i];
					}

					EmerContactsEntityAssociation.Add(new PersonEmerEmerContacts( value0, value1, value2, value3, value4, value5, value6, value7, value8));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class PersonEmerEmerContacts
	{
		public string EmerNameAssocMember;	
		public string EmerDaytimePhoneAssocMember;	
		public string EmerEveningPhoneAssocMember;	
		public string EmerOtherPhoneAssocMember;	
		public string EmerRelationshipAssocMember;	
		public DateTime? EmerContactDateAssocMember;	
		public string EmerEmergencyContactFlagAssocMember;	
		public string EmerMissingContactFlagAssocMember;	
		public string EmerContactAddressAssocMember;	
		public PersonEmerEmerContacts() {}
		public PersonEmerEmerContacts(
			string inEmerName,
			string inEmerDaytimePhone,
			string inEmerEveningPhone,
			string inEmerOtherPhone,
			string inEmerRelationship,
			DateTime? inEmerContactDate,
			string inEmerEmergencyContactFlag,
			string inEmerMissingContactFlag,
			string inEmerContactAddress)
		{
			EmerNameAssocMember = inEmerName;
			EmerDaytimePhoneAssocMember = inEmerDaytimePhone;
			EmerEveningPhoneAssocMember = inEmerEveningPhone;
			EmerOtherPhoneAssocMember = inEmerOtherPhone;
			EmerRelationshipAssocMember = inEmerRelationship;
			EmerContactDateAssocMember = inEmerContactDate;
			EmerEmergencyContactFlagAssocMember = inEmerEmergencyContactFlag;
			EmerMissingContactFlagAssocMember = inEmerMissingContactFlag;
			EmerContactAddressAssocMember = inEmerContactAddress;
		}
	}
}
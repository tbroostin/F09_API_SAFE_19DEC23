//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:43:56 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: PERSON
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "PersonProxyUser")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:43:56 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "PERSON", EntityType = "PHYS")]
	public class PersonProxyUser : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: LAST.NAME
		/// </summary>
		[DataMember(Order = 0, Name = "LAST.NAME")]
		public string LastName { get; set; }
		
		/// <summary>
		/// CDD Name: FIRST.NAME
		/// </summary>
		[DataMember(Order = 2, Name = "FIRST.NAME")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// CDD Name: MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 3, Name = "MIDDLE.NAME")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PREFIX
		/// </summary>
		[DataMember(Order = 4, Name = "PREFIX")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// CDD Name: SSN
		/// </summary>
		[DataMember(Order = 7, Name = "SSN")]
		public string Ssn { get; set; }
		
		/// <summary>
		/// CDD Name: GENDER
		/// </summary>
		[DataMember(Order = 11, Name = "GENDER")]
		public string Gender { get; set; }
		
		/// <summary>
		/// CDD Name: BIRTH.DATE
		/// </summary>
		[DataMember(Order = 13, Name = "BIRTH.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? BirthDate { get; set; }
		
		/// <summary>
		/// CDD Name: SUFFIX
		/// </summary>
		[DataMember(Order = 28, Name = "SUFFIX")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// CDD Name: NAME.HISTORY.LAST.NAME
		/// </summary>
		[DataMember(Order = 43, Name = "NAME.HISTORY.LAST.NAME")]
		public List<string> NameHistoryLastName { get; set; }
		
		/// <summary>
		/// CDD Name: NAME.HISTORY.FIRST.NAME
		/// </summary>
		[DataMember(Order = 44, Name = "NAME.HISTORY.FIRST.NAME")]
		public List<string> NameHistoryFirstName { get; set; }
		
		/// <summary>
		/// CDD Name: NAME.HISTORY.MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 45, Name = "NAME.HISTORY.MIDDLE.NAME")]
		public List<string> NameHistoryMiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.EMAIL.TYPES
		/// </summary>
		[DataMember(Order = 66, Name = "PERSON.EMAIL.TYPES")]
		public List<string> PersonEmailTypes { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.EMAIL.ADDRESSES
		/// </summary>
		[DataMember(Order = 67, Name = "PERSON.EMAIL.ADDRESSES")]
		public List<string> PersonEmailAddresses { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PHONE.TYPE
		/// </summary>
		[DataMember(Order = 188, Name = "PERSONAL.PHONE.TYPE")]
		public List<string> PersonalPhoneType { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PHONE.NUMBER
		/// </summary>
		[DataMember(Order = 189, Name = "PERSONAL.PHONE.NUMBER")]
		public List<string> PersonalPhoneNumber { get; set; }
		
		/// <summary>
		/// CDD Name: PERSONAL.PHONE.EXTENSION
		/// </summary>
		[DataMember(Order = 190, Name = "PERSONAL.PHONE.EXTENSION")]
		public List<string> PersonalPhoneExtension { get; set; }
		
		/// <summary>
		/// CDD Name: PERSON.PREFERRED.EMAIL
		/// </summary>
		[DataMember(Order = 218, Name = "PERSON.PREFERRED.EMAIL")]
		public List<string> PersonPreferredEmail { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonProxyUserNamehist> NamehistEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonProxyUserPeopleEmail> PeopleEmailEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<PersonProxyUserPerphone> PerphoneEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: NAMEHIST
			
			NamehistEntityAssociation = new List<PersonProxyUserNamehist>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(NameHistoryLastName != null)
			{
				int numNamehist = NameHistoryLastName.Count;
				if (NameHistoryFirstName !=null && NameHistoryFirstName.Count > numNamehist) numNamehist = NameHistoryFirstName.Count;
				if (NameHistoryMiddleName !=null && NameHistoryMiddleName.Count > numNamehist) numNamehist = NameHistoryMiddleName.Count;

				for (int i = 0; i < numNamehist; i++)
				{

					string value0 = "";
					if (NameHistoryLastName != null && i < NameHistoryLastName.Count)
					{
						value0 = NameHistoryLastName[i];
					}


					string value1 = "";
					if (NameHistoryFirstName != null && i < NameHistoryFirstName.Count)
					{
						value1 = NameHistoryFirstName[i];
					}


					string value2 = "";
					if (NameHistoryMiddleName != null && i < NameHistoryMiddleName.Count)
					{
						value2 = NameHistoryMiddleName[i];
					}

					NamehistEntityAssociation.Add(new PersonProxyUserNamehist( value0, value1, value2));
				}
			}
			// EntityAssociation Name: PEOPLE.EMAIL
			
			PeopleEmailEntityAssociation = new List<PersonProxyUserPeopleEmail>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonEmailTypes != null)
			{
				int numPeopleEmail = PersonEmailTypes.Count;
				if (PersonEmailAddresses !=null && PersonEmailAddresses.Count > numPeopleEmail) numPeopleEmail = PersonEmailAddresses.Count;
				if (PersonPreferredEmail !=null && PersonPreferredEmail.Count > numPeopleEmail) numPeopleEmail = PersonPreferredEmail.Count;

				for (int i = 0; i < numPeopleEmail; i++)
				{

					string value0 = "";
					if (PersonEmailTypes != null && i < PersonEmailTypes.Count)
					{
						value0 = PersonEmailTypes[i];
					}


					string value1 = "";
					if (PersonEmailAddresses != null && i < PersonEmailAddresses.Count)
					{
						value1 = PersonEmailAddresses[i];
					}


					string value2 = "";
					if (PersonPreferredEmail != null && i < PersonPreferredEmail.Count)
					{
						value2 = PersonPreferredEmail[i];
					}

					PeopleEmailEntityAssociation.Add(new PersonProxyUserPeopleEmail( value0, value1, value2));
				}
			}
			// EntityAssociation Name: PERPHONE
			
			PerphoneEntityAssociation = new List<PersonProxyUserPerphone>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PersonalPhoneNumber != null)
			{
				int numPerphone = PersonalPhoneNumber.Count;
				if (PersonalPhoneType !=null && PersonalPhoneType.Count > numPerphone) numPerphone = PersonalPhoneType.Count;
				if (PersonalPhoneExtension !=null && PersonalPhoneExtension.Count > numPerphone) numPerphone = PersonalPhoneExtension.Count;

				for (int i = 0; i < numPerphone; i++)
				{

					string value0 = "";
					if (PersonalPhoneType != null && i < PersonalPhoneType.Count)
					{
						value0 = PersonalPhoneType[i];
					}


					string value1 = "";
					if (PersonalPhoneNumber != null && i < PersonalPhoneNumber.Count)
					{
						value1 = PersonalPhoneNumber[i];
					}


					string value2 = "";
					if (PersonalPhoneExtension != null && i < PersonalPhoneExtension.Count)
					{
						value2 = PersonalPhoneExtension[i];
					}

					PerphoneEntityAssociation.Add(new PersonProxyUserPerphone( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class PersonProxyUserNamehist
	{
		public string NameHistoryLastNameAssocMember;	
		public string NameHistoryFirstNameAssocMember;	
		public string NameHistoryMiddleNameAssocMember;	
		public PersonProxyUserNamehist() {}
		public PersonProxyUserNamehist(
			string inNameHistoryLastName,
			string inNameHistoryFirstName,
			string inNameHistoryMiddleName)
		{
			NameHistoryLastNameAssocMember = inNameHistoryLastName;
			NameHistoryFirstNameAssocMember = inNameHistoryFirstName;
			NameHistoryMiddleNameAssocMember = inNameHistoryMiddleName;
		}
	}
	
	[Serializable]
	public class PersonProxyUserPeopleEmail
	{
		public string PersonEmailTypesAssocMember;	
		public string PersonEmailAddressesAssocMember;	
		public string PersonPreferredEmailAssocMember;	
		public PersonProxyUserPeopleEmail() {}
		public PersonProxyUserPeopleEmail(
			string inPersonEmailTypes,
			string inPersonEmailAddresses,
			string inPersonPreferredEmail)
		{
			PersonEmailTypesAssocMember = inPersonEmailTypes;
			PersonEmailAddressesAssocMember = inPersonEmailAddresses;
			PersonPreferredEmailAssocMember = inPersonPreferredEmail;
		}
	}
	
	[Serializable]
	public class PersonProxyUserPerphone
	{
		public string PersonalPhoneTypeAssocMember;	
		public string PersonalPhoneNumberAssocMember;	
		public string PersonalPhoneExtensionAssocMember;	
		public PersonProxyUserPerphone() {}
		public PersonProxyUserPerphone(
			string inPersonalPhoneType,
			string inPersonalPhoneNumber,
			string inPersonalPhoneExtension)
		{
			PersonalPhoneTypeAssocMember = inPersonalPhoneType;
			PersonalPhoneNumberAssocMember = inPersonalPhoneNumber;
			PersonalPhoneExtensionAssocMember = inPersonalPhoneExtension;
		}
	}
}
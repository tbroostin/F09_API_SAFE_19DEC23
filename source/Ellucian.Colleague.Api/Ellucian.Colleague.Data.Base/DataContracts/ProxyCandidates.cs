//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:45:35 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: PROXY.CANDIDATES
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "ProxyCandidates")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:45:35 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "PROXY.CANDIDATES", EntityType = "PHYS")]
	public class ProxyCandidates : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: PRXC.PROXY.SUBJECT
		/// </summary>
		[DataMember(Order = 0, Name = "PRXC.PROXY.SUBJECT")]
		public string PrxcProxySubject { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.RELATION.TYPE
		/// </summary>
		[DataMember(Order = 1, Name = "PRXC.RELATION.TYPE")]
		public string PrxcRelationType { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.GRANTED.PERMS
		/// </summary>
		[DataMember(Order = 2, Name = "PRXC.GRANTED.PERMS")]
		public List<string> PrxcGrantedPerms { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.PREFIX
		/// </summary>
		[DataMember(Order = 3, Name = "PRXC.PREFIX")]
		public string PrxcPrefix { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.FIRST.NAME
		/// </summary>
		[DataMember(Order = 4, Name = "PRXC.FIRST.NAME")]
		public string PrxcFirstName { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 5, Name = "PRXC.MIDDLE.NAME")]
		public string PrxcMiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.LAST.NAME
		/// </summary>
		[DataMember(Order = 6, Name = "PRXC.LAST.NAME")]
		public string PrxcLastName { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.SUFFIX
		/// </summary>
		[DataMember(Order = 7, Name = "PRXC.SUFFIX")]
		public string PrxcSuffix { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.EMAIL.ADDRESS
		/// </summary>
		[DataMember(Order = 8, Name = "PRXC.EMAIL.ADDRESS")]
		public string PrxcEmailAddress { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.PHONE
		/// </summary>
		[DataMember(Order = 14, Name = "PRXC.PHONE")]
		public string PrxcPhone { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.PHONE.EXTENSION
		/// </summary>
		[DataMember(Order = 15, Name = "PRXC.PHONE.EXTENSION")]
		public string PrxcPhoneExtension { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.BIRTH.DATE
		/// </summary>
		[DataMember(Order = 16, Name = "PRXC.BIRTH.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? PrxcBirthDate { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.GENDER
		/// </summary>
		[DataMember(Order = 17, Name = "PRXC.GENDER")]
		public string PrxcGender { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.EMAIL.TYPE
		/// </summary>
		[DataMember(Order = 18, Name = "PRXC.EMAIL.TYPE")]
		public string PrxcEmailType { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.PHONE.TYPE
		/// </summary>
		[DataMember(Order = 20, Name = "PRXC.PHONE.TYPE")]
		public string PrxcPhoneType { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.FORMER.FIRST.NAME
		/// </summary>
		[DataMember(Order = 21, Name = "PRXC.FORMER.FIRST.NAME")]
		public string PrxcFormerFirstName { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.FORMER.MIDDLE.NAME
		/// </summary>
		[DataMember(Order = 22, Name = "PRXC.FORMER.MIDDLE.NAME")]
		public string PrxcFormerMiddleName { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.FORMER.LAST.NAME
		/// </summary>
		[DataMember(Order = 23, Name = "PRXC.FORMER.LAST.NAME")]
		public string PrxcFormerLastName { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.SSN
		/// </summary>
		[DataMember(Order = 24, Name = "PRXC.SSN")]
		public string PrxcSsn { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.PERSON.ID
		/// </summary>
		[DataMember(Order = 25, Name = "PRXC.PERSON.ID")]
		public List<string> PrxcPersonId { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.SCORE
		/// </summary>
		[DataMember(Order = 26, Name = "PRXC.SCORE")]
		public List<int?> PrxcScore { get; set; }
		
		/// <summary>
		/// CDD Name: PRXC.CATEGORY
		/// </summary>
		[DataMember(Order = 27, Name = "PRXC.CATEGORY")]
		public List<string> PrxcCategory { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<ProxyCandidatesProxyMatchResults> ProxyMatchResultsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: PROXY.MATCH.RESULTS
			
			ProxyMatchResultsEntityAssociation = new List<ProxyCandidatesProxyMatchResults>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(PrxcPersonId != null)
			{
				int numProxyMatchResults = PrxcPersonId.Count;
				if (PrxcScore !=null && PrxcScore.Count > numProxyMatchResults) numProxyMatchResults = PrxcScore.Count;
				if (PrxcCategory !=null && PrxcCategory.Count > numProxyMatchResults) numProxyMatchResults = PrxcCategory.Count;

				for (int i = 0; i < numProxyMatchResults; i++)
				{

					string value0 = "";
					if (PrxcPersonId != null && i < PrxcPersonId.Count)
					{
						value0 = PrxcPersonId[i];
					}


					int? value1 = null;
					if (PrxcScore != null && i < PrxcScore.Count)
					{
						value1 = PrxcScore[i];
					}


					string value2 = "";
					if (PrxcCategory != null && i < PrxcCategory.Count)
					{
						value2 = PrxcCategory[i];
					}

					ProxyMatchResultsEntityAssociation.Add(new ProxyCandidatesProxyMatchResults( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class ProxyCandidatesProxyMatchResults
	{
		public string PrxcPersonIdAssocMember;	
		public int? PrxcScoreAssocMember;	
		public string PrxcCategoryAssocMember;	
		public ProxyCandidatesProxyMatchResults() {}
		public ProxyCandidatesProxyMatchResults(
			string inPrxcPersonId,
			int? inPrxcScore,
			string inPrxcCategory)
		{
			PrxcPersonIdAssocMember = inPrxcPersonId;
			PrxcScoreAssocMember = inPrxcScore;
			PrxcCategoryAssocMember = inPrxcCategory;
		}
	}
}
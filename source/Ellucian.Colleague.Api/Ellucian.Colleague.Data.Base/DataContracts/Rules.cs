//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 10:55:17 AM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: RULES
//     Application: CORE
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Base.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Rules")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 10:55:17 AM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "RULES", EntityType = "PHYS")]
	public class Rules : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: RL.CHECK.DATA.ELEMENTS
		/// </summary>
		[DataMember(Order = 5, Name = "RL.CHECK.DATA.ELEMENTS")]
		public List<string> RlCheckDataElements { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.OPERATORS
		/// </summary>
		[DataMember(Order = 6, Name = "RL.CHECK.OPERATORS")]
		public List<string> RlCheckOperators { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.VALUES
		/// </summary>
		[DataMember(Order = 7, Name = "RL.CHECK.VALUES")]
		public List<string> RlCheckValues { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.DATA.USING
		/// </summary>
		[DataMember(Order = 8, Name = "RL.CHECK.DATA.USING")]
		public List<string> RlCheckDataUsing { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.DATA.WHEN
		/// </summary>
		[DataMember(Order = 9, Name = "RL.CHECK.DATA.WHEN")]
		public List<string> RlCheckDataWhen { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.DATA.WHEN.OPER
		/// </summary>
		[DataMember(Order = 10, Name = "RL.CHECK.DATA.WHEN.OPER")]
		public List<string> RlCheckDataWhenOper { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.DATA.WHEN.VALUE
		/// </summary>
		[DataMember(Order = 11, Name = "RL.CHECK.DATA.WHEN.VALUE")]
		public List<string> RlCheckDataWhenValue { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.VALUE.USING
		/// </summary>
		[DataMember(Order = 12, Name = "RL.CHECK.VALUE.USING")]
		public List<string> RlCheckValueUsing { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.VALUE.WHEN
		/// </summary>
		[DataMember(Order = 13, Name = "RL.CHECK.VALUE.WHEN")]
		public List<string> RlCheckValueWhen { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.VALUE.WHEN.OPER
		/// </summary>
		[DataMember(Order = 14, Name = "RL.CHECK.VALUE.WHEN.OPER")]
		public List<string> RlCheckValueWhenOper { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.VALUE.WHEN.VALUE
		/// </summary>
		[DataMember(Order = 15, Name = "RL.CHECK.VALUE.WHEN.VALUE")]
		public List<string> RlCheckValueWhenValue { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.CONNECTOR
		/// </summary>
		[DataMember(Order = 16, Name = "RL.CHECK.CONNECTOR")]
		public List<string> RlCheckConnector { get; set; }
		
		/// <summary>
		/// CDD Name: RL.PRIMARY.VIEW
		/// </summary>
		[DataMember(Order = 17, Name = "RL.PRIMARY.VIEW")]
		public string RlPrimaryView { get; set; }
		
		/// <summary>
		/// CDD Name: RL.CHECK.FAILURE.MSG
		/// </summary>
		[DataMember(Order = 21, Name = "RL.CHECK.FAILURE.MSG")]
		public List<string> RlCheckFailureMsg { get; set; }
		
		/// <summary>
		/// CDD Name: RL.SUBROUTINE.NAME
		/// </summary>
		[DataMember(Order = 22, Name = "RL.SUBROUTINE.NAME")]
		public string RlSubroutineName { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RulesRulesCheck> RulesCheckEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: RULES.CHECK
			
			RulesCheckEntityAssociation = new List<RulesRulesCheck>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RlCheckConnector != null)
			{
				int numRulesCheck = RlCheckConnector.Count;
				if (RlCheckDataElements !=null && RlCheckDataElements.Count > numRulesCheck) numRulesCheck = RlCheckDataElements.Count;
				if (RlCheckOperators !=null && RlCheckOperators.Count > numRulesCheck) numRulesCheck = RlCheckOperators.Count;
				if (RlCheckValues !=null && RlCheckValues.Count > numRulesCheck) numRulesCheck = RlCheckValues.Count;
				if (RlCheckDataUsing !=null && RlCheckDataUsing.Count > numRulesCheck) numRulesCheck = RlCheckDataUsing.Count;
				if (RlCheckDataWhen !=null && RlCheckDataWhen.Count > numRulesCheck) numRulesCheck = RlCheckDataWhen.Count;
				if (RlCheckDataWhenOper !=null && RlCheckDataWhenOper.Count > numRulesCheck) numRulesCheck = RlCheckDataWhenOper.Count;
				if (RlCheckDataWhenValue !=null && RlCheckDataWhenValue.Count > numRulesCheck) numRulesCheck = RlCheckDataWhenValue.Count;
				if (RlCheckValueUsing !=null && RlCheckValueUsing.Count > numRulesCheck) numRulesCheck = RlCheckValueUsing.Count;
				if (RlCheckValueWhen !=null && RlCheckValueWhen.Count > numRulesCheck) numRulesCheck = RlCheckValueWhen.Count;
				if (RlCheckValueWhenOper !=null && RlCheckValueWhenOper.Count > numRulesCheck) numRulesCheck = RlCheckValueWhenOper.Count;
				if (RlCheckValueWhenValue !=null && RlCheckValueWhenValue.Count > numRulesCheck) numRulesCheck = RlCheckValueWhenValue.Count;
				if (RlCheckFailureMsg !=null && RlCheckFailureMsg.Count > numRulesCheck) numRulesCheck = RlCheckFailureMsg.Count;

				for (int i = 0; i < numRulesCheck; i++)
				{

					string value0 = "";
					if (RlCheckDataElements != null && i < RlCheckDataElements.Count)
					{
						value0 = RlCheckDataElements[i];
					}


					string value1 = "";
					if (RlCheckOperators != null && i < RlCheckOperators.Count)
					{
						value1 = RlCheckOperators[i];
					}


					string value2 = "";
					if (RlCheckValues != null && i < RlCheckValues.Count)
					{
						value2 = RlCheckValues[i];
					}


					string value3 = "";
					if (RlCheckDataUsing != null && i < RlCheckDataUsing.Count)
					{
						value3 = RlCheckDataUsing[i];
					}


					string value4 = "";
					if (RlCheckDataWhen != null && i < RlCheckDataWhen.Count)
					{
						value4 = RlCheckDataWhen[i];
					}


					string value5 = "";
					if (RlCheckDataWhenOper != null && i < RlCheckDataWhenOper.Count)
					{
						value5 = RlCheckDataWhenOper[i];
					}


					string value6 = "";
					if (RlCheckDataWhenValue != null && i < RlCheckDataWhenValue.Count)
					{
						value6 = RlCheckDataWhenValue[i];
					}


					string value7 = "";
					if (RlCheckValueUsing != null && i < RlCheckValueUsing.Count)
					{
						value7 = RlCheckValueUsing[i];
					}


					string value8 = "";
					if (RlCheckValueWhen != null && i < RlCheckValueWhen.Count)
					{
						value8 = RlCheckValueWhen[i];
					}


					string value9 = "";
					if (RlCheckValueWhenOper != null && i < RlCheckValueWhenOper.Count)
					{
						value9 = RlCheckValueWhenOper[i];
					}


					string value10 = "";
					if (RlCheckValueWhenValue != null && i < RlCheckValueWhenValue.Count)
					{
						value10 = RlCheckValueWhenValue[i];
					}


					string value11 = "";
					if (RlCheckConnector != null && i < RlCheckConnector.Count)
					{
						value11 = RlCheckConnector[i];
					}


					string value12 = "";
					if (RlCheckFailureMsg != null && i < RlCheckFailureMsg.Count)
					{
						value12 = RlCheckFailureMsg[i];
					}

					RulesCheckEntityAssociation.Add(new RulesRulesCheck( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class RulesRulesCheck
	{
		public string RlCheckDataElementsAssocMember;	
		public string RlCheckOperatorsAssocMember;	
		public string RlCheckValuesAssocMember;	
		public string RlCheckDataUsingAssocMember;	
		public string RlCheckDataWhenAssocMember;	
		public string RlCheckDataWhenOperAssocMember;	
		public string RlCheckDataWhenValueAssocMember;	
		public string RlCheckValueUsingAssocMember;	
		public string RlCheckValueWhenAssocMember;	
		public string RlCheckValueWhenOperAssocMember;	
		public string RlCheckValueWhenValueAssocMember;	
		public string RlCheckConnectorAssocMember;	
		public string RlCheckFailureMsgAssocMember;	
		public RulesRulesCheck() {}
		public RulesRulesCheck(
			string inRlCheckDataElements,
			string inRlCheckOperators,
			string inRlCheckValues,
			string inRlCheckDataUsing,
			string inRlCheckDataWhen,
			string inRlCheckDataWhenOper,
			string inRlCheckDataWhenValue,
			string inRlCheckValueUsing,
			string inRlCheckValueWhen,
			string inRlCheckValueWhenOper,
			string inRlCheckValueWhenValue,
			string inRlCheckConnector,
			string inRlCheckFailureMsg)
		{
			RlCheckDataElementsAssocMember = inRlCheckDataElements;
			RlCheckOperatorsAssocMember = inRlCheckOperators;
			RlCheckValuesAssocMember = inRlCheckValues;
			RlCheckDataUsingAssocMember = inRlCheckDataUsing;
			RlCheckDataWhenAssocMember = inRlCheckDataWhen;
			RlCheckDataWhenOperAssocMember = inRlCheckDataWhenOper;
			RlCheckDataWhenValueAssocMember = inRlCheckDataWhenValue;
			RlCheckValueUsingAssocMember = inRlCheckValueUsing;
			RlCheckValueWhenAssocMember = inRlCheckValueWhen;
			RlCheckValueWhenOperAssocMember = inRlCheckValueWhenOper;
			RlCheckValueWhenValueAssocMember = inRlCheckValueWhenValue;
			RlCheckConnectorAssocMember = inRlCheckConnector;
			RlCheckFailureMsgAssocMember = inRlCheckFailureMsg;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 5/27/2020 10:39:48 AM by user bsf1
//
//     Type: ENTITY
//     Entity: BUD.WORK
//     Application: CF
//     Environment: dvcoll-2019
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.BudgetManagement.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "BudWork")]
	[ColleagueDataContract(GeneratedDateTime = "5/27/2020 10:39:48 AM", User = "bsf1")]
	[EntityDataContract(EntityName = "BUD.WORK", EntityType = "PHYS")]
	public class BudWork : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: BW.TITLE
		/// </summary>
		[DataMember(Order = 0, Name = "BW.TITLE")]
		public string BwTitle { get; set; }
		
		/// <summary>
		/// CDD Name: BW.EXPENSE.ACCT
		/// </summary>
		[DataMember(Order = 1, Name = "BW.EXPENSE.ACCT")]
		public string BwExpenseAcct { get; set; }
		
		/// <summary>
		/// CDD Name: BW.LINE.AMT
		/// </summary>
		[DataMember(Order = 4, Name = "BW.LINE.AMT")]
		public long? BwLineAmt { get; set; }
		
		/// <summary>
		/// CDD Name: BW.COMP1.AMOUNT
		/// </summary>
		[DataMember(Order = 5, Name = "BW.COMP1.AMOUNT")]
		public long? BwComp1Amount { get; set; }
		
		/// <summary>
		/// CDD Name: BW.COMP2.AMOUNT
		/// </summary>
		[DataMember(Order = 6, Name = "BW.COMP2.AMOUNT")]
		public long? BwComp2Amount { get; set; }
		
		/// <summary>
		/// CDD Name: BW.COMP3.AMOUNT
		/// </summary>
		[DataMember(Order = 7, Name = "BW.COMP3.AMOUNT")]
		public long? BwComp3Amount { get; set; }
		
		/// <summary>
		/// CDD Name: BW.CONTROL.LINK
		/// </summary>
		[DataMember(Order = 8, Name = "BW.CONTROL.LINK")]
		public string BwControlLink { get; set; }
		
		/// <summary>
		/// CDD Name: BW.NOTES
		/// </summary>
		[DataMember(Order = 9, Name = "BW.NOTES")]
		public List<string> BwNotes { get; set; }
		
		/// <summary>
		/// CDD Name: BW.VERSION
		/// </summary>
		[DataMember(Order = 19, Name = "BW.VERSION")]
		public List<string> BwVersion { get; set; }
		
		/// <summary>
		/// CDD Name: BW.VLIMIT.AMT
		/// </summary>
		[DataMember(Order = 20, Name = "BW.VLIMIT.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BwVlimitAmt { get; set; }
		
		/// <summary>
		/// CDD Name: BW.VLINE.AMT
		/// </summary>
		[DataMember(Order = 21, Name = "BW.VLINE.AMT")]
		public List<long?> BwVlineAmt { get; set; }
		
		/// <summary>
		/// CDD Name: BW.VSCENARIO.AMOUNTS
		/// </summary>
		[DataMember(Order = 22, Name = "BW.VSCENARIO.AMOUNTS")]
		public List<long?> BwVscenarioAmounts { get; set; }
		
		/// <summary>
		/// CDD Name: BW.FORMULA
		/// </summary>
		[DataMember(Order = 26, Name = "BW.FORMULA")]
		public string BwFormula { get; set; }
		
		/// <summary>
		/// CDD Name: BW.OFCR.LINK
		/// </summary>
		[DataMember(Order = 27, Name = "BW.OFCR.LINK")]
		public string BwOfcrLink { get; set; }
		
		/// <summary>
		/// CDD Name: BW.VPOSCTRL.AMT
		/// </summary>
		[DataMember(Order = 34, Name = "BW.VPOSCTRL.AMT")]
		public List<long?> BwVposctrlAmt { get; set; }
		
		/// <summary>
		/// CDD Name: BW.COMP4.AMOUNT
		/// </summary>
		[DataMember(Order = 35, Name = "BW.COMP4.AMOUNT")]
		public long? BwComp4Amount { get; set; }
		
		/// <summary>
		/// CDD Name: BW.COMP5.AMOUNT
		/// </summary>
		[DataMember(Order = 36, Name = "BW.COMP5.AMOUNT")]
		public long? BwComp5Amount { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BudWorkBwfreeze> BwfreezeEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: BWFREEZE
			
			BwfreezeEntityAssociation = new List<BudWorkBwfreeze>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BwVersion != null)
			{
				int numBwfreeze = BwVersion.Count;
				if (BwVlimitAmt !=null && BwVlimitAmt.Count > numBwfreeze) numBwfreeze = BwVlimitAmt.Count;
				if (BwVlineAmt !=null && BwVlineAmt.Count > numBwfreeze) numBwfreeze = BwVlineAmt.Count;
				if (BwVscenarioAmounts !=null && BwVscenarioAmounts.Count > numBwfreeze) numBwfreeze = BwVscenarioAmounts.Count;
				if (BwVposctrlAmt !=null && BwVposctrlAmt.Count > numBwfreeze) numBwfreeze = BwVposctrlAmt.Count;

				for (int i = 0; i < numBwfreeze; i++)
				{

					string value0 = "";
					if (BwVersion != null && i < BwVersion.Count)
					{
						value0 = BwVersion[i];
					}


					Decimal? value1 = null;
					if (BwVlimitAmt != null && i < BwVlimitAmt.Count)
					{
						value1 = BwVlimitAmt[i];
					}


					long? value2 = null;
					if (BwVlineAmt != null && i < BwVlineAmt.Count)
					{
						value2 = BwVlineAmt[i];
					}


					long? value3 = null;
					if (BwVscenarioAmounts != null && i < BwVscenarioAmounts.Count)
					{
						value3 = BwVscenarioAmounts[i];
					}


					long? value4 = null;
					if (BwVposctrlAmt != null && i < BwVposctrlAmt.Count)
					{
						value4 = BwVposctrlAmt[i];
					}

					BwfreezeEntityAssociation.Add(new BudWorkBwfreeze( value0, value1, value2, value3, value4));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class BudWorkBwfreeze
	{
		public string BwVersionAssocMember;	
		public Decimal? BwVlimitAmtAssocMember;	
		public long? BwVlineAmtAssocMember;	
		public long? BwVscenarioAmountsAssocMember;	
		public long? BwVposctrlAmtAssocMember;	
		public BudWorkBwfreeze() {}
		public BudWorkBwfreeze(
			string inBwVersion,
			Decimal? inBwVlimitAmt,
			long? inBwVlineAmt,
			long? inBwVscenarioAmounts,
			long? inBwVposctrlAmt)
		{
			BwVersionAssocMember = inBwVersion;
			BwVlimitAmtAssocMember = inBwVlimitAmt;
			BwVlineAmtAssocMember = inBwVlineAmt;
			BwVscenarioAmountsAssocMember = inBwVscenarioAmounts;
			BwVposctrlAmtAssocMember = inBwVposctrlAmt;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 8/11/2018 2:27:09 AM by user gtt_dvcoll_wstst01
//
//     Type: ENTITY
//     Entity: BUDGET.ENTRIES
//     Application: CF
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.ColleagueFinance.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "BudgetEntries")]
	[ColleagueDataContract(GeneratedDateTime = "8/11/2018 2:27:09 AM", User = "gtt_dvcoll_wstst01")]
	[EntityDataContract(EntityName = "BUDGET.ENTRIES", EntityType = "PHYS")]
	public class BudgetEntries : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: BGTE.GL.NO
		/// </summary>
		[DataMember(Order = 0, Name = "BGTE.GL.NO")]
		public List<string> BgteGlNo { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.DESCRIPTION
		/// </summary>
		[DataMember(Order = 1, Name = "BGTE.DESCRIPTION")]
		public List<string> BgteDescription { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.DEBIT
		/// </summary>
		[DataMember(Order = 2, Name = "BGTE.DEBIT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BgteDebit { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.CREDIT
		/// </summary>
		[DataMember(Order = 3, Name = "BGTE.CREDIT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BgteCredit { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.TR.DATE
		/// </summary>
		[DataMember(Order = 4, Name = "BGTE.TR.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? BgteTrDate { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.SOURCE
		/// </summary>
		[DataMember(Order = 6, Name = "BGTE.SOURCE")]
		public string BgteSource { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.AUTHOR
		/// </summary>
		[DataMember(Order = 8, Name = "BGTE.AUTHOR")]
		public string BgteAuthor { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.COMMENTS
		/// </summary>
		[DataMember(Order = 9, Name = "BGTE.COMMENTS")]
		public string BgteComments { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.ROLLUP.ACCOUNT
		/// </summary>
		[DataMember(Order = 11, Name = "BGTE.ROLLUP.ACCOUNT")]
		public List<string> BgteRollupAccount { get; set; }
		
		/// <summary>
		/// CDD Name: BUDGET.ENTRIES.ADDOPR
		/// </summary>
		[DataMember(Order = 24, Name = "BUDGET.ENTRIES.ADDOPR")]
		public string BudgetEntriesAddopr { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.AUTHORIZATIONS
		/// </summary>
		[DataMember(Order = 25, Name = "BGTE.AUTHORIZATIONS")]
		public List<string> BgteAuthorizations { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.AUTHORIZATION.DATES
		/// </summary>
		[DataMember(Order = 26, Name = "BGTE.AUTHORIZATION.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> BgteAuthorizationDates { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.AUTHORIZATION.LEVELS
		/// </summary>
		[DataMember(Order = 27, Name = "BGTE.AUTHORIZATION.LEVELS")]
		public List<string> BgteAuthorizationLevels { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.NEXT.APPROVAL.IDS
		/// </summary>
		[DataMember(Order = 28, Name = "BGTE.NEXT.APPROVAL.IDS")]
		public List<string> BgteNextApprovalIds { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.APPROVAL.LEVELS
		/// </summary>
		[DataMember(Order = 29, Name = "BGTE.APPROVAL.LEVELS")]
		public List<string> BgteApprovalLevels { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.STATUS
		/// </summary>
		[DataMember(Order = 30, Name = "BGTE.STATUS")]
		public List<string> BgteStatus { get; set; }
		
		/// <summary>
		/// CDD Name: BGTE.STATUS.DATE
		/// </summary>
		[DataMember(Order = 31, Name = "BGTE.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> BgteStatusDate { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BudgetEntriesBgteData> BgteDataEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BudgetEntriesBgteAuth> BgteAuthEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BudgetEntriesBgteApproval> BgteApprovalEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BudgetEntriesBgteStat> BgteStatEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: BGTE.DATA
			
			BgteDataEntityAssociation = new List<BudgetEntriesBgteData>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BgteGlNo != null)
			{
				int numBgteData = BgteGlNo.Count;
				if (BgteDescription !=null && BgteDescription.Count > numBgteData) numBgteData = BgteDescription.Count;
				if (BgteDebit !=null && BgteDebit.Count > numBgteData) numBgteData = BgteDebit.Count;
				if (BgteCredit !=null && BgteCredit.Count > numBgteData) numBgteData = BgteCredit.Count;
				if (BgteRollupAccount !=null && BgteRollupAccount.Count > numBgteData) numBgteData = BgteRollupAccount.Count;

				for (int i = 0; i < numBgteData; i++)
				{

					string value0 = "";
					if (BgteGlNo != null && i < BgteGlNo.Count)
					{
						value0 = BgteGlNo[i];
					}


					string value1 = "";
					if (BgteDescription != null && i < BgteDescription.Count)
					{
						value1 = BgteDescription[i];
					}


					Decimal? value2 = null;
					if (BgteDebit != null && i < BgteDebit.Count)
					{
						value2 = BgteDebit[i];
					}


					Decimal? value3 = null;
					if (BgteCredit != null && i < BgteCredit.Count)
					{
						value3 = BgteCredit[i];
					}


					string value4 = "";
					if (BgteRollupAccount != null && i < BgteRollupAccount.Count)
					{
						value4 = BgteRollupAccount[i];
					}

					BgteDataEntityAssociation.Add(new BudgetEntriesBgteData( value0, value1, value2, value3, value4));
				}
			}
			// EntityAssociation Name: BGTE.AUTH
			
			BgteAuthEntityAssociation = new List<BudgetEntriesBgteAuth>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BgteAuthorizations != null)
			{
				int numBgteAuth = BgteAuthorizations.Count;
				if (BgteAuthorizationDates !=null && BgteAuthorizationDates.Count > numBgteAuth) numBgteAuth = BgteAuthorizationDates.Count;
				if (BgteAuthorizationLevels !=null && BgteAuthorizationLevels.Count > numBgteAuth) numBgteAuth = BgteAuthorizationLevels.Count;

				for (int i = 0; i < numBgteAuth; i++)
				{

					string value0 = "";
					if (BgteAuthorizations != null && i < BgteAuthorizations.Count)
					{
						value0 = BgteAuthorizations[i];
					}


					DateTime? value1 = null;
					if (BgteAuthorizationDates != null && i < BgteAuthorizationDates.Count)
					{
						value1 = BgteAuthorizationDates[i];
					}


					string value2 = "";
					if (BgteAuthorizationLevels != null && i < BgteAuthorizationLevels.Count)
					{
						value2 = BgteAuthorizationLevels[i];
					}

					BgteAuthEntityAssociation.Add(new BudgetEntriesBgteAuth( value0, value1, value2));
				}
			}
			// EntityAssociation Name: BGTE.APPROVAL
			
			BgteApprovalEntityAssociation = new List<BudgetEntriesBgteApproval>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BgteNextApprovalIds != null)
			{
				int numBgteApproval = BgteNextApprovalIds.Count;
				if (BgteApprovalLevels !=null && BgteApprovalLevels.Count > numBgteApproval) numBgteApproval = BgteApprovalLevels.Count;

				for (int i = 0; i < numBgteApproval; i++)
				{

					string value0 = "";
					if (BgteNextApprovalIds != null && i < BgteNextApprovalIds.Count)
					{
						value0 = BgteNextApprovalIds[i];
					}


					string value1 = "";
					if (BgteApprovalLevels != null && i < BgteApprovalLevels.Count)
					{
						value1 = BgteApprovalLevels[i];
					}

					BgteApprovalEntityAssociation.Add(new BudgetEntriesBgteApproval( value0, value1));
				}
			}
			// EntityAssociation Name: BGTE.STAT
			
			BgteStatEntityAssociation = new List<BudgetEntriesBgteStat>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BgteStatus != null)
			{
				int numBgteStat = BgteStatus.Count;
				if (BgteStatusDate !=null && BgteStatusDate.Count > numBgteStat) numBgteStat = BgteStatusDate.Count;

				for (int i = 0; i < numBgteStat; i++)
				{

					string value0 = "";
					if (BgteStatus != null && i < BgteStatus.Count)
					{
						value0 = BgteStatus[i];
					}


					DateTime? value1 = null;
					if (BgteStatusDate != null && i < BgteStatusDate.Count)
					{
						value1 = BgteStatusDate[i];
					}

					BgteStatEntityAssociation.Add(new BudgetEntriesBgteStat( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class BudgetEntriesBgteData
	{
		public string BgteGlNoAssocMember;	
		public string BgteDescriptionAssocMember;	
		public Decimal? BgteDebitAssocMember;	
		public Decimal? BgteCreditAssocMember;	
		public string BgteRollupAccountAssocMember;	
		public BudgetEntriesBgteData() {}
		public BudgetEntriesBgteData(
			string inBgteGlNo,
			string inBgteDescription,
			Decimal? inBgteDebit,
			Decimal? inBgteCredit,
			string inBgteRollupAccount)
		{
			BgteGlNoAssocMember = inBgteGlNo;
			BgteDescriptionAssocMember = inBgteDescription;
			BgteDebitAssocMember = inBgteDebit;
			BgteCreditAssocMember = inBgteCredit;
			BgteRollupAccountAssocMember = inBgteRollupAccount;
		}
	}
	
	[Serializable]
	public class BudgetEntriesBgteAuth
	{
		public string BgteAuthorizationsAssocMember;	
		public DateTime? BgteAuthorizationDatesAssocMember;	
		public string BgteAuthorizationLevelsAssocMember;	
		public BudgetEntriesBgteAuth() {}
		public BudgetEntriesBgteAuth(
			string inBgteAuthorizations,
			DateTime? inBgteAuthorizationDates,
			string inBgteAuthorizationLevels)
		{
			BgteAuthorizationsAssocMember = inBgteAuthorizations;
			BgteAuthorizationDatesAssocMember = inBgteAuthorizationDates;
			BgteAuthorizationLevelsAssocMember = inBgteAuthorizationLevels;
		}
	}
	
	[Serializable]
	public class BudgetEntriesBgteApproval
	{
		public string BgteNextApprovalIdsAssocMember;	
		public string BgteApprovalLevelsAssocMember;	
		public BudgetEntriesBgteApproval() {}
		public BudgetEntriesBgteApproval(
			string inBgteNextApprovalIds,
			string inBgteApprovalLevels)
		{
			BgteNextApprovalIdsAssocMember = inBgteNextApprovalIds;
			BgteApprovalLevelsAssocMember = inBgteApprovalLevels;
		}
	}
	
	[Serializable]
	public class BudgetEntriesBgteStat
	{
		public string BgteStatusAssocMember;	
		public DateTime? BgteStatusDateAssocMember;	
		public BudgetEntriesBgteStat() {}
		public BudgetEntriesBgteStat(
			string inBgteStatus,
			DateTime? inBgteStatusDate)
		{
			BgteStatusAssocMember = inBgteStatus;
			BgteStatusDateAssocMember = inBgteStatusDate;
		}
	}
}
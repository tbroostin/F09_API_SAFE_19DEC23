//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 2/5/2018 12:53:17 PM by user sbhole1
//
//     Type: ENTITY
//     Entity: FIXED.ASSETS
//     Application: CORE
//     Environment: dvcoll_wstst01
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.ColleagueFinance.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "FixedAssets")]
	[ColleagueDataContract(GeneratedDateTime = "2/5/2018 12:53:17 PM", User = "sbhole1")]
	[EntityDataContract(EntityName = "FIXED.ASSETS", EntityType = "PHYS")]
	public class FixedAssets : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: FIX.CAPITALIZE
		/// </summary>
		[DataMember(Order = 0, Name = "FIX.CAPITALIZE")]
		public string FixCapitalize { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ASSET.TYPE
		/// </summary>
		[DataMember(Order = 2, Name = "FIX.ASSET.TYPE")]
		public string FixAssetType { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ASSET.CATEGORY
		/// </summary>
		[DataMember(Order = 3, Name = "FIX.ASSET.CATEGORY")]
		public string FixAssetCategory { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.DESC
		/// </summary>
		[DataMember(Order = 4, Name = "FIX.DESC")]
		public string FixDesc { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.LOCATION
		/// </summary>
		[DataMember(Order = 5, Name = "FIX.LOCATION")]
		public string FixLocation { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.BLDG
		/// </summary>
		[DataMember(Order = 7, Name = "FIX.BLDG")]
		public string FixBldg { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ACQUIS.METHOD
		/// </summary>
		[DataMember(Order = 17, Name = "FIX.ACQUIS.METHOD")]
		public string FixAcquisMethod { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ACQUIS.COST
		/// </summary>
		[DataMember(Order = 18, Name = "FIX.ACQUIS.COST")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? FixAcquisCost { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.SALVAGE.VALUE
		/// </summary>
		[DataMember(Order = 19, Name = "FIX.SALVAGE.VALUE")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? FixSalvageValue { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.USEFUL.LIFE
		/// </summary>
		[DataMember(Order = 20, Name = "FIX.USEFUL.LIFE")]
		public int? FixUsefulLife { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.CALC.METHOD
		/// </summary>
		[DataMember(Order = 21, Name = "FIX.CALC.METHOD")]
		public string FixCalcMethod { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.CALC.ACCT
		/// </summary>
		[DataMember(Order = 22, Name = "FIX.CALC.ACCT")]
		public string FixCalcAcct { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.VALUE.DATE
		/// </summary>
		[DataMember(Order = 23, Name = "FIX.VALUE.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FixValueDate { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.VALUE.METHOD
		/// </summary>
		[DataMember(Order = 24, Name = "FIX.VALUE.METHOD")]
		public List<string> FixValueMethod { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.VALUE.AMT
		/// </summary>
		[DataMember(Order = 25, Name = "FIX.VALUE.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> FixValueAmt { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.VALUE.CO
		/// </summary>
		[DataMember(Order = 26, Name = "FIX.VALUE.CO")]
		public List<string> FixValueCo { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.DISPOSAL.DATE
		/// </summary>
		[DataMember(Order = 27, Name = "FIX.DISPOSAL.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? FixDisposalDate { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ALLOW.DATE
		/// </summary>
		[DataMember(Order = 30, Name = "FIX.ALLOW.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FixAllowDate { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ALLOW.AMT
		/// </summary>
		[DataMember(Order = 31, Name = "FIX.ALLOW.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> FixAllowAmt { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ALLOW.REFNO
		/// </summary>
		[DataMember(Order = 32, Name = "FIX.ALLOW.REFNO")]
		public List<string> FixAllowRefno { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.RENEWAL.DATE
		/// </summary>
		[DataMember(Order = 33, Name = "FIX.RENEWAL.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FixRenewalDate { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.RENEWAL.AMT
		/// </summary>
		[DataMember(Order = 34, Name = "FIX.RENEWAL.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> FixRenewalAmt { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.REV.COST
		/// </summary>
		[DataMember(Order = 50, Name = "FIX.REV.COST")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> FixRevCost { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.REM.LIFE
		/// </summary>
		[DataMember(Order = 51, Name = "FIX.REM.LIFE")]
		public List<int?> FixRemLife { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.RENEWAL.YRS
		/// </summary>
		[DataMember(Order = 52, Name = "FIX.RENEWAL.YRS")]
		public List<int?> FixRenewalYrs { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.ROOM
		/// </summary>
		[DataMember(Order = 74, Name = "FIX.ROOM")]
		public string FixRoom { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.STEWARD.ID
		/// </summary>
		[DataMember(Order = 75, Name = "FIX.STEWARD.ID")]
		public string FixStewardId { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.INSURANCE.ID
		/// </summary>
		[DataMember(Order = 76, Name = "FIX.INSURANCE.ID")]
		public string FixInsuranceId { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.APPRAISAL.REASON
		/// </summary>
		[DataMember(Order = 82, Name = "FIX.APPRAISAL.REASON")]
		public List<string> FixAppraisalReason { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.APPRAISAL.ON.FILE.FLAG
		/// </summary>
		[DataMember(Order = 83, Name = "FIX.APPRAISAL.ON.FILE.FLAG")]
		public List<string> FixAppraisalOnFileFlag { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.APPRAISAL.DATE
		/// </summary>
		[DataMember(Order = 84, Name = "FIX.APPRAISAL.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FixAppraisalDate { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.APPRAISAL.CONTACT
		/// </summary>
		[DataMember(Order = 86, Name = "FIX.APPRAISAL.CONTACT")]
		public List<string> FixAppraisalContact { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.INV.COND
		/// </summary>
		[DataMember(Order = 103, Name = "FIX.INV.COND")]
		public string FixInvCond { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.PROPERTY.TAG
		/// </summary>
		[DataMember(Order = 107, Name = "FIX.PROPERTY.TAG")]
		public string FixPropertyTag { get; set; }
		
		/// <summary>
		/// CDD Name: FIX.RENEWAL.DESC
		/// </summary>
		[DataMember(Order = 113, Name = "FIX.RENEWAL.DESC")]
		public List<string> FixRenewalDesc { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<FixedAssetsValuation> ValuationEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<FixedAssetsAllow> AllowEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<FixedAssetsFixRenewals> FixRenewalsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: VALUATION
			
			ValuationEntityAssociation = new List<FixedAssetsValuation>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FixValueDate != null)
			{
				int numValuation = FixValueDate.Count;
				if (FixValueMethod !=null && FixValueMethod.Count > numValuation) numValuation = FixValueMethod.Count;
				if (FixValueAmt !=null && FixValueAmt.Count > numValuation) numValuation = FixValueAmt.Count;
				if (FixValueCo !=null && FixValueCo.Count > numValuation) numValuation = FixValueCo.Count;
				if (FixAppraisalReason !=null && FixAppraisalReason.Count > numValuation) numValuation = FixAppraisalReason.Count;
				if (FixAppraisalOnFileFlag !=null && FixAppraisalOnFileFlag.Count > numValuation) numValuation = FixAppraisalOnFileFlag.Count;
				if (FixAppraisalDate !=null && FixAppraisalDate.Count > numValuation) numValuation = FixAppraisalDate.Count;
				if (FixAppraisalContact !=null && FixAppraisalContact.Count > numValuation) numValuation = FixAppraisalContact.Count;

				for (int i = 0; i < numValuation; i++)
				{

					DateTime? value0 = null;
					if (FixValueDate != null && i < FixValueDate.Count)
					{
						value0 = FixValueDate[i];
					}


					string value1 = "";
					if (FixValueMethod != null && i < FixValueMethod.Count)
					{
						value1 = FixValueMethod[i];
					}


					Decimal? value2 = null;
					if (FixValueAmt != null && i < FixValueAmt.Count)
					{
						value2 = FixValueAmt[i];
					}


					string value3 = "";
					if (FixValueCo != null && i < FixValueCo.Count)
					{
						value3 = FixValueCo[i];
					}


					string value4 = "";
					if (FixAppraisalReason != null && i < FixAppraisalReason.Count)
					{
						value4 = FixAppraisalReason[i];
					}


					string value5 = "";
					if (FixAppraisalOnFileFlag != null && i < FixAppraisalOnFileFlag.Count)
					{
						value5 = FixAppraisalOnFileFlag[i];
					}


					DateTime? value6 = null;
					if (FixAppraisalDate != null && i < FixAppraisalDate.Count)
					{
						value6 = FixAppraisalDate[i];
					}


					string value7 = "";
					if (FixAppraisalContact != null && i < FixAppraisalContact.Count)
					{
						value7 = FixAppraisalContact[i];
					}

					ValuationEntityAssociation.Add(new FixedAssetsValuation( value0, value1, value2, value3, value4, value5, value6, value7));
				}
			}
			// EntityAssociation Name: ALLOW
			
			AllowEntityAssociation = new List<FixedAssetsAllow>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FixAllowDate != null)
			{
				int numAllow = FixAllowDate.Count;
				if (FixAllowAmt !=null && FixAllowAmt.Count > numAllow) numAllow = FixAllowAmt.Count;
				if (FixAllowRefno !=null && FixAllowRefno.Count > numAllow) numAllow = FixAllowRefno.Count;

				for (int i = 0; i < numAllow; i++)
				{

					DateTime? value0 = null;
					if (FixAllowDate != null && i < FixAllowDate.Count)
					{
						value0 = FixAllowDate[i];
					}


					Decimal? value1 = null;
					if (FixAllowAmt != null && i < FixAllowAmt.Count)
					{
						value1 = FixAllowAmt[i];
					}


					string value2 = "";
					if (FixAllowRefno != null && i < FixAllowRefno.Count)
					{
						value2 = FixAllowRefno[i];
					}

					AllowEntityAssociation.Add(new FixedAssetsAllow( value0, value1, value2));
				}
			}
			// EntityAssociation Name: FIX.RENEWALS
			
			FixRenewalsEntityAssociation = new List<FixedAssetsFixRenewals>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FixRenewalDesc != null)
			{
				int numFixRenewals = FixRenewalDesc.Count;
				if (FixRenewalDate !=null && FixRenewalDate.Count > numFixRenewals) numFixRenewals = FixRenewalDate.Count;
				if (FixRenewalAmt !=null && FixRenewalAmt.Count > numFixRenewals) numFixRenewals = FixRenewalAmt.Count;
				if (FixRevCost !=null && FixRevCost.Count > numFixRenewals) numFixRenewals = FixRevCost.Count;
				if (FixRemLife !=null && FixRemLife.Count > numFixRenewals) numFixRenewals = FixRemLife.Count;
				if (FixRenewalYrs !=null && FixRenewalYrs.Count > numFixRenewals) numFixRenewals = FixRenewalYrs.Count;

				for (int i = 0; i < numFixRenewals; i++)
				{

					DateTime? value0 = null;
					if (FixRenewalDate != null && i < FixRenewalDate.Count)
					{
						value0 = FixRenewalDate[i];
					}


					Decimal? value1 = null;
					if (FixRenewalAmt != null && i < FixRenewalAmt.Count)
					{
						value1 = FixRenewalAmt[i];
					}


					Decimal? value2 = null;
					if (FixRevCost != null && i < FixRevCost.Count)
					{
						value2 = FixRevCost[i];
					}


					int? value3 = null;
					if (FixRemLife != null && i < FixRemLife.Count)
					{
						value3 = FixRemLife[i];
					}


					int? value4 = null;
					if (FixRenewalYrs != null && i < FixRenewalYrs.Count)
					{
						value4 = FixRenewalYrs[i];
					}


					string value5 = "";
					if (FixRenewalDesc != null && i < FixRenewalDesc.Count)
					{
						value5 = FixRenewalDesc[i];
					}

					FixRenewalsEntityAssociation.Add(new FixedAssetsFixRenewals( value0, value1, value2, value3, value4, value5));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class FixedAssetsValuation
	{
		public DateTime? FixValueDateAssocMember;	
		public string FixValueMethodAssocMember;	
		public Decimal? FixValueAmtAssocMember;	
		public string FixValueCoAssocMember;	
		public string FixAppraisalReasonAssocMember;	
		public string FixAppraisalOnFileFlagAssocMember;	
		public DateTime? FixAppraisalDateAssocMember;	
		public string FixAppraisalContactAssocMember;	
		public FixedAssetsValuation() {}
		public FixedAssetsValuation(
			DateTime? inFixValueDate,
			string inFixValueMethod,
			Decimal? inFixValueAmt,
			string inFixValueCo,
			string inFixAppraisalReason,
			string inFixAppraisalOnFileFlag,
			DateTime? inFixAppraisalDate,
			string inFixAppraisalContact)
		{
			FixValueDateAssocMember = inFixValueDate;
			FixValueMethodAssocMember = inFixValueMethod;
			FixValueAmtAssocMember = inFixValueAmt;
			FixValueCoAssocMember = inFixValueCo;
			FixAppraisalReasonAssocMember = inFixAppraisalReason;
			FixAppraisalOnFileFlagAssocMember = inFixAppraisalOnFileFlag;
			FixAppraisalDateAssocMember = inFixAppraisalDate;
			FixAppraisalContactAssocMember = inFixAppraisalContact;
		}
	}
	
	[Serializable]
	public class FixedAssetsAllow
	{
		public DateTime? FixAllowDateAssocMember;	
		public Decimal? FixAllowAmtAssocMember;	
		public string FixAllowRefnoAssocMember;	
		public FixedAssetsAllow() {}
		public FixedAssetsAllow(
			DateTime? inFixAllowDate,
			Decimal? inFixAllowAmt,
			string inFixAllowRefno)
		{
			FixAllowDateAssocMember = inFixAllowDate;
			FixAllowAmtAssocMember = inFixAllowAmt;
			FixAllowRefnoAssocMember = inFixAllowRefno;
		}
	}
	
	[Serializable]
	public class FixedAssetsFixRenewals
	{
		public DateTime? FixRenewalDateAssocMember;	
		public Decimal? FixRenewalAmtAssocMember;	
		public Decimal? FixRevCostAssocMember;	
		public int? FixRemLifeAssocMember;	
		public int? FixRenewalYrsAssocMember;	
		public string FixRenewalDescAssocMember;	
		public FixedAssetsFixRenewals() {}
		public FixedAssetsFixRenewals(
			DateTime? inFixRenewalDate,
			Decimal? inFixRenewalAmt,
			Decimal? inFixRevCost,
			int? inFixRemLife,
			int? inFixRenewalYrs,
			string inFixRenewalDesc)
		{
			FixRenewalDateAssocMember = inFixRenewalDate;
			FixRenewalAmtAssocMember = inFixRenewalAmt;
			FixRevCostAssocMember = inFixRevCost;
			FixRemLifeAssocMember = inFixRemLife;
			FixRenewalYrsAssocMember = inFixRenewalYrs;
			FixRenewalDescAssocMember = inFixRenewalDesc;
		}
	}
}
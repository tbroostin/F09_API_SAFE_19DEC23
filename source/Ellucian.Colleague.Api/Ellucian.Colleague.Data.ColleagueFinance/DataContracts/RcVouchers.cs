//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 1:22:10 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: RC.VOUCHERS
//     Application: CF
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.ColleagueFinance.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "RcVouchers")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 1:22:10 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "RC.VOUCHERS", EntityType = "PHYS")]
	public class RcVouchers : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: RCV.AUTHORIZATION.DATES
		/// </summary>
		[DataMember(Order = 0, Name = "RCV.AUTHORIZATION.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> RcvAuthorizationDates { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.RCVS.ID
		/// </summary>
		[DataMember(Order = 2, Name = "RCV.RCVS.ID")]
		public List<string> RcvRcvsId { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.EXCHANGE.RATE
		/// </summary>
		[DataMember(Order = 4, Name = "RCV.EXCHANGE.RATE")]
		[DisplayFormat(DataFormatString = "{0:N4}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? RcvExchangeRate { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.EXCHANGE.RATE.DATE
		/// </summary>
		[DataMember(Order = 5, Name = "RCV.EXCHANGE.RATE.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? RcvExchangeRateDate { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.STATUS
		/// </summary>
		[DataMember(Order = 6, Name = "RCV.STATUS")]
		public List<string> RcvStatus { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.STATUS.DATE
		/// </summary>
		[DataMember(Order = 7, Name = "RCV.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> RcvStatusDate { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.DATE
		/// </summary>
		[DataMember(Order = 16, Name = "RCV.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? RcvDate { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.AP.TYPE
		/// </summary>
		[DataMember(Order = 17, Name = "RCV.AP.TYPE")]
		public string RcvApType { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.CURRENCY.CODE
		/// </summary>
		[DataMember(Order = 20, Name = "RCV.CURRENCY.CODE")]
		public string RcvCurrencyCode { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.COMMENTS
		/// </summary>
		[DataMember(Order = 21, Name = "RCV.COMMENTS")]
		public string RcvComments { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.AUTHORIZATIONS
		/// </summary>
		[DataMember(Order = 22, Name = "RCV.AUTHORIZATIONS")]
		public List<string> RcvAuthorizations { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.VENDOR
		/// </summary>
		[DataMember(Order = 23, Name = "RCV.VENDOR")]
		public string RcvVendor { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.VEN.NAME
		/// </summary>
		[DataMember(Order = 24, Name = "RCV.VEN.NAME")]
		public List<string> RcvVenName { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.ITEMS.ID
		/// </summary>
		[DataMember(Order = 26, Name = "RCV.ITEMS.ID")]
		public List<string> RcvItemsId { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.DEFAULT.INVOICE.NO
		/// </summary>
		[DataMember(Order = 32, Name = "RCV.DEFAULT.INVOICE.NO")]
		public string RcvDefaultInvoiceNo { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.DEFAULT.INVOICE.DATE
		/// </summary>
		[DataMember(Order = 33, Name = "RCV.DEFAULT.INVOICE.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? RcvDefaultInvoiceDate { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.NEXT.APPROVAL.IDS
		/// </summary>
		[DataMember(Order = 44, Name = "RCV.NEXT.APPROVAL.IDS")]
		public List<string> RcvNextApprovalIds { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.MAINT.GL.TRAN.DATE
		/// </summary>
		[DataMember(Order = 45, Name = "RCV.MAINT.GL.TRAN.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? RcvMaintGlTranDate { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.APPROVAL.LEVELS
		/// </summary>
		[DataMember(Order = 56, Name = "RCV.APPROVAL.LEVELS")]
		public List<string> RcvApprovalLevels { get; set; }
		
		/// <summary>
		/// CDD Name: RCV.AUTHORIZATION.LEVELS
		/// </summary>
		[DataMember(Order = 57, Name = "RCV.AUTHORIZATION.LEVELS")]
		public List<string> RcvAuthorizationLevels { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RcVouchersRcvAuth> RcvAuthEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RcVouchersRcvStat> RcvStatEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RcVouchersRcvAppr> RcvApprEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: RCV.AUTH
			
			RcvAuthEntityAssociation = new List<RcVouchersRcvAuth>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RcvAuthorizations != null)
			{
				int numRcvAuth = RcvAuthorizations.Count;
				if (RcvAuthorizationDates !=null && RcvAuthorizationDates.Count > numRcvAuth) numRcvAuth = RcvAuthorizationDates.Count;
				if (RcvAuthorizationLevels !=null && RcvAuthorizationLevels.Count > numRcvAuth) numRcvAuth = RcvAuthorizationLevels.Count;

				for (int i = 0; i < numRcvAuth; i++)
				{

					DateTime? value0 = null;
					if (RcvAuthorizationDates != null && i < RcvAuthorizationDates.Count)
					{
						value0 = RcvAuthorizationDates[i];
					}


					string value1 = "";
					if (RcvAuthorizations != null && i < RcvAuthorizations.Count)
					{
						value1 = RcvAuthorizations[i];
					}


					string value2 = "";
					if (RcvAuthorizationLevels != null && i < RcvAuthorizationLevels.Count)
					{
						value2 = RcvAuthorizationLevels[i];
					}

					RcvAuthEntityAssociation.Add(new RcVouchersRcvAuth( value0, value1, value2));
				}
			}
			// EntityAssociation Name: RCV.STAT
			
			RcvStatEntityAssociation = new List<RcVouchersRcvStat>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RcvStatus != null)
			{
				int numRcvStat = RcvStatus.Count;
				if (RcvStatusDate !=null && RcvStatusDate.Count > numRcvStat) numRcvStat = RcvStatusDate.Count;

				for (int i = 0; i < numRcvStat; i++)
				{

					string value0 = "";
					if (RcvStatus != null && i < RcvStatus.Count)
					{
						value0 = RcvStatus[i];
					}


					DateTime? value1 = null;
					if (RcvStatusDate != null && i < RcvStatusDate.Count)
					{
						value1 = RcvStatusDate[i];
					}

					RcvStatEntityAssociation.Add(new RcVouchersRcvStat( value0, value1));
				}
			}
			// EntityAssociation Name: RCV.APPR
			
			RcvApprEntityAssociation = new List<RcVouchersRcvAppr>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RcvNextApprovalIds != null)
			{
				int numRcvAppr = RcvNextApprovalIds.Count;
				if (RcvApprovalLevels !=null && RcvApprovalLevels.Count > numRcvAppr) numRcvAppr = RcvApprovalLevels.Count;

				for (int i = 0; i < numRcvAppr; i++)
				{

					string value0 = "";
					if (RcvNextApprovalIds != null && i < RcvNextApprovalIds.Count)
					{
						value0 = RcvNextApprovalIds[i];
					}


					string value1 = "";
					if (RcvApprovalLevels != null && i < RcvApprovalLevels.Count)
					{
						value1 = RcvApprovalLevels[i];
					}

					RcvApprEntityAssociation.Add(new RcVouchersRcvAppr( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class RcVouchersRcvAuth
	{
		public DateTime? RcvAuthorizationDatesAssocMember;	
		public string RcvAuthorizationsAssocMember;	
		public string RcvAuthorizationLevelsAssocMember;	
		public RcVouchersRcvAuth() {}
		public RcVouchersRcvAuth(
			DateTime? inRcvAuthorizationDates,
			string inRcvAuthorizations,
			string inRcvAuthorizationLevels)
		{
			RcvAuthorizationDatesAssocMember = inRcvAuthorizationDates;
			RcvAuthorizationsAssocMember = inRcvAuthorizations;
			RcvAuthorizationLevelsAssocMember = inRcvAuthorizationLevels;
		}
	}
	
	[Serializable]
	public class RcVouchersRcvStat
	{
		public string RcvStatusAssocMember;	
		public DateTime? RcvStatusDateAssocMember;	
		public RcVouchersRcvStat() {}
		public RcVouchersRcvStat(
			string inRcvStatus,
			DateTime? inRcvStatusDate)
		{
			RcvStatusAssocMember = inRcvStatus;
			RcvStatusDateAssocMember = inRcvStatusDate;
		}
	}
	
	[Serializable]
	public class RcVouchersRcvAppr
	{
		public string RcvNextApprovalIdsAssocMember;	
		public string RcvApprovalLevelsAssocMember;	
		public RcVouchersRcvAppr() {}
		public RcVouchersRcvAppr(
			string inRcvNextApprovalIds,
			string inRcvApprovalLevels)
		{
			RcvNextApprovalIdsAssocMember = inRcvNextApprovalIds;
			RcvApprovalLevelsAssocMember = inRcvApprovalLevels;
		}
	}
}
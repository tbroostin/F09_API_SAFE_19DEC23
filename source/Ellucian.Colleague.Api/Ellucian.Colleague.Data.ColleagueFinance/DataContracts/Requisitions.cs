//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 1:22:25 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: REQUISITIONS
//     Application: CF
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.ColleagueFinance.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Requisitions")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 1:22:25 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "REQUISITIONS", EntityType = "PHYS")]
	public class Requisitions : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: REQ.DATE
		/// </summary>
		[DataMember(Order = 0, Name = "REQ.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? ReqDate { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.VENDOR
		/// </summary>
		[DataMember(Order = 2, Name = "REQ.VENDOR")]
		public string ReqVendor { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.AP.TYPE
		/// </summary>
		[DataMember(Order = 3, Name = "REQ.AP.TYPE")]
		public string ReqApType { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.FOB
		/// </summary>
		[DataMember(Order = 5, Name = "REQ.FOB")]
		public string ReqFob { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.PO.NO
		/// </summary>
		[DataMember(Order = 6, Name = "REQ.PO.NO")]
		public List<string> ReqPoNo { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ITEMS.ID
		/// </summary>
		[DataMember(Order = 7, Name = "REQ.ITEMS.ID")]
		public List<string> ReqItemsId { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.VENDOR.TERMS
		/// </summary>
		[DataMember(Order = 14, Name = "REQ.VENDOR.TERMS")]
		public string ReqVendorTerms { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.AUTHORIZATION.DATES
		/// </summary>
		[DataMember(Order = 15, Name = "REQ.AUTHORIZATION.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> ReqAuthorizationDates { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.TOTAL.AMT
		/// </summary>
		[DataMember(Order = 16, Name = "REQ.TOTAL.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? ReqTotalAmt { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.STATUS.DATE
		/// </summary>
		[DataMember(Order = 17, Name = "REQ.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> ReqStatusDate { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MISC.NAME
		/// </summary>
		[DataMember(Order = 19, Name = "REQ.MISC.NAME")]
		public List<string> ReqMiscName { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MISC.ADDRESS
		/// </summary>
		[DataMember(Order = 20, Name = "REQ.MISC.ADDRESS")]
		public List<string> ReqMiscAddress { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.BUYER
		/// </summary>
		[DataMember(Order = 21, Name = "REQ.BUYER")]
		public string ReqBuyer { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MISC.CITY
		/// </summary>
		[DataMember(Order = 22, Name = "REQ.MISC.CITY")]
		public string ReqMiscCity { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MISC.STATE
		/// </summary>
		[DataMember(Order = 23, Name = "REQ.MISC.STATE")]
		public string ReqMiscState { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MISC.ZIP
		/// </summary>
		[DataMember(Order = 24, Name = "REQ.MISC.ZIP")]
		public string ReqMiscZip { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MISC.COUNTRY
		/// </summary>
		[DataMember(Order = 25, Name = "REQ.MISC.COUNTRY")]
		public string ReqMiscCountry { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.COMMENTS
		/// </summary>
		[DataMember(Order = 26, Name = "REQ.COMMENTS")]
		public string ReqComments { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.NAME
		/// </summary>
		[DataMember(Order = 27, Name = "REQ.ALT.SHIP.NAME")]
		public string ReqAltShipName { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.ADDRESS
		/// </summary>
		[DataMember(Order = 28, Name = "REQ.ALT.SHIP.ADDRESS")]
		public List<string> ReqAltShipAddress { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.CITY
		/// </summary>
		[DataMember(Order = 29, Name = "REQ.ALT.SHIP.CITY")]
		public string ReqAltShipCity { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.STATE
		/// </summary>
		[DataMember(Order = 30, Name = "REQ.ALT.SHIP.STATE")]
		public string ReqAltShipState { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.ZIP
		/// </summary>
		[DataMember(Order = 31, Name = "REQ.ALT.SHIP.ZIP")]
		public string ReqAltShipZip { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.AUTHORIZATIONS
		/// </summary>
		[DataMember(Order = 32, Name = "REQ.AUTHORIZATIONS")]
		public List<string> ReqAuthorizations { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.DEFAULT.INITIATOR
		/// </summary>
		[DataMember(Order = 35, Name = "REQ.DEFAULT.INITIATOR")]
		public string ReqDefaultInitiator { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.STATUS
		/// </summary>
		[DataMember(Order = 37, Name = "REQ.STATUS")]
		public List<string> ReqStatus { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.CURRENCY.CODE
		/// </summary>
		[DataMember(Order = 53, Name = "REQ.CURRENCY.CODE")]
		public string ReqCurrencyCode { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.SHIP.TO
		/// </summary>
		[DataMember(Order = 54, Name = "REQ.SHIP.TO")]
		public string ReqShipTo { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.DESIRED.DELIVERY.DATE
		/// </summary>
		[DataMember(Order = 55, Name = "REQ.DESIRED.DELIVERY.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? ReqDesiredDeliveryDate { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.NEXT.APPROVAL.IDS
		/// </summary>
		[DataMember(Order = 56, Name = "REQ.NEXT.APPROVAL.IDS")]
		public List<string> ReqNextApprovalIds { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.PRINTED.COMMENTS
		/// </summary>
		[DataMember(Order = 58, Name = "REQ.PRINTED.COMMENTS")]
		public string ReqPrintedComments { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.MAINT.GL.TRAN.DATE
		/// </summary>
		[DataMember(Order = 59, Name = "REQ.MAINT.GL.TRAN.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? ReqMaintGlTranDate { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.FLAG
		/// </summary>
		[DataMember(Order = 60, Name = "REQ.ALT.FLAG")]
		public string ReqAltFlag { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.BPO.NO
		/// </summary>
		[DataMember(Order = 61, Name = "REQ.BPO.NO")]
		public List<string> ReqBpoNo { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.DEFAULT.COMMODITY
		/// </summary>
		[DataMember(Order = 63, Name = "REQ.DEFAULT.COMMODITY")]
		public string ReqDefaultCommodity { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.NO
		/// </summary>
		[DataMember(Order = 64, Name = "REQ.NO")]
		public string ReqNo { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.PHONE
		/// </summary>
		[DataMember(Order = 67, Name = "REQ.ALT.SHIP.PHONE")]
		public string ReqAltShipPhone { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.ALT.SHIP.EXT
		/// </summary>
		[DataMember(Order = 68, Name = "REQ.ALT.SHIP.EXT")]
		public string ReqAltShipExt { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.APPROVAL.LEVELS
		/// </summary>
		[DataMember(Order = 70, Name = "REQ.APPROVAL.LEVELS")]
		public List<string> ReqApprovalLevels { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.AUTHORIZATION.LEVELS
		/// </summary>
		[DataMember(Order = 71, Name = "REQ.AUTHORIZATION.LEVELS")]
		public List<string> ReqAuthorizationLevels { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.REQUESTOR
		/// </summary>
		[DataMember(Order = 77, Name = "REQ.REQUESTOR")]
		public string ReqRequestor { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.INTG.CORP.PER.INDICATOR
		/// </summary>
		[DataMember(Order = 80, Name = "REQ.INTG.CORP.PER.INDICATOR")]
		public string ReqIntgCorpPerIndicator { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.INTG.ALT.SHIP.COUNTRY
		/// </summary>
		[DataMember(Order = 81, Name = "REQ.INTG.ALT.SHIP.COUNTRY")]
		public string ReqIntgAltShipCountry { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.INTG.SUBMITTED.BY
		/// </summary>
		[DataMember(Order = 82, Name = "REQ.INTG.SUBMITTED.BY")]
		public string ReqIntgSubmittedBy { get; set; }
		
		/// <summary>
		/// CDD Name: REQ.INTG.ADDRESS.ID
		/// </summary>
		[DataMember(Order = 83, Name = "REQ.INTG.ADDRESS.ID")]
		public string ReqIntgAddressId { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RequisitionsReqAuth> ReqAuthEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RequisitionsReqStatuses> ReqStatusesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RequisitionsReqAppr> ReqApprEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: REQ.AUTH
			
			ReqAuthEntityAssociation = new List<RequisitionsReqAuth>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(ReqAuthorizations != null)
			{
				int numReqAuth = ReqAuthorizations.Count;
				if (ReqAuthorizationDates !=null && ReqAuthorizationDates.Count > numReqAuth) numReqAuth = ReqAuthorizationDates.Count;
				if (ReqAuthorizationLevels !=null && ReqAuthorizationLevels.Count > numReqAuth) numReqAuth = ReqAuthorizationLevels.Count;

				for (int i = 0; i < numReqAuth; i++)
				{

					DateTime? value0 = null;
					if (ReqAuthorizationDates != null && i < ReqAuthorizationDates.Count)
					{
						value0 = ReqAuthorizationDates[i];
					}


					string value1 = "";
					if (ReqAuthorizations != null && i < ReqAuthorizations.Count)
					{
						value1 = ReqAuthorizations[i];
					}


					string value2 = "";
					if (ReqAuthorizationLevels != null && i < ReqAuthorizationLevels.Count)
					{
						value2 = ReqAuthorizationLevels[i];
					}

					ReqAuthEntityAssociation.Add(new RequisitionsReqAuth( value0, value1, value2));
				}
			}
			// EntityAssociation Name: REQ.STATUSES
			
			ReqStatusesEntityAssociation = new List<RequisitionsReqStatuses>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(ReqStatus != null)
			{
				int numReqStatuses = ReqStatus.Count;
				if (ReqStatusDate !=null && ReqStatusDate.Count > numReqStatuses) numReqStatuses = ReqStatusDate.Count;

				for (int i = 0; i < numReqStatuses; i++)
				{

					DateTime? value0 = null;
					if (ReqStatusDate != null && i < ReqStatusDate.Count)
					{
						value0 = ReqStatusDate[i];
					}


					string value1 = "";
					if (ReqStatus != null && i < ReqStatus.Count)
					{
						value1 = ReqStatus[i];
					}

					ReqStatusesEntityAssociation.Add(new RequisitionsReqStatuses( value0, value1));
				}
			}
			// EntityAssociation Name: REQ.APPR
			
			ReqApprEntityAssociation = new List<RequisitionsReqAppr>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(ReqNextApprovalIds != null)
			{
				int numReqAppr = ReqNextApprovalIds.Count;
				if (ReqApprovalLevels !=null && ReqApprovalLevels.Count > numReqAppr) numReqAppr = ReqApprovalLevels.Count;

				for (int i = 0; i < numReqAppr; i++)
				{

					string value0 = "";
					if (ReqNextApprovalIds != null && i < ReqNextApprovalIds.Count)
					{
						value0 = ReqNextApprovalIds[i];
					}


					string value1 = "";
					if (ReqApprovalLevels != null && i < ReqApprovalLevels.Count)
					{
						value1 = ReqApprovalLevels[i];
					}

					ReqApprEntityAssociation.Add(new RequisitionsReqAppr( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class RequisitionsReqAuth
	{
		public DateTime? ReqAuthorizationDatesAssocMember;	
		public string ReqAuthorizationsAssocMember;	
		public string ReqAuthorizationLevelsAssocMember;	
		public RequisitionsReqAuth() {}
		public RequisitionsReqAuth(
			DateTime? inReqAuthorizationDates,
			string inReqAuthorizations,
			string inReqAuthorizationLevels)
		{
			ReqAuthorizationDatesAssocMember = inReqAuthorizationDates;
			ReqAuthorizationsAssocMember = inReqAuthorizations;
			ReqAuthorizationLevelsAssocMember = inReqAuthorizationLevels;
		}
	}
	
	[Serializable]
	public class RequisitionsReqStatuses
	{
		public DateTime? ReqStatusDateAssocMember;	
		public string ReqStatusAssocMember;	
		public RequisitionsReqStatuses() {}
		public RequisitionsReqStatuses(
			DateTime? inReqStatusDate,
			string inReqStatus)
		{
			ReqStatusDateAssocMember = inReqStatusDate;
			ReqStatusAssocMember = inReqStatus;
		}
	}
	
	[Serializable]
	public class RequisitionsReqAppr
	{
		public string ReqNextApprovalIdsAssocMember;	
		public string ReqApprovalLevelsAssocMember;	
		public RequisitionsReqAppr() {}
		public RequisitionsReqAppr(
			string inReqNextApprovalIds,
			string inReqApprovalLevels)
		{
			ReqNextApprovalIdsAssocMember = inReqNextApprovalIds;
			ReqApprovalLevelsAssocMember = inReqApprovalLevels;
		}
	}
}
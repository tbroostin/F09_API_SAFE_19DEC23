//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 1:37:35 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: SFPP.REQUIREMENTS
//     Application: ST
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Finance.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "SfppRequirements")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 1:37:35 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "SFPP.REQUIREMENTS", EntityType = "PHYS")]
	public class SfppRequirements : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: SFPPR.ELIGIBLE.RULE
		/// </summary>
		[DataMember(Order = 0, Name = "SFPPR.ELIGIBLE.RULE")]
		public string SfpprEligibleRule { get; set; }
		
		/// <summary>
		/// CDD Name: SFPPR.RULE.EVAL.ORDER
		/// </summary>
		[DataMember(Order = 1, Name = "SFPPR.RULE.EVAL.ORDER")]
		public int? SfpprRuleEvalOrder { get; set; }
		
		/// <summary>
		/// CDD Name: SFPPR.TERM.ID
		/// </summary>
		[DataMember(Order = 2, Name = "SFPPR.TERM.ID")]
		public string SfpprTermId { get; set; }
		
		/// <summary>
		/// CDD Name: SFPPR.PLAN.EFFECTIVE.START
		/// </summary>
		[DataMember(Order = 3, Name = "SFPPR.PLAN.EFFECTIVE.START")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SfpprPlanEffectiveStart { get; set; }
		
		/// <summary>
		/// CDD Name: SFPPR.PLAN.EFFECTIVE.END
		/// </summary>
		[DataMember(Order = 4, Name = "SFPPR.PLAN.EFFECTIVE.END")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SfpprPlanEffectiveEnd { get; set; }
		
		/// <summary>
		/// CDD Name: SFPPR.PLAN.TEMPLATE
		/// </summary>
		[DataMember(Order = 5, Name = "SFPPR.PLAN.TEMPLATE")]
		public List<string> SfpprPlanTemplate { get; set; }
		
		/// <summary>
		/// CDD Name: SFPPR.PLAN.START.DATE
		/// </summary>
		[DataMember(Order = 6, Name = "SFPPR.PLAN.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SfpprPlanStartDate { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<SfppRequirementsSfpprPlanRequirements> SfpprPlanRequirementsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: SFPPR.PLAN.REQUIREMENTS
			
			SfpprPlanRequirementsEntityAssociation = new List<SfppRequirementsSfpprPlanRequirements>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(SfpprPlanEffectiveStart != null)
			{
				int numSfpprPlanRequirements = SfpprPlanEffectiveStart.Count;
				if (SfpprPlanEffectiveEnd !=null && SfpprPlanEffectiveEnd.Count > numSfpprPlanRequirements) numSfpprPlanRequirements = SfpprPlanEffectiveEnd.Count;
				if (SfpprPlanTemplate !=null && SfpprPlanTemplate.Count > numSfpprPlanRequirements) numSfpprPlanRequirements = SfpprPlanTemplate.Count;
				if (SfpprPlanStartDate !=null && SfpprPlanStartDate.Count > numSfpprPlanRequirements) numSfpprPlanRequirements = SfpprPlanStartDate.Count;

				for (int i = 0; i < numSfpprPlanRequirements; i++)
				{

					DateTime? value0 = null;
					if (SfpprPlanEffectiveStart != null && i < SfpprPlanEffectiveStart.Count)
					{
						value0 = SfpprPlanEffectiveStart[i];
					}


					DateTime? value1 = null;
					if (SfpprPlanEffectiveEnd != null && i < SfpprPlanEffectiveEnd.Count)
					{
						value1 = SfpprPlanEffectiveEnd[i];
					}


					string value2 = "";
					if (SfpprPlanTemplate != null && i < SfpprPlanTemplate.Count)
					{
						value2 = SfpprPlanTemplate[i];
					}


					DateTime? value3 = null;
					if (SfpprPlanStartDate != null && i < SfpprPlanStartDate.Count)
					{
						value3 = SfpprPlanStartDate[i];
					}

					SfpprPlanRequirementsEntityAssociation.Add(new SfppRequirementsSfpprPlanRequirements( value0, value1, value2, value3));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class SfppRequirementsSfpprPlanRequirements
	{
		public DateTime? SfpprPlanEffectiveStartAssocMember;	
		public DateTime? SfpprPlanEffectiveEndAssocMember;	
		public string SfpprPlanTemplateAssocMember;	
		public DateTime? SfpprPlanStartDateAssocMember;	
		public SfppRequirementsSfpprPlanRequirements() {}
		public SfppRequirementsSfpprPlanRequirements(
			DateTime? inSfpprPlanEffectiveStart,
			DateTime? inSfpprPlanEffectiveEnd,
			string inSfpprPlanTemplate,
			DateTime? inSfpprPlanStartDate)
		{
			SfpprPlanEffectiveStartAssocMember = inSfpprPlanEffectiveStart;
			SfpprPlanEffectiveEndAssocMember = inSfpprPlanEffectiveEnd;
			SfpprPlanTemplateAssocMember = inSfpprPlanTemplate;
			SfpprPlanStartDateAssocMember = inSfpprPlanStartDate;
		}
	}
}
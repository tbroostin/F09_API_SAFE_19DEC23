//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 1/23/2018 10:48:47 AM by user otorres
//
//     Type: ENTITY
//     Entity: SL.ACYR
//     Application: ST
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Finance.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "SlAcyr")]
	[ColleagueDataContract(GeneratedDateTime = "1/23/2018 10:48:47 AM", User = "otorres")]
	[EntityDataContract(EntityName = "SL.ACYR", EntityType = "PHYS")]
	public class SlAcyr : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: SL.ANT.DISB.DATE
		/// </summary>
		[DataMember(Order = 55, Name = "SL.ANT.DISB.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SlAntDisbDate { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ANT.DISB.AMT
		/// </summary>
		[DataMember(Order = 56, Name = "SL.ANT.DISB.AMT")]
		public List<int?> SlAntDisbAmt { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ANT.DISB.TERM
		/// </summary>
		[DataMember(Order = 57, Name = "SL.ANT.DISB.TERM")]
		public List<string> SlAntDisbTerm { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ANT.DISB.PCT
		/// </summary>
		[DataMember(Order = 58, Name = "SL.ANT.DISB.PCT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SlAntDisbPct { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ACT.DISB.DT
		/// </summary>
		[DataMember(Order = 59, Name = "SL.ACT.DISB.DT")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SlActDisbDt { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ACT.DISB.AMT
		/// </summary>
		[DataMember(Order = 60, Name = "SL.ACT.DISB.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SlActDisbAmt { get; set; }
		
		/// <summary>
		/// CDD Name: SL.INIT.DISB.DT
		/// </summary>
		[DataMember(Order = 61, Name = "SL.INIT.DISB.DT")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SlInitDisbDt { get; set; }
		
		/// <summary>
		/// CDD Name: SL.DISB.CNCL.DT
		/// </summary>
		[DataMember(Order = 62, Name = "SL.DISB.CNCL.DT")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SlDisbCnclDt { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ROSTER.AMT.OVERRIDE
		/// </summary>
		[DataMember(Order = 63, Name = "SL.ROSTER.AMT.OVERRIDE")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SlRosterAmtOverride { get; set; }
		
		/// <summary>
		/// CDD Name: SL.DISB.REF.DT
		/// </summary>
		[DataMember(Order = 64, Name = "SL.DISB.REF.DT")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SlDisbRefDt { get; set; }
		
		/// <summary>
		/// CDD Name: SL.ROSTER.METHOD.OVERRIDE
		/// </summary>
		[DataMember(Order = 69, Name = "SL.ROSTER.METHOD.OVERRIDE")]
		public List<string> SlRosterMethodOverride { get; set; }
		
		/// <summary>
		/// CDD Name: SL.DISB.HOLD.REL.IND
		/// </summary>
		[DataMember(Order = 71, Name = "SL.DISB.HOLD.REL.IND")]
		public List<string> SlDisbHoldRelInd { get; set; }
		
		/// <summary>
		/// CDD Name: SL.INIT.ENRL.STATUS
		/// </summary>
		[DataMember(Order = 88, Name = "SL.INIT.ENRL.STATUS")]
		public List<string> SlInitEnrlStatus { get; set; }
		
		/// <summary>
		/// CDD Name: SL.INIT.PROGRAM
		/// </summary>
		[DataMember(Order = 89, Name = "SL.INIT.PROGRAM")]
		public List<string> SlInitProgram { get; set; }
		
		/// <summary>
		/// CDD Name: SL.DISB.SPECIAL.PROGRAM.TYPE
		/// </summary>
		[DataMember(Order = 98, Name = "SL.DISB.SPECIAL.PROGRAM.TYPE")]
		public List<string> SlDisbSpecialProgramType { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<SlAcyrSlLoanDisb> SlLoanDisbEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: SL.LOAN.DISB
			
			SlLoanDisbEntityAssociation = new List<SlAcyrSlLoanDisb>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(SlAntDisbDate != null)
			{
				int numSlLoanDisb = SlAntDisbDate.Count;
				if (SlAntDisbAmt !=null && SlAntDisbAmt.Count > numSlLoanDisb) numSlLoanDisb = SlAntDisbAmt.Count;
				if (SlAntDisbTerm !=null && SlAntDisbTerm.Count > numSlLoanDisb) numSlLoanDisb = SlAntDisbTerm.Count;
				if (SlAntDisbPct !=null && SlAntDisbPct.Count > numSlLoanDisb) numSlLoanDisb = SlAntDisbPct.Count;
				if (SlActDisbDt !=null && SlActDisbDt.Count > numSlLoanDisb) numSlLoanDisb = SlActDisbDt.Count;
				if (SlActDisbAmt !=null && SlActDisbAmt.Count > numSlLoanDisb) numSlLoanDisb = SlActDisbAmt.Count;
				if (SlInitDisbDt !=null && SlInitDisbDt.Count > numSlLoanDisb) numSlLoanDisb = SlInitDisbDt.Count;
				if (SlDisbCnclDt !=null && SlDisbCnclDt.Count > numSlLoanDisb) numSlLoanDisb = SlDisbCnclDt.Count;
				if (SlRosterAmtOverride !=null && SlRosterAmtOverride.Count > numSlLoanDisb) numSlLoanDisb = SlRosterAmtOverride.Count;
				if (SlDisbRefDt !=null && SlDisbRefDt.Count > numSlLoanDisb) numSlLoanDisb = SlDisbRefDt.Count;
				if (SlRosterMethodOverride !=null && SlRosterMethodOverride.Count > numSlLoanDisb) numSlLoanDisb = SlRosterMethodOverride.Count;
				if (SlDisbHoldRelInd !=null && SlDisbHoldRelInd.Count > numSlLoanDisb) numSlLoanDisb = SlDisbHoldRelInd.Count;
				if (SlInitEnrlStatus !=null && SlInitEnrlStatus.Count > numSlLoanDisb) numSlLoanDisb = SlInitEnrlStatus.Count;
				if (SlInitProgram !=null && SlInitProgram.Count > numSlLoanDisb) numSlLoanDisb = SlInitProgram.Count;
				if (SlDisbSpecialProgramType !=null && SlDisbSpecialProgramType.Count > numSlLoanDisb) numSlLoanDisb = SlDisbSpecialProgramType.Count;

				for (int i = 0; i < numSlLoanDisb; i++)
				{

					DateTime? value0 = null;
					if (SlAntDisbDate != null && i < SlAntDisbDate.Count)
					{
						value0 = SlAntDisbDate[i];
					}


					int? value1 = null;
					if (SlAntDisbAmt != null && i < SlAntDisbAmt.Count)
					{
						value1 = SlAntDisbAmt[i];
					}


					string value2 = "";
					if (SlAntDisbTerm != null && i < SlAntDisbTerm.Count)
					{
						value2 = SlAntDisbTerm[i];
					}


					Decimal? value3 = null;
					if (SlAntDisbPct != null && i < SlAntDisbPct.Count)
					{
						value3 = SlAntDisbPct[i];
					}


					DateTime? value4 = null;
					if (SlActDisbDt != null && i < SlActDisbDt.Count)
					{
						value4 = SlActDisbDt[i];
					}


					Decimal? value5 = null;
					if (SlActDisbAmt != null && i < SlActDisbAmt.Count)
					{
						value5 = SlActDisbAmt[i];
					}


					DateTime? value6 = null;
					if (SlInitDisbDt != null && i < SlInitDisbDt.Count)
					{
						value6 = SlInitDisbDt[i];
					}


					DateTime? value7 = null;
					if (SlDisbCnclDt != null && i < SlDisbCnclDt.Count)
					{
						value7 = SlDisbCnclDt[i];
					}


					Decimal? value8 = null;
					if (SlRosterAmtOverride != null && i < SlRosterAmtOverride.Count)
					{
						value8 = SlRosterAmtOverride[i];
					}


					DateTime? value9 = null;
					if (SlDisbRefDt != null && i < SlDisbRefDt.Count)
					{
						value9 = SlDisbRefDt[i];
					}


					string value10 = "";
					if (SlRosterMethodOverride != null && i < SlRosterMethodOverride.Count)
					{
						value10 = SlRosterMethodOverride[i];
					}


					string value11 = "";
					if (SlDisbHoldRelInd != null && i < SlDisbHoldRelInd.Count)
					{
						value11 = SlDisbHoldRelInd[i];
					}


					string value12 = "";
					if (SlInitEnrlStatus != null && i < SlInitEnrlStatus.Count)
					{
						value12 = SlInitEnrlStatus[i];
					}


					string value13 = "";
					if (SlInitProgram != null && i < SlInitProgram.Count)
					{
						value13 = SlInitProgram[i];
					}


					string value14 = "";
					if (SlDisbSpecialProgramType != null && i < SlDisbSpecialProgramType.Count)
					{
						value14 = SlDisbSpecialProgramType[i];
					}

					SlLoanDisbEntityAssociation.Add(new SlAcyrSlLoanDisb( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class SlAcyrSlLoanDisb
	{
		public DateTime? SlAntDisbDateAssocMember;	
		public int? SlAntDisbAmtAssocMember;	
		public string SlAntDisbTermAssocMember;	
		public Decimal? SlAntDisbPctAssocMember;	
		public DateTime? SlActDisbDtAssocMember;	
		public Decimal? SlActDisbAmtAssocMember;	
		public DateTime? SlInitDisbDtAssocMember;	
		public DateTime? SlDisbCnclDtAssocMember;	
		public Decimal? SlRosterAmtOverrideAssocMember;	
		public DateTime? SlDisbRefDtAssocMember;	
		public string SlRosterMethodOverrideAssocMember;	
		public string SlDisbHoldRelIndAssocMember;	
		public string SlInitEnrlStatusAssocMember;	
		public string SlInitProgramAssocMember;	
		public string SlDisbSpecialProgramTypeAssocMember;	
		public SlAcyrSlLoanDisb() {}
		public SlAcyrSlLoanDisb(
			DateTime? inSlAntDisbDate,
			int? inSlAntDisbAmt,
			string inSlAntDisbTerm,
			Decimal? inSlAntDisbPct,
			DateTime? inSlActDisbDt,
			Decimal? inSlActDisbAmt,
			DateTime? inSlInitDisbDt,
			DateTime? inSlDisbCnclDt,
			Decimal? inSlRosterAmtOverride,
			DateTime? inSlDisbRefDt,
			string inSlRosterMethodOverride,
			string inSlDisbHoldRelInd,
			string inSlInitEnrlStatus,
			string inSlInitProgram,
			string inSlDisbSpecialProgramType)
		{
			SlAntDisbDateAssocMember = inSlAntDisbDate;
			SlAntDisbAmtAssocMember = inSlAntDisbAmt;
			SlAntDisbTermAssocMember = inSlAntDisbTerm;
			SlAntDisbPctAssocMember = inSlAntDisbPct;
			SlActDisbDtAssocMember = inSlActDisbDt;
			SlActDisbAmtAssocMember = inSlActDisbAmt;
			SlInitDisbDtAssocMember = inSlInitDisbDt;
			SlDisbCnclDtAssocMember = inSlDisbCnclDt;
			SlRosterAmtOverrideAssocMember = inSlRosterAmtOverride;
			SlDisbRefDtAssocMember = inSlDisbRefDt;
			SlRosterMethodOverrideAssocMember = inSlRosterMethodOverride;
			SlDisbHoldRelIndAssocMember = inSlDisbHoldRelInd;
			SlInitEnrlStatusAssocMember = inSlInitEnrlStatus;
			SlInitProgramAssocMember = inSlInitProgram;
			SlDisbSpecialProgramTypeAssocMember = inSlDisbSpecialProgramType;
		}
	}
}
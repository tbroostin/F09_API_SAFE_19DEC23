//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2022 2:24:56 PM by user nravioli
//
//     Type: ENTITY
//     Entity: AWARD.LETTER.HISTORY
//     Application: ST
//     Environment: DVColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.FinancialAid.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "AwardLetterHistory")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2022 2:24:56 PM", User = "nravioli")]
	[EntityDataContract(EntityName = "AWARD.LETTER.HISTORY", EntityType = "PHYS")]
	public class AwardLetterHistory : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: ALH.ACCEPTED.DATE
		/// </summary>
		[DataMember(Order = 0, Name = "ALH.ACCEPTED.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? AlhAcceptedDate { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.AWARD.LETTER.PARAMS.ID
		/// </summary>
		[DataMember(Order = 1, Name = "ALH.AWARD.LETTER.PARAMS.ID")]
		public string AlhAwardLetterParamsId { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.AWARD.YEAR
		/// </summary>
		[DataMember(Order = 2, Name = "ALH.AWARD.YEAR")]
		public string AlhAwardYear { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.COST
		/// </summary>
		[DataMember(Order = 3, Name = "ALH.COST")]
		public int? AlhCost { get; set; }
		
		/// <summary>
		/// CDD Name: AWARD.LETTER.HISTORY.ADDOPR
		/// </summary>
		[DataMember(Order = 4, Name = "AWARD.LETTER.HISTORY.ADDOPR")]
		public string AwardLetterHistoryAddopr { get; set; }
		
		/// <summary>
		/// CDD Name: AWARD.LETTER.HISTORY.ADDDATE
		/// </summary>
		[DataMember(Order = 5, Name = "AWARD.LETTER.HISTORY.ADDDATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? AwardLetterHistoryAdddate { get; set; }
		
		/// <summary>
		/// CDD Name: AWARD.LETTER.HISTORY.ADDTIME
		/// </summary>
		[DataMember(Order = 6, Name = "AWARD.LETTER.HISTORY.ADDTIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? AwardLetterHistoryAddtime { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ADD.SOURCE
		/// </summary>
		[DataMember(Order = 7, Name = "ALH.ADD.SOURCE")]
		public string AlhAddSource { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.SIGNED.SOURCE
		/// </summary>
		[DataMember(Order = 8, Name = "ALH.SIGNED.SOURCE")]
		public string AlhSignedSource { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.EFC
		/// </summary>
		[DataMember(Order = 9, Name = "ALH.EFC")]
		public int? AlhEfc { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.HOUSING.CODE
		/// </summary>
		[DataMember(Order = 10, Name = "ALH.HOUSING.CODE")]
		public string AlhHousingCode { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.NEED
		/// </summary>
		[DataMember(Order = 11, Name = "ALH.NEED")]
		public int? AlhNeed { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.OFFICE.ID
		/// </summary>
		[DataMember(Order = 12, Name = "ALH.OFFICE.ID")]
		public string AlhOfficeId { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.STUDENT.ID
		/// </summary>
		[DataMember(Order = 13, Name = "ALH.STUDENT.ID")]
		public string AlhStudentId { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.OPENING.PARAGRAPH
		/// </summary>
		[DataMember(Order = 14, Name = "ALH.OPENING.PARAGRAPH")]
		public string AlhOpeningParagraph { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.CLOSING.PARAGRAPH
		/// </summary>
		[DataMember(Order = 15, Name = "ALH.CLOSING.PARAGRAPH")]
		public string AlhClosingParagraph { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.AWARD.LETTER.DATE
		/// </summary>
		[DataMember(Order = 16, Name = "ALH.AWARD.LETTER.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? AlhAwardLetterDate { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.COLUMN.GROUP.NUMBER
		/// </summary>
		[DataMember(Order = 18, Name = "ALH.COLUMN.GROUP.NUMBER")]
		public List<string> AlhColumnGroupNumber { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.COLUMN.GROUP.NAME
		/// </summary>
		[DataMember(Order = 19, Name = "ALH.COLUMN.GROUP.NAME")]
		public List<string> AlhColumnGroupName { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.AWARD.ID
		/// </summary>
		[DataMember(Order = 20, Name = "ALH.AWARD.ID")]
		public List<string> AlhAwardId { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ROW.GROUP.NUMBER
		/// </summary>
		[DataMember(Order = 22, Name = "ALH.ROW.GROUP.NUMBER")]
		public List<string> AlhRowGroupNumber { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ROW.GROUP.NAME
		/// </summary>
		[DataMember(Order = 23, Name = "ALH.ROW.GROUP.NAME")]
		public List<string> AlhRowGroupName { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.AMOUNT
		/// </summary>
		[DataMember(Order = 24, Name = "ALH.AMOUNT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> AlhAmount { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ANNUAL.AWARD.ID
		/// </summary>
		[DataMember(Order = 26, Name = "ALH.ANNUAL.AWARD.ID")]
		public List<string> AlhAnnualAwardId { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ANNUAL.AWARD.AMOUNTS
		/// </summary>
		[DataMember(Order = 27, Name = "ALH.ANNUAL.AWARD.AMOUNTS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> AlhAnnualAwardAmounts { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ANNUAL.GROUP.NUMBER
		/// </summary>
		[DataMember(Order = 28, Name = "ALH.ANNUAL.GROUP.NUMBER")]
		public List<int?> AlhAnnualGroupNumber { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.GROUP.NAME
		/// </summary>
		[DataMember(Order = 30, Name = "ALH.GROUP.NAME")]
		public List<string> AlhGroupName { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.GROUP.NUMBER
		/// </summary>
		[DataMember(Order = 31, Name = "ALH.GROUP.NUMBER")]
		public List<int?> AlhGroupNumber { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PREF.NAME
		/// </summary>
		[DataMember(Order = 32, Name = "ALH.PREF.NAME")]
		public string AlhPrefName { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PREF.ADDR.LINE1
		/// </summary>
		[DataMember(Order = 33, Name = "ALH.PREF.ADDR.LINE1")]
		public string AlhPrefAddrLine1 { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PREF.ADDR.LINE2
		/// </summary>
		[DataMember(Order = 34, Name = "ALH.PREF.ADDR.LINE2")]
		public string AlhPrefAddrLine2 { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PREF.ADDR.LINE3
		/// </summary>
		[DataMember(Order = 35, Name = "ALH.PREF.ADDR.LINE3")]
		public string AlhPrefAddrLine3 { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PREF.ADDR.LINE4
		/// </summary>
		[DataMember(Order = 36, Name = "ALH.PREF.ADDR.LINE4")]
		public string AlhPrefAddrLine4 { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.STUDENT.NAME
		/// </summary>
		[DataMember(Order = 37, Name = "ALH.STUDENT.NAME")]
		public string AlhStudentName { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.LETTER.TYPE
		/// </summary>
		[DataMember(Order = 38, Name = "ALH.LETTER.TYPE")]
		public string AlhLetterType { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PRE.AWARD.TEXT
		/// </summary>
		[DataMember(Order = 39, Name = "ALH.PRE.AWARD.TEXT")]
		public string AlhPreAwardText { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.POST.AWARD.TEXT
		/// </summary>
		[DataMember(Order = 40, Name = "ALH.POST.AWARD.TEXT")]
		public string AlhPostAwardText { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.POST.CLOSING.TEXT
		/// </summary>
		[DataMember(Order = 41, Name = "ALH.POST.CLOSING.TEXT")]
		public string AlhPostClosingText { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.HOUSING.IND
		/// </summary>
		[DataMember(Order = 42, Name = "ALH.HOUSING.IND")]
		public List<string> AlhHousingInd { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ENROLLMENT.STATUS
		/// </summary>
		[DataMember(Order = 43, Name = "ALH.ENROLLMENT.STATUS")]
		public List<string> AlhEnrollmentStatus { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.PELL.ENTITLEMENTS
		/// </summary>
		[DataMember(Order = 44, Name = "ALH.PELL.ENTITLEMENTS")]
		public List<string> AlhPellEntitlements { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.DIRECT.COST.DESC
		/// </summary>
		[DataMember(Order = 45, Name = "ALH.DIRECT.COST.DESC")]
		public List<string> AlhDirectCostDesc { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.DIRECT.COST.AMOUNT
		/// </summary>
		[DataMember(Order = 46, Name = "ALH.DIRECT.COST.AMOUNT")]
		public List<int?> AlhDirectCostAmount { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.INDIRECT.COST.DESC
		/// </summary>
		[DataMember(Order = 47, Name = "ALH.INDIRECT.COST.DESC")]
		public List<string> AlhIndirectCostDesc { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.INDIRECT.COST.AMOUNT
		/// </summary>
		[DataMember(Order = 48, Name = "ALH.INDIRECT.COST.AMOUNT")]
		public List<int?> AlhIndirectCostAmount { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.DIRECT.COST.COMP
		/// </summary>
		[DataMember(Order = 49, Name = "ALH.DIRECT.COST.COMP")]
		public List<string> AlhDirectCostComp { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.INDIRECT.COST.COMP
		/// </summary>
		[DataMember(Order = 50, Name = "ALH.INDIRECT.COST.COMP")]
		public List<string> AlhIndirectCostComp { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ENRL.DESC
		/// </summary>
		[DataMember(Order = 51, Name = "ALH.ENRL.DESC")]
		public List<string> AlhEnrlDesc { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.HOUSING.DESC
		/// </summary>
		[DataMember(Order = 52, Name = "ALH.HOUSING.DESC")]
		public List<string> AlhHousingDesc { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.ZERO.AWARD.FLG
		/// </summary>
		[DataMember(Order = 53, Name = "ALH.ZERO.AWARD.FLG")]
		public string AlhZeroAwardFlg { get; set; }
		
		/// <summary>
		/// CDD Name: ALH.INDEX.STUDENT.YEAR
		/// </summary>
		[DataMember(Order = 54, Name = "ALH.INDEX.STUDENT.YEAR")]
		public string AlhIndexStudentYear { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<AwardLetterHistoryAlhAwardPeriodTable> AlhAwardPeriodTableEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<AwardLetterHistoryAlhAnnualAwardTable> AlhAnnualAwardTableEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<AwardLetterHistoryAlhGroups> AlhGroupsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<AwardLetterHistoryAlhDirectCosts> AlhDirectCostsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<AwardLetterHistoryAlhIndirectCosts> AlhIndirectCostsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: ALH.AWARD.PERIOD.TABLE
			
			AlhAwardPeriodTableEntityAssociation = new List<AwardLetterHistoryAlhAwardPeriodTable>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(AlhColumnGroupNumber != null)
			{
				int numAlhAwardPeriodTable = AlhColumnGroupNumber.Count;
				if (AlhColumnGroupName !=null && AlhColumnGroupName.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhColumnGroupName.Count;
				if (AlhAwardId !=null && AlhAwardId.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhAwardId.Count;
				if (AlhRowGroupNumber !=null && AlhRowGroupNumber.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhRowGroupNumber.Count;
				if (AlhRowGroupName !=null && AlhRowGroupName.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhRowGroupName.Count;
				if (AlhAmount !=null && AlhAmount.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhAmount.Count;
				if (AlhHousingInd !=null && AlhHousingInd.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhHousingInd.Count;
				if (AlhEnrollmentStatus !=null && AlhEnrollmentStatus.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhEnrollmentStatus.Count;
				if (AlhEnrlDesc !=null && AlhEnrlDesc.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhEnrlDesc.Count;
				if (AlhHousingDesc !=null && AlhHousingDesc.Count > numAlhAwardPeriodTable) numAlhAwardPeriodTable = AlhHousingDesc.Count;

				for (int i = 0; i < numAlhAwardPeriodTable; i++)
				{

					string value0 = "";
					if (AlhColumnGroupNumber != null && i < AlhColumnGroupNumber.Count)
					{
						value0 = AlhColumnGroupNumber[i];
					}


					string value1 = "";
					if (AlhColumnGroupName != null && i < AlhColumnGroupName.Count)
					{
						value1 = AlhColumnGroupName[i];
					}


					string value2 = "";
					if (AlhAwardId != null && i < AlhAwardId.Count)
					{
						value2 = AlhAwardId[i];
					}


					string value3 = "";
					if (AlhRowGroupNumber != null && i < AlhRowGroupNumber.Count)
					{
						value3 = AlhRowGroupNumber[i];
					}


					string value4 = "";
					if (AlhRowGroupName != null && i < AlhRowGroupName.Count)
					{
						value4 = AlhRowGroupName[i];
					}


					Decimal? value5 = null;
					if (AlhAmount != null && i < AlhAmount.Count)
					{
						value5 = AlhAmount[i];
					}


					string value6 = "";
					if (AlhHousingInd != null && i < AlhHousingInd.Count)
					{
						value6 = AlhHousingInd[i];
					}


					string value7 = "";
					if (AlhEnrollmentStatus != null && i < AlhEnrollmentStatus.Count)
					{
						value7 = AlhEnrollmentStatus[i];
					}


					string value8 = "";
					if (AlhEnrlDesc != null && i < AlhEnrlDesc.Count)
					{
						value8 = AlhEnrlDesc[i];
					}


					string value9 = "";
					if (AlhHousingDesc != null && i < AlhHousingDesc.Count)
					{
						value9 = AlhHousingDesc[i];
					}

					AlhAwardPeriodTableEntityAssociation.Add(new AwardLetterHistoryAlhAwardPeriodTable( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9));
				}
			}
			// EntityAssociation Name: ALH.ANNUAL.AWARD.TABLE
			
			AlhAnnualAwardTableEntityAssociation = new List<AwardLetterHistoryAlhAnnualAwardTable>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(AlhAnnualAwardId != null)
			{
				int numAlhAnnualAwardTable = AlhAnnualAwardId.Count;
				if (AlhAnnualAwardAmounts !=null && AlhAnnualAwardAmounts.Count > numAlhAnnualAwardTable) numAlhAnnualAwardTable = AlhAnnualAwardAmounts.Count;
				if (AlhAnnualGroupNumber !=null && AlhAnnualGroupNumber.Count > numAlhAnnualAwardTable) numAlhAnnualAwardTable = AlhAnnualGroupNumber.Count;

				for (int i = 0; i < numAlhAnnualAwardTable; i++)
				{

					string value0 = "";
					if (AlhAnnualAwardId != null && i < AlhAnnualAwardId.Count)
					{
						value0 = AlhAnnualAwardId[i];
					}


					Decimal? value1 = null;
					if (AlhAnnualAwardAmounts != null && i < AlhAnnualAwardAmounts.Count)
					{
						value1 = AlhAnnualAwardAmounts[i];
					}


					int? value2 = null;
					if (AlhAnnualGroupNumber != null && i < AlhAnnualGroupNumber.Count)
					{
						value2 = AlhAnnualGroupNumber[i];
					}

					AlhAnnualAwardTableEntityAssociation.Add(new AwardLetterHistoryAlhAnnualAwardTable( value0, value1, value2));
				}
			}
			// EntityAssociation Name: ALH.GROUPS
			
			AlhGroupsEntityAssociation = new List<AwardLetterHistoryAlhGroups>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(AlhGroupName != null)
			{
				int numAlhGroups = AlhGroupName.Count;
				if (AlhGroupNumber !=null && AlhGroupNumber.Count > numAlhGroups) numAlhGroups = AlhGroupNumber.Count;

				for (int i = 0; i < numAlhGroups; i++)
				{

					string value0 = "";
					if (AlhGroupName != null && i < AlhGroupName.Count)
					{
						value0 = AlhGroupName[i];
					}


					int? value1 = null;
					if (AlhGroupNumber != null && i < AlhGroupNumber.Count)
					{
						value1 = AlhGroupNumber[i];
					}

					AlhGroupsEntityAssociation.Add(new AwardLetterHistoryAlhGroups( value0, value1));
				}
			}
			// EntityAssociation Name: ALH.DIRECT.COSTS
			
			AlhDirectCostsEntityAssociation = new List<AwardLetterHistoryAlhDirectCosts>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(AlhDirectCostDesc != null)
			{
				int numAlhDirectCosts = AlhDirectCostDesc.Count;
				if (AlhDirectCostAmount !=null && AlhDirectCostAmount.Count > numAlhDirectCosts) numAlhDirectCosts = AlhDirectCostAmount.Count;
				if (AlhDirectCostComp !=null && AlhDirectCostComp.Count > numAlhDirectCosts) numAlhDirectCosts = AlhDirectCostComp.Count;

				for (int i = 0; i < numAlhDirectCosts; i++)
				{

					string value0 = "";
					if (AlhDirectCostDesc != null && i < AlhDirectCostDesc.Count)
					{
						value0 = AlhDirectCostDesc[i];
					}


					int? value1 = null;
					if (AlhDirectCostAmount != null && i < AlhDirectCostAmount.Count)
					{
						value1 = AlhDirectCostAmount[i];
					}


					string value2 = "";
					if (AlhDirectCostComp != null && i < AlhDirectCostComp.Count)
					{
						value2 = AlhDirectCostComp[i];
					}

					AlhDirectCostsEntityAssociation.Add(new AwardLetterHistoryAlhDirectCosts( value0, value1, value2));
				}
			}
			// EntityAssociation Name: ALH.INDIRECT.COSTS
			
			AlhIndirectCostsEntityAssociation = new List<AwardLetterHistoryAlhIndirectCosts>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(AlhIndirectCostDesc != null)
			{
				int numAlhIndirectCosts = AlhIndirectCostDesc.Count;
				if (AlhIndirectCostAmount !=null && AlhIndirectCostAmount.Count > numAlhIndirectCosts) numAlhIndirectCosts = AlhIndirectCostAmount.Count;
				if (AlhIndirectCostComp !=null && AlhIndirectCostComp.Count > numAlhIndirectCosts) numAlhIndirectCosts = AlhIndirectCostComp.Count;

				for (int i = 0; i < numAlhIndirectCosts; i++)
				{

					string value0 = "";
					if (AlhIndirectCostDesc != null && i < AlhIndirectCostDesc.Count)
					{
						value0 = AlhIndirectCostDesc[i];
					}


					int? value1 = null;
					if (AlhIndirectCostAmount != null && i < AlhIndirectCostAmount.Count)
					{
						value1 = AlhIndirectCostAmount[i];
					}


					string value2 = "";
					if (AlhIndirectCostComp != null && i < AlhIndirectCostComp.Count)
					{
						value2 = AlhIndirectCostComp[i];
					}

					AlhIndirectCostsEntityAssociation.Add(new AwardLetterHistoryAlhIndirectCosts( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class AwardLetterHistoryAlhAwardPeriodTable
	{
		public string AlhColumnGroupNumberAssocMember;	
		public string AlhColumnGroupNameAssocMember;	
		public string AlhAwardIdAssocMember;	
		public string AlhRowGroupNumberAssocMember;	
		public string AlhRowGroupNameAssocMember;	
		public Decimal? AlhAmountAssocMember;	
		public string AlhHousingIndAssocMember;	
		public string AlhEnrollmentStatusAssocMember;	
		public string AlhEnrlDescAssocMember;	
		public string AlhHousingDescAssocMember;	
		public AwardLetterHistoryAlhAwardPeriodTable() {}
		public AwardLetterHistoryAlhAwardPeriodTable(
			string inAlhColumnGroupNumber,
			string inAlhColumnGroupName,
			string inAlhAwardId,
			string inAlhRowGroupNumber,
			string inAlhRowGroupName,
			Decimal? inAlhAmount,
			string inAlhHousingInd,
			string inAlhEnrollmentStatus,
			string inAlhEnrlDesc,
			string inAlhHousingDesc)
		{
			AlhColumnGroupNumberAssocMember = inAlhColumnGroupNumber;
			AlhColumnGroupNameAssocMember = inAlhColumnGroupName;
			AlhAwardIdAssocMember = inAlhAwardId;
			AlhRowGroupNumberAssocMember = inAlhRowGroupNumber;
			AlhRowGroupNameAssocMember = inAlhRowGroupName;
			AlhAmountAssocMember = inAlhAmount;
			AlhHousingIndAssocMember = inAlhHousingInd;
			AlhEnrollmentStatusAssocMember = inAlhEnrollmentStatus;
			AlhEnrlDescAssocMember = inAlhEnrlDesc;
			AlhHousingDescAssocMember = inAlhHousingDesc;
		}
	}
	
	[Serializable]
	public class AwardLetterHistoryAlhAnnualAwardTable
	{
		public string AlhAnnualAwardIdAssocMember;	
		public Decimal? AlhAnnualAwardAmountsAssocMember;	
		public int? AlhAnnualGroupNumberAssocMember;	
		public AwardLetterHistoryAlhAnnualAwardTable() {}
		public AwardLetterHistoryAlhAnnualAwardTable(
			string inAlhAnnualAwardId,
			Decimal? inAlhAnnualAwardAmounts,
			int? inAlhAnnualGroupNumber)
		{
			AlhAnnualAwardIdAssocMember = inAlhAnnualAwardId;
			AlhAnnualAwardAmountsAssocMember = inAlhAnnualAwardAmounts;
			AlhAnnualGroupNumberAssocMember = inAlhAnnualGroupNumber;
		}
	}
	
	[Serializable]
	public class AwardLetterHistoryAlhGroups
	{
		public string AlhGroupNameAssocMember;	
		public int? AlhGroupNumberAssocMember;	
		public AwardLetterHistoryAlhGroups() {}
		public AwardLetterHistoryAlhGroups(
			string inAlhGroupName,
			int? inAlhGroupNumber)
		{
			AlhGroupNameAssocMember = inAlhGroupName;
			AlhGroupNumberAssocMember = inAlhGroupNumber;
		}
	}
	
	[Serializable]
	public class AwardLetterHistoryAlhDirectCosts
	{
		public string AlhDirectCostDescAssocMember;	
		public int? AlhDirectCostAmountAssocMember;	
		public string AlhDirectCostCompAssocMember;	
		public AwardLetterHistoryAlhDirectCosts() {}
		public AwardLetterHistoryAlhDirectCosts(
			string inAlhDirectCostDesc,
			int? inAlhDirectCostAmount,
			string inAlhDirectCostComp)
		{
			AlhDirectCostDescAssocMember = inAlhDirectCostDesc;
			AlhDirectCostAmountAssocMember = inAlhDirectCostAmount;
			AlhDirectCostCompAssocMember = inAlhDirectCostComp;
		}
	}
	
	[Serializable]
	public class AwardLetterHistoryAlhIndirectCosts
	{
		public string AlhIndirectCostDescAssocMember;	
		public int? AlhIndirectCostAmountAssocMember;	
		public string AlhIndirectCostCompAssocMember;	
		public AwardLetterHistoryAlhIndirectCosts() {}
		public AwardLetterHistoryAlhIndirectCosts(
			string inAlhIndirectCostDesc,
			int? inAlhIndirectCostAmount,
			string inAlhIndirectCostComp)
		{
			AlhIndirectCostDescAssocMember = inAlhIndirectCostDesc;
			AlhIndirectCostAmountAssocMember = inAlhIndirectCostAmount;
			AlhIndirectCostCompAssocMember = inAlhIndirectCostComp;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 1/25/2019 10:02:47 AM by user otorres
//
//     Type: ENTITY
//     Entity: SA.ACYR
//     Application: ST
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.FinancialAid.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "SaAcyr")]
	[ColleagueDataContract(GeneratedDateTime = "1/25/2019 10:02:47 AM", User = "otorres")]
	[EntityDataContract(EntityName = "SA.ACYR", EntityType = "PHYS")]
	public class SaAcyr : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: SA.AWARDED
		/// </summary>
		[DataMember(Order = 4, Name = "SA.AWARDED")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? SaAwarded { get; set; }
		
		/// <summary>
		/// CDD Name: SA.AWARD
		/// </summary>
		[DataMember(Order = 6, Name = "SA.AWARD")]
		public List<string> SaAward { get; set; }
		
		/// <summary>
		/// CDD Name: SA.AMOUNT
		/// </summary>
		[DataMember(Order = 7, Name = "SA.AMOUNT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaAmount { get; set; }
		
		/// <summary>
		/// CDD Name: SA.DATE
		/// </summary>
		[DataMember(Order = 8, Name = "SA.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SaDate { get; set; }
		
		/// <summary>
		/// CDD Name: SA.CWS.EARNINGS
		/// </summary>
		[DataMember(Order = 9, Name = "SA.CWS.EARNINGS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaCwsEarnings { get; set; }
		
		/// <summary>
		/// CDD Name: SA.XMIT.AMT
		/// </summary>
		[DataMember(Order = 10, Name = "SA.XMIT.AMT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaXmitAmt { get; set; }
		
		/// <summary>
		/// CDD Name: SA.PELL.ENTITLEMENT
		/// </summary>
		[DataMember(Order = 11, Name = "SA.PELL.ENTITLEMENT")]
		public List<string> SaPellEntitlement { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ACTION
		/// </summary>
		[DataMember(Order = 13, Name = "SA.ACTION")]
		public List<string> SaAction { get; set; }
		
		/// <summary>
		/// CDD Name: SA.TERMS
		/// </summary>
		[DataMember(Order = 24, Name = "SA.TERMS")]
		public List<string> SaTerms { get; set; }
		
		/// <summary>
		/// CDD Name: SA.TERM.RES
		/// </summary>
		[DataMember(Order = 25, Name = "SA.TERM.RES")]
		public List<string> SaTermRes { get; set; }
		
		/// <summary>
		/// CDD Name: SA.TERM.FP.STATUS
		/// </summary>
		[DataMember(Order = 26, Name = "SA.TERM.FP.STATUS")]
		public List<string> SaTermFpStatus { get; set; }
		
		/// <summary>
		/// CDD Name: SA.MBA
		/// </summary>
		[DataMember(Order = 30, Name = "SA.MBA")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaMba { get; set; }
		
		/// <summary>
		/// CDD Name: SA.MBA.USED
		/// </summary>
		[DataMember(Order = 31, Name = "SA.MBA.USED")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaMbaUsed { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.LOCATION
		/// </summary>
		[DataMember(Order = 32, Name = "SA.ATP.LOCATION")]
		public List<string> SaAtpLocation { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.FREEZE
		/// </summary>
		[DataMember(Order = 33, Name = "SA.ATP.FREEZE")]
		public List<string> SaAtpFreeze { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.DEF.CREDITS
		/// </summary>
		[DataMember(Order = 34, Name = "SA.ATP.DEF.CREDITS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaAtpDefCredits { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.DIST.WT
		/// </summary>
		[DataMember(Order = 35, Name = "SA.ATP.DIST.WT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaAtpDistWt { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.TERM.WEEKS
		/// </summary>
		[DataMember(Order = 36, Name = "SA.ATP.TERM.WEEKS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaAtpTermWeeks { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.PELL.PAY.PERIOD
		/// </summary>
		[DataMember(Order = 37, Name = "SA.ATP.PELL.PAY.PERIOD")]
		public List<string> SaAtpPellPayPeriod { get; set; }
		
		/// <summary>
		/// CDD Name: SA.TERM.HSG
		/// </summary>
		[DataMember(Order = 56, Name = "SA.TERM.HSG")]
		public List<string> SaTermHsg { get; set; }
		
		/// <summary>
		/// CDD Name: SA.SATP.IDS
		/// </summary>
		[DataMember(Order = 57, Name = "SA.SATP.IDS")]
		public List<string> SaSatpIds { get; set; }
		
		/// <summary>
		/// CDD Name: SA.TERM.CMPL.CRED.OVERRIDE
		/// </summary>
		[DataMember(Order = 107, Name = "SA.TERM.CMPL.CRED.OVERRIDE")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaTermCmplCredOverride { get; set; }
		
		/// <summary>
		/// CDD Name: SA.TERM.BUDGET.ACTUAL
		/// </summary>
		[DataMember(Order = 111, Name = "SA.TERM.BUDGET.ACTUAL")]
		public List<string> SaTermBudgetActual { get; set; }
		
		/// <summary>
		/// CDD Name: SA.FRZ.AWD.PD.FOR.ATP
		/// </summary>
		[DataMember(Order = 112, Name = "SA.FRZ.AWD.PD.FOR.ATP")]
		public List<string> SaFrzAwdPdForAtp { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.MONTHS
		/// </summary>
		[DataMember(Order = 114, Name = "SA.ATP.MONTHS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> SaAtpMonths { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.BUDGET.CB
		/// </summary>
		[DataMember(Order = 115, Name = "SA.ATP.BUDGET.CB")]
		public List<int?> SaAtpBudgetCb { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.BUDGET.INST
		/// </summary>
		[DataMember(Order = 116, Name = "SA.ATP.BUDGET.INST")]
		public List<int?> SaAtpBudgetInst { get; set; }
		
		/// <summary>
		/// CDD Name: SA.ATP.BUDGET.PELL
		/// </summary>
		[DataMember(Order = 117, Name = "SA.ATP.BUDGET.PELL")]
		public List<string> SaAtpBudgetPell { get; set; }
		
		/// <summary>
		/// CDD Name: SA.PELL.CUTOFF.OVR.DATE
		/// </summary>
		[DataMember(Order = 119, Name = "SA.PELL.CUTOFF.OVR.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> SaPellCutoffOvrDate { get; set; }
		
		/// <summary>
		/// CDD Name: SA.OVER.LOAN.MAX
		/// </summary>
		[DataMember(Order = 123, Name = "SA.OVER.LOAN.MAX")]
		public string SaOverLoanMax { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<SaAcyrAwardList> AwardListEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<SaAcyrPellEntitlements> PellEntitlementsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<SaAcyrStatusForTerm> StatusForTermEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: AWARD.LIST
			
			AwardListEntityAssociation = new List<SaAcyrAwardList>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(SaAward != null)
			{
				int numAwardList = SaAward.Count;
				if (SaAmount !=null && SaAmount.Count > numAwardList) numAwardList = SaAmount.Count;
				if (SaDate !=null && SaDate.Count > numAwardList) numAwardList = SaDate.Count;
				if (SaCwsEarnings !=null && SaCwsEarnings.Count > numAwardList) numAwardList = SaCwsEarnings.Count;
				if (SaXmitAmt !=null && SaXmitAmt.Count > numAwardList) numAwardList = SaXmitAmt.Count;
				if (SaAction !=null && SaAction.Count > numAwardList) numAwardList = SaAction.Count;

				for (int i = 0; i < numAwardList; i++)
				{

					string value0 = "";
					if (SaAward != null && i < SaAward.Count)
					{
						value0 = SaAward[i];
					}


					Decimal? value1 = null;
					if (SaAmount != null && i < SaAmount.Count)
					{
						value1 = SaAmount[i];
					}


					DateTime? value2 = null;
					if (SaDate != null && i < SaDate.Count)
					{
						value2 = SaDate[i];
					}


					Decimal? value3 = null;
					if (SaCwsEarnings != null && i < SaCwsEarnings.Count)
					{
						value3 = SaCwsEarnings[i];
					}


					Decimal? value4 = null;
					if (SaXmitAmt != null && i < SaXmitAmt.Count)
					{
						value4 = SaXmitAmt[i];
					}


					string value5 = "";
					if (SaAction != null && i < SaAction.Count)
					{
						value5 = SaAction[i];
					}

					AwardListEntityAssociation.Add(new SaAcyrAwardList( value0, value1, value2, value3, value4, value5));
				}
			}
			// EntityAssociation Name: PELL.ENTITLEMENTS
			
			PellEntitlementsEntityAssociation = new List<SaAcyrPellEntitlements>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(SaPellEntitlement != null)
			{
				int numPellEntitlements = SaPellEntitlement.Count;

				for (int i = 0; i < numPellEntitlements; i++)
				{

					string value0 = "";
					if (SaPellEntitlement != null && i < SaPellEntitlement.Count)
					{
						value0 = SaPellEntitlement[i];
					}

					PellEntitlementsEntityAssociation.Add(new SaAcyrPellEntitlements( value0));
				}
			}
			// EntityAssociation Name: STATUS.FOR.TERM
			
			StatusForTermEntityAssociation = new List<SaAcyrStatusForTerm>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(SaTerms != null)
			{
				int numStatusForTerm = SaTerms.Count;
				if (SaTermRes !=null && SaTermRes.Count > numStatusForTerm) numStatusForTerm = SaTermRes.Count;
				if (SaTermFpStatus !=null && SaTermFpStatus.Count > numStatusForTerm) numStatusForTerm = SaTermFpStatus.Count;
				if (SaMba !=null && SaMba.Count > numStatusForTerm) numStatusForTerm = SaMba.Count;
				if (SaMbaUsed !=null && SaMbaUsed.Count > numStatusForTerm) numStatusForTerm = SaMbaUsed.Count;
				if (SaAtpLocation !=null && SaAtpLocation.Count > numStatusForTerm) numStatusForTerm = SaAtpLocation.Count;
				if (SaAtpFreeze !=null && SaAtpFreeze.Count > numStatusForTerm) numStatusForTerm = SaAtpFreeze.Count;
				if (SaAtpDefCredits !=null && SaAtpDefCredits.Count > numStatusForTerm) numStatusForTerm = SaAtpDefCredits.Count;
				if (SaAtpDistWt !=null && SaAtpDistWt.Count > numStatusForTerm) numStatusForTerm = SaAtpDistWt.Count;
				if (SaAtpTermWeeks !=null && SaAtpTermWeeks.Count > numStatusForTerm) numStatusForTerm = SaAtpTermWeeks.Count;
				if (SaAtpPellPayPeriod !=null && SaAtpPellPayPeriod.Count > numStatusForTerm) numStatusForTerm = SaAtpPellPayPeriod.Count;
				if (SaTermHsg !=null && SaTermHsg.Count > numStatusForTerm) numStatusForTerm = SaTermHsg.Count;
				if (SaSatpIds !=null && SaSatpIds.Count > numStatusForTerm) numStatusForTerm = SaSatpIds.Count;
				if (SaTermCmplCredOverride !=null && SaTermCmplCredOverride.Count > numStatusForTerm) numStatusForTerm = SaTermCmplCredOverride.Count;
				if (SaTermBudgetActual !=null && SaTermBudgetActual.Count > numStatusForTerm) numStatusForTerm = SaTermBudgetActual.Count;
				if (SaFrzAwdPdForAtp !=null && SaFrzAwdPdForAtp.Count > numStatusForTerm) numStatusForTerm = SaFrzAwdPdForAtp.Count;
				if (SaAtpMonths !=null && SaAtpMonths.Count > numStatusForTerm) numStatusForTerm = SaAtpMonths.Count;
				if (SaAtpBudgetCb !=null && SaAtpBudgetCb.Count > numStatusForTerm) numStatusForTerm = SaAtpBudgetCb.Count;
				if (SaAtpBudgetInst !=null && SaAtpBudgetInst.Count > numStatusForTerm) numStatusForTerm = SaAtpBudgetInst.Count;
				if (SaAtpBudgetPell !=null && SaAtpBudgetPell.Count > numStatusForTerm) numStatusForTerm = SaAtpBudgetPell.Count;
				if (SaPellCutoffOvrDate !=null && SaPellCutoffOvrDate.Count > numStatusForTerm) numStatusForTerm = SaPellCutoffOvrDate.Count;

				for (int i = 0; i < numStatusForTerm; i++)
				{

					string value0 = "";
					if (SaTerms != null && i < SaTerms.Count)
					{
						value0 = SaTerms[i];
					}


					string value1 = "";
					if (SaTermRes != null && i < SaTermRes.Count)
					{
						value1 = SaTermRes[i];
					}


					string value2 = "";
					if (SaTermFpStatus != null && i < SaTermFpStatus.Count)
					{
						value2 = SaTermFpStatus[i];
					}


					Decimal? value3 = null;
					if (SaMba != null && i < SaMba.Count)
					{
						value3 = SaMba[i];
					}


					Decimal? value4 = null;
					if (SaMbaUsed != null && i < SaMbaUsed.Count)
					{
						value4 = SaMbaUsed[i];
					}


					string value5 = "";
					if (SaAtpLocation != null && i < SaAtpLocation.Count)
					{
						value5 = SaAtpLocation[i];
					}


					string value6 = "";
					if (SaAtpFreeze != null && i < SaAtpFreeze.Count)
					{
						value6 = SaAtpFreeze[i];
					}


					Decimal? value7 = null;
					if (SaAtpDefCredits != null && i < SaAtpDefCredits.Count)
					{
						value7 = SaAtpDefCredits[i];
					}


					Decimal? value8 = null;
					if (SaAtpDistWt != null && i < SaAtpDistWt.Count)
					{
						value8 = SaAtpDistWt[i];
					}


					Decimal? value9 = null;
					if (SaAtpTermWeeks != null && i < SaAtpTermWeeks.Count)
					{
						value9 = SaAtpTermWeeks[i];
					}


					string value10 = "";
					if (SaAtpPellPayPeriod != null && i < SaAtpPellPayPeriod.Count)
					{
						value10 = SaAtpPellPayPeriod[i];
					}


					string value11 = "";
					if (SaTermHsg != null && i < SaTermHsg.Count)
					{
						value11 = SaTermHsg[i];
					}


					string value12 = "";
					if (SaSatpIds != null && i < SaSatpIds.Count)
					{
						value12 = SaSatpIds[i];
					}


					Decimal? value13 = null;
					if (SaTermCmplCredOverride != null && i < SaTermCmplCredOverride.Count)
					{
						value13 = SaTermCmplCredOverride[i];
					}


					string value14 = "";
					if (SaTermBudgetActual != null && i < SaTermBudgetActual.Count)
					{
						value14 = SaTermBudgetActual[i];
					}


					string value15 = "";
					if (SaFrzAwdPdForAtp != null && i < SaFrzAwdPdForAtp.Count)
					{
						value15 = SaFrzAwdPdForAtp[i];
					}


					Decimal? value16 = null;
					if (SaAtpMonths != null && i < SaAtpMonths.Count)
					{
						value16 = SaAtpMonths[i];
					}


					int? value17 = null;
					if (SaAtpBudgetCb != null && i < SaAtpBudgetCb.Count)
					{
						value17 = SaAtpBudgetCb[i];
					}


					int? value18 = null;
					if (SaAtpBudgetInst != null && i < SaAtpBudgetInst.Count)
					{
						value18 = SaAtpBudgetInst[i];
					}


					string value19 = "";
					if (SaAtpBudgetPell != null && i < SaAtpBudgetPell.Count)
					{
						value19 = SaAtpBudgetPell[i];
					}


					DateTime? value20 = null;
					if (SaPellCutoffOvrDate != null && i < SaPellCutoffOvrDate.Count)
					{
						value20 = SaPellCutoffOvrDate[i];
					}

					StatusForTermEntityAssociation.Add(new SaAcyrStatusForTerm( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class SaAcyrAwardList
	{
		public string SaAwardAssocMember;	
		public Decimal? SaAmountAssocMember;	
		public DateTime? SaDateAssocMember;	
		public Decimal? SaCwsEarningsAssocMember;	
		public Decimal? SaXmitAmtAssocMember;	
		public string SaActionAssocMember;	
		public SaAcyrAwardList() {}
		public SaAcyrAwardList(
			string inSaAward,
			Decimal? inSaAmount,
			DateTime? inSaDate,
			Decimal? inSaCwsEarnings,
			Decimal? inSaXmitAmt,
			string inSaAction)
		{
			SaAwardAssocMember = inSaAward;
			SaAmountAssocMember = inSaAmount;
			SaDateAssocMember = inSaDate;
			SaCwsEarningsAssocMember = inSaCwsEarnings;
			SaXmitAmtAssocMember = inSaXmitAmt;
			SaActionAssocMember = inSaAction;
		}
	}
	
	[Serializable]
	public class SaAcyrPellEntitlements
	{
		public string SaPellEntitlementAssocMember;	
		public SaAcyrPellEntitlements() {}
		public SaAcyrPellEntitlements(
			string inSaPellEntitlement)
		{
			SaPellEntitlementAssocMember = inSaPellEntitlement;
		}
	}
	
	[Serializable]
	public class SaAcyrStatusForTerm
	{
		public string SaTermsAssocMember;	
		public string SaTermResAssocMember;	
		public string SaTermFpStatusAssocMember;	
		public Decimal? SaMbaAssocMember;	
		public Decimal? SaMbaUsedAssocMember;	
		public string SaAtpLocationAssocMember;	
		public string SaAtpFreezeAssocMember;	
		public Decimal? SaAtpDefCreditsAssocMember;	
		public Decimal? SaAtpDistWtAssocMember;	
		public Decimal? SaAtpTermWeeksAssocMember;	
		public string SaAtpPellPayPeriodAssocMember;	
		public string SaTermHsgAssocMember;	
		public string SaSatpIdsAssocMember;	
		public Decimal? SaTermCmplCredOverrideAssocMember;	
		public string SaTermBudgetActualAssocMember;	
		public string SaFrzAwdPdForAtpAssocMember;	
		public Decimal? SaAtpMonthsAssocMember;	
		public int? SaAtpBudgetCbAssocMember;	
		public int? SaAtpBudgetInstAssocMember;	
		public string SaAtpBudgetPellAssocMember;	
		public DateTime? SaPellCutoffOvrDateAssocMember;	
		public SaAcyrStatusForTerm() {}
		public SaAcyrStatusForTerm(
			string inSaTerms,
			string inSaTermRes,
			string inSaTermFpStatus,
			Decimal? inSaMba,
			Decimal? inSaMbaUsed,
			string inSaAtpLocation,
			string inSaAtpFreeze,
			Decimal? inSaAtpDefCredits,
			Decimal? inSaAtpDistWt,
			Decimal? inSaAtpTermWeeks,
			string inSaAtpPellPayPeriod,
			string inSaTermHsg,
			string inSaSatpIds,
			Decimal? inSaTermCmplCredOverride,
			string inSaTermBudgetActual,
			string inSaFrzAwdPdForAtp,
			Decimal? inSaAtpMonths,
			int? inSaAtpBudgetCb,
			int? inSaAtpBudgetInst,
			string inSaAtpBudgetPell,
			DateTime? inSaPellCutoffOvrDate)
		{
			SaTermsAssocMember = inSaTerms;
			SaTermResAssocMember = inSaTermRes;
			SaTermFpStatusAssocMember = inSaTermFpStatus;
			SaMbaAssocMember = inSaMba;
			SaMbaUsedAssocMember = inSaMbaUsed;
			SaAtpLocationAssocMember = inSaAtpLocation;
			SaAtpFreezeAssocMember = inSaAtpFreeze;
			SaAtpDefCreditsAssocMember = inSaAtpDefCredits;
			SaAtpDistWtAssocMember = inSaAtpDistWt;
			SaAtpTermWeeksAssocMember = inSaAtpTermWeeks;
			SaAtpPellPayPeriodAssocMember = inSaAtpPellPayPeriod;
			SaTermHsgAssocMember = inSaTermHsg;
			SaSatpIdsAssocMember = inSaSatpIds;
			SaTermCmplCredOverrideAssocMember = inSaTermCmplCredOverride;
			SaTermBudgetActualAssocMember = inSaTermBudgetActual;
			SaFrzAwdPdForAtpAssocMember = inSaFrzAwdPdForAtp;
			SaAtpMonthsAssocMember = inSaAtpMonths;
			SaAtpBudgetCbAssocMember = inSaAtpBudgetCb;
			SaAtpBudgetInstAssocMember = inSaAtpBudgetInst;
			SaAtpBudgetPellAssocMember = inSaAtpBudgetPell;
			SaPellCutoffOvrDateAssocMember = inSaPellCutoffOvrDate;
		}
	}
}
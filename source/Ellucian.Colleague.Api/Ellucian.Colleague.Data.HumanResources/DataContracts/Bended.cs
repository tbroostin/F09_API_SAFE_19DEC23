//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 2:23:20 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: BENDED
//     Application: HR
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.HumanResources.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Bended")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 2:23:20 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "BENDED", EntityType = "PHYS")]
	public class Bended : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: BD.DESC
		/// </summary>
		[DataMember(Order = 0, Name = "BD.DESC")]
		public string BdDesc { get; set; }
		
		/// <summary>
		/// CDD Name: BD.CALC.METHOD
		/// </summary>
		[DataMember(Order = 5, Name = "BD.CALC.METHOD")]
		public string BdCalcMethod { get; set; }
		
		/// <summary>
		/// CDD Name: BD.TAX.INSURE.UNTIL
		/// </summary>
		[DataMember(Order = 17, Name = "BD.TAX.INSURE.UNTIL")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BdTaxInsureUntil { get; set; }
		
		/// <summary>
		/// CDD Name: BD.TAX.INSURE.AFTER
		/// </summary>
		[DataMember(Order = 18, Name = "BD.TAX.INSURE.AFTER")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BdTaxInsureAfter { get; set; }
		
		/// <summary>
		/// CDD Name: BD.INSTITUTION.TYPE
		/// </summary>
		[DataMember(Order = 19, Name = "BD.INSTITUTION.TYPE")]
		public string BdInstitutionType { get; set; }
		
		/// <summary>
		/// CDD Name: BD.PAYERS
		/// </summary>
		[DataMember(Order = 30, Name = "BD.PAYERS")]
		public string BdPayers { get; set; }
		
		/// <summary>
		/// CDD Name: BD.DEFER.TAX.CODES
		/// </summary>
		[DataMember(Order = 39, Name = "BD.DEFER.TAX.CODES")]
		public List<string> BdDeferTaxCodes { get; set; }
		
		/// <summary>
		/// CDD Name: BD.DEFER.TAX.UNTIL
		/// </summary>
		[DataMember(Order = 40, Name = "BD.DEFER.TAX.UNTIL")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BdDeferTaxUntil { get; set; }
		
		/// <summary>
		/// CDD Name: BD.DEFER.TAX.AFTER
		/// </summary>
		[DataMember(Order = 41, Name = "BD.DEFER.TAX.AFTER")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BdDeferTaxAfter { get; set; }
		
		/// <summary>
		/// CDD Name: BD.TXABL.TAX.CODES
		/// </summary>
		[DataMember(Order = 43, Name = "BD.TXABL.TAX.CODES")]
		public List<string> BdTxablTaxCodes { get; set; }
		
		/// <summary>
		/// CDD Name: BD.TXABL.TAX.UNTIL
		/// </summary>
		[DataMember(Order = 45, Name = "BD.TXABL.TAX.UNTIL")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BdTxablTaxUntil { get; set; }
		
		/// <summary>
		/// CDD Name: BD.TXABL.TAX.AFTER
		/// </summary>
		[DataMember(Order = 46, Name = "BD.TXABL.TAX.AFTER")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> BdTxablTaxAfter { get; set; }
		
		/// <summary>
		/// CDD Name: BD.WITHHOLDING.PAY.CYCLES
		/// </summary>
		[DataMember(Order = 83, Name = "BD.WITHHOLDING.PAY.CYCLES")]
		public int? BdWithholdingPayCycles { get; set; }
		
		/// <summary>
		/// CDD Name: BD.SELF.SERVICE.DESC
		/// </summary>
		[DataMember(Order = 84, Name = "BD.SELF.SERVICE.DESC")]
		public string BdSelfServiceDesc { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BendedBdtaxabl> BdtaxablEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<BendedBddefer> BddeferEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: BDTAXABL
			
			BdtaxablEntityAssociation = new List<BendedBdtaxabl>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BdTxablTaxCodes != null)
			{
				int numBdtaxabl = BdTxablTaxCodes.Count;
				if (BdTaxInsureUntil !=null && BdTaxInsureUntil.Count > numBdtaxabl) numBdtaxabl = BdTaxInsureUntil.Count;
				if (BdTaxInsureAfter !=null && BdTaxInsureAfter.Count > numBdtaxabl) numBdtaxabl = BdTaxInsureAfter.Count;
				if (BdTxablTaxUntil !=null && BdTxablTaxUntil.Count > numBdtaxabl) numBdtaxabl = BdTxablTaxUntil.Count;
				if (BdTxablTaxAfter !=null && BdTxablTaxAfter.Count > numBdtaxabl) numBdtaxabl = BdTxablTaxAfter.Count;

				for (int i = 0; i < numBdtaxabl; i++)
				{

					Decimal? value0 = null;
					if (BdTaxInsureUntil != null && i < BdTaxInsureUntil.Count)
					{
						value0 = BdTaxInsureUntil[i];
					}


					Decimal? value1 = null;
					if (BdTaxInsureAfter != null && i < BdTaxInsureAfter.Count)
					{
						value1 = BdTaxInsureAfter[i];
					}


					string value2 = "";
					if (BdTxablTaxCodes != null && i < BdTxablTaxCodes.Count)
					{
						value2 = BdTxablTaxCodes[i];
					}


					Decimal? value3 = null;
					if (BdTxablTaxUntil != null && i < BdTxablTaxUntil.Count)
					{
						value3 = BdTxablTaxUntil[i];
					}


					Decimal? value4 = null;
					if (BdTxablTaxAfter != null && i < BdTxablTaxAfter.Count)
					{
						value4 = BdTxablTaxAfter[i];
					}

					BdtaxablEntityAssociation.Add(new BendedBdtaxabl( value0, value1, value2, value3, value4));
				}
			}
			// EntityAssociation Name: BDDEFER
			
			BddeferEntityAssociation = new List<BendedBddefer>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(BdDeferTaxCodes != null)
			{
				int numBddefer = BdDeferTaxCodes.Count;
				if (BdDeferTaxUntil !=null && BdDeferTaxUntil.Count > numBddefer) numBddefer = BdDeferTaxUntil.Count;
				if (BdDeferTaxAfter !=null && BdDeferTaxAfter.Count > numBddefer) numBddefer = BdDeferTaxAfter.Count;

				for (int i = 0; i < numBddefer; i++)
				{

					string value0 = "";
					if (BdDeferTaxCodes != null && i < BdDeferTaxCodes.Count)
					{
						value0 = BdDeferTaxCodes[i];
					}


					Decimal? value1 = null;
					if (BdDeferTaxUntil != null && i < BdDeferTaxUntil.Count)
					{
						value1 = BdDeferTaxUntil[i];
					}


					Decimal? value2 = null;
					if (BdDeferTaxAfter != null && i < BdDeferTaxAfter.Count)
					{
						value2 = BdDeferTaxAfter[i];
					}

					BddeferEntityAssociation.Add(new BendedBddefer( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class BendedBdtaxabl
	{
		public Decimal? BdTaxInsureUntilAssocMember;	
		public Decimal? BdTaxInsureAfterAssocMember;	
		public string BdTxablTaxCodesAssocMember;	
		public Decimal? BdTxablTaxUntilAssocMember;	
		public Decimal? BdTxablTaxAfterAssocMember;	
		public BendedBdtaxabl() {}
		public BendedBdtaxabl(
			Decimal? inBdTaxInsureUntil,
			Decimal? inBdTaxInsureAfter,
			string inBdTxablTaxCodes,
			Decimal? inBdTxablTaxUntil,
			Decimal? inBdTxablTaxAfter)
		{
			BdTaxInsureUntilAssocMember = inBdTaxInsureUntil;
			BdTaxInsureAfterAssocMember = inBdTaxInsureAfter;
			BdTxablTaxCodesAssocMember = inBdTxablTaxCodes;
			BdTxablTaxUntilAssocMember = inBdTxablTaxUntil;
			BdTxablTaxAfterAssocMember = inBdTxablTaxAfter;
		}
	}
	
	[Serializable]
	public class BendedBddefer
	{
		public string BdDeferTaxCodesAssocMember;	
		public Decimal? BdDeferTaxUntilAssocMember;	
		public Decimal? BdDeferTaxAfterAssocMember;	
		public BendedBddefer() {}
		public BendedBddefer(
			string inBdDeferTaxCodes,
			Decimal? inBdDeferTaxUntil,
			Decimal? inBdDeferTaxAfter)
		{
			BdDeferTaxCodesAssocMember = inBdDeferTaxCodes;
			BdDeferTaxUntilAssocMember = inBdDeferTaxUntil;
			BdDeferTaxAfterAssocMember = inBdDeferTaxAfter;
		}
	}
}
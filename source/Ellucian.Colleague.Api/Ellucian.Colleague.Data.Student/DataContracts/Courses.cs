//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 2/18/2021 2:44:06 PM by user rebecca.rowland
//
//     Type: ENTITY
//     Entity: COURSES
//     Application: ST
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Courses")]
	[ColleagueDataContract(GeneratedDateTime = "2/18/2021 2:44:06 PM", User = "rebecca.rowland")]
	[EntityDataContract(EntityName = "COURSES", EntityType = "PHYS")]
	public class Courses : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: CRS.TITLE
		/// </summary>
		[DataMember(Order = 0, Name = "CRS.TITLE")]
		public string CrsTitle { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.DEPTS
		/// </summary>
		[DataMember(Order = 1, Name = "CRS.DEPTS")]
		public List<string> CrsDepts { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CRED.TYPE
		/// </summary>
		[DataMember(Order = 2, Name = "CRS.CRED.TYPE")]
		public string CrsCredType { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.NAME
		/// </summary>
		[DataMember(Order = 3, Name = "CRS.NAME")]
		public string CrsName { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.DEPT.PCTS
		/// </summary>
		[DataMember(Order = 4, Name = "CRS.DEPT.PCTS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> CrsDeptPcts { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.SESSION.CYCLE
		/// </summary>
		[DataMember(Order = 5, Name = "CRS.SESSION.CYCLE")]
		public string CrsSessionCycle { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.YEARLY.CYCLE
		/// </summary>
		[DataMember(Order = 6, Name = "CRS.YEARLY.CYCLE")]
		public string CrsYearlyCycle { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.DESC
		/// </summary>
		[DataMember(Order = 9, Name = "CRS.DESC")]
		public string CrsDesc { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.SHORT.TITLE
		/// </summary>
		[DataMember(Order = 10, Name = "CRS.SHORT.TITLE")]
		public string CrsShortTitle { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.SUBJECT
		/// </summary>
		[DataMember(Order = 11, Name = "CRS.SUBJECT")]
		public string CrsSubject { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.MIN.CRED
		/// </summary>
		[DataMember(Order = 12, Name = "CRS.MIN.CRED")]
		[DisplayFormat(DataFormatString = "{0:N5}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? CrsMinCred { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.MAX.CRED
		/// </summary>
		[DataMember(Order = 13, Name = "CRS.MAX.CRED")]
		[DisplayFormat(DataFormatString = "{0:N5}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? CrsMaxCred { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.PREREQS
		/// </summary>
		[DataMember(Order = 14, Name = "CRS.PREREQS")]
		public string CrsPrereqs { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.NO
		/// </summary>
		[DataMember(Order = 15, Name = "CRS.NO")]
		public string CrsNo { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.STATUS
		/// </summary>
		[DataMember(Order = 16, Name = "CRS.STATUS")]
		public List<string> CrsStatus { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.APPROVAL.IDS
		/// </summary>
		[DataMember(Order = 17, Name = "CRS.APPROVAL.IDS")]
		public List<string> CrsApprovalIds { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.APPROVAL.AGENCY.IDS
		/// </summary>
		[DataMember(Order = 18, Name = "CRS.APPROVAL.AGENCY.IDS")]
		public List<string> CrsApprovalAgencyIds { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.APPROVAL.DATE
		/// </summary>
		[DataMember(Order = 20, Name = "CRS.APPROVAL.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> CrsApprovalDate { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.STATUS.DATE
		/// </summary>
		[DataMember(Order = 21, Name = "CRS.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> CrsStatusDate { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.COREQ.COURSES
		/// </summary>
		[DataMember(Order = 22, Name = "CRS.COREQ.COURSES")]
		public List<string> CrsCoreqCourses { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CONTACT.MEASURES
		/// </summary>
		[DataMember(Order = 23, Name = "CRS.CONTACT.MEASURES")]
		public List<string> CrsContactMeasures { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CIP
		/// </summary>
		[DataMember(Order = 25, Name = "CRS.CIP")]
		public string CrsCip { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.START.DATE
		/// </summary>
		[DataMember(Order = 27, Name = "CRS.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? CrsStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.END.DATE
		/// </summary>
		[DataMember(Order = 28, Name = "CRS.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? CrsEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.LOCAL.GOVT.CODES
		/// </summary>
		[DataMember(Order = 29, Name = "CRS.LOCAL.GOVT.CODES")]
		public List<string> CrsLocalGovtCodes { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.COURSE.TYPES
		/// </summary>
		[DataMember(Order = 31, Name = "CRS.COURSE.TYPES")]
		public List<string> CrsCourseTypes { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.ACAD.LEVEL
		/// </summary>
		[DataMember(Order = 33, Name = "CRS.ACAD.LEVEL")]
		public string CrsAcadLevel { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.LEVELS
		/// </summary>
		[DataMember(Order = 34, Name = "CRS.LEVELS")]
		public List<string> CrsLevels { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.LOAD
		/// </summary>
		[DataMember(Order = 35, Name = "CRS.LOAD")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> CrsLoad { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.GRADE.SCHEME
		/// </summary>
		[DataMember(Order = 36, Name = "CRS.GRADE.SCHEME")]
		public string CrsGradeScheme { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CONTACT.HOURS
		/// </summary>
		[DataMember(Order = 38, Name = "CRS.CONTACT.HOURS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> CrsContactHours { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.VAR.CRED.INCREMENT
		/// </summary>
		[DataMember(Order = 41, Name = "CRS.VAR.CRED.INCREMENT")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? CrsVarCredIncrement { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.LOCATIONS
		/// </summary>
		[DataMember(Order = 48, Name = "CRS.LOCATIONS")]
		public List<string> CrsLocations { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.INSTR.METHODS
		/// </summary>
		[DataMember(Order = 52, Name = "CRS.INSTR.METHODS")]
		public List<string> CrsInstrMethods { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.COREQ.COURSES.REQD.FLAG
		/// </summary>
		[DataMember(Order = 53, Name = "CRS.COREQ.COURSES.REQD.FLAG")]
		public List<string> CrsCoreqCoursesReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.BILLING.CRED
		/// </summary>
		[DataMember(Order = 58, Name = "CRS.BILLING.CRED")]
		[DisplayFormat(DataFormatString = "{0:N5}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? CrsBillingCred { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.EQUATE.CODES
		/// </summary>
		[DataMember(Order = 62, Name = "CRS.EQUATE.CODES")]
		public List<string> CrsEquateCodes { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CLOCK.HOURS
		/// </summary>
		[DataMember(Order = 66, Name = "CRS.CLOCK.HOURS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<Decimal?> CrsClockHours { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.COUNT.RETAKE.CRED.FLAG
		/// </summary>
		[DataMember(Order = 68, Name = "CRS.COUNT.RETAKE.CRED.FLAG")]
		public string CrsCountRetakeCredFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.ALLOW.AUDIT.FLAG
		/// </summary>
		[DataMember(Order = 73, Name = "CRS.ALLOW.AUDIT.FLAG")]
		public string CrsAllowAuditFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.ALLOW.PASS.NOPASS.FLAG
		/// </summary>
		[DataMember(Order = 74, Name = "CRS.ALLOW.PASS.NOPASS.FLAG")]
		public string CrsAllowPassNopassFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.ONLY.PASS.NOPASS.FLAG
		/// </summary>
		[DataMember(Order = 75, Name = "CRS.ONLY.PASS.NOPASS.FLAG")]
		public string CrsOnlyPassNopassFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.ALLOW.WAITLIST.FLAG
		/// </summary>
		[DataMember(Order = 77, Name = "CRS.ALLOW.WAITLIST.FLAG")]
		public string CrsAllowWaitlistFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CEUS
		/// </summary>
		[DataMember(Order = 79, Name = "CRS.CEUS")]
		[DisplayFormat(DataFormatString = "{0:N2}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? CrsCeus { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.TOPIC.CODE
		/// </summary>
		[DataMember(Order = 84, Name = "CRS.TOPIC.CODE")]
		public string CrsTopicCode { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.WAITLIST.MULT.SECT.FLAG
		/// </summary>
		[DataMember(Order = 120, Name = "CRS.WAITLIST.MULT.SECT.FLAG")]
		public string CrsWaitlistMultSectFlag { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.REQS
		/// </summary>
		[DataMember(Order = 134, Name = "CRS.REQS")]
		public List<string> CrsReqs { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.EXTERNAL.SOURCE
		/// </summary>
		[DataMember(Order = 138, Name = "CRS.EXTERNAL.SOURCE")]
		public string CrsExternalSource { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CLC.LOCATION
		/// </summary>
		[DataMember(Order = 140, Name = "CRS.CLC.LOCATION")]
		public List<string> CrsClcLocation { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CLC.SESSION.CYCLE
		/// </summary>
		[DataMember(Order = 141, Name = "CRS.CLC.SESSION.CYCLE")]
		public List<string> CrsClcSessionCycle { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.CLC.YEARLY.CYCLE
		/// </summary>
		[DataMember(Order = 142, Name = "CRS.CLC.YEARLY.CYCLE")]
		public List<string> CrsClcYearlyCycle { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.OVR.VERIFY.GRADES
		/// </summary>
		[DataMember(Order = 143, Name = "CRS.OVR.VERIFY.GRADES")]
		public string CrsOvrVerifyGrades { get; set; }
		
		/// <summary>
		/// CDD Name: CRS.SHOW.DROP.ROSTER.FLAG
		/// </summary>
		[DataMember(Order = 147, Name = "CRS.SHOW.DROP.ROSTER.FLAG")]
		public string CrsShowDropRosterFlag { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<CoursesCourseDepts> CourseDeptsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<CoursesApprovalStatus> ApprovalStatusEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<CoursesCourseCoreqs> CourseCoreqsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<CoursesCourseContact> CourseContactEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<CoursesCourseLocationCycles> CourseLocationCyclesEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: COURSE.DEPTS
			
			CourseDeptsEntityAssociation = new List<CoursesCourseDepts>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(CrsDepts != null)
			{
				int numCourseDepts = CrsDepts.Count;
				if (CrsDeptPcts !=null && CrsDeptPcts.Count > numCourseDepts) numCourseDepts = CrsDeptPcts.Count;

				for (int i = 0; i < numCourseDepts; i++)
				{

					string value0 = "";
					if (CrsDepts != null && i < CrsDepts.Count)
					{
						value0 = CrsDepts[i];
					}


					Decimal? value1 = null;
					if (CrsDeptPcts != null && i < CrsDeptPcts.Count)
					{
						value1 = CrsDeptPcts[i];
					}

					CourseDeptsEntityAssociation.Add(new CoursesCourseDepts( value0, value1));
				}
			}
			// EntityAssociation Name: APPROVAL.STATUS
			
			ApprovalStatusEntityAssociation = new List<CoursesApprovalStatus>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(CrsStatus != null)
			{
				int numApprovalStatus = CrsStatus.Count;
				if (CrsApprovalIds !=null && CrsApprovalIds.Count > numApprovalStatus) numApprovalStatus = CrsApprovalIds.Count;
				if (CrsApprovalAgencyIds !=null && CrsApprovalAgencyIds.Count > numApprovalStatus) numApprovalStatus = CrsApprovalAgencyIds.Count;
				if (CrsApprovalDate !=null && CrsApprovalDate.Count > numApprovalStatus) numApprovalStatus = CrsApprovalDate.Count;
				if (CrsStatusDate !=null && CrsStatusDate.Count > numApprovalStatus) numApprovalStatus = CrsStatusDate.Count;

				for (int i = 0; i < numApprovalStatus; i++)
				{

					string value0 = "";
					if (CrsStatus != null && i < CrsStatus.Count)
					{
						value0 = CrsStatus[i];
					}


					string value1 = "";
					if (CrsApprovalIds != null && i < CrsApprovalIds.Count)
					{
						value1 = CrsApprovalIds[i];
					}


					string value2 = "";
					if (CrsApprovalAgencyIds != null && i < CrsApprovalAgencyIds.Count)
					{
						value2 = CrsApprovalAgencyIds[i];
					}


					DateTime? value3 = null;
					if (CrsApprovalDate != null && i < CrsApprovalDate.Count)
					{
						value3 = CrsApprovalDate[i];
					}


					DateTime? value4 = null;
					if (CrsStatusDate != null && i < CrsStatusDate.Count)
					{
						value4 = CrsStatusDate[i];
					}

					ApprovalStatusEntityAssociation.Add(new CoursesApprovalStatus( value0, value1, value2, value3, value4));
				}
			}
			// EntityAssociation Name: COURSE.COREQS
			
			CourseCoreqsEntityAssociation = new List<CoursesCourseCoreqs>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(CrsCoreqCourses != null)
			{
				int numCourseCoreqs = CrsCoreqCourses.Count;
				if (CrsCoreqCoursesReqdFlag !=null && CrsCoreqCoursesReqdFlag.Count > numCourseCoreqs) numCourseCoreqs = CrsCoreqCoursesReqdFlag.Count;

				for (int i = 0; i < numCourseCoreqs; i++)
				{

					string value0 = "";
					if (CrsCoreqCourses != null && i < CrsCoreqCourses.Count)
					{
						value0 = CrsCoreqCourses[i];
					}


					string value1 = "";
					if (CrsCoreqCoursesReqdFlag != null && i < CrsCoreqCoursesReqdFlag.Count)
					{
						value1 = CrsCoreqCoursesReqdFlag[i];
					}

					CourseCoreqsEntityAssociation.Add(new CoursesCourseCoreqs( value0, value1));
				}
			}
			// EntityAssociation Name: COURSE.CONTACT
			
			CourseContactEntityAssociation = new List<CoursesCourseContact>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(CrsInstrMethods != null)
			{
				int numCourseContact = CrsInstrMethods.Count;
				if (CrsContactMeasures !=null && CrsContactMeasures.Count > numCourseContact) numCourseContact = CrsContactMeasures.Count;
				if (CrsLoad !=null && CrsLoad.Count > numCourseContact) numCourseContact = CrsLoad.Count;
				if (CrsContactHours !=null && CrsContactHours.Count > numCourseContact) numCourseContact = CrsContactHours.Count;
				if (CrsClockHours !=null && CrsClockHours.Count > numCourseContact) numCourseContact = CrsClockHours.Count;

				for (int i = 0; i < numCourseContact; i++)
				{

					string value0 = "";
					if (CrsContactMeasures != null && i < CrsContactMeasures.Count)
					{
						value0 = CrsContactMeasures[i];
					}


					Decimal? value1 = null;
					if (CrsLoad != null && i < CrsLoad.Count)
					{
						value1 = CrsLoad[i];
					}


					Decimal? value2 = null;
					if (CrsContactHours != null && i < CrsContactHours.Count)
					{
						value2 = CrsContactHours[i];
					}


					string value3 = "";
					if (CrsInstrMethods != null && i < CrsInstrMethods.Count)
					{
						value3 = CrsInstrMethods[i];
					}


					Decimal? value4 = null;
					if (CrsClockHours != null && i < CrsClockHours.Count)
					{
						value4 = CrsClockHours[i];
					}

					CourseContactEntityAssociation.Add(new CoursesCourseContact( value0, value1, value2, value3, value4));
				}
			}
			// EntityAssociation Name: COURSE.LOCATION.CYCLES
			
			CourseLocationCyclesEntityAssociation = new List<CoursesCourseLocationCycles>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(CrsClcLocation != null)
			{
				int numCourseLocationCycles = CrsClcLocation.Count;
				if (CrsClcSessionCycle !=null && CrsClcSessionCycle.Count > numCourseLocationCycles) numCourseLocationCycles = CrsClcSessionCycle.Count;
				if (CrsClcYearlyCycle !=null && CrsClcYearlyCycle.Count > numCourseLocationCycles) numCourseLocationCycles = CrsClcYearlyCycle.Count;

				for (int i = 0; i < numCourseLocationCycles; i++)
				{

					string value0 = "";
					if (CrsClcLocation != null && i < CrsClcLocation.Count)
					{
						value0 = CrsClcLocation[i];
					}


					string value1 = "";
					if (CrsClcSessionCycle != null && i < CrsClcSessionCycle.Count)
					{
						value1 = CrsClcSessionCycle[i];
					}


					string value2 = "";
					if (CrsClcYearlyCycle != null && i < CrsClcYearlyCycle.Count)
					{
						value2 = CrsClcYearlyCycle[i];
					}

					CourseLocationCyclesEntityAssociation.Add(new CoursesCourseLocationCycles( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class CoursesCourseDepts
	{
		public string CrsDeptsAssocMember;	
		public Decimal? CrsDeptPctsAssocMember;	
		public CoursesCourseDepts() {}
		public CoursesCourseDepts(
			string inCrsDepts,
			Decimal? inCrsDeptPcts)
		{
			CrsDeptsAssocMember = inCrsDepts;
			CrsDeptPctsAssocMember = inCrsDeptPcts;
		}
	}
	
	[Serializable]
	public class CoursesApprovalStatus
	{
		public string CrsStatusAssocMember;	
		public string CrsApprovalIdsAssocMember;	
		public string CrsApprovalAgencyIdsAssocMember;	
		public DateTime? CrsApprovalDateAssocMember;	
		public DateTime? CrsStatusDateAssocMember;	
		public CoursesApprovalStatus() {}
		public CoursesApprovalStatus(
			string inCrsStatus,
			string inCrsApprovalIds,
			string inCrsApprovalAgencyIds,
			DateTime? inCrsApprovalDate,
			DateTime? inCrsStatusDate)
		{
			CrsStatusAssocMember = inCrsStatus;
			CrsApprovalIdsAssocMember = inCrsApprovalIds;
			CrsApprovalAgencyIdsAssocMember = inCrsApprovalAgencyIds;
			CrsApprovalDateAssocMember = inCrsApprovalDate;
			CrsStatusDateAssocMember = inCrsStatusDate;
		}
	}
	
	[Serializable]
	public class CoursesCourseCoreqs
	{
		public string CrsCoreqCoursesAssocMember;	
		public string CrsCoreqCoursesReqdFlagAssocMember;	
		public CoursesCourseCoreqs() {}
		public CoursesCourseCoreqs(
			string inCrsCoreqCourses,
			string inCrsCoreqCoursesReqdFlag)
		{
			CrsCoreqCoursesAssocMember = inCrsCoreqCourses;
			CrsCoreqCoursesReqdFlagAssocMember = inCrsCoreqCoursesReqdFlag;
		}
	}
	
	[Serializable]
	public class CoursesCourseContact
	{
		public string CrsContactMeasuresAssocMember;	
		public Decimal? CrsLoadAssocMember;	
		public Decimal? CrsContactHoursAssocMember;	
		public string CrsInstrMethodsAssocMember;	
		public Decimal? CrsClockHoursAssocMember;	
		public CoursesCourseContact() {}
		public CoursesCourseContact(
			string inCrsContactMeasures,
			Decimal? inCrsLoad,
			Decimal? inCrsContactHours,
			string inCrsInstrMethods,
			Decimal? inCrsClockHours)
		{
			CrsContactMeasuresAssocMember = inCrsContactMeasures;
			CrsLoadAssocMember = inCrsLoad;
			CrsContactHoursAssocMember = inCrsContactHours;
			CrsInstrMethodsAssocMember = inCrsInstrMethods;
			CrsClockHoursAssocMember = inCrsClockHours;
		}
	}
	
	[Serializable]
	public class CoursesCourseLocationCycles
	{
		public string CrsClcLocationAssocMember;	
		public string CrsClcSessionCycleAssocMember;	
		public string CrsClcYearlyCycleAssocMember;	
		public CoursesCourseLocationCycles() {}
		public CoursesCourseLocationCycles(
			string inCrsClcLocation,
			string inCrsClcSessionCycle,
			string inCrsClcYearlyCycle)
		{
			CrsClcLocationAssocMember = inCrsClcLocation;
			CrsClcSessionCycleAssocMember = inCrsClcSessionCycle;
			CrsClcYearlyCycleAssocMember = inCrsClcYearlyCycle;
		}
	}
}
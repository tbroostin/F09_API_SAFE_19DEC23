//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 9/12/2019 5:49:37 PM by user ramyajoshi
//
//     Type: ENTITY
//     Entity: FACULTY
//     Application: ST
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Faculty")]
	[ColleagueDataContract(GeneratedDateTime = "9/12/2019 5:49:37 PM", User = "ramyajoshi")]
	[EntityDataContract(EntityName = "FACULTY", EntityType = "PHYS")]
	public class Faculty : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: FAC.ADVISEES
		/// </summary>
		[DataMember(Order = 1, Name = "FAC.ADVISEES")]
		public List<string> FacAdvisees { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.HOURS
		/// </summary>
		[DataMember(Order = 3, Name = "FAC.OFFICE.HOURS")]
		public List<string> FacOfficeHours { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.SPECIAL.STATUS
		/// </summary>
		[DataMember(Order = 4, Name = "FAC.SPECIAL.STATUS")]
		public string FacSpecialStatus { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.START.TIME
		/// </summary>
		[DataMember(Order = 5, Name = "FAC.OFFICE.START.TIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FacOfficeStartTime { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.END.TIME
		/// </summary>
		[DataMember(Order = 6, Name = "FAC.OFFICE.END.TIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FacOfficeEndTime { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.DEPTS
		/// </summary>
		[DataMember(Order = 11, Name = "FAC.DEPTS")]
		public List<string> FacDepts { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.DEPT.PCTS
		/// </summary>
		[DataMember(Order = 12, Name = "FAC.DEPT.PCTS")]
		public List<int?> FacDeptPcts { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.HOME.LOCATION
		/// </summary>
		[DataMember(Order = 13, Name = "FAC.HOME.LOCATION")]
		public string FacHomeLocation { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.ADVISE.FLAG
		/// </summary>
		[DataMember(Order = 22, Name = "FAC.ADVISE.FLAG")]
		public string FacAdviseFlag { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.CONTRACT.TYPE
		/// </summary>
		[DataMember(Order = 25, Name = "FAC.CONTRACT.TYPE")]
		public string FacContractType { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.START.DATE
		/// </summary>
		[DataMember(Order = 26, Name = "FAC.OFFICE.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FacOfficeStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.END.DATE
		/// </summary>
		[DataMember(Order = 27, Name = "FAC.OFFICE.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> FacOfficeEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.REPEAT
		/// </summary>
		[DataMember(Order = 28, Name = "FAC.OFFICE.REPEAT")]
		public List<string> FacOfficeRepeat { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.BLDG
		/// </summary>
		[DataMember(Order = 31, Name = "FAC.OFFICE.BLDG")]
		public List<string> FacOfficeBldg { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.ROOM
		/// </summary>
		[DataMember(Order = 44, Name = "FAC.OFFICE.ROOM")]
		public List<string> FacOfficeRoom { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.MONDAY
		/// </summary>
		[DataMember(Order = 45, Name = "FAC.OFFICE.MONDAY")]
		public List<string> FacOfficeMonday { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.TUESDAY
		/// </summary>
		[DataMember(Order = 46, Name = "FAC.OFFICE.TUESDAY")]
		public List<string> FacOfficeTuesday { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.WEDNESDAY
		/// </summary>
		[DataMember(Order = 47, Name = "FAC.OFFICE.WEDNESDAY")]
		public List<string> FacOfficeWednesday { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.THURSDAY
		/// </summary>
		[DataMember(Order = 48, Name = "FAC.OFFICE.THURSDAY")]
		public List<string> FacOfficeThursday { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.FRIDAY
		/// </summary>
		[DataMember(Order = 49, Name = "FAC.OFFICE.FRIDAY")]
		public List<string> FacOfficeFriday { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.SATURDAY
		/// </summary>
		[DataMember(Order = 50, Name = "FAC.OFFICE.SATURDAY")]
		public List<string> FacOfficeSaturday { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.OFFICE.SUNDAY
		/// </summary>
		[DataMember(Order = 51, Name = "FAC.OFFICE.SUNDAY")]
		public List<string> FacOfficeSunday { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<FacultyOfficeHours> OfficeHoursEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<FacultyDeptLoad> DeptLoadEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: OFFICE.HOURS
			
			OfficeHoursEntityAssociation = new List<FacultyOfficeHours>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FacOfficeStartDate != null)
			{
				int numOfficeHours = FacOfficeStartDate.Count;
				if (FacOfficeStartTime !=null && FacOfficeStartTime.Count > numOfficeHours) numOfficeHours = FacOfficeStartTime.Count;
				if (FacOfficeEndTime !=null && FacOfficeEndTime.Count > numOfficeHours) numOfficeHours = FacOfficeEndTime.Count;
				if (FacOfficeEndDate !=null && FacOfficeEndDate.Count > numOfficeHours) numOfficeHours = FacOfficeEndDate.Count;
				if (FacOfficeRepeat !=null && FacOfficeRepeat.Count > numOfficeHours) numOfficeHours = FacOfficeRepeat.Count;
				if (FacOfficeBldg !=null && FacOfficeBldg.Count > numOfficeHours) numOfficeHours = FacOfficeBldg.Count;
				if (FacOfficeRoom !=null && FacOfficeRoom.Count > numOfficeHours) numOfficeHours = FacOfficeRoom.Count;
				if (FacOfficeMonday !=null && FacOfficeMonday.Count > numOfficeHours) numOfficeHours = FacOfficeMonday.Count;
				if (FacOfficeTuesday !=null && FacOfficeTuesday.Count > numOfficeHours) numOfficeHours = FacOfficeTuesday.Count;
				if (FacOfficeWednesday !=null && FacOfficeWednesday.Count > numOfficeHours) numOfficeHours = FacOfficeWednesday.Count;
				if (FacOfficeThursday !=null && FacOfficeThursday.Count > numOfficeHours) numOfficeHours = FacOfficeThursday.Count;
				if (FacOfficeFriday !=null && FacOfficeFriday.Count > numOfficeHours) numOfficeHours = FacOfficeFriday.Count;
				if (FacOfficeSaturday !=null && FacOfficeSaturday.Count > numOfficeHours) numOfficeHours = FacOfficeSaturday.Count;
				if (FacOfficeSunday !=null && FacOfficeSunday.Count > numOfficeHours) numOfficeHours = FacOfficeSunday.Count;

				for (int i = 0; i < numOfficeHours; i++)
				{

					DateTime? value0 = null;
					if (FacOfficeStartTime != null && i < FacOfficeStartTime.Count)
					{
						value0 = FacOfficeStartTime[i];
					}


					DateTime? value1 = null;
					if (FacOfficeEndTime != null && i < FacOfficeEndTime.Count)
					{
						value1 = FacOfficeEndTime[i];
					}


					DateTime? value2 = null;
					if (FacOfficeStartDate != null && i < FacOfficeStartDate.Count)
					{
						value2 = FacOfficeStartDate[i];
					}


					DateTime? value3 = null;
					if (FacOfficeEndDate != null && i < FacOfficeEndDate.Count)
					{
						value3 = FacOfficeEndDate[i];
					}


					string value4 = "";
					if (FacOfficeRepeat != null && i < FacOfficeRepeat.Count)
					{
						value4 = FacOfficeRepeat[i];
					}


					string value5 = "";
					if (FacOfficeBldg != null && i < FacOfficeBldg.Count)
					{
						value5 = FacOfficeBldg[i];
					}


					string value6 = "";
					if (FacOfficeRoom != null && i < FacOfficeRoom.Count)
					{
						value6 = FacOfficeRoom[i];
					}


					string value7 = "";
					if (FacOfficeMonday != null && i < FacOfficeMonday.Count)
					{
						value7 = FacOfficeMonday[i];
					}


					string value8 = "";
					if (FacOfficeTuesday != null && i < FacOfficeTuesday.Count)
					{
						value8 = FacOfficeTuesday[i];
					}


					string value9 = "";
					if (FacOfficeWednesday != null && i < FacOfficeWednesday.Count)
					{
						value9 = FacOfficeWednesday[i];
					}


					string value10 = "";
					if (FacOfficeThursday != null && i < FacOfficeThursday.Count)
					{
						value10 = FacOfficeThursday[i];
					}


					string value11 = "";
					if (FacOfficeFriday != null && i < FacOfficeFriday.Count)
					{
						value11 = FacOfficeFriday[i];
					}


					string value12 = "";
					if (FacOfficeSaturday != null && i < FacOfficeSaturday.Count)
					{
						value12 = FacOfficeSaturday[i];
					}


					string value13 = "";
					if (FacOfficeSunday != null && i < FacOfficeSunday.Count)
					{
						value13 = FacOfficeSunday[i];
					}

					OfficeHoursEntityAssociation.Add(new FacultyOfficeHours( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13));
				}
			}
			// EntityAssociation Name: DEPT.LOAD
			
			DeptLoadEntityAssociation = new List<FacultyDeptLoad>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FacDepts != null)
			{
				int numDeptLoad = FacDepts.Count;
				if (FacDeptPcts !=null && FacDeptPcts.Count > numDeptLoad) numDeptLoad = FacDeptPcts.Count;

				for (int i = 0; i < numDeptLoad; i++)
				{

					string value0 = "";
					if (FacDepts != null && i < FacDepts.Count)
					{
						value0 = FacDepts[i];
					}


					int? value1 = null;
					if (FacDeptPcts != null && i < FacDeptPcts.Count)
					{
						value1 = FacDeptPcts[i];
					}

					DeptLoadEntityAssociation.Add(new FacultyDeptLoad( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class FacultyOfficeHours
	{
		public DateTime? FacOfficeStartTimeAssocMember;	
		public DateTime? FacOfficeEndTimeAssocMember;	
		public DateTime? FacOfficeStartDateAssocMember;	
		public DateTime? FacOfficeEndDateAssocMember;	
		public string FacOfficeRepeatAssocMember;	
		public string FacOfficeBldgAssocMember;	
		public string FacOfficeRoomAssocMember;	
		public string FacOfficeMondayAssocMember;	
		public string FacOfficeTuesdayAssocMember;	
		public string FacOfficeWednesdayAssocMember;	
		public string FacOfficeThursdayAssocMember;	
		public string FacOfficeFridayAssocMember;	
		public string FacOfficeSaturdayAssocMember;	
		public string FacOfficeSundayAssocMember;	
		public FacultyOfficeHours() {}
		public FacultyOfficeHours(
			DateTime? inFacOfficeStartTime,
			DateTime? inFacOfficeEndTime,
			DateTime? inFacOfficeStartDate,
			DateTime? inFacOfficeEndDate,
			string inFacOfficeRepeat,
			string inFacOfficeBldg,
			string inFacOfficeRoom,
			string inFacOfficeMonday,
			string inFacOfficeTuesday,
			string inFacOfficeWednesday,
			string inFacOfficeThursday,
			string inFacOfficeFriday,
			string inFacOfficeSaturday,
			string inFacOfficeSunday)
		{
			FacOfficeStartTimeAssocMember = inFacOfficeStartTime;
			FacOfficeEndTimeAssocMember = inFacOfficeEndTime;
			FacOfficeStartDateAssocMember = inFacOfficeStartDate;
			FacOfficeEndDateAssocMember = inFacOfficeEndDate;
			FacOfficeRepeatAssocMember = inFacOfficeRepeat;
			FacOfficeBldgAssocMember = inFacOfficeBldg;
			FacOfficeRoomAssocMember = inFacOfficeRoom;
			FacOfficeMondayAssocMember = inFacOfficeMonday;
			FacOfficeTuesdayAssocMember = inFacOfficeTuesday;
			FacOfficeWednesdayAssocMember = inFacOfficeWednesday;
			FacOfficeThursdayAssocMember = inFacOfficeThursday;
			FacOfficeFridayAssocMember = inFacOfficeFriday;
			FacOfficeSaturdayAssocMember = inFacOfficeSaturday;
			FacOfficeSundayAssocMember = inFacOfficeSunday;
		}
	}
	
	[Serializable]
	public class FacultyDeptLoad
	{
		public string FacDeptsAssocMember;	
		public int? FacDeptPctsAssocMember;	
		public FacultyDeptLoad() {}
		public FacultyDeptLoad(
			string inFacDepts,
			int? inFacDeptPcts)
		{
			FacDeptsAssocMember = inFacDepts;
			FacDeptPctsAssocMember = inFacDeptPcts;
		}
	}
}
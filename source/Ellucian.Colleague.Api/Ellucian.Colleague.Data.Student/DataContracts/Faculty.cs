//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 3:09:46 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: FACULTY
//     Application: ST
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Faculty")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 3:09:46 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "FACULTY", EntityType = "PHYS")]
	public class Faculty : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: FAC.ADVISEES
		/// </summary>
		[DataMember(Order = 1, Name = "FAC.ADVISEES")]
		public List<string> FacAdvisees { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.SPECIAL.STATUS
		/// </summary>
		[DataMember(Order = 4, Name = "FAC.SPECIAL.STATUS")]
		public string FacSpecialStatus { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.DEPTS
		/// </summary>
		[DataMember(Order = 11, Name = "FAC.DEPTS")]
		public List<string> FacDepts { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.DEPT.PCTS
		/// </summary>
		[DataMember(Order = 12, Name = "FAC.DEPT.PCTS")]
		public List<int?> FacDeptPcts { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.HOME.LOCATION
		/// </summary>
		[DataMember(Order = 13, Name = "FAC.HOME.LOCATION")]
		public string FacHomeLocation { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.ADVISE.FLAG
		/// </summary>
		[DataMember(Order = 22, Name = "FAC.ADVISE.FLAG")]
		public string FacAdviseFlag { get; set; }
		
		/// <summary>
		/// CDD Name: FAC.CONTRACT.TYPE
		/// </summary>
		[DataMember(Order = 25, Name = "FAC.CONTRACT.TYPE")]
		public string FacContractType { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<FacultyDeptLoad> DeptLoadEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: DEPT.LOAD
			
			DeptLoadEntityAssociation = new List<FacultyDeptLoad>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(FacDepts != null)
			{
				int numDeptLoad = FacDepts.Count;
				if (FacDeptPcts !=null && FacDeptPcts.Count > numDeptLoad) numDeptLoad = FacDeptPcts.Count;

				for (int i = 0; i < numDeptLoad; i++)
				{

					string value0 = "";
					if (FacDepts != null && i < FacDepts.Count)
					{
						value0 = FacDepts[i];
					}


					int? value1 = null;
					if (FacDeptPcts != null && i < FacDeptPcts.Count)
					{
						value1 = FacDeptPcts[i];
					}

					DeptLoadEntityAssociation.Add(new FacultyDeptLoad( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class FacultyDeptLoad
	{
		public string FacDeptsAssocMember;	
		public int? FacDeptPctsAssocMember;	
		public FacultyDeptLoad() {}
		public FacultyDeptLoad(
			string inFacDepts,
			int? inFacDeptPcts)
		{
			FacDeptsAssocMember = inFacDepts;
			FacDeptPctsAssocMember = inFacDeptPcts;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 3:16:08 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: ROOM.PREFERENCES
//     Application: ST
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "RoomPreferences")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 3:16:08 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "ROOM.PREFERENCES", EntityType = "PHYS")]
	public class RoomPreferences : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: RMPR.PERSON.ID
		/// </summary>
		[DataMember(Order = 0, Name = "RMPR.PERSON.ID")]
		public string RmprPersonId { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.START.DATE
		/// </summary>
		[DataMember(Order = 1, Name = "RMPR.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? RmprStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.END.DATE
		/// </summary>
		[DataMember(Order = 2, Name = "RMPR.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? RmprEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.FLOOR.PREFERENCE
		/// </summary>
		[DataMember(Order = 3, Name = "RMPR.FLOOR.PREFERENCE")]
		public string RmprFloorPreference { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.FLOOR.REQD.FLAG
		/// </summary>
		[DataMember(Order = 4, Name = "RMPR.FLOOR.REQD.FLAG")]
		public string RmprFloorReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.BLDG.PREFERENCES
		/// </summary>
		[DataMember(Order = 5, Name = "RMPR.BLDG.PREFERENCES")]
		public List<string> RmprBldgPreferences { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.BLDG.REQD.FLAG
		/// </summary>
		[DataMember(Order = 6, Name = "RMPR.BLDG.REQD.FLAG")]
		public List<string> RmprBldgReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.BLDG.WING.PREFERENCES
		/// </summary>
		[DataMember(Order = 7, Name = "RMPR.BLDG.WING.PREFERENCES")]
		public List<string> RmprBldgWingPreferences { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.WING.REQD.FLAG
		/// </summary>
		[DataMember(Order = 8, Name = "RMPR.WING.REQD.FLAG")]
		public List<string> RmprWingReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOM.PREFERENCES
		/// </summary>
		[DataMember(Order = 9, Name = "RMPR.ROOM.PREFERENCES")]
		public List<string> RmprRoomPreferences { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOM.REQD.FLAG
		/// </summary>
		[DataMember(Order = 10, Name = "RMPR.ROOM.REQD.FLAG")]
		public List<string> RmprRoomReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.BLDG.FLOOR.PREFERENCES
		/// </summary>
		[DataMember(Order = 11, Name = "RMPR.BLDG.FLOOR.PREFERENCES")]
		public List<int?> RmprBldgFloorPreferences { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.BLDG.FLOOR.REQD.FLAG
		/// </summary>
		[DataMember(Order = 12, Name = "RMPR.BLDG.FLOOR.REQD.FLAG")]
		public List<string> RmprBldgFloorReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOM.CHARS
		/// </summary>
		[DataMember(Order = 13, Name = "RMPR.ROOM.CHARS")]
		public List<string> RmprRoomChars { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOM.CHAR.REQD.FLAG
		/// </summary>
		[DataMember(Order = 14, Name = "RMPR.ROOM.CHAR.REQD.FLAG")]
		public List<string> RmprRoomCharReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOMMATE.CHARS
		/// </summary>
		[DataMember(Order = 15, Name = "RMPR.ROOMMATE.CHARS")]
		public List<string> RmprRoommateChars { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.MATE.CHARS.REQD.FLAG
		/// </summary>
		[DataMember(Order = 16, Name = "RMPR.MATE.CHARS.REQD.FLAG")]
		public List<string> RmprMateCharsReqdFlag { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOMMATE.PREFERENCES
		/// </summary>
		[DataMember(Order = 17, Name = "RMPR.ROOMMATE.PREFERENCES")]
		public List<string> RmprRoommatePreferences { get; set; }
		
		/// <summary>
		/// CDD Name: RMPR.ROOMMATE.REQD.FLAG
		/// </summary>
		[DataMember(Order = 18, Name = "RMPR.ROOMMATE.REQD.FLAG")]
		public List<string> RmprRoommateReqdFlag { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RoomPreferencesRmprPreferences> RmprPreferencesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RoomPreferencesRoomChars> RoomCharsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RoomPreferencesRoommateChars> RoommateCharsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<RoomPreferencesRoommatePreferences> RoommatePreferencesEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: RMPR.PREFERENCES
			
			RmprPreferencesEntityAssociation = new List<RoomPreferencesRmprPreferences>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RmprBldgPreferences != null)
			{
				int numRmprPreferences = RmprBldgPreferences.Count;
				if (RmprBldgReqdFlag !=null && RmprBldgReqdFlag.Count > numRmprPreferences) numRmprPreferences = RmprBldgReqdFlag.Count;
				if (RmprBldgWingPreferences !=null && RmprBldgWingPreferences.Count > numRmprPreferences) numRmprPreferences = RmprBldgWingPreferences.Count;
				if (RmprWingReqdFlag !=null && RmprWingReqdFlag.Count > numRmprPreferences) numRmprPreferences = RmprWingReqdFlag.Count;
				if (RmprRoomPreferences !=null && RmprRoomPreferences.Count > numRmprPreferences) numRmprPreferences = RmprRoomPreferences.Count;
				if (RmprRoomReqdFlag !=null && RmprRoomReqdFlag.Count > numRmprPreferences) numRmprPreferences = RmprRoomReqdFlag.Count;
				if (RmprBldgFloorPreferences !=null && RmprBldgFloorPreferences.Count > numRmprPreferences) numRmprPreferences = RmprBldgFloorPreferences.Count;
				if (RmprBldgFloorReqdFlag !=null && RmprBldgFloorReqdFlag.Count > numRmprPreferences) numRmprPreferences = RmprBldgFloorReqdFlag.Count;

				for (int i = 0; i < numRmprPreferences; i++)
				{

					string value0 = "";
					if (RmprBldgPreferences != null && i < RmprBldgPreferences.Count)
					{
						value0 = RmprBldgPreferences[i];
					}


					string value1 = "";
					if (RmprBldgReqdFlag != null && i < RmprBldgReqdFlag.Count)
					{
						value1 = RmprBldgReqdFlag[i];
					}


					string value2 = "";
					if (RmprBldgWingPreferences != null && i < RmprBldgWingPreferences.Count)
					{
						value2 = RmprBldgWingPreferences[i];
					}


					string value3 = "";
					if (RmprWingReqdFlag != null && i < RmprWingReqdFlag.Count)
					{
						value3 = RmprWingReqdFlag[i];
					}


					string value4 = "";
					if (RmprRoomPreferences != null && i < RmprRoomPreferences.Count)
					{
						value4 = RmprRoomPreferences[i];
					}


					string value5 = "";
					if (RmprRoomReqdFlag != null && i < RmprRoomReqdFlag.Count)
					{
						value5 = RmprRoomReqdFlag[i];
					}


					int? value6 = null;
					if (RmprBldgFloorPreferences != null && i < RmprBldgFloorPreferences.Count)
					{
						value6 = RmprBldgFloorPreferences[i];
					}


					string value7 = "";
					if (RmprBldgFloorReqdFlag != null && i < RmprBldgFloorReqdFlag.Count)
					{
						value7 = RmprBldgFloorReqdFlag[i];
					}

					RmprPreferencesEntityAssociation.Add(new RoomPreferencesRmprPreferences( value0, value1, value2, value3, value4, value5, value6, value7));
				}
			}
			// EntityAssociation Name: ROOM.CHARS
			
			RoomCharsEntityAssociation = new List<RoomPreferencesRoomChars>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RmprRoomChars != null)
			{
				int numRoomChars = RmprRoomChars.Count;
				if (RmprRoomCharReqdFlag !=null && RmprRoomCharReqdFlag.Count > numRoomChars) numRoomChars = RmprRoomCharReqdFlag.Count;

				for (int i = 0; i < numRoomChars; i++)
				{

					string value0 = "";
					if (RmprRoomChars != null && i < RmprRoomChars.Count)
					{
						value0 = RmprRoomChars[i];
					}


					string value1 = "";
					if (RmprRoomCharReqdFlag != null && i < RmprRoomCharReqdFlag.Count)
					{
						value1 = RmprRoomCharReqdFlag[i];
					}

					RoomCharsEntityAssociation.Add(new RoomPreferencesRoomChars( value0, value1));
				}
			}
			// EntityAssociation Name: ROOMMATE.CHARS
			
			RoommateCharsEntityAssociation = new List<RoomPreferencesRoommateChars>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RmprRoommateChars != null)
			{
				int numRoommateChars = RmprRoommateChars.Count;
				if (RmprMateCharsReqdFlag !=null && RmprMateCharsReqdFlag.Count > numRoommateChars) numRoommateChars = RmprMateCharsReqdFlag.Count;

				for (int i = 0; i < numRoommateChars; i++)
				{

					string value0 = "";
					if (RmprRoommateChars != null && i < RmprRoommateChars.Count)
					{
						value0 = RmprRoommateChars[i];
					}


					string value1 = "";
					if (RmprMateCharsReqdFlag != null && i < RmprMateCharsReqdFlag.Count)
					{
						value1 = RmprMateCharsReqdFlag[i];
					}

					RoommateCharsEntityAssociation.Add(new RoomPreferencesRoommateChars( value0, value1));
				}
			}
			// EntityAssociation Name: ROOMMATE.PREFERENCES
			
			RoommatePreferencesEntityAssociation = new List<RoomPreferencesRoommatePreferences>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(RmprRoommatePreferences != null)
			{
				int numRoommatePreferences = RmprRoommatePreferences.Count;
				if (RmprRoommateReqdFlag !=null && RmprRoommateReqdFlag.Count > numRoommatePreferences) numRoommatePreferences = RmprRoommateReqdFlag.Count;

				for (int i = 0; i < numRoommatePreferences; i++)
				{

					string value0 = "";
					if (RmprRoommatePreferences != null && i < RmprRoommatePreferences.Count)
					{
						value0 = RmprRoommatePreferences[i];
					}


					string value1 = "";
					if (RmprRoommateReqdFlag != null && i < RmprRoommateReqdFlag.Count)
					{
						value1 = RmprRoommateReqdFlag[i];
					}

					RoommatePreferencesEntityAssociation.Add(new RoomPreferencesRoommatePreferences( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class RoomPreferencesRmprPreferences
	{
		public string RmprBldgPreferencesAssocMember;	
		public string RmprBldgReqdFlagAssocMember;	
		public string RmprBldgWingPreferencesAssocMember;	
		public string RmprWingReqdFlagAssocMember;	
		public string RmprRoomPreferencesAssocMember;	
		public string RmprRoomReqdFlagAssocMember;	
		public int? RmprBldgFloorPreferencesAssocMember;	
		public string RmprBldgFloorReqdFlagAssocMember;	
		public RoomPreferencesRmprPreferences() {}
		public RoomPreferencesRmprPreferences(
			string inRmprBldgPreferences,
			string inRmprBldgReqdFlag,
			string inRmprBldgWingPreferences,
			string inRmprWingReqdFlag,
			string inRmprRoomPreferences,
			string inRmprRoomReqdFlag,
			int? inRmprBldgFloorPreferences,
			string inRmprBldgFloorReqdFlag)
		{
			RmprBldgPreferencesAssocMember = inRmprBldgPreferences;
			RmprBldgReqdFlagAssocMember = inRmprBldgReqdFlag;
			RmprBldgWingPreferencesAssocMember = inRmprBldgWingPreferences;
			RmprWingReqdFlagAssocMember = inRmprWingReqdFlag;
			RmprRoomPreferencesAssocMember = inRmprRoomPreferences;
			RmprRoomReqdFlagAssocMember = inRmprRoomReqdFlag;
			RmprBldgFloorPreferencesAssocMember = inRmprBldgFloorPreferences;
			RmprBldgFloorReqdFlagAssocMember = inRmprBldgFloorReqdFlag;
		}
	}
	
	[Serializable]
	public class RoomPreferencesRoomChars
	{
		public string RmprRoomCharsAssocMember;	
		public string RmprRoomCharReqdFlagAssocMember;	
		public RoomPreferencesRoomChars() {}
		public RoomPreferencesRoomChars(
			string inRmprRoomChars,
			string inRmprRoomCharReqdFlag)
		{
			RmprRoomCharsAssocMember = inRmprRoomChars;
			RmprRoomCharReqdFlagAssocMember = inRmprRoomCharReqdFlag;
		}
	}
	
	[Serializable]
	public class RoomPreferencesRoommateChars
	{
		public string RmprRoommateCharsAssocMember;	
		public string RmprMateCharsReqdFlagAssocMember;	
		public RoomPreferencesRoommateChars() {}
		public RoomPreferencesRoommateChars(
			string inRmprRoommateChars,
			string inRmprMateCharsReqdFlag)
		{
			RmprRoommateCharsAssocMember = inRmprRoommateChars;
			RmprMateCharsReqdFlagAssocMember = inRmprMateCharsReqdFlag;
		}
	}
	
	[Serializable]
	public class RoomPreferencesRoommatePreferences
	{
		public string RmprRoommatePreferencesAssocMember;	
		public string RmprRoommateReqdFlagAssocMember;	
		public RoomPreferencesRoommatePreferences() {}
		public RoomPreferencesRoommatePreferences(
			string inRmprRoommatePreferences,
			string inRmprRoommateReqdFlag)
		{
			RmprRoommatePreferencesAssocMember = inRmprRoommatePreferences;
			RmprRoommateReqdFlagAssocMember = inRmprRoommateReqdFlag;
		}
	}
}
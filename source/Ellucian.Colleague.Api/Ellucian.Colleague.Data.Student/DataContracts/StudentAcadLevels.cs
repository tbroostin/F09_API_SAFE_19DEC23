//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 3/16/2019 10:24:01 AM by user sbhole1
//
//     Type: ENTITY
//     Entity: STUDENT.ACAD.LEVELS
//     Application: ST
//     Environment: dvcoll_wstst01
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "StudentAcadLevels")]
	[ColleagueDataContract(GeneratedDateTime = "3/16/2019 10:24:01 AM", User = "sbhole1")]
	[EntityDataContract(EntityName = "STUDENT.ACAD.LEVELS", EntityType = "PHYS")]
	public class StudentAcadLevels : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: STA.START.DATE
		/// </summary>
		[DataMember(Order = 0, Name = "STA.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StaStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STA.END.DATE
		/// </summary>
		[DataMember(Order = 1, Name = "STA.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StaEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STA.ADMIT.STATUS
		/// </summary>
		[DataMember(Order = 2, Name = "STA.ADMIT.STATUS")]
		public string StaAdmitStatus { get; set; }
		
		/// <summary>
		/// CDD Name: STA.CLASS
		/// </summary>
		[DataMember(Order = 4, Name = "STA.CLASS")]
		public string StaClass { get; set; }
		
		/// <summary>
		/// CDD Name: STA.START.TERM
		/// </summary>
		[DataMember(Order = 8, Name = "STA.START.TERM")]
		public string StaStartTerm { get; set; }
		
		/// <summary>
		/// CDD Name: STA.STUDENT.ACAD.CRED
		/// </summary>
		[DataMember(Order = 9, Name = "STA.STUDENT.ACAD.CRED")]
		public List<string> StaStudentAcadCred { get; set; }
		
		/// <summary>
		/// CDD Name: STA.FED.COHORT.GROUP
		/// </summary>
		[DataMember(Order = 13, Name = "STA.FED.COHORT.GROUP")]
		public string StaFedCohortGroup { get; set; }
		
		/// <summary>
		/// CDD Name: STA.OTHER.COHORT.GROUPS
		/// </summary>
		[DataMember(Order = 14, Name = "STA.OTHER.COHORT.GROUPS")]
		public List<string> StaOtherCohortGroups { get; set; }
		
		/// <summary>
		/// CDD Name: STA.OTHER.COHORT.START.DATES
		/// </summary>
		[DataMember(Order = 20, Name = "STA.OTHER.COHORT.START.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StaOtherCohortStartDates { get; set; }
		
		/// <summary>
		/// CDD Name: STA.OTHER.COHORT.END.DATES
		/// </summary>
		[DataMember(Order = 21, Name = "STA.OTHER.COHORT.END.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StaOtherCohortEndDates { get; set; }
		
		/// <summary>
		/// CDD Name: STA.OTHER.COHORTS.IDX
		/// </summary>
		[DataMember(Order = 48, Name = "STA.OTHER.COHORTS.IDX")]
		public List<string> StaOtherCohortsIdx { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentAcadLevelsStaOtherCohorts> StaOtherCohortsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: STA.OTHER.COHORTS
			
			StaOtherCohortsEntityAssociation = new List<StudentAcadLevelsStaOtherCohorts>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StaOtherCohortGroups != null)
			{
				int numStaOtherCohorts = StaOtherCohortGroups.Count;
				if (StaOtherCohortStartDates !=null && StaOtherCohortStartDates.Count > numStaOtherCohorts) numStaOtherCohorts = StaOtherCohortStartDates.Count;
				if (StaOtherCohortEndDates !=null && StaOtherCohortEndDates.Count > numStaOtherCohorts) numStaOtherCohorts = StaOtherCohortEndDates.Count;

				for (int i = 0; i < numStaOtherCohorts; i++)
				{

					string value0 = "";
					if (StaOtherCohortGroups != null && i < StaOtherCohortGroups.Count)
					{
						value0 = StaOtherCohortGroups[i];
					}


					DateTime? value1 = null;
					if (StaOtherCohortStartDates != null && i < StaOtherCohortStartDates.Count)
					{
						value1 = StaOtherCohortStartDates[i];
					}


					DateTime? value2 = null;
					if (StaOtherCohortEndDates != null && i < StaOtherCohortEndDates.Count)
					{
						value2 = StaOtherCohortEndDates[i];
					}

					StaOtherCohortsEntityAssociation.Add(new StudentAcadLevelsStaOtherCohorts( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class StudentAcadLevelsStaOtherCohorts
	{
		public string StaOtherCohortGroupsAssocMember;	
		public DateTime? StaOtherCohortStartDatesAssocMember;	
		public DateTime? StaOtherCohortEndDatesAssocMember;	
		public StudentAcadLevelsStaOtherCohorts() {}
		public StudentAcadLevelsStaOtherCohorts(
			string inStaOtherCohortGroups,
			DateTime? inStaOtherCohortStartDates,
			DateTime? inStaOtherCohortEndDates)
		{
			StaOtherCohortGroupsAssocMember = inStaOtherCohortGroups;
			StaOtherCohortStartDatesAssocMember = inStaOtherCohortStartDates;
			StaOtherCohortEndDatesAssocMember = inStaOtherCohortEndDates;
		}
	}
}
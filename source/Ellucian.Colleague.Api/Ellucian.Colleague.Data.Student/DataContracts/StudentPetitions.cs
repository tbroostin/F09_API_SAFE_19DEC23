//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 6/7/2021 5:39:07 PM by user sreedharpuligundla
//
//     Type: ENTITY
//     Entity: STUDENT.PETITIONS
//     Application: ST
//     Environment: dvcoll
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "StudentPetitions")]
	[ColleagueDataContract(GeneratedDateTime = "6/7/2021 5:39:07 PM", User = "sreedharpuligundla")]
	[EntityDataContract(EntityName = "STUDENT.PETITIONS", EntityType = "PHYS")]
	public class StudentPetitions : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: STPE.STUDENT
		/// </summary>
		[DataMember(Order = 0, Name = "STPE.STUDENT")]
		public string StpeStudent { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.TERM
		/// </summary>
		[DataMember(Order = 1, Name = "STPE.TERM")]
		public string StpeTerm { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.COURSES
		/// </summary>
		[DataMember(Order = 2, Name = "STPE.COURSES")]
		public List<string> StpeCourses { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.SECTION
		/// </summary>
		[DataMember(Order = 3, Name = "STPE.SECTION")]
		public List<string> StpeSection { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.PETITION.STATUS
		/// </summary>
		[DataMember(Order = 4, Name = "STPE.PETITION.STATUS")]
		public List<string> StpePetitionStatus { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.FACULTY.CONSENT
		/// </summary>
		[DataMember(Order = 5, Name = "STPE.FACULTY.CONSENT")]
		public List<string> StpeFacultyConsent { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.OVERLOAD.PETITION
		/// </summary>
		[DataMember(Order = 6, Name = "STPE.OVERLOAD.PETITION")]
		public string StpeOverloadPetition { get; set; }
		
		/// <summary>
		/// CDD Name: STUDENT.PETITIONS.CHGOPR
		/// </summary>
		[DataMember(Order = 9, Name = "STUDENT.PETITIONS.CHGOPR")]
		public string StudentPetitionsChgopr { get; set; }
		
		/// <summary>
		/// CDD Name: STUDENT.PETITIONS.CHGDATE
		/// </summary>
		[DataMember(Order = 10, Name = "STUDENT.PETITIONS.CHGDATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StudentPetitionsChgdate { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.START.DATE
		/// </summary>
		[DataMember(Order = 11, Name = "STPE.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StpeStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.END.DATE
		/// </summary>
		[DataMember(Order = 12, Name = "STPE.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StpeEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.STU.PETITION.CMNTS.ID
		/// </summary>
		[DataMember(Order = 23, Name = "STPE.STU.PETITION.CMNTS.ID")]
		public List<string> StpeStuPetitionCmntsId { get; set; }
		
		/// <summary>
		/// CDD Name: STUDENT.PETITIONS.CHGTIME
		/// </summary>
		[DataMember(Order = 25, Name = "STUDENT.PETITIONS.CHGTIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StudentPetitionsChgtime { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.PETITION.REASON.CODE
		/// </summary>
		[DataMember(Order = 26, Name = "STPE.PETITION.REASON.CODE")]
		public List<string> StpePetitionReasonCode { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.CONSENT.REASON.CODE
		/// </summary>
		[DataMember(Order = 27, Name = "STPE.CONSENT.REASON.CODE")]
		public List<string> StpeConsentReasonCode { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.PETITION.STATUS.SET.BY
		/// </summary>
		[DataMember(Order = 28, Name = "STPE.PETITION.STATUS.SET.BY")]
		public List<string> StpePetitionStatusSetBy { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.PETITION.STATUS.DATE
		/// </summary>
		[DataMember(Order = 29, Name = "STPE.PETITION.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StpePetitionStatusDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.PETITION.STATUS.TIME
		/// </summary>
		[DataMember(Order = 30, Name = "STPE.PETITION.STATUS.TIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StpePetitionStatusTime { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.FACULTY.CONSENT.SET.BY
		/// </summary>
		[DataMember(Order = 31, Name = "STPE.FACULTY.CONSENT.SET.BY")]
		public List<string> StpeFacultyConsentSetBy { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.FACULTY.CONSENT.DATE
		/// </summary>
		[DataMember(Order = 32, Name = "STPE.FACULTY.CONSENT.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StpeFacultyConsentDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPE.FACULTY.CONSENT.TIME
		/// </summary>
		[DataMember(Order = 33, Name = "STPE.FACULTY.CONSENT.TIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StpeFacultyConsentTime { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentPetitionsPetitions> PetitionsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: PETITIONS
			
			PetitionsEntityAssociation = new List<StudentPetitionsPetitions>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StpeCourses != null)
			{
				int numPetitions = StpeCourses.Count;
				if (StpeSection !=null && StpeSection.Count > numPetitions) numPetitions = StpeSection.Count;
				if (StpePetitionStatus !=null && StpePetitionStatus.Count > numPetitions) numPetitions = StpePetitionStatus.Count;
				if (StpeFacultyConsent !=null && StpeFacultyConsent.Count > numPetitions) numPetitions = StpeFacultyConsent.Count;
				if (StpeStuPetitionCmntsId !=null && StpeStuPetitionCmntsId.Count > numPetitions) numPetitions = StpeStuPetitionCmntsId.Count;
				if (StpePetitionReasonCode !=null && StpePetitionReasonCode.Count > numPetitions) numPetitions = StpePetitionReasonCode.Count;
				if (StpeConsentReasonCode !=null && StpeConsentReasonCode.Count > numPetitions) numPetitions = StpeConsentReasonCode.Count;
				if (StpePetitionStatusSetBy !=null && StpePetitionStatusSetBy.Count > numPetitions) numPetitions = StpePetitionStatusSetBy.Count;
				if (StpePetitionStatusDate !=null && StpePetitionStatusDate.Count > numPetitions) numPetitions = StpePetitionStatusDate.Count;
				if (StpePetitionStatusTime !=null && StpePetitionStatusTime.Count > numPetitions) numPetitions = StpePetitionStatusTime.Count;
				if (StpeFacultyConsentSetBy !=null && StpeFacultyConsentSetBy.Count > numPetitions) numPetitions = StpeFacultyConsentSetBy.Count;
				if (StpeFacultyConsentDate !=null && StpeFacultyConsentDate.Count > numPetitions) numPetitions = StpeFacultyConsentDate.Count;
				if (StpeFacultyConsentTime !=null && StpeFacultyConsentTime.Count > numPetitions) numPetitions = StpeFacultyConsentTime.Count;

				for (int i = 0; i < numPetitions; i++)
				{

					string value0 = "";
					if (StpeCourses != null && i < StpeCourses.Count)
					{
						value0 = StpeCourses[i];
					}


					string value1 = "";
					if (StpeSection != null && i < StpeSection.Count)
					{
						value1 = StpeSection[i];
					}


					string value2 = "";
					if (StpePetitionStatus != null && i < StpePetitionStatus.Count)
					{
						value2 = StpePetitionStatus[i];
					}


					string value3 = "";
					if (StpeFacultyConsent != null && i < StpeFacultyConsent.Count)
					{
						value3 = StpeFacultyConsent[i];
					}


					string value4 = "";
					if (StpeStuPetitionCmntsId != null && i < StpeStuPetitionCmntsId.Count)
					{
						value4 = StpeStuPetitionCmntsId[i];
					}


					string value5 = "";
					if (StpePetitionReasonCode != null && i < StpePetitionReasonCode.Count)
					{
						value5 = StpePetitionReasonCode[i];
					}


					string value6 = "";
					if (StpeConsentReasonCode != null && i < StpeConsentReasonCode.Count)
					{
						value6 = StpeConsentReasonCode[i];
					}


					string value7 = "";
					if (StpePetitionStatusSetBy != null && i < StpePetitionStatusSetBy.Count)
					{
						value7 = StpePetitionStatusSetBy[i];
					}


					DateTime? value8 = null;
					if (StpePetitionStatusDate != null && i < StpePetitionStatusDate.Count)
					{
						value8 = StpePetitionStatusDate[i];
					}


					DateTime? value9 = null;
					if (StpePetitionStatusTime != null && i < StpePetitionStatusTime.Count)
					{
						value9 = StpePetitionStatusTime[i];
					}


					string value10 = "";
					if (StpeFacultyConsentSetBy != null && i < StpeFacultyConsentSetBy.Count)
					{
						value10 = StpeFacultyConsentSetBy[i];
					}


					DateTime? value11 = null;
					if (StpeFacultyConsentDate != null && i < StpeFacultyConsentDate.Count)
					{
						value11 = StpeFacultyConsentDate[i];
					}


					DateTime? value12 = null;
					if (StpeFacultyConsentTime != null && i < StpeFacultyConsentTime.Count)
					{
						value12 = StpeFacultyConsentTime[i];
					}

					PetitionsEntityAssociation.Add(new StudentPetitionsPetitions( value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class StudentPetitionsPetitions
	{
		public string StpeCoursesAssocMember;	
		public string StpeSectionAssocMember;	
		public string StpePetitionStatusAssocMember;	
		public string StpeFacultyConsentAssocMember;	
		public string StpeStuPetitionCmntsIdAssocMember;	
		public string StpePetitionReasonCodeAssocMember;	
		public string StpeConsentReasonCodeAssocMember;	
		public string StpePetitionStatusSetByAssocMember;	
		public DateTime? StpePetitionStatusDateAssocMember;	
		public DateTime? StpePetitionStatusTimeAssocMember;	
		public string StpeFacultyConsentSetByAssocMember;	
		public DateTime? StpeFacultyConsentDateAssocMember;	
		public DateTime? StpeFacultyConsentTimeAssocMember;	
		public StudentPetitionsPetitions() {}
		public StudentPetitionsPetitions(
			string inStpeCourses,
			string inStpeSection,
			string inStpePetitionStatus,
			string inStpeFacultyConsent,
			string inStpeStuPetitionCmntsId,
			string inStpePetitionReasonCode,
			string inStpeConsentReasonCode,
			string inStpePetitionStatusSetBy,
			DateTime? inStpePetitionStatusDate,
			DateTime? inStpePetitionStatusTime,
			string inStpeFacultyConsentSetBy,
			DateTime? inStpeFacultyConsentDate,
			DateTime? inStpeFacultyConsentTime)
		{
			StpeCoursesAssocMember = inStpeCourses;
			StpeSectionAssocMember = inStpeSection;
			StpePetitionStatusAssocMember = inStpePetitionStatus;
			StpeFacultyConsentAssocMember = inStpeFacultyConsent;
			StpeStuPetitionCmntsIdAssocMember = inStpeStuPetitionCmntsId;
			StpePetitionReasonCodeAssocMember = inStpePetitionReasonCode;
			StpeConsentReasonCodeAssocMember = inStpeConsentReasonCode;
			StpePetitionStatusSetByAssocMember = inStpePetitionStatusSetBy;
			StpePetitionStatusDateAssocMember = inStpePetitionStatusDate;
			StpePetitionStatusTimeAssocMember = inStpePetitionStatusTime;
			StpeFacultyConsentSetByAssocMember = inStpeFacultyConsentSetBy;
			StpeFacultyConsentDateAssocMember = inStpeFacultyConsentDate;
			StpeFacultyConsentTimeAssocMember = inStpeFacultyConsentTime;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 3:18:47 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: STUDENT.PROGRAMS
//     Application: ST
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "StudentPrograms")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 3:18:47 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "STUDENT.PROGRAMS", EntityType = "PHYS")]
	public class StudentPrograms : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: STPR.START.DATE
		/// </summary>
		[DataMember(Order = 0, Name = "STPR.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.END.DATE
		/// </summary>
		[DataMember(Order = 1, Name = "STPR.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.ANT.CMPL.DATE
		/// </summary>
		[DataMember(Order = 2, Name = "STPR.ANT.CMPL.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public DateTime? StprAntCmplDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.MINORS
		/// </summary>
		[DataMember(Order = 3, Name = "STPR.MINORS")]
		public List<string> StprMinors { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.MINOR.START.DATE
		/// </summary>
		[DataMember(Order = 4, Name = "STPR.MINOR.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprMinorStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.MINOR.END.DATE
		/// </summary>
		[DataMember(Order = 5, Name = "STPR.MINOR.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprMinorEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.SPECIALIZATIONS
		/// </summary>
		[DataMember(Order = 6, Name = "STPR.SPECIALIZATIONS")]
		public List<string> StprSpecializations { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.SPECIALIZATION.START
		/// </summary>
		[DataMember(Order = 7, Name = "STPR.SPECIALIZATION.START")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprSpecializationStart { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.SPECIALIZATION.END
		/// </summary>
		[DataMember(Order = 8, Name = "STPR.SPECIALIZATION.END")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprSpecializationEnd { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.CATALOG
		/// </summary>
		[DataMember(Order = 9, Name = "STPR.CATALOG")]
		public string StprCatalog { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.DA.EXCPTS
		/// </summary>
		[DataMember(Order = 10, Name = "STPR.DA.EXCPTS")]
		public List<string> StprDaExcpts { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.LOCATION
		/// </summary>
		[DataMember(Order = 11, Name = "STPR.LOCATION")]
		public string StprLocation { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.ADMIT.STATUS
		/// </summary>
		[DataMember(Order = 12, Name = "STPR.ADMIT.STATUS")]
		public string StprAdmitStatus { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.STATUS
		/// </summary>
		[DataMember(Order = 13, Name = "STPR.STATUS")]
		public List<string> StprStatus { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.STATUS.DATE
		/// </summary>
		[DataMember(Order = 14, Name = "STPR.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprStatusDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.STATUS.CHGOPR
		/// </summary>
		[DataMember(Order = 15, Name = "STPR.STATUS.CHGOPR")]
		public List<string> StprStatusChgopr { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.TITLE
		/// </summary>
		[DataMember(Order = 16, Name = "STPR.TITLE")]
		public string StprTitle { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.MINOR.REQMTS
		/// </summary>
		[DataMember(Order = 17, Name = "STPR.MINOR.REQMTS")]
		public List<string> StprMinorReqmts { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.CCDS
		/// </summary>
		[DataMember(Order = 18, Name = "STPR.CCDS")]
		public List<string> StprCcds { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.CCDS.START.DATE
		/// </summary>
		[DataMember(Order = 19, Name = "STPR.CCDS.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprCcdsStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.CCDS.END.DATE
		/// </summary>
		[DataMember(Order = 20, Name = "STPR.CCDS.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprCcdsEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.DEPT
		/// </summary>
		[DataMember(Order = 21, Name = "STPR.DEPT")]
		public string StprDept { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.SCHOOL
		/// </summary>
		[DataMember(Order = 23, Name = "STPR.SCHOOL")]
		public string StprSchool { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.DA.OVERRIDES
		/// </summary>
		[DataMember(Order = 25, Name = "STPR.DA.OVERRIDES")]
		public List<string> StprDaOverrides { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.SPECIALIZATION.REQMTS
		/// </summary>
		[DataMember(Order = 30, Name = "STPR.SPECIALIZATION.REQMTS")]
		public List<string> StprSpecializationReqmts { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.ADDNL.MAJORS
		/// </summary>
		[DataMember(Order = 31, Name = "STPR.ADDNL.MAJORS")]
		public List<string> StprAddnlMajors { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.ADDNL.MAJOR.START.DATE
		/// </summary>
		[DataMember(Order = 32, Name = "STPR.ADDNL.MAJOR.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprAddnlMajorStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.ADDNL.MAJOR.END.DATE
		/// </summary>
		[DataMember(Order = 33, Name = "STPR.ADDNL.MAJOR.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StprAddnlMajorEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.ADDNL.MAJOR.REQMTS
		/// </summary>
		[DataMember(Order = 34, Name = "STPR.ADDNL.MAJOR.REQMTS")]
		public List<string> StprAddnlMajorReqmts { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.CCDS.REQMTS
		/// </summary>
		[DataMember(Order = 39, Name = "STPR.CCDS.REQMTS")]
		public List<string> StprCcdsReqmts { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.EVAL.COMBINED.CRED
		/// </summary>
		[DataMember(Order = 42, Name = "STPR.EVAL.COMBINED.CRED")]
		[DisplayFormat(DataFormatString = "{0:N5}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public Decimal? StprEvalCombinedCred { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.INTG.START.TERM
		/// </summary>
		[DataMember(Order = 64, Name = "STPR.INTG.START.TERM")]
		public string StprIntgStartTerm { get; set; }
		
		/// <summary>
		/// CDD Name: STPR.INTG.ANT.CMPL.TERM
		/// </summary>
		[DataMember(Order = 65, Name = "STPR.INTG.ANT.CMPL.TERM")]
		public string StprIntgAntCmplTerm { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentProgramsStprDates> StprDatesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentProgramsStprMinorList> StprMinorListEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentProgramsStprSpecialties> StprSpecialtiesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentProgramsStprStatuses> StprStatusesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentProgramsStprCcdList> StprCcdListEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentProgramsStprMajorList> StprMajorListEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: STPR.DATES
			
			StprDatesEntityAssociation = new List<StudentProgramsStprDates>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StprStartDate != null)
			{
				int numStprDates = StprStartDate.Count;
				if (StprEndDate !=null && StprEndDate.Count > numStprDates) numStprDates = StprEndDate.Count;

				for (int i = 0; i < numStprDates; i++)
				{

					DateTime? value0 = null;
					if (StprStartDate != null && i < StprStartDate.Count)
					{
						value0 = StprStartDate[i];
					}


					DateTime? value1 = null;
					if (StprEndDate != null && i < StprEndDate.Count)
					{
						value1 = StprEndDate[i];
					}

					StprDatesEntityAssociation.Add(new StudentProgramsStprDates( value0, value1));
				}
			}
			// EntityAssociation Name: STPR.MINOR.LIST
			
			StprMinorListEntityAssociation = new List<StudentProgramsStprMinorList>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StprMinors != null)
			{
				int numStprMinorList = StprMinors.Count;
				if (StprMinorStartDate !=null && StprMinorStartDate.Count > numStprMinorList) numStprMinorList = StprMinorStartDate.Count;
				if (StprMinorEndDate !=null && StprMinorEndDate.Count > numStprMinorList) numStprMinorList = StprMinorEndDate.Count;
				if (StprMinorReqmts !=null && StprMinorReqmts.Count > numStprMinorList) numStprMinorList = StprMinorReqmts.Count;

				for (int i = 0; i < numStprMinorList; i++)
				{

					string value0 = "";
					if (StprMinors != null && i < StprMinors.Count)
					{
						value0 = StprMinors[i];
					}


					DateTime? value1 = null;
					if (StprMinorStartDate != null && i < StprMinorStartDate.Count)
					{
						value1 = StprMinorStartDate[i];
					}


					DateTime? value2 = null;
					if (StprMinorEndDate != null && i < StprMinorEndDate.Count)
					{
						value2 = StprMinorEndDate[i];
					}


					string value3 = "";
					if (StprMinorReqmts != null && i < StprMinorReqmts.Count)
					{
						value3 = StprMinorReqmts[i];
					}

					StprMinorListEntityAssociation.Add(new StudentProgramsStprMinorList( value0, value1, value2, value3));
				}
			}
			// EntityAssociation Name: STPR.SPECIALTIES
			
			StprSpecialtiesEntityAssociation = new List<StudentProgramsStprSpecialties>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StprSpecializations != null)
			{
				int numStprSpecialties = StprSpecializations.Count;
				if (StprSpecializationStart !=null && StprSpecializationStart.Count > numStprSpecialties) numStprSpecialties = StprSpecializationStart.Count;
				if (StprSpecializationEnd !=null && StprSpecializationEnd.Count > numStprSpecialties) numStprSpecialties = StprSpecializationEnd.Count;
				if (StprSpecializationReqmts !=null && StprSpecializationReqmts.Count > numStprSpecialties) numStprSpecialties = StprSpecializationReqmts.Count;

				for (int i = 0; i < numStprSpecialties; i++)
				{

					string value0 = "";
					if (StprSpecializations != null && i < StprSpecializations.Count)
					{
						value0 = StprSpecializations[i];
					}


					DateTime? value1 = null;
					if (StprSpecializationStart != null && i < StprSpecializationStart.Count)
					{
						value1 = StprSpecializationStart[i];
					}


					DateTime? value2 = null;
					if (StprSpecializationEnd != null && i < StprSpecializationEnd.Count)
					{
						value2 = StprSpecializationEnd[i];
					}


					string value3 = "";
					if (StprSpecializationReqmts != null && i < StprSpecializationReqmts.Count)
					{
						value3 = StprSpecializationReqmts[i];
					}

					StprSpecialtiesEntityAssociation.Add(new StudentProgramsStprSpecialties( value0, value1, value2, value3));
				}
			}
			// EntityAssociation Name: STPR.STATUSES
			
			StprStatusesEntityAssociation = new List<StudentProgramsStprStatuses>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StprStatus != null)
			{
				int numStprStatuses = StprStatus.Count;
				if (StprStatusDate !=null && StprStatusDate.Count > numStprStatuses) numStprStatuses = StprStatusDate.Count;
				if (StprStatusChgopr !=null && StprStatusChgopr.Count > numStprStatuses) numStprStatuses = StprStatusChgopr.Count;

				for (int i = 0; i < numStprStatuses; i++)
				{

					string value0 = "";
					if (StprStatus != null && i < StprStatus.Count)
					{
						value0 = StprStatus[i];
					}


					DateTime? value1 = null;
					if (StprStatusDate != null && i < StprStatusDate.Count)
					{
						value1 = StprStatusDate[i];
					}


					string value2 = "";
					if (StprStatusChgopr != null && i < StprStatusChgopr.Count)
					{
						value2 = StprStatusChgopr[i];
					}

					StprStatusesEntityAssociation.Add(new StudentProgramsStprStatuses( value0, value1, value2));
				}
			}
			// EntityAssociation Name: STPR.CCD.LIST
			
			StprCcdListEntityAssociation = new List<StudentProgramsStprCcdList>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StprCcds != null)
			{
				int numStprCcdList = StprCcds.Count;
				if (StprCcdsStartDate !=null && StprCcdsStartDate.Count > numStprCcdList) numStprCcdList = StprCcdsStartDate.Count;
				if (StprCcdsEndDate !=null && StprCcdsEndDate.Count > numStprCcdList) numStprCcdList = StprCcdsEndDate.Count;
				if (StprCcdsReqmts !=null && StprCcdsReqmts.Count > numStprCcdList) numStprCcdList = StprCcdsReqmts.Count;

				for (int i = 0; i < numStprCcdList; i++)
				{

					string value0 = "";
					if (StprCcds != null && i < StprCcds.Count)
					{
						value0 = StprCcds[i];
					}


					DateTime? value1 = null;
					if (StprCcdsStartDate != null && i < StprCcdsStartDate.Count)
					{
						value1 = StprCcdsStartDate[i];
					}


					DateTime? value2 = null;
					if (StprCcdsEndDate != null && i < StprCcdsEndDate.Count)
					{
						value2 = StprCcdsEndDate[i];
					}


					string value3 = "";
					if (StprCcdsReqmts != null && i < StprCcdsReqmts.Count)
					{
						value3 = StprCcdsReqmts[i];
					}

					StprCcdListEntityAssociation.Add(new StudentProgramsStprCcdList( value0, value1, value2, value3));
				}
			}
			// EntityAssociation Name: STPR.MAJOR.LIST
			
			StprMajorListEntityAssociation = new List<StudentProgramsStprMajorList>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StprAddnlMajors != null)
			{
				int numStprMajorList = StprAddnlMajors.Count;
				if (StprAddnlMajorStartDate !=null && StprAddnlMajorStartDate.Count > numStprMajorList) numStprMajorList = StprAddnlMajorStartDate.Count;
				if (StprAddnlMajorEndDate !=null && StprAddnlMajorEndDate.Count > numStprMajorList) numStprMajorList = StprAddnlMajorEndDate.Count;
				if (StprAddnlMajorReqmts !=null && StprAddnlMajorReqmts.Count > numStprMajorList) numStprMajorList = StprAddnlMajorReqmts.Count;

				for (int i = 0; i < numStprMajorList; i++)
				{

					string value0 = "";
					if (StprAddnlMajors != null && i < StprAddnlMajors.Count)
					{
						value0 = StprAddnlMajors[i];
					}


					DateTime? value1 = null;
					if (StprAddnlMajorStartDate != null && i < StprAddnlMajorStartDate.Count)
					{
						value1 = StprAddnlMajorStartDate[i];
					}


					DateTime? value2 = null;
					if (StprAddnlMajorEndDate != null && i < StprAddnlMajorEndDate.Count)
					{
						value2 = StprAddnlMajorEndDate[i];
					}


					string value3 = "";
					if (StprAddnlMajorReqmts != null && i < StprAddnlMajorReqmts.Count)
					{
						value3 = StprAddnlMajorReqmts[i];
					}

					StprMajorListEntityAssociation.Add(new StudentProgramsStprMajorList( value0, value1, value2, value3));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class StudentProgramsStprDates
	{
		public DateTime? StprStartDateAssocMember;	
		public DateTime? StprEndDateAssocMember;	
		public StudentProgramsStprDates() {}
		public StudentProgramsStprDates(
			DateTime? inStprStartDate,
			DateTime? inStprEndDate)
		{
			StprStartDateAssocMember = inStprStartDate;
			StprEndDateAssocMember = inStprEndDate;
		}
	}
	
	[Serializable]
	public class StudentProgramsStprMinorList
	{
		public string StprMinorsAssocMember;	
		public DateTime? StprMinorStartDateAssocMember;	
		public DateTime? StprMinorEndDateAssocMember;	
		public string StprMinorReqmtsAssocMember;	
		public StudentProgramsStprMinorList() {}
		public StudentProgramsStprMinorList(
			string inStprMinors,
			DateTime? inStprMinorStartDate,
			DateTime? inStprMinorEndDate,
			string inStprMinorReqmts)
		{
			StprMinorsAssocMember = inStprMinors;
			StprMinorStartDateAssocMember = inStprMinorStartDate;
			StprMinorEndDateAssocMember = inStprMinorEndDate;
			StprMinorReqmtsAssocMember = inStprMinorReqmts;
		}
	}
	
	[Serializable]
	public class StudentProgramsStprSpecialties
	{
		public string StprSpecializationsAssocMember;	
		public DateTime? StprSpecializationStartAssocMember;	
		public DateTime? StprSpecializationEndAssocMember;	
		public string StprSpecializationReqmtsAssocMember;	
		public StudentProgramsStprSpecialties() {}
		public StudentProgramsStprSpecialties(
			string inStprSpecializations,
			DateTime? inStprSpecializationStart,
			DateTime? inStprSpecializationEnd,
			string inStprSpecializationReqmts)
		{
			StprSpecializationsAssocMember = inStprSpecializations;
			StprSpecializationStartAssocMember = inStprSpecializationStart;
			StprSpecializationEndAssocMember = inStprSpecializationEnd;
			StprSpecializationReqmtsAssocMember = inStprSpecializationReqmts;
		}
	}
	
	[Serializable]
	public class StudentProgramsStprStatuses
	{
		public string StprStatusAssocMember;	
		public DateTime? StprStatusDateAssocMember;	
		public string StprStatusChgoprAssocMember;	
		public StudentProgramsStprStatuses() {}
		public StudentProgramsStprStatuses(
			string inStprStatus,
			DateTime? inStprStatusDate,
			string inStprStatusChgopr)
		{
			StprStatusAssocMember = inStprStatus;
			StprStatusDateAssocMember = inStprStatusDate;
			StprStatusChgoprAssocMember = inStprStatusChgopr;
		}
	}
	
	[Serializable]
	public class StudentProgramsStprCcdList
	{
		public string StprCcdsAssocMember;	
		public DateTime? StprCcdsStartDateAssocMember;	
		public DateTime? StprCcdsEndDateAssocMember;	
		public string StprCcdsReqmtsAssocMember;	
		public StudentProgramsStprCcdList() {}
		public StudentProgramsStprCcdList(
			string inStprCcds,
			DateTime? inStprCcdsStartDate,
			DateTime? inStprCcdsEndDate,
			string inStprCcdsReqmts)
		{
			StprCcdsAssocMember = inStprCcds;
			StprCcdsStartDateAssocMember = inStprCcdsStartDate;
			StprCcdsEndDateAssocMember = inStprCcdsEndDate;
			StprCcdsReqmtsAssocMember = inStprCcdsReqmts;
		}
	}
	
	[Serializable]
	public class StudentProgramsStprMajorList
	{
		public string StprAddnlMajorsAssocMember;	
		public DateTime? StprAddnlMajorStartDateAssocMember;	
		public DateTime? StprAddnlMajorEndDateAssocMember;	
		public string StprAddnlMajorReqmtsAssocMember;	
		public StudentProgramsStprMajorList() {}
		public StudentProgramsStprMajorList(
			string inStprAddnlMajors,
			DateTime? inStprAddnlMajorStartDate,
			DateTime? inStprAddnlMajorEndDate,
			string inStprAddnlMajorReqmts)
		{
			StprAddnlMajorsAssocMember = inStprAddnlMajors;
			StprAddnlMajorStartDateAssocMember = inStprAddnlMajorStartDate;
			StprAddnlMajorEndDateAssocMember = inStprAddnlMajorEndDate;
			StprAddnlMajorReqmtsAssocMember = inStprAddnlMajorReqmts;
		}
	}
}
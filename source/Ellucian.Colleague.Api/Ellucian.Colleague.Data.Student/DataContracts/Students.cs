//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 3:19:09 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: STUDENTS
//     Application: ST
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Colleague.Data.Student.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "Students")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 3:19:09 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "STUDENTS", EntityType = "PHYS")]
	public class Students : IColleagueGuidEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
	
		/// <summary>
		/// Record GUID
		/// </summary>
		[DataMember(Name = "RecordGuid")]
		public string RecordGuid { get; set; }

		/// <summary>
		/// Record Model Name
		/// </summary>
		[DataMember(Name = "RecordModelName")]
		public string RecordModelName { get; set; }	
		
		/// <summary>
		/// CDD Name: STU.RESIDENCY.STATUS
		/// </summary>
		[DataMember(Order = 9, Name = "STU.RESIDENCY.STATUS")]
		public List<string> StuResidencyStatus { get; set; }
		
		/// <summary>
		/// CDD Name: STU.HOME.LOCATION
		/// </summary>
		[DataMember(Order = 12, Name = "STU.HOME.LOCATION")]
		public List<string> StuHomeLocation { get; set; }
		
		/// <summary>
		/// CDD Name: STU.HOME.LOCATION.START.DATE
		/// </summary>
		[DataMember(Order = 13, Name = "STU.HOME.LOCATION.START.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StuHomeLocationStartDate { get; set; }
		
		/// <summary>
		/// CDD Name: STU.HOME.LOCATION.END.DATE
		/// </summary>
		[DataMember(Order = 14, Name = "STU.HOME.LOCATION.END.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StuHomeLocationEndDate { get; set; }
		
		/// <summary>
		/// CDD Name: STU.TYPE.DATES
		/// </summary>
		[DataMember(Order = 15, Name = "STU.TYPE.DATES")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StuTypeDates { get; set; }
		
		/// <summary>
		/// CDD Name: STU.TYPES
		/// </summary>
		[DataMember(Order = 16, Name = "STU.TYPES")]
		public List<string> StuTypes { get; set; }
		
		/// <summary>
		/// CDD Name: STU.ACAD.LEVELS
		/// </summary>
		[DataMember(Order = 18, Name = "STU.ACAD.LEVELS")]
		public List<string> StuAcadLevels { get; set; }
		
		/// <summary>
		/// CDD Name: STU.ACAD.PROGRAMS
		/// </summary>
		[DataMember(Order = 21, Name = "STU.ACAD.PROGRAMS")]
		public List<string> StuAcadPrograms { get; set; }
		
		/// <summary>
		/// CDD Name: STU.TERMS
		/// </summary>
		[DataMember(Order = 22, Name = "STU.TERMS")]
		public List<string> StuTerms { get; set; }
		
		/// <summary>
		/// CDD Name: STU.RESIDENCY.STATUS.DATE
		/// </summary>
		[DataMember(Order = 33, Name = "STU.RESIDENCY.STATUS.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StuResidencyStatusDate { get; set; }
		
		/// <summary>
		/// CDD Name: STU.REG.PRIORITIES
		/// </summary>
		[DataMember(Order = 92, Name = "STU.REG.PRIORITIES")]
		public List<string> StuRegPriorities { get; set; }
		
		/// <summary>
		/// CDD Name: STU.ADVISE.COMPLETE.DATE
		/// </summary>
		[DataMember(Order = 99, Name = "STU.ADVISE.COMPLETE.DATE")]
		[DisplayFormat(DataFormatString = "{0:d}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StuAdviseCompleteDate { get; set; }
		
		/// <summary>
		/// CDD Name: STU.ADVISE.COMPLETE.ADVISOR
		/// </summary>
		[DataMember(Order = 100, Name = "STU.ADVISE.COMPLETE.ADVISOR")]
		public List<string> StuAdviseCompleteAdvisor { get; set; }
		
		/// <summary>
		/// CDD Name: STU.ADVISE.COMPLETE.TIME
		/// </summary>
		[DataMember(Order = 101, Name = "STU.ADVISE.COMPLETE.TIME")]
		[DisplayFormat(DataFormatString = "{0:T}")]
		[ColleagueDataMember(UseEnvisionInternalFormat = true)]
		public List<DateTime?> StuAdviseCompleteTime { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentsStuResidencies> StuResidenciesEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentsStuHomeLocations> StuHomeLocationsEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentsStuTypeInfo> StuTypeInfoEntityAssociation { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<StudentsStuAdvisements> StuAdvisementsEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: STU.RESIDENCIES
			
			StuResidenciesEntityAssociation = new List<StudentsStuResidencies>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StuResidencyStatus != null)
			{
				int numStuResidencies = StuResidencyStatus.Count;
				if (StuResidencyStatusDate !=null && StuResidencyStatusDate.Count > numStuResidencies) numStuResidencies = StuResidencyStatusDate.Count;

				for (int i = 0; i < numStuResidencies; i++)
				{

					string value0 = "";
					if (StuResidencyStatus != null && i < StuResidencyStatus.Count)
					{
						value0 = StuResidencyStatus[i];
					}


					DateTime? value1 = null;
					if (StuResidencyStatusDate != null && i < StuResidencyStatusDate.Count)
					{
						value1 = StuResidencyStatusDate[i];
					}

					StuResidenciesEntityAssociation.Add(new StudentsStuResidencies( value0, value1));
				}
			}
			// EntityAssociation Name: STU.HOME.LOCATIONS
			
			StuHomeLocationsEntityAssociation = new List<StudentsStuHomeLocations>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StuHomeLocation != null)
			{
				int numStuHomeLocations = StuHomeLocation.Count;
				if (StuHomeLocationStartDate !=null && StuHomeLocationStartDate.Count > numStuHomeLocations) numStuHomeLocations = StuHomeLocationStartDate.Count;
				if (StuHomeLocationEndDate !=null && StuHomeLocationEndDate.Count > numStuHomeLocations) numStuHomeLocations = StuHomeLocationEndDate.Count;

				for (int i = 0; i < numStuHomeLocations; i++)
				{

					string value0 = "";
					if (StuHomeLocation != null && i < StuHomeLocation.Count)
					{
						value0 = StuHomeLocation[i];
					}


					DateTime? value1 = null;
					if (StuHomeLocationStartDate != null && i < StuHomeLocationStartDate.Count)
					{
						value1 = StuHomeLocationStartDate[i];
					}


					DateTime? value2 = null;
					if (StuHomeLocationEndDate != null && i < StuHomeLocationEndDate.Count)
					{
						value2 = StuHomeLocationEndDate[i];
					}

					StuHomeLocationsEntityAssociation.Add(new StudentsStuHomeLocations( value0, value1, value2));
				}
			}
			// EntityAssociation Name: STU.TYPE.INFO
			
			StuTypeInfoEntityAssociation = new List<StudentsStuTypeInfo>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StuTypes != null)
			{
				int numStuTypeInfo = StuTypes.Count;
				if (StuTypeDates !=null && StuTypeDates.Count > numStuTypeInfo) numStuTypeInfo = StuTypeDates.Count;

				for (int i = 0; i < numStuTypeInfo; i++)
				{

					DateTime? value0 = null;
					if (StuTypeDates != null && i < StuTypeDates.Count)
					{
						value0 = StuTypeDates[i];
					}


					string value1 = "";
					if (StuTypes != null && i < StuTypes.Count)
					{
						value1 = StuTypes[i];
					}

					StuTypeInfoEntityAssociation.Add(new StudentsStuTypeInfo( value0, value1));
				}
			}
			// EntityAssociation Name: STU.ADVISEMENTS
			
			StuAdvisementsEntityAssociation = new List<StudentsStuAdvisements>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(StuAdviseCompleteDate != null)
			{
				int numStuAdvisements = StuAdviseCompleteDate.Count;
				if (StuAdviseCompleteAdvisor !=null && StuAdviseCompleteAdvisor.Count > numStuAdvisements) numStuAdvisements = StuAdviseCompleteAdvisor.Count;
				if (StuAdviseCompleteTime !=null && StuAdviseCompleteTime.Count > numStuAdvisements) numStuAdvisements = StuAdviseCompleteTime.Count;

				for (int i = 0; i < numStuAdvisements; i++)
				{

					DateTime? value0 = null;
					if (StuAdviseCompleteDate != null && i < StuAdviseCompleteDate.Count)
					{
						value0 = StuAdviseCompleteDate[i];
					}


					string value1 = "";
					if (StuAdviseCompleteAdvisor != null && i < StuAdviseCompleteAdvisor.Count)
					{
						value1 = StuAdviseCompleteAdvisor[i];
					}


					DateTime? value2 = null;
					if (StuAdviseCompleteTime != null && i < StuAdviseCompleteTime.Count)
					{
						value2 = StuAdviseCompleteTime[i];
					}

					StuAdvisementsEntityAssociation.Add(new StudentsStuAdvisements( value0, value1, value2));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class StudentsStuResidencies
	{
		public string StuResidencyStatusAssocMember;	
		public DateTime? StuResidencyStatusDateAssocMember;	
		public StudentsStuResidencies() {}
		public StudentsStuResidencies(
			string inStuResidencyStatus,
			DateTime? inStuResidencyStatusDate)
		{
			StuResidencyStatusAssocMember = inStuResidencyStatus;
			StuResidencyStatusDateAssocMember = inStuResidencyStatusDate;
		}
	}
	
	[Serializable]
	public class StudentsStuHomeLocations
	{
		public string StuHomeLocationAssocMember;	
		public DateTime? StuHomeLocationStartDateAssocMember;	
		public DateTime? StuHomeLocationEndDateAssocMember;	
		public StudentsStuHomeLocations() {}
		public StudentsStuHomeLocations(
			string inStuHomeLocation,
			DateTime? inStuHomeLocationStartDate,
			DateTime? inStuHomeLocationEndDate)
		{
			StuHomeLocationAssocMember = inStuHomeLocation;
			StuHomeLocationStartDateAssocMember = inStuHomeLocationStartDate;
			StuHomeLocationEndDateAssocMember = inStuHomeLocationEndDate;
		}
	}
	
	[Serializable]
	public class StudentsStuTypeInfo
	{
		public DateTime? StuTypeDatesAssocMember;	
		public string StuTypesAssocMember;	
		public StudentsStuTypeInfo() {}
		public StudentsStuTypeInfo(
			DateTime? inStuTypeDates,
			string inStuTypes)
		{
			StuTypeDatesAssocMember = inStuTypeDates;
			StuTypesAssocMember = inStuTypes;
		}
	}
	
	[Serializable]
	public class StudentsStuAdvisements
	{
		public DateTime? StuAdviseCompleteDateAssocMember;	
		public string StuAdviseCompleteAdvisorAssocMember;	
		public DateTime? StuAdviseCompleteTimeAssocMember;	
		public StudentsStuAdvisements() {}
		public StudentsStuAdvisements(
			DateTime? inStuAdviseCompleteDate,
			string inStuAdviseCompleteAdvisor,
			DateTime? inStuAdviseCompleteTime)
		{
			StuAdviseCompleteDateAssocMember = inStuAdviseCompleteDate;
			StuAdviseCompleteAdvisorAssocMember = inStuAdviseCompleteAdvisor;
			StuAdviseCompleteTimeAssocMember = inStuAdviseCompleteTime;
		}
	}
}
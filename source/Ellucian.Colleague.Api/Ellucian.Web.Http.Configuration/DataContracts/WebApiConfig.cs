//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DSL/T4 Generator - Version 1.2
//     Last generated on 10/4/2017 3:26:49 PM by user dvcoll-schandraseka
//
//     Type: ENTITY
//     Entity: WEB.API.CONFIG
//     Application: UT
//     Environment: dvColl
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Runtime.Serialization;
using System.CodeDom.Compiler;
using Ellucian.Dmi.Runtime;
using Ellucian.Data.Colleague;

namespace Ellucian.Web.Http.Configuration.DataContracts
{
	[GeneratedCodeAttribute("Colleague Data Contract Generator", "1.2")]
	[DataContract(Name = "WebApiConfig")]
	[ColleagueDataContract(GeneratedDateTime = "10/4/2017 3:26:49 PM", User = "dvcoll-schandraseka")]
	[EntityDataContract(EntityName = "WEB.API.CONFIG", EntityType = "PHYS")]
	public class WebApiConfig : IColleagueEntity
	{
		/// <summary>
		/// Version
		/// </summary>
		[DataMember]
		public int _AppServerVersion { get; set; }

		/// <summary>
		/// Record Key
		/// </summary>
		[DataMember]
		public string Recordkey { get; set; }
		
		public void setKey(string key)
		{
			Recordkey = key;
		}
		
		/// <summary>
		/// CDD Name: WAC.CONFIGURATION.NAME
		/// </summary>
		[DataMember(Order = 0, Name = "WAC.CONFIGURATION.NAME")]
		public string WacConfigurationName { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.VERSION
		/// </summary>
		[DataMember(Order = 1, Name = "WAC.VERSION")]
		public string WacVersion { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.PHOTO.URL
		/// </summary>
		[DataMember(Order = 2, Name = "WAC.PHOTO.URL")]
		public string WacPhotoUrl { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.PHOTO.TYPE
		/// </summary>
		[DataMember(Order = 3, Name = "WAC.PHOTO.TYPE")]
		public string WacPhotoType { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.PHOTO.HEADER.NAME
		/// </summary>
		[DataMember(Order = 5, Name = "WAC.PHOTO.HEADER.NAME")]
		public List<string> WacPhotoHeaderName { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.PHOTO.HEADER.VALUE
		/// </summary>
		[DataMember(Order = 6, Name = "WAC.PHOTO.HEADER.VALUE")]
		public List<string> WacPhotoHeaderValue { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.CACHE.PROVIDER
		/// </summary>
		[DataMember(Order = 11, Name = "WAC.CACHE.PROVIDER")]
		public string WacCacheProvider { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.CACHE.HOST
		/// </summary>
		[DataMember(Order = 13, Name = "WAC.CACHE.HOST")]
		public string WacCacheHost { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.CACHE.PORT
		/// </summary>
		[DataMember(Order = 14, Name = "WAC.CACHE.PORT")]
		public long? WacCachePort { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.LOGO.PATH
		/// </summary>
		[DataMember(Order = 16, Name = "WAC.LOGO.PATH")]
		public string WacLogoPath { get; set; }
		
		/// <summary>
		/// CDD Name: WAC.UNOFFICL.WATERMARK.PATH
		/// </summary>
		[DataMember(Order = 17, Name = "WAC.UNOFFICL.WATERMARK.PATH")]
		public string WacUnofficlWatermarkPath { get; set; }
		
		/// <summary>
		/// Entity assocation member
		/// </summary>
		[DataMember]
		public List<WebApiConfigWebApiConfigPhotoHdr> WebApiConfigPhotoHdrEntityAssociation { get; set; }
		
	
		// build up all the Associated objects and add them to the properties
		public void buildAssociations()
		{	
			// EntityAssociation Name: WEB.API.CONFIG.PHOTO.HDR
			
			WebApiConfigPhotoHdrEntityAssociation = new List<WebApiConfigWebApiConfigPhotoHdr>();
			// Set max length to the count of controller when initializing.
			//Update max length if any of the association members has higher length than controller length
			if(WacPhotoHeaderName != null)
			{
				int numWebApiConfigPhotoHdr = WacPhotoHeaderName.Count;
				if (WacPhotoHeaderValue !=null && WacPhotoHeaderValue.Count > numWebApiConfigPhotoHdr) numWebApiConfigPhotoHdr = WacPhotoHeaderValue.Count;

				for (int i = 0; i < numWebApiConfigPhotoHdr; i++)
				{

					string value0 = "";
					if (WacPhotoHeaderName != null && i < WacPhotoHeaderName.Count)
					{
						value0 = WacPhotoHeaderName[i];
					}


					string value1 = "";
					if (WacPhotoHeaderValue != null && i < WacPhotoHeaderValue.Count)
					{
						value1 = WacPhotoHeaderValue[i];
					}

					WebApiConfigPhotoHdrEntityAssociation.Add(new WebApiConfigWebApiConfigPhotoHdr( value0, value1));
				}
			}
			   
		}
	}
	
	// EntityAssociation classes
	
	[Serializable]
	public class WebApiConfigWebApiConfigPhotoHdr
	{
		public string WacPhotoHeaderNameAssocMember;	
		public string WacPhotoHeaderValueAssocMember;	
		public WebApiConfigWebApiConfigPhotoHdr() {}
		public WebApiConfigWebApiConfigPhotoHdr(
			string inWacPhotoHeaderName,
			string inWacPhotoHeaderValue)
		{
			WacPhotoHeaderNameAssocMember = inWacPhotoHeaderName;
			WacPhotoHeaderValueAssocMember = inWacPhotoHeaderValue;
		}
	}
}
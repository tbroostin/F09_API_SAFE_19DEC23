<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ellucian.Data.Colleague</name>
    </assembly>
    <members>
        <member name="T:Ellucian.Data.Colleague.BaseColleagueService">
            <summary>
            The BaseColleagueService class contains common code for derived Colleague web services. 
            Colleague web services that require the logging and configuration components
            must inherit from this class.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.Initialize">
            <summary>
            Initializes the global configuration for a Colleague web service.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.RetrieveServerParameters(Ellucian.Colleague.Configuration.RetrieveSystemParametersRequest)">
            <summary>
            Retrieves server configuration parameters.
            </summary>
            <param name="Request">System parameters request parameters.</param>
            <returns>
            Server parameters and/or processing errors.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.CreateLogEntry(System.String,System.String,Ellucian.Data.Colleague.DataContracts.LogEntryRequest)">
            <summary>
            Invokes the central logging web service, which provides a mechanism to funnel client and web server messages 
            into a central log file within Colleague.
            </summary>
            <param name="SecurityToken">Client session security token.</param>
            <param name="ControlID">Client session unique control identifier.</param>
            <param name="Request">Log message request parameters.</param>
            <returns>
            Confirmation of logging and/or processing errors.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.FormatLogMessage(Ellucian.Data.Colleague.DataContracts.LogEntryRequest)">
            <summary>
            Formats a LogEntryRequest object into a single string. This method is only applicable to the top service layer. 
            </summary>
            <param name="request">Log message request.</param>
            <returns>Single string representation of log message.</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.RetrieveVersion">
            <summary>
            Returns the assembly version of the web services.
            </summary>
            <returns>
            Assembly version.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.addDeserializedSubset(Ellucian.Dmi.Runtime.DmiTransaction,System.Object)">
            <summary>
            Serializes a data contract using a DataContractDmiSerializer and adds the resulting bytes to a
            DMI Transaction.
            </summary>
            <param name="transaction">DMI request transaction.</param>
            <param name="deserializedObject">Data contract to be serialized.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.addDeserializedSubset(Ellucian.Dmi.Runtime.DmiTransaction,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Serializes a data contract using a specified XmlObjectSerializer and adds the resulting bytes to a
            DMI Transaction.
            </summary>
            <param name="transaction">DMI request transaction.</param>
            <param name="deserializedObject">Data contract to be serialized.</param>
            <param name="serializer">Data contract serializer.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.AddHashSubset(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Calculates the hash of the DMI transaction passed in and then appends the SDHSQ
            hash subset to the transaction.  The shared secret will be read automatically.
            </summary>
            <param name="transaction">DMI request transaction.</param>
            <exception cref="T:Ellucian.Colleague.Configuration.ServerConfigurationException">Shared secret not defined</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.AddHashSubset(Ellucian.Dmi.Runtime.DmiTransaction,System.String)">
            <summary>
            Calculates the hash of the DMI transaction passed in and then append the SDHSQ
            hash subset to the transaction.
            </summary>
            <param name="transaction">DMI request transaction.</param>
            <param name="sharedSecret">Shared secret to add to the DMI transaction hashing.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.BaseColleagueService.ComputeHash(System.String,System.String)">
            <summary>
            Computes the hash of the string and shared secret passed in.
            </summary>
            <param name="stringToHash">Data to be hashed</param>
            <param name="sharedSecret">Shared secret to include as part of the data being hashed</param>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.ConnectionTest">
            <summary>
            Class representing a connection test
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.ConnectionTest.Validation">
            <summary>
            The type of validation test performed
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.ConnectionTest.Status">
            <summary>
            The status of the validation test performed
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.ConnectionTest.ErrorMessage">
            <summary>
            The error message if one occurs
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.ConnectionTestResult">
            <summary>
            Class representing the Colleague connection test results
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.ConnectionTestResult.Checks">
            <summary>
            List of validation checks performed
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.ConnectionTestResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.AnonymousColleagueDataReader">
            <summary>
            Represents a reader object that supports read-only operations to retrieve Colleague data
            using a persistent connection to the application listener and an unauthenticated (anonymous)
            user session.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.AnonymousColleagueDataReader.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.AnonymousColleagueDataReader.#ctor(Ellucian.Colleague.Configuration.DmiSettings)">
            <summary>
            Creates an instance of this class with DmiSettings.
            </summary>
            <param name="settings">Object which stores connection parameters</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.AnonymousColleagueDataReader.#ctor(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Creates an instance of this class with StandardDmiSession.
            </summary>
            <param name="dmiSession">Object which stores connection parameters</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.BulkReadOutput`1">
            <summary>
            Structure to hold data that may be desired during a bulk data read request
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ellucian.Data.Colleague.BulkReadOutput`1.BulkRecordsRead">
            <summary>
            Gets or sets the bulk records read as part of the bulk read Colleague transaction.
            </summary>
            <value>
            The bulk records read from Colleague.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.BulkReadOutput`1.InvalidKeys">
            <summary>
            Gets or sets the invalid keys that were specified to be read as part of the bulk read Colleague transaction.
            </summary>
            <value>
            The invalid keys.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.BulkReadOutput`1.InvalidRecords">
            <summary>
            Gets or sets the invalid records that were specified to be read as part of the bulk read Colleague transaction.
            </summary>
            <value>
            The invalid records.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.BatchColumnarReadOutput">
            <summary>
            Structure to hold data that may be desired during a batch columnar data read request
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.BatchColumnarReadOutput.BatchColumnarRecordsRead">
            <summary>
            Gets or sets the batch columnar records read as part of the batch columnar read transaction.
            </summary>
            <value>
            The batch columnar records read from Colleague.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.BatchColumnarReadOutput.InvalidKeys">
            <summary>
            Gets or sets the invalid keys that were specified to be read as part of the batch columnar read transaction.
            </summary>
            <value>
            The invalid keys.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.RecordKeyLookupResult">
            <summary>
            Represent a selected GUID entry associated with a RecordKeyLookup
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookupResult.Guid">
            <summary>
            The GUID of a record
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookupResult.ModelName">
            <summary>
            The Model Name associated with the GUID
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.GuidLookupResult">
            <summary>
            Represent a selected record entry associated with a GuidLookup
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.GuidLookupResult.Entity">
            <summary>
            The Entity this record belongs to
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.GuidLookupResult.PrimaryKey">
            <summary>
            The primary key of the record
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.GuidLookupResult.SecondaryKey">
            <summary>
            The secondary key of the record (the sub-table record key)
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.IColleagueGuidEntity">
            <summary>
            Interface for Colleague entity data contracts that contains GUID.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.IColleagueGuidEntity.RecordGuid">
            <summary>
            Gets or sets the record GUID.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.IColleagueGuidEntity.RecordModelName">
            <summary>
            Gets or sets the name of the record model name.
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.RecordKeyLookup">
            <summary>
            Define Colleague record lookup parameters
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookup.PhysicalFileName">
            <summary>
            Gets or sets the name of the physical file.
            For template files, use template name, e.g. "VALCODES" instead of "CORE.VALCODES".
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookup.PrimaryKey">
            <summary>
            The @ID of the record
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookup.SecondaryField">
            <summary>
            The name of the association controller field
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookup.SecondaryKey">
            <summary>
            The name of the association entry
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookup.CreateIfMissing">
            <summary>
            1 to create GUID if it doesn't exist for requested record. 0 otherwise.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.RecordKeyLookup.ResultKey">
            <summary>
            Return the key that can be used to fetch the corresponding guid in the dictionary returned by
            the the Select(RecordKeyLookup[]) method.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.RecordKeyLookup.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.RecordKeyLookup" /> class
            with empty SecondaryField and SecondaryKey. This should be used to 
            lookup records of physical files.
            </summary>
            <param name="physicalFileName">Name of the physical file.</param>
            <param name="primaryKey">The primary key.</param>
            <param name="createIfMissing">if set to <c>true</c> [create if missing].</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.RecordKeyLookup.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.RecordKeyLookup"/> class. 
            This should be used to lookup records of template files.
            </summary>
            <param name="physicalFileName">Name of the physical file.</param>
            <param name="primaryKey">The primary key.</param>
            <param name="secondaryField">The secondary field.</param>
            <param name="secondaryKey">The secondary key.</param>
            <param name="createIfMissing">if set to <c>true</c> [create if missing].</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.RecordKeyLookup.ToString">
            <summary>
            Return "PhysicalFileName;PrimaryKey;SecondaryField;SecondaryKey;1/0". 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.GuidLookup">
            <summary>
            Define GUID lookup parameters
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.GuidLookup.Guid">
            <summary>
            The GUID associated with the record, used for GUID-based queries. 
            This is always in lowercase since GUIDs in Colleague are lowercase.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.GuidLookup.ModelName">
            <summary>
            The model name associated with the record
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.GuidLookup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.GuidLookup"/> class
            with the ModelName property empty.
            </summary>
            <param name="guid">The GUID string.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.GuidLookup.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.GuidLookup"/> class.
            </summary>
            <param name="guid">The GUID string.</param>
            <param name="modelName">The model name.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.GuidLookup.ToString">
            <summary>
            Return "Guid;LdmName". 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.UniDataFormatter">
            <summary>
            Utility class providing tools to convert .NET DateTime objects
            to strings that are compatible with UniData queries.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.UniDataFormatter.UnidataFormatDate(System.DateTime,System.String,System.String)">
            <summary>
            Formats a DateTime object using a UniData date format conversion string.
            </summary>
            <param name="inputDate">The DateTime object to convert.</param>
            <param name="uniDataDateFormat">The UniData date format (i.e. conversion string).</param>
            <param name="delim">The delimeter to use in the resulting formatted date.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            Error: UniData date format string is required for formatting
            or
            Error: UniData date format string is invalid: \ + uniDataDateFormat + \
            </exception>
        </member>
        <member name="T:Ellucian.Data.Colleague.ColleagueTimeZoneUtility">
            <summary>
            Utility class to perform time zone conversions that need to occur 
            when handling time data from Colleague, which does not support
            time zones.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTimeZoneUtility.ToPointInTimeDateTimeOffset(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Extension method that applies the specified target time zone's offset to 
            a time-only DateTime? field of an entity, and return a DateTimeOffset? object.
            This method is for Colleague time-only fields that have a related date-only field,
            which when combined together represents a POINT IN TIME, such as payment date.
            The related date-only field will become the date component of the returned object.
            Note that the date portion of the timeOnlyField parameter will be ignored.
            Daylight Saving Time is accounted for by this conversion.
            </summary>
            <param name="timeOnlyField">The time-only field that represents a point in time 
            when combined with the provided related date-only field. </param>
            <param name="relatedDateField">The related date-only field.</param>
            <param name="colleagueTimeZone">The target Colleague time zone, based on 
            Windows time zone identifiers. Example: "Eastern Standard Time". If null
            or invalid, exceptions will be thrown.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTimeZoneUtility.ToTimeOfDayDateTimeOffset(System.Nullable{System.DateTime},System.String)">
            <summary>
            Extension method that applies the specified target time zone's offset to 
            a time-only DateTime? field of an entity, and return a DateTimeOffset? object.
            This method is for Colleague time-only fields that have NO related date-only field,
            representing a TIME OF DAY, such as course section meeting's start and end time.
            The current date (DateTime.Today) will become the date portion of the returned DateTimeOffset object.
            Note that the date portion of the timeOnlyField parameter will be ignored.
            Daylight Saving Time is accounted for by this conversion.
            </summary>
            <param name="timeOnlyField">The time-only field that represents a time of day, 
            such as meeting time.</param>
            <param name="colleagueTimeZone">The target Colleague time zone, based on 
            Windows time zone identifiers. Example: "Eastern Standard Time". If null
            or invalid, exceptions will be thrown.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTimeZoneUtility.ToLocalDateTime(System.DateTimeOffset,System.String)">
            <summary>
            Converts inbound timezone-aware time data to Colleague local time
            </summary>
            <param name="inboundTime">The inbound DateTimeOffset object.</param>
            <param name="colleagueTimeZone">The target Colleague time zone, based on 
            Windows time zone identifiers. Example: "Eastern Standard Time". If null
            or invalid, exceptions will be thrown.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTimeZoneUtility.ToLocalDateTime(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Converts inbound time zone-aware time data to Colleague local time.
            </summary>
            <param name="inboundTime">The inbound DateTimeOffset? object.</param>
            <param name="colleagueTimeZone">The target Colleague time zone, based on 
            Windows time zone identifiers. Example: "Eastern Standard Time". If null
            or invalid, exceptions will be thrown.</param>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.ColleagueTransactionInvoker">
            <summary>
            Represents an object that remotely executes Colleague Transactions on the Colleague application
            server using a persistent connection to the application listener and an authenticated
            user session (for regular transactions) or an unauthenticated user session (for anonymous transactions).
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.ColleagueTransactionInvoker"/> class.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.#ctor(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.ColleagueTransactionInvoker"/> class
            using a StandardDmiSession object to get session and connection info.
            </summary>
            <param name="session">DMI session information.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.#ctor(System.String,System.String,slf4net.ILogger,Ellucian.Colleague.Configuration.DmiSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.ColleagueTransactionInvoker"/> class
            using the specified session security token, session control ID,
            and a DmiSettings object which contains connection info.
            </summary>
            <param name="securityToken">The security token for the session.</param>
            <param name="controlId">The control id for the session.</param>
            <param name="logger">The logger instance for debugging.</param>
            <param name="settings">The DMI settings for the session.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.Execute``2(``0)">
            <summary>
            Executes a Colleague Transaction.
            </summary>
            <typeparam name="TRequest">The type of the request as defined by the Colleague Transaction data contract.</typeparam>
            <typeparam name="TResponse">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="request">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteAnonymous``2(``0)">
            <summary>
            Executes an anonymous Colleague Transaction.
            </summary>
            <typeparam name="TRequest">The type of the request as defined by the Colleague Transaction data contract.</typeparam>
            <typeparam name="TResponse">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="request">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.Execute``1(System.Object)">
            <summary>
            Executes a Colleague Transaction.
            </summary>
            <typeparam name="T">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="colleagueTx">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns>
            An instance of the expected response type with the results from the Colleague Environment.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">Fatal Exception trying to execute transaction without token</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteAnonymous``1(System.Object)">
            <summary>
            Executes an anonymous Colleague Transaction.
            </summary>
            <typeparam name="T">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="colleagueTx">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the
            expected type T.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.Execute``1(Ellucian.Dmi.Client.StandardDmiSession,System.Object)">
            <summary>
            Executes a Colleague Transaction.
            </summary>
            <typeparam name="T">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="session">The DMI session.</param>
            <param name="colleagueTx">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the
            expected type T.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.Execute``1(System.String,System.String,System.Object)">
            <summary>
            Executes a Colleague Transaction.
            </summary>
            <typeparam name="T">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="securityToken">The security token.</param>
            <param name="clientControlId">The client control id.</param>
            <param name="colleagueTx">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the
            expected type T.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteColleagueTxOnAppServer``1(System.String,System.String,System.Object)">
            <summary>
            This method does all of the heavy lifting of executing the Colleague Tx on the application server.  It 
            calls the serializers to serialize the DMI Tx and communicates with DMI and de-serializes the DMI Tx to the 
            Colleague Transaction Response object.
            
            Returns only the expected type T. Throw exception if the returned subset does not contain the expected CTX response.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="securityToken"></param>
            <param name="clientControlId"></param>
            <param name="colleagueTx"></param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the 
            expected type T.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteAsync``2(``0)">
            <summary>
            Executes a Colleague Transaction asynchronously.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteAnonymousAsync``2(``0)">
            <summary>
            Executes an anonymous Colleague Transaction asynchronously.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteAnonymousAsync``1(System.Object)">
            <summary>
            Asynchronously executes an anonymous Colleague Transaction.
            </summary>
            <typeparam name="T">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="colleagueTx">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the
            expected type T.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteAsync``1(System.String,System.String,System.Object)">
            <summary>
            Asynchronously executes a Colleague Transaction.
            </summary>
            <typeparam name="T">The type of the response as defined by the Colleague Transaction data contract.</typeparam>
            <param name="securityToken">The security token.</param>
            <param name="clientControlId">The client control id.</param>
            <param name="colleagueTx">The request object, which is an instance of the request type defined
            by the Colleague Transaction data contract.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the
            expected type T.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueTransactionInvoker.ExecuteColleagueTxOnAppServerAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method ASYNCHRONOUSLY does all of the heavy lifting of executing the Colleague Tx on the application server.  It 
            calls the serializers to serialize the DMI Tx and communicates with DMI and de-serializes the DMI Tx to the 
            Colleague Transaction Response object.
            
            Returns only the expected type T. Throw exception if the returned subset does not contain the expected CTX response.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="securityToken"></param>
            <param name="clientControlId"></param>
            <param name="colleagueTx"></param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">ColleagueTransactionException is thrown if response is null or is not of the 
            expected type T.</exception>
        </member>
        <member name="T:Ellucian.Data.Colleague.ColleagueDataReader">
            <summary>
            Represents a reader object that supports read-only operations to retrieve Colleague data
            using a persistent connection to the application listener and an authenticated user session.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.ColleagueDataReader.DEFAULT_QUERY_ATTRIBUTE_LIMIT">
            <summary>
            The supported databases have query limitations which must be enforced as part of the Select() method.
            One such limit is the number of query attributes in the selection criteria.
            In Unidata, 7.1 has a WITH stack size limit of 256, and UniData 7.2 has a limit of 512.
            In SQL Server, exceeding 460 values caused: "Fatal: 191(15): Some part of your SQL statement is nested too deeply."
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.ColleagueDataReader.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous
            and does not require authentication.
            </summary>
            <value>
            <c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.ColleagueDataReader.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.ColleagueDataReader.IntlRecord">
            <summary>
            Gets the International parameter record (INTL.PARAMS).
            </summary>
            <value>
            The international parameter record.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.ColleagueDataReader.RequesterName">
            <summary>
            Gets or sets the name of the requester.
            </summary>
            <value>
            The name of the requester.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.#ctor(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Creates an instance of this class with the provided DMI session information.
            </summary>
            <param name="dmiSession">The DMI session.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.#ctor(Ellucian.Dmi.Client.StandardDmiSession,Ellucian.Colleague.Configuration.DmiSettings)">
            <summary>
            Initializes a new instance of the ColleagueDataReader class.
            </summary>
            <param name="dmiSession">The DMI session.</param>
            <param name="settings">DMI connection parameters.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.#ctor(System.Boolean)">
            <summary>
            Non-public constructor to support anonymous requests.
            </summary>
            <param name="isAnonymous">Serves as a way to differentiate from other constructors</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.#ctor(System.Boolean,Ellucian.Colleague.Configuration.DmiSettings)">
            <summary>
            Non-public constructor to support anonymous requests.
            </summary>
            <param name="isAnonymous">Serves as a way to differentiate from other constructors</param>
            <param name="settings">The DMI settings.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.#ctor(System.Boolean,Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.ColleagueDataReader"/> class.
            </summary>
            <param name="isAnonymous">if set to <c>true</c> [is anonymous].</param>
            <param name="dmiSession">The dmi session.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecord``1(System.String,System.Boolean)">
            <summary>
            Reads a single record of the physical entity by the specified key.
            The name of the physical entity to read is obtained from the data contract T.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity</typeparam>
            <param name="key">Record key string</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecord``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified key. 
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="key">Record key string.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecord``1(Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.Boolean)">
            <summary>
            Reads a batch of records using the specified select criteria.
            The name of the physical entity to read is obtained from the data contract T.
            Records with invalid data, e.g. alpha characters in a date field, will not be returned.
            </summary>
            <typeparam name="T">type to convert the record subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity using the specified select criteria.
            Records with invalid data, e.g. alpha characters in a date field, will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records using the specified select criteria.
            The name of the physical entity to read is obtained from the data contract T.
            Records with invalid data, e.g. alpha characters in a date field,
            will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; the asynchronous counterpart to this method is
            BulkReadRecordWithInvalidRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity using the specified select criteria. Records with invalid data, e.g.
            alpha characters in a date field, will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is called BulkReadRecordWithInvalidRecordsAsync
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="invalidRecords">A dictionary with keys and error messages of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String[],System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. Records with invalid data, e.g.
            alpha characters in a date field, also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String[],System.String[]@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys are returned in the output parameter <c>invalidKeys</c>.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned.
            This method is synchronous; its asynchronous counterpart is called BulkReadRecordWithInvalidKeysAsync
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.String[]@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. The invalid keys are returned in the output
            parameter <c>invalidKeys</c>. Records with invalid data, e.g. alpha characters in a date field,
            also will not be returned.  This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAsync
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String[],System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys are returned in the output parameter <c>invalidKeys</c>.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAndRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAndRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAndRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="invalidKeys">A string array containing keys retrieved by GUID lookup that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ProcessRecTrans``1(System.Object[])">
            <summary>
            Extracts the object of type [data contract name] from the 
            array of deserialized response subsets.
            </summary>
            <typeparam name="T">Type to convert the subset to. 
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="recTransObjects">subset array</param>
            <returns>Subset returned converted to the expected T type</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecordColumns(System.String,System.String,System.String[])">
            <summary>
            Retrieves data for the specified columns of a record of the specified entity. 
            Returns a dictionary with the column names as the keys,
            and the column data as the values.
            If the record does not exist, null is returned.
            </summary>
            <param name="physicalFileName">Name of the physical entity being read. Do not use non-physical entity names.</param>
            <param name="key">Value of the record's key.</param>
            <param name="columns">The names of the columns to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem with ReadRecordColumn operation: File name not specified.
            or
            Problem with ReadRecordColumn operation: Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Error: Number of values returned is greater than number of requested columns.
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.parseTokenAndQuotesFromStatement(System.String,System.String,System.String@)">
            <summary>
            Scan for single or double quotes in the token or around the token in the statement. If quotes are found
            then set the separator out argument value to the quote sequence that should separate each value in the
            value list. If no quotes are found, the values are deemed to be un-quoted, so the separator is set to a
            single space to separate the list of un-quoted values. If the token contains quotes and then the quoted
            token in the statement is wrapper in an extra set of quotes, since the quoted token will be fully replaced
            with a list of values which need to be wrapped by the original quotes that are being removed.
            </summary>
            <param name="statement">A query statement containing a token that may be quoted.</param>
            <param name="token">A string token, which should appear in the query statement, which will be replaced with a list of values.</param>
            <param name="separator">Returns a string to be used to separate the list of values in the query statement.
            This will either be two single quotes, two double quotes, or a single space.</param>
            <returns>Returns the query statement which may have been altered to quote the token replacement string.</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.parseQueryClauseFromStatement(System.String,System.String[],System.String@,System.Boolean)">
            <summary>
            Search a statement for one or more query clauses and if found, remove them from the statement and return them in the
            out queryclause argument. If the replaceAll boolean is true, then all occurrences of each keyword are found. If false,
            then only the first occurrence of each keyword is found.
            </summary>
            <param name="statement">The statement to scan for keywords.</param>
            <param name="keywords">The array of keywords to search for.</param>
            <param name="queryclause">The query clause string consisting of each keyword and its associated field name, if any.</param>
            <param name="replaceAll">A boolean indicating whether all occurrences of each keyword should be extracted, or just the first occurrence.</param>
            <returns>The original statement is returned with the specified query clauses all removed.</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.Select(System.String,System.String,System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            Executes a MIOSEL-style select on the specified entity using the specified criteria which contains a placeholder
            which will be replaced with a list of values. The default criteria placeholder string of "?" and default listSize 
            of 425 may be overridden, but usually suffice. This method will take care of breaking the list of values into smaller
            lists that will be used in individual MIOSEL selections, the results of which will be accumulated into a single
            result set. And, if the criteria contains sort criteria, it is applied to the total result set, not the individual
            query results.
            </summary>
            <param name="physicalFileName">Name of the physical entity being queried. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria string to be used by MIOSEL containing a "placeholder" string which will be replaced 
            with lists of values from the "values" array. If the values should be quoted, then the placeholder string should be quoted
            in the criteria; such as "LAST.NAME EQ '?'".</param>
            <param name="values">List of values to use in the criteria.</param>
            <param name="placeholder">The string in the criteria that will be replaced by the list of values.</param>
            <param name="listSize">The maximum number of values to use in each query execution.</param>
            <returns>
            The resulting array of keys.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem with Select operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.Select(System.String,System.String)">
            <summary>
            Executes a MIOSEL-style select on the specified entity. Returns the resulting array of record keys.
            </summary>
            <param name="physicalFileName">Name of the physical entity being read. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria string (to be used by MIOSEL).</param>
            <returns>
            The resulting array of keys.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem with Select operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.Select(System.String,System.String[],System.String)">
            <summary>
            Executes a MIOSEL-style sub-select on the specified entity using the specified limiting list of keys.
            Returns the resulting array of record keys.
            </summary>
            <param name="physicalFileName">Name of the physical entity being read. Do not use non-physical entity names.</param>
            <param name="limitingKeys">Limiting list of keys that the query will inner-join/sub-select against. A null list means no limiting.</param>
            <param name="criteria">Select criteria string (to be used by MIOSEL).</param>
            <returns>
            The resulting array of keys.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem with Select operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.Select(Ellucian.Data.Colleague.GuidLookup[])">
            <summary>
            Selects the specified GUID lookup set.
            Returns a dictionary of
            1) key=input guid, value={entity, primary key, secondary}
            2) key=input guid, value={entity, primary key} (no secondary key)
            3) key=input guid, value=null (nothing found for this guid)
            </summary>
            <param name="guidLookups">The GUID lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.Select(Ellucian.Data.Colleague.RecordKeyLookup[])">
            <summary>
            Return GUIDs for the specified record key lookup set.
            Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey,              value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey,              value=null (if no sec key specified and no guid found)
            </summary>
            <param name="guidLookups">The record lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.createRequestTransaction(Ellucian.Data.Colleague.DataContracts.DataRequest)">
            <summary>
            Creates a transaction containing the request to send to app server.
            </summary>
            <param name="request"></param>
            <returns>transaction</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.SendDmiRequest(System.IO.Stream)">
            <summary>
            Connects to the app server, sends the request transaction, and gets back a response stream.
            </summary>
            <param name="requestStream"></param>
            <returns>Response stream</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.GetContractEntityType(System.Type)">
            <summary>
            Gets the value of the EntityType attribute in the EntityDataContractAttribute of the contract type.
            If it is not present, an empty string is returned.
            </summary>
            <param name="contractType"></param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.GetContractPhysicalEntityName(System.Type)">
            <summary>
            Gets the value of the EntityName attribute in the EntityDataContractAttribute of the contract type.
            If it is not present, a ColleagueDataReaderException is thrown.
            </summary>
            <param name="contractType"></param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.GetContractRequestedColumns(System.Type)">
            <summary>
            Gets the value of the EntityType attribute in the EntityDataContractAttribute of the contract type.
            If it is not present, an empty string is returned.
            </summary>
            <param name="contractType"></param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecordAsync``1(System.String,System.Boolean)">
            <summary>
            Reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="key">Record key.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The record, converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecordAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="key">Record key string.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecordAsync``1(Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Asynchronously reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecordAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Asynchronously reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Selection criteria</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as co-files, logical files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records using the specified select criteria.
            The name of the physical entity to read is obtained from the data contract T.
            Records with invalid data, e.g. alpha characters in a date field,
            will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value in the BulkReadObject structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity using the specified select criteria.
            Records with invalid data, e.g. alpha characters in a date field, will not be returned; however, the keys
            of those invalid records will be returned in the invalidRecords value in the BulkReadObject structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidKeysAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys will be returned in the invalidKeys value in the BulkReadObject structure.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadObject structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidKeysAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. The invalid keys are returned in the
            invalidKeys value from the BulkReadOutput structure. Records with invalid data, e.g. alpha characters in a date field,
            also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the invalidRecords value within the
            BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value in the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys are returned in the invalidKeys value in the BulkReadOutput structure.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the invalidRecords value of the
            BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the invalidKeys value in the BulkReadOutput structure. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value of the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordAsync``1(Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the invalidKeys value of the BulkReadOutput structure. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value of the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.SelectAsync(System.String,System.String)">
            <summary>
            Asynchronously executes a select on the specified entity. Returns the resulting list of keys.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.SelectAsync(System.String,System.String[],System.String)">
            <summary>
            Asynchronously executes a sub-select on the specified entity using the specified limiting list of keys.
            Returns the resulting list of keys.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="limitingKeys">Limiting list of keys that the query will inner-join/sub-select against. A null list means no limiting.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.SelectAsync(System.String,System.String,System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            Asynchronously executes a select on the specified entity using the specified criteria which contains a placeholder
            which will be replaced with a list of values. The default criteria placeholder string of "?" and default listSize 
            of 425 may be overridden, but usually suffice. This method will take care of breaking the list of values into smaller
            lists that will be used in individual selections, the results of which will be accumulated into a single
            result set. And, if the criteria contains sort criteria, it is applied to the total result set, not the individual
            query results.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string containing a "placeholder" string which will be replaced 
            with lists of values from the "values" array. If the values should be quoted, then the placeholder string should be quoted
            in the criteria; such as "LAST.NAME EQ '?'".</param>
            <param name="values">List of values to use in the criteria.</param>
            <param name="placeholder">The string in the criteria that will be replaced by the list of values.</param>
            <param name="requireValues">Boolean indicating whether the values list must contain at least one value before executing the selection.</param>
            <param name="listSize">The maximum number of values to use in each query execution.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.SelectAsync(Ellucian.Data.Colleague.GuidLookup[])">
            <summary>
            Asynchronously selects the specified GUID lookup set.
            Returns a dictionary of
            1) key=input guid, value=string[]{entity, primary key, secondary}
            2) key=input guid, value=string[]{entity, primary key} (no secondary key)
            3) key=input guid, value=null (nothing found for this guid)
            </summary>
            <param name="guidLookups">The GUID lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.SelectAsync(Ellucian.Data.Colleague.RecordKeyLookup[])">
            <summary>
            Asynchronously return GUIDs for the specified record key lookup set.
            Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey,              value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey,              value=null (if no sec key specified and no guid found)
            </summary>
            <param name="recordLookups">The record lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.ReadRecordColumnsAsync(System.String,System.String,System.String[])">
            <summary>
            Asynchronously retrieves data for the specified columns of a record of the specified entity. 
            Returns a dictionary with the column names as the keys,
            and the column data as the values.
            If the record does not exist, null is returned.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="key">Value of the record's key.</param>
            <param name="columns">The names of the columns to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BatchReadRecordColumnsAsync(System.String,System.String[],System.String[])">
            <summary>
            Asynchronously retrieves the values of columns for a set of records.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="keys">Value of the record's key.</param>
            <param name="columns">The names of the columns to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueDataReader.BatchReadRecordColumnsWithInvalidKeysAsync(System.String,System.String[],System.String[])">
            <summary>
            Asynchronously retrieves the values of columns for a set of records.
            Records that could not be read will not be returned in the resulting dictionary.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a dictionary of 6 records back. The invalid keys are returned
            in the invalidKeys value of the BatchColumnarReadOutput structure.
            </summary>
            <param name="filename">The filename.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BatchReadRecordColumn operation: File name not specified.
            or
            Problem with BatchReadRecordColumn operation: No Record keys specified.</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired. New login required.</exception> 
        </member>
        <member name="T:Ellucian.Data.Colleague.IColleagueTransactionInvoker">
            <summary>
            Interface for executing Colleague Transactions.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionInvoker.Execute``2(``0)">
            <summary>
            Executes a Colleague Transaction.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionInvoker.ExecuteAnonymous``2(``0)">
            <summary>
            Executes an anonymous Colleague Transaction.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionInvoker.ExecuteAsync``2(``0)">
            <summary>
            Asynchronously executes a Colleague Transaction.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionInvoker.ExecuteAnonymousAsync``2(``0)">
            <summary>
            Asynchronously executes an anonymous Colleague Transaction.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.ConnectionTestStatusType">
            <summary>
            Connection test statuses
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.ConnectionTestStatusType.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.ConnectionTestStatusType.Unavailable">
            <summary>
            Unavailable
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.ActiveList">
            <summary>
            The ActiveList class contains code to handle list management with a DAS session for data reader access
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.ActiveList.ActiveKeys">
            <summary>
            Gets the list of active keys.
            </summary>
            <value>
            The list of active keys.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.ActiveList.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.ActiveList.#ctor(Ellucian.Dmi.Client.Das.DasSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.ActiveList"/> class.
            </summary>
            <param name="session">The active DAS session.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ActiveList.#ctor(Ellucian.Dmi.Client.Das.DasSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.ActiveList"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="listNumber">The list number (between 0 and 9) to use for this instance of the ActiveList class.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ActiveList.CreateAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a list as an asynchronous operation.
            </summary>
            <param name="keys">The keys to load into the list being created.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Error(s) occurred during attempt to create active select list:  + string.Join(; , errorMessages.ToArray())</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ActiveList.GetAsync">
            <summary>
            Gets a list of keys from the list number for this ActiveList instance as an asynchronous operation.
            </summary>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Error(s) occurred during attempt to get active select list:  + string.Join(; , errorMessages.ToArray())</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.ActiveList.ClearAsync">
            <summary>
            Clears the list of keys from the DAS for the list number for this ActiveList instance as an asynchronous operation.
            </summary>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Error(s) occurred during attempt to clear active select list:  + string.Join(; , errorMessages.ToArray())</exception>
        </member>
        <member name="T:Ellucian.Data.Colleague.DasColleagueDataReader">
            <summary>
            Represents a reader object that supports read-only operations to retrieve Colleague data
            using a persistent connection to the DAS listener.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DasColleagueDataReader.Logger">
            <summary>
            Gets or sets the logger object.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DasColleagueDataReader.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous
            and does not require authentication.
            </summary>
            <value>
            <c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.DasColleagueDataReader"/> class.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.#ctor(Ellucian.Colleague.Configuration.DasSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.DasColleagueDataReader" /> class.
            </summary>
            <param name="dasSettings">The DAS settings to use.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecordAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Asynchronously reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecordAsync``1(Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Asynchronously reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecordAsync``1(System.String,System.Boolean)">
            <summary>
            Reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="key">Record key.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The record, converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecordAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="key">Record key string.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecord``1(System.String,System.Boolean)">
            <summary>
            Reads a single record of the physical entity by the specified key.
            The name of the physical entity to read is obtained from the data contract T.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity</typeparam>
            <param name="key">Record key string</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecord``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified key. 
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="key">Record key string.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as co-files, logical files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Selection criteria</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records using the specified select criteria.
            The name of the physical entity to read is obtained from the data contract T.
            Records with invalid data, e.g. alpha characters in a date field,
            will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value in the BulkReadObject structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity using the specified select criteria.
            Records with invalid data, e.g. alpha characters in a date field, will not be returned; however, the keys
            of those invalid records will be returned in the invalidRecords value in the BulkReadObject structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity using the specified select criteria. Records with invalid data, e.g.
            alpha characters in a date field, will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is called BulkReadRecordWithInvalidRecordsAsync
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="invalidRecords">A dictionary with keys and error messages of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records using the specified select criteria.
            The name of the physical entity to read is obtained from the data contract T.
            Records with invalid data, e.g. alpha characters in a date field,
            will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; the asynchronous counterpart to this method is
            BulkReadRecordWithInvalidRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity using the specified select criteria.
            Records with invalid data, e.g. alpha characters in a date field, will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.Boolean)">
            <summary>
            Reads a batch of records using the specified select criteria.
            The name of the physical entity to read is obtained from the data contract T.
            Records with invalid data, e.g. alpha characters in a date field, will not be returned.
            </summary>
            <typeparam name="T">type to convert the record subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Select criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidKeysAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys will be returned in the invalidKeys value in the BulkReadObject structure.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadObject structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidKeysAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. The invalid keys are returned in the
            invalidKeys value from the BulkReadOutput structure. Records with invalid data, e.g. alpha characters in a date field,
            also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the invalidRecords value within the
            BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value in the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys are returned in the invalidKeys value in the BulkReadOutput structure.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the invalidRecords value of the
            BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the invalidKeys value in the BulkReadOutput structure. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value of the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the invalidKeys value in the BulkReadOutput structure. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value of the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of keys.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAndRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys are returned in the output parameter <c>invalidKeys</c>.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAndRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String[],System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned;
            however, the keys of those invalid records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.String[]@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. The invalid keys are returned in the output
            parameter <c>invalidKeys</c>. Records with invalid data, e.g. alpha characters in a date field,
            also will not be returned.  This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAsync
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String[],System.String[]@,System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            The invalid keys are returned in the output parameter <c>invalidKeys</c>.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned.
            This method is synchronous; its asynchronous counterpart is called BulkReadRecordWithInvalidKeysAsync
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">A string array containing keys that could not be read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of keys. Records that could not be read
            will not be returned in the resulting collection. For example, if you pass in 10 keys, 4 of
            which are invalid, you will get a collection of 6 records back. Records with invalid data, e.g.
            alpha characters in a date field, also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String[],System.Boolean)">
            <summary>
            Reads a batch of records according to the input array of keys.
            The name of the physical entity to read is obtained from the data contract T.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid, you will get a collection of 6 records back.
            Records with invalid data, e.g. alpha characters in a date field, also will not be returned.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the invalidKeys value of the BulkReadOutput structure. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the invalidRecords value of the BulkReadOutput structure.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            BulkReadOutput structure.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>        
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecord``1(Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            This method is synchronous; its asynchronous counterpart is BulkReadRecordWithInvalidKeysAndRecordsAsync.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="invalidKeys">A string array containing keys retrieved by GUID lookup that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReadRecord``1(Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecordColumnsAsync(System.String,System.String,System.String[])">
            <summary>
            Asynchronously retrieves data for the specified columns of a record of the specified entity. 
            Returns a dictionary with the column names as the keys,
            and the column data as the values.
            If the record does not exist, null is returned.
            </summary>
            <param name="physicalFileName">Name of the physical file.</param>
            <param name="key">Value of the record's key.</param>
            <param name="columns">The names of the columns to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem with ReadRecordColumn operation: File name not specified.
            or
            Problem with ReadRecordColumn operation: Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Error: Number of values returned is greater than number of requested columns.
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BatchReadRecordColumnsAsync(System.String,System.String[],System.String[])">
            <summary>
            Asynchronously retrieves the values of columns for a set of records.
            Records that could not be read will not be returned in the resulting dictionary.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a dictionary of 6 records back.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="keys">Array of unique record keys to read.</param>
            <param name="columns">Array of column/attribute names to read from the Colleague entity.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with BatchReadRecordColumnsAsync operation: File name not specified.
            or
            Problem with BatchReadRecordColumnsAsync operation: Record key not specified.
            or
            Problem with BatchReadRecordColumnsAsync operation: Duplicate keys are not permitted
            or
            Problem connecting to database server: " + exc.Message
            or
            Core Web Service error: " + exc.Message
            or
            Unexpected exception: " + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BatchReadRecordColumnsWithInvalidKeysAsync(System.String,System.String[],System.String[])">
            <summary>
            Asynchronously retrieves the values of columns for a set of records.
            Records that could not be read will not be returned in the resulting dictionary.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a dictionary of 6 records back. The invalid keys are returned
            in the invalidKeys value of the BatchColumnarReadOutput structure.
            </summary>
            <param name="filename">The filename.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReadRecordColumns(System.String,System.String,System.String[])">
            <summary>
            Retrieves data for the specified columns of a record of the specified entity. 
            Returns a dictionary with the column names as the keys,
            and the column data as the values.
            If the record does not exist, null is returned.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="key">Value of the record's key.</param>
            <param name="columns">The names of the columns to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.SelectAsync(Ellucian.Data.Colleague.RecordKeyLookup[])">
            <summary>
            Asynchronously return GUIDs for the specified record key lookup set.
            Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey,              value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey,              value=null (if no sec key specified and no guid found)
            </summary>
            <param name="recordLookups">The record lookup params set.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.Select(Ellucian.Data.Colleague.RecordKeyLookup[])">
            <summary>
            Return GUIDs for the specified record key lookup set.
            Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey,              value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey,              value=null (if no sec key specified and no guid found)
            </summary>
            <param name="recordLookups">The record lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.Select(Ellucian.Data.Colleague.GuidLookup[])">
            <summary>
            Selects the specified GUID lookup set.
            Returns a dictionary of
            1) key=input guid, value={entity, primary key, secondary}
            2) key=input guid, value={entity, primary key} (no secondary key)
            3) key=input guid, value=null (nothing found for this guid)
            </summary>
            <param name="guidLookups">The GUID lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.SelectAsync(Ellucian.Data.Colleague.GuidLookup[])">
            <summary>
            Asynchronously selects the specified GUID lookup set.
            Returns a dictionary of
            1) key=input guid, value=string[]{entity, primary key, secondary}
            2) key=input guid, value=string[]{entity, primary key} (no secondary key)
            3) key=input guid, value=null (nothing found for this guid)
            </summary>
            <param name="guidLookups">The GUID lookup params set.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.SelectAsync(System.String,System.String,System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            Asynchronously executes a select on the specified entity using the specified criteria which contains a placeholder
            which will be replaced with a list of values. The default criteria placeholder string of "?" and default listSize
            of 425 may be overridden, but usually suffice. This method will take care of breaking the list of values into smaller
            lists that will be used in individual selections, the results of which will be accumulated into a single
            result set. And, if the criteria contains sort criteria, it is applied to the total result set, not the individual
            query results.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string containing a "placeholder" string which will be replaced
            with lists of values from the "values" array. If the values should be quoted, then the placeholder string should be quoted
            in the criteria; such as "LAST.NAME EQ '?'".</param>
            <param name="values">List of values to use in the criteria.</param>
            <param name="placeholder">The string in the criteria that will be replaced by the list of values.</param>
            <param name="requireValues">Boolean indicating whether the values list must contain at least one value before executing the selection.</param>
            <param name="listSize">The maximum number of values to use in each query execution.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.SelectAsync(System.String,System.String[],System.String)">
            <summary>
            Asynchronously executes a sub-select on the specified entity using the specified limiting list of keys.
            Returns the resulting list of keys.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="limitingKeys">Limiting list of keys that the query will inner-join/sub-select against. A null list means no limiting.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.SelectAsync(System.String,System.String)">
            <summary>
            Asynchronously executes a select on the specified entity. Returns the resulting list of keys.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.Select(System.String,System.String,System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            Executes a MIOSEL-style select on the specified entity using the specified criteria which contains a placeholder
            which will be replaced with a list of values. The default criteria placeholder string of "?" and default listSize
            of 425 may be overridden, but usually suffice. This method will take care of breaking the list of values into smaller
            lists that will be used in individual MIOSEL selections, the results of which will be accumulated into a single
            result set. And, if the criteria contains sort criteria, it is applied to the total result set, not the individual
            query results.
            </summary>
            <param name="physicalFileName">Name of the physical entity being queried. Do not use non-physical entity names.</param>
            <param name="criteria">Select criteria string to be used by MIOSEL containing a "placeholder" string which will be replaced
            with lists of values from the "values" array. If the values should be quoted, then the placeholder string should be quoted
            in the criteria; such as "LAST.NAME EQ '?'".</param>
            <param name="values">List of values to use in the criteria.</param>
            <param name="placeholder">The string in the criteria that will be replaced by the list of values.</param>
            <param name="requireValues">Boolean indicating whether the values list must contain at least one value before executing the selection.</param>
            <param name="listSize">The maximum number of values to use in each query execution.</param>
            <returns>
            The resulting array of keys.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with Select operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.Select(System.String,System.String[],System.String)">
            <summary>
            Executes a MIOSEL-style sub-select on the specified entity using the specified limiting list of keys.
            Returns the resulting array of record keys.
            </summary>
            <param name="physicalFileName">Name of the physical entity being read. Do not use non-physical entity names.</param>
            <param name="limitingKeys">Limiting list of keys that the query will inner-join/sub-select against. A null list means no limiting.</param>
            <param name="criteria">Select criteria string (to be used by MIOSEL).</param>
            <returns>
            The resulting array of keys.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            Problem with Select operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.Select(System.String,System.String)">
            <summary>
            Executes a MIOSEL-style select on the specified entity. Returns the resulting array of record keys.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string (to be used by MIOSEL).</param>
            <returns>
            The resulting array of keys.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">Problem with Select operation: File name not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to database server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetContractEntityType(System.Type)">
            <summary>
            Gets the value of the EntityType attribute in the EntityDataContractAttribute of the contract type.
            If it is not present, an empty string is returned.
            </summary>
            <param name="contractType"></param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetContractPhysicalEntityName(System.Type)">
            <summary>
            Gets the value of the EntityName attribute in the EntityDataContractAttribute of the contract type.
            If it is not present, a ColleagueDataReaderException is thrown.
            </summary>
            <param name="contractType"></param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetContractRequestedColumns(System.Type)">
            <summary>
            Gets the value of the EntityType attribute in the EntityDataContractAttribute of the contract type.
            If it is not present, an empty string is returned.
            </summary>
            <param name="contractType"></param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetDasSessionAsync">
            <summary>
            Gets a DAS session from the session pool as an asynchronous operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ReturnDasSessionAsync(Ellucian.Dmi.Client.Das.DasSession)">
            <summary>
            Returns the DAS session to the session pool as an asynchronous operation.
            </summary>
            <param name="returnSession">The return session.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ParseTokenAndQuotesFromStatement(System.String,System.String,System.String@)">
            <summary>
            Scan for single or double quotes in the token or around the token in the statement. If quotes are found
            then set the separator out argument value to the quote sequence that should separate each value in the
            value list. If no quotes are found, the values are deemed to be un-quoted, so the separator is set to a
            single space to separate the list of un-quoted values. If the token contains quotes and then the quoted
            token in the statement is wrapper in an extra set of quotes, since the quoted token will be fully replaced
            with a list of values which need to be wrapped by the original quotes that are being removed.
            </summary>
            <param name="statement">A query statement containing a token that may be quoted.</param>
            <param name="token">A string token, which should appear in the query statement, which will be replaced with a list of values.</param>
            <param name="separator">Returns a string to be used to separate the list of values in the query statement.
            This will either be two single quotes, two double quotes, or a single space.</param>
            <returns>Returns the query statement which may have been altered to quote the token replacement string.</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.ParseQueryClauseFromStatement(System.String,System.String[],System.String@,System.Boolean)">
            <summary>
            Search a statement for one or more query clauses and if found, remove them from the statement and return them in the
            out queryclause argument. If the replaceAll boolean is true, then all occurrences of each keyword are found. If false,
            then only the first occurrence of each keyword is found.
            </summary>
            <param name="statement">The statement to scan for keywords.</param>
            <param name="keywords">The array of keywords to search for.</param>
            <param name="queryclause">The query clause string consisting of each keyword and its associated field name, if any.</param>
            <param name="replaceAll">A boolean indicating whether all occurrences of each keyword should be extracted, or just the first occurrence.</param>
            <returns>The original statement is returned with the specified query clauses all removed.</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetHighestField(System.Type)">
            <summary>
            Gets the highest field number for a given Colleague entity data object.
            </summary>
            <param name="t">The Colleague entity data object type.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetGuidModelNameAsync(System.String,Ellucian.Dmi.Client.Das.DasSession)">
            <summary>
            Gets the GUID model name as an asynchronous operation.
            </summary>
            <param name="entity">The entity.</param>
            <param name="session">The DAS session.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetGuidModelNameAsync(System.String,System.String,Ellucian.Dmi.Client.Das.DasSession)">
            <summary>
            Gets the GUID model name as an asynchronous operation.
            </summary>
            <param name="entity">The entity.</param>
            <param name="secondaryFieldNameOrNumber">The secondary field name or number.</param>
            <param name="session">The DAS session.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.GetLdmGuidPhysicalEntityNameAsync(Ellucian.Dmi.Client.Das.DasSession,System.String)">
            <summary>
            Gets the LDM.GUID physical entity name as an asynchronous operation.
            </summary>
            <param name="session">The DAS session.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReverseGuidLookupAsync(Ellucian.Dmi.Client.Das.DasSession,System.Collections.Generic.List{Ellucian.Data.Colleague.RecordKeyLookup})">
            <summary>
            Reverse GUID lookup provided a set of record IDs as an asynchronous operation.
            </summary>
            <param name="session">The DAS session.</param>
            <param name="requestedRecords">The requested records.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReverseGuidLookupAsync(Ellucian.Dmi.Client.Das.DasSession,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reverse GUID lookup provided a set of record IDs as an asynchronous operation.
            </summary>
            <param name="session">The DAS session.</param>
            <param name="primaryEntity">The primary entity.</param>
            <param name="primaryKeys">The primary keys.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.DasColleagueDataReader.BulkReverseGuidLookupAsync(Ellucian.Dmi.Client.Das.DasSession,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reverse GUID lookup provided a set of record IDs as an asynchronous operation.
            </summary>
            <param name="session">The DAS session.</param>
            <param name="primaryEntity">The primary entity.</param>
            <param name="primaryKeys">The primary keys.</param>
            <param name="secondaryField">The secondary field.</param>
            <param name="secondaryKeys">The secondary keys.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">More than one primary key provided - when specifying a secondary field only one primary key may be provided.;primarykeys</exception>
            <exception cref="T:System.ArgumentNullException">secondarykeys;At least one secondary key must be provided when specifying a secondary field.</exception>
        </member>
        <member name="T:Ellucian.Data.Colleague.LdmGuidEntityMetadata">
            <summary>
            The LdmGuidEntityMetadata class contains public properties mapping GUID entities to Colleague entity names
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.LdmGuidEntityMetadata.EntityName">
            <summary>
            Gets or sets the name of the GUID entity.
            </summary>
            <value>
            The name of the GUID entity.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.LdmGuidEntityMetadata.TemplateFile">
            <summary>
            Gets or sets the template (Colleague) file.
            </summary>
            <value>
            The template (Colleague) file.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.SelectProcessor">
            <summary>
            Provide methods to perform SELECT directly with the DAS.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.SelectProcessor.ReadSize">
            <summary>
            The DAS will select in chunks of this size.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.SelectProcessor.SelectedKeys">
            <summary>
            The resulting list.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.SelectProcessor.TotalSelected">
            <summary>
            Number of items in the resulting list.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.SelectProcessor.#ctor(Ellucian.Dmi.Client.Das.DasSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.SelectProcessor"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.SelectProcessor.ExecuteAsync(System.String)">
            <summary>
            Send SELECT queries straight to the DAS and get back resulting list.
            </summary>
            <param name="query">The full SELECT query string.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.SelectProcessor.BuildSelectStatement(System.String,System.String)">
            <summary>
            Builds the full select query statement.
            </summary>
            <param name="file">The file.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValMinimumInputString">
            <summary>
            CDD Name: VAL.MINIMUM.INPUT.STRING
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValExternalRepresentation">
            <summary>
            CDD Name: VAL.EXTERNAL.REPRESENTATION
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValActionCode1">
            <summary>
            CDD Name: VAL.ACTION.CODE.1
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValInternalCode">
            <summary>
            CDD Name: VAL.INTERNAL.CODE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValActionCode2">
            <summary>
            CDD Name: VAL.ACTION.CODE.2
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValActionCode3">
            <summary>
            CDD Name: VAL.ACTION.CODE.3
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValActionCode4">
            <summary>
            CDD Name: VAL.ACTION.CODE.4
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValCodeLength">
            <summary>
            CDD Name: VAL.CODE.LENGTH
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValZeroFill">
            <summary>
            CDD Name: VAL.ZERO.FILL
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValNoMod">
            <summary>
            CDD Name: VAL.NO.MOD
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValcodesAddDate">
            <summary>
            CDD Name: VALCODES.ADD.DATE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValcodesAddOperator">
            <summary>
            CDD Name: VALCODES.ADD.OPERATOR
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValcodesChangeDate">
            <summary>
            CDD Name: VALCODES.CHANGE.DATE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValcodesChangeOperator">
            <summary>
            CDD Name: VALCODES.CHANGE.OPERATOR
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValcodesReleaseStatus">
            <summary>
            CDD Name: VALCODES.RELEASE.STATUS
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValcodesModules">
            <summary>
            CDD Name: VALCODES.MODULES
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValPurpose">
            <summary>
            CDD Name: VAL.PURPOSE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValApplication">
            <summary>
            CDD Name: VAL.APPLICATION
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ApplValcodes.ValsEntityAssociation">
            <summary>
            Entity assocation member
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.AuditLogParms._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.AuditLogParms.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.AuditLogParms.AuditLogCatId">
            <summary>
            CDD Name: AUDIT.LOG.CAT.ID
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.AuditLogParms.AuditLogEnabledFlag">
            <summary>
            CDD Name: AUDIT.LOG.ENABLED.FLAG
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.AuditLogParms.AuditLogCatEntityAssociation">
            <summary>
            Entity assocation member
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.LogEntryRequest">
            <summary>
            This data contract represents the parameters for logging a message within Colleague.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataContracts.LogEntryRequest.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LogEntryRequest.LogLevel">
            <summary>
            This string represents the message type to be logged.
            </summary>
            <value>
            The log level.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LogEntryRequest.Message">
            <summary>
            This string represents the message to be logged.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LogEntryRequest.UniqueIdentifier">
            <summary>
            This string represents the unique identifier associated to the session.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LogEntryRequest.LogSource">
            <summary>
            This string represents the source of the logged message.
            </summary>
            <value>
            The log source.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LogEntryRequest.Details">
            <summary>
            This list of strings represents additional message details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.LogEntryResponse">
            <summary>
            This data contract represents the response to logging a message within Colleague.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataContracts.LogEntryResponse.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LogEntryResponse.LoggingSuccessful">
            <summary>
            This boolean flag indicates the success of logging.
            </summary>
            <value>
              <c>true</c> if [logging successful]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest">
            <summary>
            This data contract represents the parameters for changing a Colleague password
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest.UserId">
            <summary>
            This string represents the current user ID for authentication.
            </summary>
            <value>
            The user id.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest.CurrentPassword">
            <summary>
            This string represents the current DMI registry password for the current user
            </summary>
            <value>
            The current password.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest.UserToModify">
            <summary>
            This string represents legacy functionality where an administrator could change the password
            for another user. The typical value for this field should match the UserId property.
            </summary>
            <value>
            The user to modify.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest.NewPassword">
            <summary>
            This string represents the new DMI registry password for the current user
            </summary>
            <value>
            The new password.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest.ConfirmNewPassword">
            <summary>
            This string represents confirmation of the new DMI registry password for the current user
            </summary>
            <value>
            The confirm new password.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest.Hint">
            <summary>
            This string represents the hint string for the new password
            </summary>
            <value>
            The hint.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.ChangePasswordResponse">
            <summary>
            This data contract represents the response to changing a Colleague password
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordResponse.Success">
            <summary>
            This flag represents the success of the password change
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ChangePasswordResponse.Reserved">
            <summary>
            This string represents a reserved property for the future
            </summary>
            <value>
            The reserved.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.CodeItem">
            <summary>
            Constructor for code/value pairs
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataContracts.CodeItem.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.CodeItem.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.CodeItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.SecurityClass">
            <summary>
            Class containing Colleague security class name property
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.SecurityClass.Name">
            <summary>
            Gets or sets the Colleague security class name.
            </summary>
            <value>
            The security class name.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.ColleagueSessionProperties">
            <summary>
            Class defining Colleague session properties
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionProperties._AppServerVersion">
            <summary>
            Gets or sets the application server version.
            </summary>
            <value>
            The application server version.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionProperties.OperatorId">
            <summary>
            Gets or sets the operator id for the Colleague session
            </summary>
            <value>
            The operator id.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionProperties.TokenTimeout">
            <summary>
            Gets or sets the security token timeout value
            </summary>
            <value>
            The token timeout.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionProperties.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionProperties.SecurityClass">
            <summary>
            Gets or sets the Colleague security class name.
            </summary>
            <value>
            The Colleague security class.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesRequest">
            <summary>
            Colleague session properties request
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesRequest._AppServerVersion">
            <summary>
            Gets or sets the Colleague application server version.
            </summary>
            <value>
            The application server version.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesResponse">
            <summary>
            Colleague session properties response
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesResponse._AppServerVersion">
            <summary>
            Gets or sets the Colleague application server version.
            </summary>
            <value>
            The application server version.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesResponse.OperatorId">
            <summary>
            Gets or sets the operator id.
            </summary>
            <value>
            The operator id.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesResponse.TokenTimeout">
            <summary>
            Gets or sets the security token timeout.
            </summary>
            <value>
            The security token timeout.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesResponse.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.ColleagueSessionPropertiesResponse.SecurityClass">
            <summary>
            Gets or sets the Colleague security class.
            </summary>
            <value>
            The Colleague security class.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetApphomePathRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetApphomePathResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.Definition">
            <summary>
            Data contract for Definition type. 
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Definition.ResourceKey">
            <summary>
            Gets or sets the resource key.
            </summary>
            <value>
            The resource key.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Definition.Controller">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>
            The controller.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Definition.Area">
            <summary>
            Gets or sets the area.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Definition.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Definition.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.Operator">
            <summary>
            Operator data contract
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Operator.OperatorId">
            <summary>
            Gets or sets the operator id.
            </summary>
            <value>
            The operator id.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.Operator.OperatorKey">
            <summary>
            Gets or sets the operator key.
            </summary>
            <value>
            The operator key.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorization">
            <summary>
            MVC Authorization data contract
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorization._AppServerVersion">
            <summary>
            Gets or sets the app server version.
            </summary>
            <value>
            The app server version.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorization.Definition">
            <summary>
            Gets or sets the definition.
            </summary>
            <value>
            The definition.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorization.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorizationRequest">
            <summary>
            MVC Authorization Request data contract
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorizationRequest._AppServerVersion">
            <summary>
            Gets or sets the app server version.
            </summary>
            <value>
            The app server version.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorizationResponse">
            <summary>
            MVC Authorization Response data contract
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorizationResponse._AppServerVersion">
            <summary>
            Gets or sets the app server version.
            </summary>
            <value>
            The app server version.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorizationResponse.Definition">
            <summary>
            Gets or sets the definition.
            </summary>
            <value>
            The definition.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetMvcAuthorizationResponse.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetRolePermissionsRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.GetRolePermissionsResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.HashRequest">
            <summary>
            Represents the SDHSQ subset used for hashing DMI transactions.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.HashRequest.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>
            The hash.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.InstalledAppls._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.InstalledAppls.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.InstalledAppls.IaModuleNames">
            <summary>
            CDD Name: IA.MODULE.NAMES
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.InstalledAppls.IaModuleStamp">
            <summary>
            CDD Name: IA.MODULE.STAMP
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.InstalledAppls.IaModulesEntityAssociation">
            <summary>
            Entity assocation member
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostCountry">
            <summary>
            CDD Name: HOST.COUNTRY
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostDate2">
            <summary>
            CDD Name: HOST.DATE2
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostDate4">
            <summary>
            CDD Name: HOST.DATE4
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostDateLong">
            <summary>
            CDD Name: HOST.DATE.LONG
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostShortDateFormat">
            <summary>
            CDD Name: HOST.SHORT.DATE.FORMAT
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostDateDelimiter">
            <summary>
            CDD Name: HOST.DATE.DELIMITER
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostLongDateFormat">
            <summary>
            CDD Name: HOST.LONG.DATE.FORMAT
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostLongDatePad">
            <summary>
            CDD Name: HOST.LONG.DATE.PAD
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostLongMonth">
            <summary>
            CDD Name: HOST.LONG.MONTH
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostLongYear">
            <summary>
            CDD Name: HOST.LONG.YEAR
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.IntlParams.HostShortDatePad">
            <summary>
            CDD Name: HOST.SHORT.DATE.PAD
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidLdmName">
            <summary>
            CDD Name: LDM.GUID.LDM.NAME
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidEntity">
            <summary>
            CDD Name: LDM.GUID.ENTITY
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidPrimaryKey">
            <summary>
            CDD Name: LDM.GUID.PRIMARY.KEY
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidSecondaryFld">
            <summary>
            CDD Name: LDM.GUID.SECONDARY.FLD
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidSecondaryFldPos">
            <summary>
            CDD Name: LDM.GUID.SECONDARY.FLD.POS
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidSecondaryKey">
            <summary>
            CDD Name: LDM.GUID.SECONDARY.KEY
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidAdddate">
            <summary>
            CDD Name: LDM.GUID.ADDDATE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidAddopr">
            <summary>
            CDD Name: LDM.GUID.ADDOPR
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.LdmGuid.LdmGuidReplacedBy">
            <summary>
            CDD Name: LDM.GUID.REPLACED.BY
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MaintainBatchReadStrategiesRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MaintainBatchReadStrategiesResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition">
            <summary>
            Data contract for the MVC Resource Definition.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition.Action">
            <summary>
            This string represents the controller action method name.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition.Area">
            <summary>
            This string represents the area name.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition.Controller">
            <summary>
            This string represents the controller class name.
            </summary>
            <value>
            The controller.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition.Description">
            <summary>
            This string represents a description of the resource.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.MvcResourceDefinition.ValidOperators">
            <summary>
            This list contains the valid operators for the resource.
            </summary>
            <value>
            The valid operators.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityEnv._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityEnv.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityEnv.OeeUsername">
            <summary>
            CDD Name: OEE.USERNAME
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityRole._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityRole.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityRole.OerOrgRole">
            <summary>
            CDD Name: OER.ORG.ROLE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityRole.OerStartDate">
            <summary>
            CDD Name: OER.START.DATE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgEntityRole.OerEndDate">
            <summary>
            CDD Name: OER.END.DATE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgRole._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgRole.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.OrgRole.OroleTitle">
            <summary>
            CDD Name: OROLE.TITLE
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.SyncWebSessionRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.SyncWebSessionResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.TurnGrdsOffRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.TurnGrdsOffResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.TurnGrdsOnRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.TurnGrdsOnResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.UpdateProxyUserSessionTokenRequest._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.UpdateProxyUserSessionTokenResponse._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.WwwTokens._AppServerVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.WwwTokens.Recordkey">
            <summary>
            Record Key
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.WwwTokens.WwwtPersonId">
            <summary>
            CDD Name: WWWT.PERSON.ID
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.WwwTokens.WwwtSessionTimeout">
            <summary>
            CDD Name: WWWT.SESSION.TIMEOUT
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataContracts.DataRequest">
            <summary>
            Represents a SDAFQ subset.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.SubmitFlag">
            <summary>
            Submit flag.
            </summary>
            <value>
            The submit flag.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.DataAccessMode">
            <summary>
            Access mode (STANDARD, GUID_BASED or RETURN_GUID)
            </summary>
            <value>
            The data access mode.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.DataAccessType">
            <summary>
            Access type.
            </summary>
            <value>
            The type of the data access.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ViewOptions">
            <summary>
            View options.
            </summary>
            <value>
            The view options.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.View">
            <summary>
            The action keyword - "VIEW".
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ViewName">
            <summary>
            The name of the file to be read.
            </summary>
            <value>
            The name of the view.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ViewRequestSize">
            <summary>
            Subset request size.
            </summary>
            <value>
            The size of the view request.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ColNames">
            <summary>
            Column names (comma delimited) to be returned. By default (if left empty), all columns are returned.
            </summary>
            <value>
            The col names.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ViewCriteria">
            <summary>
            The select criteria string to be passed to MIOSEL, or a list of keys, comma-delimited.
            </summary>
            <value>
            The view criteria.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ViewType">
            <summary>
            View type - PHYS (physical), LOGI (logical), PERM (permanent), BLOB (blob, no associated CDDs).
            </summary>
            <value>
            The type of the view.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.RequesterName">
            <summary>
            Name of application using the reader.
            </summary>
            <value>
            The name of the requester.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.DataContracts.DataRequest.ViewNameEnd">
            <summary>
            Must be "[ViewName].END".
            </summary>
            <value>
            The view name end.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            <summary>
            Definition of an exception that may occur when using the Colleague API.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException">
            <summary>
            Definition of an exception thrown by the Colleague Data Reader.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueDataReaderException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException">
            <summary>
            Exception thrown during the processing of DAFS response strings.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            <summary>
            Exception thrown when any error codes or error subsets are found in the response.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">
            <summary>
            Colleague Session Expired
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException.#ctor(System.String)">
            <summary>
            Colleague Session Expired Exception constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.LoginException">
            <summary>
            Definition of an exception that may occur during login process
            </summary>
            <seealso cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException" />
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.LoginException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.LoginException"/> class.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.LoginException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.LoginException" /> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.LoginException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.LoginException" /> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorMessage">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="P:Ellucian.Data.Colleague.Exceptions.LoginException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Exceptions.LoginException.ErrorCode">
            <summary>
            Gets the error code associated with the login exception.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.Exceptions.LoginException.FullMessage">
            <summary>
            Gets the full message (error code and error message) associated with the login exception.
            </summary>
            <value>
            The full message.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.LoginException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
            </PermissionSet>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException">
            <summary>
            Exception for Colleague password expiration.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException"/> class.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">
            <summary>
            Definition of an exception thrown by the Colleague Transaction Invoker.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.DmiErrorSubset">
            <summary>
            Gets the DMI error subset.
            </summary>
            <value>
            The DMI error subset.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.DmiMessageSubset">
            <summary>
            Gets the DMI message subset.
            </summary>
            <value>
            The DMI message subset.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.DmiSubset">
            <summary>
            Gets the DMI subset.
            </summary>
            <value>
            The DMI subset.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.#ctor(System.String,Ellucian.Dmi.Runtime.ErrorResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="unexpectedErrorSubset">The unexpected error subset.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.#ctor(System.String,Ellucian.Dmi.Runtime.DmiMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="unexpectedDmiMessage">The unexpected DMI message.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException.#ctor(System.String,Ellucian.Dmi.Runtime.IDmiSubset)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="unexpectedSubset">The unexpected subset.</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.IColleagueEntity">
            <summary>
            Interface for Colleague entity data contracts.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.IColleagueEntity.Recordkey">
            <summary>
            The key of the record.
            </summary>
            <value>
            The recordkey.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueEntity.setKey(System.String)">
            <summary>
            Method to assign record key's value.
            This is because a CDD record doesn't have its own @ID field.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueEntity.buildAssociations">
            <summary>
            Builds up associated lists for all Colleague entity objects
            created using data contracts.
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.DataResponseProcessor">
            <summary>
            Class for handling responses from data reader requests.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractRecordFromResponse(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Extracts the record from a DAFS response that contains just one record.
            </summary>
            <param name="responseTrans">DAFS response.</param>
            <returns>
            The record block in a form of an array of column values.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">Could not read file \ + argArray.ElementAt(5) + \</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException">Error occurred during response extraction: invalid subset size.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractRecordFromResponse(Ellucian.Dmi.Runtime.DmiTransaction,System.String[]@)">
            <summary>
            Extracts the record from a DAFS response that contains just one record.
            </summary>
            <param name="responseTrans">DAFS response.</param>
            <param name="guidInfo">Out: array of guid and model name.</param>
            <returns>
            The record block in a form of an array of column values.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">Could not read file \ + argArray.ElementAt(5) + \</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException">Error occurred during response extraction: invalid subset size.</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractRecordKeyFromResponse(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Extracts the record key from a DAFS response that contains just one record. 
            This will not check for error subset, because 
            this method is supposed to be called after ExtractRecordFromResponse() 
            which already did the checks
            </summary>
            <param name="responseTrans">DAFS response.</param>
            <returns>
            The record block in a form of an array of column values.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            Could not read file \ + argArray.ElementAt(5) + \
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException">Error occurred during response extraction: invalid subset size.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractBulkRecordsFromResponse(Ellucian.Dmi.Runtime.DmiTransaction,System.Collections.Generic.Dictionary{System.String,System.String[]}@)">
            <summary>
            Extracts records from a DAFS response that contains multiple records,
            then returns a dictionary of string arrays, with the key being the record keys.
            </summary>
            <param name="responseTrans">The response transaction.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            Could not read file \ + argArray.ElementAt(5) + \
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractRecordColumnsFromResponse(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Processes a read columns response. Extracts the columns' values, which should be
            in the order the column names were sent in the request.
            </summary>
            <param name="responseTrans">The response transaction.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            Could not read record \ +
                                argArray.ElementAt(8) +
                                \ from file \ +
                                argArray.ElementAt(5)
            or
            Could not read file \ + argArray.ElementAt(5) + \
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderResponseExtractionException">Error occurred during response extraction: invalid subset size.</exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractSelectResultFromResponse(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Extracts the array of keys from the select response.
            </summary>
            <param name="responseTrans">The response transaction.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            Could not read file \ + argArray.ElementAt(5) + \
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractGuidBasedSelectResultFromResponse(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Extracts the GUID_BASED select result from response. Returns a dictionary of
            1) key=input guid, value={entity, primary key, secondary}
            2) key=input guid, value={entity, primary key} (no secondary key)
            3) key=input guid, value = null (nothing found for this guid)
            </summary>
            <param name="responseTrans">The response trans.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            Invalid response data for GUID retrieval. Array lengths do not match.
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ExtractReturnGuidSelectResultFromResponse(Ellucian.Dmi.Runtime.DmiTransaction)">
            <summary>
            Extracts the RETURN_GUID select result from response. Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey, value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey, value=null (if no sec key specified and no guid found)
            </summary>
            <param name="responseTrans">The response trans.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.DataReaderErrorResponseException">
            Invalid response data for GUID retrieval. Array lengths do not match.
            </exception>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueSessionExpiredException">Session expired.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.DataResponseProcessor.ThrowIfSessionExpired(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Throws a ColleagueSessionExpiredException if the session is expired
            </summary>
            <param name="argArray">List of strings for error subset</param>
            <param name="message">Error message</param>
        </member>
        <member name="T:Ellucian.Data.Colleague.HttpContextTransactionFactory">
            <summary>
            HTTP-based methods for getting Colleague Transaction Invoker and Colleague Data Reader instances.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.HttpContextTransactionFactory.#ctor(slf4net.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.HttpContextTransactionFactory"/> class.
            Colleague settings will be retrieved from the app.config or web.config file.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.HttpContextTransactionFactory.#ctor(slf4net.ILogger,Ellucian.Colleague.Configuration.ColleagueSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.HttpContextTransactionFactory"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="settings">The colleague settings.</param>
            <exception cref="T:System.ArgumentNullException">settings</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.HttpContextTransactionFactory.GetTransactionInvoker">
            <summary>
            Gets the transaction invoker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.HttpContextTransactionFactory.GetDataReader">
            <summary>
            Gets the data reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.HttpContextTransactionFactory.GetDataReader(System.Boolean)">
            <summary>
            Gets the data reader.
            </summary>
            <param name="anonymous">if set to <c>true</c> [anonymous].</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.HttpContextTransactionFactory.GetDMIFClient">
            <summary>
            Get the DMIFClient for file transfer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.IColleagueTransactionFactory">
            <summary>
            Interface for getting Colleague Transaction Invoker and Colleague Data Reader instances.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionFactory.GetTransactionInvoker">
            <summary>
            Gets the transaction invoker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionFactory.GetDataReader">
            <summary>
            Gets the data reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionFactory.GetDataReader(System.Boolean)">
            <summary>
            Gets the regular or anonymous data reader.
            </summary>
            <param name="anonymous">if set to <c>true</c> [anonymous].</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueTransactionFactory.GetDMIFClient">
            <summary>
            Get the DMIF client for file transfer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.IColleagueDataReader">
            <summary>
            Interface for reading Colleague data.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecord``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="key">Record key string.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecordAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="key">Record key string.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecord``1(System.String,System.Boolean)">
            <summary>
            Reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="key">Record key.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The record, converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecordAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a single record.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="key">Record key.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The record, converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecord``1(Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="!:ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecordAsync``1(Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Asynchronously reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="!:ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="!:ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecordAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup,System.Boolean)">
            <summary>
            Asynchronously reads a single record of the specified entity by the specified GUID lookup.
            If the record does not exist, null is returned.
            </summary>
            <typeparam name="T">Data contract generated for this entity.</typeparam>
            <param name="physicalFileName">Name of the physical entity to read, required
            when reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookup">The GUID lookup.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            Record which has been deserialized into the expected data contract type.
            </returns>
            <exception cref="!:ColleagueDataReaderException">File name not specified.
            or
            Record key not specified.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message
            or
            Problem building association for record  + key + :  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.Boolean)">
            <summary>
            Reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Selection criteria</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Selection criteria</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.String,System.Boolean)">
            <summary>
            Reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as co-files, logical files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as co-files, logical files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="invalidRecords">A dictionary with keys and parsing errors of the invalid records.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as co-files, logical files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="invalidRecords">A dictionary with keys and parsing errors of the invalid records.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously reads a batch of records from a select query.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as co-files, logical files, and templates.</param>
            <param name="criteria">Selection criteria for selecting the keys to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns>
            The resulting array of records converted to the expected data type.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String[],System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String[],System.String[]@,System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">String array containing keys that could not be read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidKeysAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.String[]@,System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">String array containing keys that could not be read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidKeysAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String[],System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidRecords">The invalid records.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String[],System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidRecords">A dictionary with keys and parsing errors of the invalid records.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidRecordsAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">String array containing keys that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and parsing errors of the invalid records.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,System.String[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="invalidKeys">String array containing keys that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and parsing errors of the invalid records.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,System.String[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records.
            </summary>
            <typeparam name="T">Type to convert the response to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical Colleague entity. Required if reading non-physical
            entities such as logical files, application-hierarchy files, and templates.</param>
            <param name="keys">String array containing the keys of the records to read.</param>
            <param name="replaceTextVMs">If set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordAsync``1(Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Asynchronously reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecord``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="invalidKeys">A string array containing keys retrieved by GUID lookup that could not be read.</param>
            <param name="invalidRecords">A dictionary with keys and error message of the invalid records.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BulkReadRecordWithInvalidKeysAndRecordsAsync``1(System.String,Ellucian.Data.Colleague.GuidLookup[],System.Boolean)">
            <summary>
            Reads a batch of records of the specified entity according to the input array of GUID lookups.
            Records that could not be read will not be returned in the resulting collection.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a collection of 6 records back. The invalid keys are returned
            in the output parameter <c>invalidKeys</c>. Records with invalid data,
            e.g. alpha characters in a date field, also will not be returned; however, the keys of those invalid
            records are returned in the output parameter <c>invalidRecords</c>.
            </summary>
            <typeparam name="T">Type to convert the subset to.
            Must be a Colleague Entity data contract (of type IColleagueEntity).</typeparam>
            <param name="physicalFileName">Name of the physical entity being read, required when
            reading a logical entity. Do not use non-physical entity names.</param>
            <param name="guidLookups">The GUID lookups.</param>
            <param name="replaceTextVMs">if set to true, text/comment fields will replace double value marks with a new line characters, and will replace single value marks with a space.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem with BulkReadRecord operation: GUID lookup list is null.
            or
            Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecordColumns(System.String,System.String,System.String[])">
            <summary>
            Retrieves data for the specified columns of a record of the specified entity. 
            Returns a dictionary with the column names as the keys,
            and the column data as the values.
            If the record does not exist, null is returned.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="key">Value of the record's key.</param>
            <param name="columns">The names of the columns to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.ReadRecordColumnsAsync(System.String,System.String,System.String[])">
            <summary>
            Asynchronously retrieves data for the specified columns of a record of the specified entity. 
            Returns a dictionary with the column names as the keys,
            and the column data as the values.
            If the record does not exist, null is returned.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="key">Value of the record's key.</param>
            <param name="columns">The names of the column(s) to read.</param>
            <returns>
            The resulting value of the record's column mapped to the column names.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BatchReadRecordColumnsAsync(System.String,System.String[],System.String[])">
            <summary>
            Asynchronously retrieves the values of columns for a set of records.
            Records that could not be read will not be returned in the resulting dictionary.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a dictionary of 6 records back.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="keys">Value of the record key(s).</param>
            <param name="columns">The names of the column(s) to read.</param>
            <returns>
            The resulting value of the set of record's column mapped to the column names.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.BatchReadRecordColumnsWithInvalidKeysAsync(System.String,System.String[],System.String[])">
            <summary>
            Asynchronously retrieves the values of columns for a set of records.
            Records that could not be read will not be returned in the resulting dictionary.
            For example, if you pass in 10 keys, 4 of which are invalid,
            you will get a dictionary of 6 records back. The invalid keys are returned
            in the invalidKeys value of the BatchColumnarReadOutput structure.
            </summary>
            <param name="filename">The filename.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.Select(System.String,System.String)">
            <summary>
            Executes a select on the specified entity. Returns the resulting list of keys.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.SelectAsync(System.String,System.String)">
            <summary>
            Asynchronously executes a select on the specified entity. Returns the resulting list of keys.
            </summary>
            <param name="filename">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.Select(System.String,System.String[],System.String)">
            <summary>
            Executes a sub-select on the specified entity using the specified limiting list of keys.
            Returns the resulting list of keys.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="limitingKeys">Limiting list of keys that the query will inner-join/sub-select against. A null list means no limiting.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.SelectAsync(System.String,System.String[],System.String)">
            <summary>
            Asynchronously executes a sub-select on the specified entity using the specified limiting list of keys.
            Returns the resulting list of keys.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="limitingKeys">Limiting list of keys that the query will inner-join/sub-select against. A null list means no limiting.</param>
            <param name="criteria">Select criteria string.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.Select(System.String,System.String,System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            Executes a select on the specified entity using the specified criteria which contains a placeholder
            which will be replaced with a list of values. The default criteria placeholder string of "?" and default listSize 
            of 425 may be overridden, but usually suffice. This method will take care of breaking the list of values into smaller
            lists that will be used in individual selections, the results of which will be accumulated into a single
            result set. And, if the criteria contains sort criteria, it is applied to the total result set, not the individual
            query results.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string containing a "placeholder" string which will be replaced 
            with lists of values from the "values" array. If the values should be quoted, then the placeholder string should be quoted
            in the criteria; such as "LAST.NAME EQ '?'".</param>
            <param name="values">List of values to use in the criteria.</param>
            <param name="placeholder">The string in the criteria that will be replaced by the list of values.</param>
            <param name="requireValues">Boolean indicating whether the values list must contain at least one value before executing the selection.</param>
            <param name="listSize">The maximum number of values to use in each query execution.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.SelectAsync(System.String,System.String,System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            Asynchronously executes a select on the specified entity using the specified criteria which contains a placeholder
            which will be replaced with a list of values. The default criteria placeholder string of "?" and default listSize 
            of 425 may be overridden, but usually suffice. This method will take care of breaking the list of values into smaller
            lists that will be used in individual selections, the results of which will be accumulated into a single
            result set. And, if the criteria contains sort criteria, it is applied to the total result set, not the individual
            query results.
            </summary>
            <param name="physicalFileName">Name of the Colleague entity.</param>
            <param name="criteria">Select criteria string containing a "placeholder" string which will be replaced 
            with lists of values from the "values" array. If the values should be quoted, then the placeholder string should be quoted
            in the criteria; such as "LAST.NAME EQ '?'".</param>
            <param name="values">List of values to use in the criteria.</param>
            <param name="placeholder">The string in the criteria that will be replaced by the list of values.</param>
            <param name="requireValues">Boolean indicating whether the values list must contain at least one value before executing the selection.</param>
            <param name="listSize">The maximum number of values to use in each query execution.</param>
            <returns>
            The resulting list of keys.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.Select(Ellucian.Data.Colleague.GuidLookup[])">
            <summary>
            Selects the specified GUID lookup set.
            Returns a dictionary of
            1) key=input guid, value=string[]{entity, primary key, secondary}
            2) key=input guid, value=string[]{entity, primary key} (no secondary key)
            3) key=input guid, value=null (nothing found for this guid)
            </summary>
            <param name="guidLookups">The GUID lookup params set.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.SelectAsync(Ellucian.Data.Colleague.GuidLookup[])">
            <summary>
            Asynchronously selects the specified GUID lookup set.
            Returns a dictionary of
            1) key=input guid, value=string[]{entity, primary key, secondary}
            2) key=input guid, value=string[]{entity, primary key} (no secondary key)
            3) key=input guid, value=null (nothing found for this guid)
            </summary>
            <param name="guidLookups">The GUID lookup params set.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.Select(Ellucian.Data.Colleague.RecordKeyLookup[])">
            <summary>
            Return GUIDs for the specified record key lookup set.
            Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey,              value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey,              value=null (if no sec key specified and no guid found)
            </summary>
            <param name="recordLookups">The record lookup params set.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.IColleagueDataReader.SelectAsync(Ellucian.Data.Colleague.RecordKeyLookup[])">
            <summary>
            Asynchronously return GUIDs for the specified record key lookup set.
            Returns a dictionary of
            1) key=entity+primaryKey+secondaryKey, value={guid, model name}
            2) key=entity+primaryKey,              value={guid, model name} (if no secondary key specified)
            3) key=entity+primaryKey+secondaryKey, value=null (if no guid found)
            4) key=entity+primaryKey,              value=null (if no sec key specified and no guid found)
            </summary>
            <param name="recordLookups">The record lookup params set.</param>
            <returns></returns>
            <exception cref="!:ColleagueDataReaderException">Problem processing the response:  + exc.Message
            or
            Error found in response:  + exc.Message
            or
            Problem connecting to app server:  + exc.Message
            or
            Core Web Service error:  + exc.Message
            or
            Unexpected exception:  + exc.Message</exception>
        </member>
        <member name="P:Ellucian.Data.Colleague.IColleagueDataReader.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous 
            and does not require authentication.
            </summary>
            <value>
            <c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository">
            <summary>
            This base class provides common access to Colleague Transaction Invoker, Colleague Data Reader, and isolated caching.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.Level1CacheTimeoutValue">
            <summary>
            The level1 cache timeout value.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.EthosExtendedDataDictionary">
            <summary>
            Dictionary of string, string that contains the Ethos Extended Data to send into the CTX
            key is column name
            value is value to save in, if empty string then this means it is meant to remove the data from colleague
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.ApphomePath">
            <summary>
            Full OS path to Colleague apphome on app server
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.AppServerOSPathSeparator">
            <summary>
            App server's OS path separator
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.transactionInvoker">
            <summary>
            For invoking Colleague Transactions (CTXs)
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.DmiFileTransferClient">
            <summary>
            For sending DMIF requests for upload/download files to/from the app server.
            Uses the app listener connection pool.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.DataReader">
            <summary>
            Gets the correct IColleagueDataReader instance based on the user's authentication status.
            When a user session is present, an authenticated data reader is returned, otherwise, an 
            anonymous data reader is returned.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetEthosExtendedDataLists">
            <summary>
            Takes the EthosExtendedDataList dictionary and splits it into two List string to be passed to Colleague CTX 
            </summary>
            <returns>T1 is the list of keys, T2 is a list values that match up. Returns null if the list is empty</returns>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.InternationalParameters">
            <summary>
            Gets the International Parameters record stored in Colleague in the physical file
            INTL.PARAMS in UT.  The permanent record key is INTERNATIONAL. Cached for 24 hrs.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.LicensedModules">
            <summary>
            Gets the LicensedModules from "SYSDEFS>INSTALLED.APPLICATIONS"
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.InstalledApplications">
            <summary>
            Get Installed Applications record from "SYSDEFS>INSTALLED.APPLICATIONS"
            Cached for 24 hrs.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.#ctor(Ellucian.Web.Cache.ICacheProvider,Ellucian.Data.Colleague.IColleagueTransactionFactory,slf4net.ILogger)">
            <summary>
            Constructor that sets up caching and Colleague data access components.
            </summary>
            <param name="cacheProvider">cache provider</param>
            <param name="transactionFactory">colleague transaction factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildInvalidIdsMessage(System.String,System.String[])">
            <summary>
            Build message for invalid IDs passed to data reader.
            </summary>
            <param name="fileName">Name of Colleague file</param>
            <param name="invalidIds">String array of invalid IDs returned by data accessor</param>
            <returns>Output string for exception processing</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetCodeItem``2(System.String,System.String,System.Func{``0,``1},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague code file.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="cacheKey">ID of the cache entry for this data</param>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague code file as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of code item from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildCodeList``2(System.String,System.Func{``0,``1},System.Boolean)">
            <summary>
            Builds the list of contents from a Colleague code file.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetGuidCodeItem``2(System.String,System.String,System.Func{``0,System.String,``1},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague code file with GUID for each code item.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="cacheKey">ID of the cache entry for this data</param>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each GuidCodeItem entry. Takes a TContract object and a GUID string.</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague code file as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of code item from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildGuidCodeList``2(System.String,System.Func{``0,System.String,``1},System.Boolean)">
            <summary>
            Builds the list of contents from a Colleague code file.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetValcode``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,``0},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague valcode table.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague valcode table as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of valcode table from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildValcodeList``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,``0},System.Boolean)">
            <summary>
            Builds the contents of a Colleague valcode table.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of valcode entries</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetGuidValcode``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,System.String,``0},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague valcode table, with GUID for each code item.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each GuidCodeItem entry. Takes a ApplValcodesVals object and a guid string.</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague valcode table as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of valcode table from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildGuidValcodeList``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,System.String,``0},System.Boolean)">
            <summary>
            Builds the contents of a Colleague valcode table.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of valcode entries</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetRecordKeyFromGuid(System.String)">
            <summary>
            Get the record key from a GUID.
            </summary>
            <param name="guid">The GUID</param>
            <returns>
            The record key corresponding to the input GUID. Null if GUID is invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">guid</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetRecordInfoFromGuid(System.String)">
            <summary>
            Get the lookup result for a GUID.
            </summary>
            <param name="guid">The GUID</param>
            <returns>
            The lookup result corresponding to the input GUID. Null if GUID is invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">guid</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetGuidFromRecordInfo(System.String,System.String,System.String,System.String)">
            <summary> 
            Get the GUID for a specified entity, primary key, and optional secondary field and key 
            </summary> 
            <param name="entity">The name of the entity</param> 
            <param name="primaryKey">The value of the primary key</param> 
            <param name="secondaryField">The CDD name of the secondary field</param> 
            <param name="secondaryKey">The value of the secondary key</param> 
            <returns>The corresponding GUID</returns> 
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.LogDataError(System.String,System.String,System.Object)">
            <summary>
            Log any data errors
            </summary>
            <param name="dataName">Required: Record Name</param>
            <param name="id">Required: Record ID</param>
            <param name="dataObject">Required: Record with errors</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.LogDataError(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Log any data errors
            </summary>
            <param name="dataName">Required: Record Name</param>
            <param name="id">Required: Record ID</param>
            <param name="dataObject">Required: Record with errors</param>
            <param name="ex">Optional: exception thrown</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.LogDataError(System.String,System.String,System.Object,System.Exception,System.String)">
            <summary>
            Log any data errors
            </summary>
            <param name="dataName">Required: Record Name</param>
            <param name="id">Required: Record ID</param>
            <param name="dataObject">Required: Record with errors</param>
            <param name="ex">Optional: exception thrown</param>
            <param name="errorMessage">Optional: error message to log</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetUnidataFormatDate(System.DateTime)">
            <summary>
            Obtains UniData formatted date. This method
            reads the INTL.PARAMS/INTERNATIONAL record to retrieve the current UniData format
            (e.g. "MDY") and caches it for the life of the ColleagueDataReader instance, then
            uses this format string to convert the DateTime object to a UniData date string.
            </summary>
            <param name="inputDate">The input date.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetCodeItemAsync``2(System.String,System.String,System.Func{``0,``1},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague code file asynchronously.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="cacheKey">ID of the cache entry for this data</param>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague code file as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of code item from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildCodeListAsync``2(System.String,System.Func{``0,``1},System.Boolean)">
            <summary>
            Builds the list of contents from a Colleague code file asynchronously.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetGuidCodeItemAsync``2(System.String,System.String,System.Func{``0,System.String,``1},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague code file with GUID for each code item asynchronously.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="cacheKey">ID of the cache entry for this data</param>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each GuidCodeItem entry. Takes a TContract object and a GUID string.</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague code file as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of code item from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildGuidCodeListAsync``2(System.String,System.Func{``0,System.String,``1},System.Boolean)">
            <summary>
            Builds the list of contents from a Colleague code file asynchronously.
            </summary>
            <typeparam name="TContract">Type declaration for the Colleague code file</typeparam>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="sourceFile">Name of the Colleague code file</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetValcodeAsync``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,``0},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague valcode table asynchronously.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague valcode table as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of valcode table from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildValcodeListAsync``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,``0},System.Boolean)">
            <summary>
            Builds the contents of a Colleague valcode table asynchronously.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of valcode entries</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetGuidValcodeAsync``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,System.String,``0},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Returns the contents of a Colleague valcode table, with GUID for each code item asynchronously.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each GuidCodeItem entry. Takes a ApplValcodesVals object and a guid string.</param>
            <param name="timeout">Cache timeout value in minutes</param>
            <param name="anonymous">Read the Colleague valcode table as an anonymous user</param>
            <param name="bypassCache">If set to true, forces read of valcode table from Colleague (bypassing the cache, if present)</param>
            <returns>List of code entities</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.BuildGuidValcodeListAsync``1(System.String,System.String,System.Func{Ellucian.Data.Colleague.DataContracts.ApplValcodesVals,System.String,``0},System.Boolean)">
            <summary>
            Builds the contents of a Colleague valcode table asynchronously.
            </summary>
            <typeparam name="TDomain">Type declaration for the domain entity</typeparam>
            <param name="application">Application containing the Colleague valcode table</param>
            <param name="valcodeTable">Name of the Colleague valcode table</param>
            <param name="buildObjectFunction">Function to build each code entry</param>
            <param name="anonymous">Anonymous user flag</param>
            <returns>List of valcode entries</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetRecordKeyFromGuidAsync(System.String)">
            <summary>
            Get the record key from a GUID asynchronously.
            </summary>
            <param name="guid">The GUID</param>
            <returns>
            The record key corresponding to the input GUID. Null if GUID is invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">guid</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetRecordInfoFromGuidAsync(System.String)">
            <summary>
            Get the lookup result for a GUID asynchronously.
            </summary>
            <param name="guid">The GUID</param>
            <returns>
            The lookup result corresponding to the input GUID. Null if GUID is invalid.
            </returns>
            <exception cref="T:System.ArgumentNullException">guid</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetGuidFromRecordInfoAsync(System.String,System.String,System.String,System.String)">
            <summary> 
            Get the GUID for a specified entity, primary key, and optional secondary field and key asynchronously.
            </summary> 
            <param name="entity">The name of the entity</param> 
            <param name="primaryKey">The value of the primary key</param> 
            <param name="secondaryField">The CDD name of the secondary field</param> 
            <param name="secondaryKey">The value of the secondary key</param> 
            <returns>The corresponding GUID</returns> 
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetInternationalParametersAsync">
            <summary>
            Asynchronously gets the International Parameters record stored in Colleague in the physical file
            INTL.PARAMS in UT.  The permanent record key is INTERNATIONAL. Cached for 24 hrs.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetUnidataFormatDateAsync(System.DateTime)">
            <summary>
            Asynchronously obtains UniData formatted date. This method
            reads the INTL.PARAMS/INTERNATIONAL record to retrieve the current UniData format
            (e.g. "MDY") and caches it for the life of the ColleagueDataReader instance, then
            uses this format string to convert the DateTime object to a UniData date string.
            </summary>
            <param name="inputDate">The input date.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetApphomePathAsync">
            <summary>
            Get the full OS path to Colleague apphome on app server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetAppServerOSPathSeparatorAsync">
            <summary>
            App server's OS path separator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetAuditLogConfigurationAsync(System.Boolean)">
            <summary>
            Determines which audit log categories are available and their state (i.e. enabled or disabled).
            </summary>
            <param name="bypassCache"></param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.BaseColleagueRepository.GetAuditLogCategoriesAsync(System.Boolean)">
            <summary>
            Get a collection of AltIdTypes
            </summary>
            <param name="ignoreCache">Bypass cache flag</param>
            <returns>Collection of AltIdTypes</returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.ColleagueCore">
            <summary>
            This service implements Colleague web services outside of authentication.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueCore.#ctor">
            <summary>
            Default constructor that initializes the web service configuration manager.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueCore.GetSessionProperties">
            <summary>
            Returns the Colleague session properties, including User Name, Timeout, and Security Classes.
            </summary>
            <returns>
            Colleague session properties
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            Undefined Error
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueCore.GetSessionPropertiesAsync">
            <summary>
            Returns the Colleague session properties, including User Name, Timeout, and Security Classes as an
            asynchronous transaction.
            </summary>
            <returns>
            Colleague session properties
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            Undefined Error
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueCore.GetMvcResources">
            <summary>
            This method returns metadata for the ASP.NET MVC areas in the interface.
            </summary>
            <returns>
            area metadata
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            Undefined Error
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueCore.GetMvcResourcesAsync">
            <summary>
            This method returns metadata for the ASP.NET MVC areas in the interface as an asynchronous transaction.
            </summary>
            <returns>
            area metadata
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            Undefined Error
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.ColleagueLogin">
            <summary>
            This class implements core login services that can be used by a client that chooses to exchange data
            using JSON.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.#ctor">
            <summary>
            Default constructor that initializes the web service configuration manager.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.#ctor(Ellucian.Colleague.Configuration.DmiSettings)">
            <summary>
            Constructor that initializes the web service configuration manager with DMI settings.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.#ctor(System.String,System.String,System.Int32,System.Boolean,System.String,System.Int16,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Repositories.ColleagueLogin"/> class with DmiSettings parameters
            </summary>
            <param name="accountName">Name of the account.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="secure">if set to <c>true</c> [secure].</param>
            <param name="hostnameOverride">The hostname override.</param>
            <param name="connectionPoolSize">Size of the connection pool.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.ProxyColleagueLogin(Ellucian.Dmi.Client.ProxyLoginRequest)">
            <summary>
            Authenticates a user with Colleague usin the DMI proxy login.
            </summary>
            <param name="Request">Proxy login request which may include two user id's and a password</param>
            <returns>
            DMI session parameters
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.ProxyColleagueLoginAsync(Ellucian.Dmi.Client.ProxyLoginRequest)">
            <summary>
            Authenticates a user with Colleague using the DMI proxy login as an asynchronous transaction.
            </summary>
            <param name="Request">Proxy login request which may include two user id's and a password</param>
            <returns>
            DMI session parameters
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.StandardColleagueLogin(Ellucian.Dmi.Client.StandardLoginRequest)">
            <summary>
            Authenticates a user with Colleague using the standard DMI login.
            </summary>
            <param name="Request">Standard login request including username and password</param>
            <returns>
            DMI session parameters
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.StandardColleagueLoginAsync(Ellucian.Dmi.Client.StandardLoginRequest)">
            <summary>
            Authenticates a user with Colleague using the standard DMI login as an asynchronous transaction.
            </summary>
            <param name="Request">Standard login request including username and password</param>
            <returns>
            DMI session parameters
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.ColleagueLogout(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Logs a user out of Colleague.
            </summary>
            <param name="Session">DMI session parameters</param>
            <returns>
            confirmation of logout removal and/or processing errors
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.ColleagueLogoutAsync(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Logs a user out of Colleague as an asynchronous transaction.
            </summary>
            <param name="Session">DMI session parameters</param>
            <returns>
            confirmation of logout removal and/or processing errors
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.ChangeColleaguePassword(Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest)">
            <summary>
            Change the Colleague password for a user.
            </summary>
            <param name="Request">change password request that includes the current and new passwords</param>
            <returns>
            password change success or errors
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueLogin.ChangeColleaguePasswordAsync(Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest)">
            <summary>
            Change the Colleague password for a user as an asynchronous transaction.
            </summary>
            <param name="Request">change password request that includes the current and new passwords</param>
            <returns>
            password change success or errors
            </returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository">
            <summary>
            Provides methods to manage user Colleague sessions
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ProductName">
            <summary>
            Optional. For usage tracking. Will be sent to Colleague as part of the login process.
            Will be trimmed to 10 characters or less.
            </summary>
            <value>
            The name of the product.
            </value>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ProductVersion">
            <summary>
            Optional. For usage tracking. Will be sent to Colleague as part of the login process.
            </summary>
            <value>
            The product version.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.#ctor(Ellucian.Colleague.Configuration.DmiSettings,Ellucian.Web.Cache.ICacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository" /> class.
            </summary>
            <param name="settings">The settings.</param>
            <param name="cacheProvider">Cache provider</param>
            <exception cref="T:System.ArgumentNullException">settings</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.Login(System.String,System.String)">
            <summary>
            Logs into Colleague and returns a JSON web token.
            </summary>
            <param name="userId">The user id.</param>
            <param name="password">The password.</param>
            <returns>a JSON web token</returns>
            <exception cref="T:System.Exception">Login failed: + session.Errors.First().ErrorMessageText</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.LoginAsync(System.String,System.String)">
            <summary>
            Logs into Colleague as an asynchronous transaction and returns a JSON web token.
            </summary>
            <param name="userId">The user id.</param>
            <param name="password">The password.</param>
            <returns>a JSON web token</returns>
            <exception cref="T:System.Exception">Login failed: + session.Errors.First().ErrorMessageText</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.Login(Ellucian.Dmi.Client.StandardLoginRequest)">
            <summary>
            Execute a standard login request
            </summary>
            <param name="request">The standard login request.</param>
            <returns>
            a session object with a token number
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.LoginAsync(Ellucian.Dmi.Client.StandardLoginRequest)">
            <summary>
            Execute a standard login request as an asynchronous transaction
            </summary>
            <param name="request">The standard login request.</param>
            <returns>
            a session object with a token number
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.Login(Ellucian.Dmi.Client.ProxyLoginRequest)">
            <summary>
            Execute a proxy login request
            </summary>
            <param name="proxyLoginRequest">The proxy login request.</param>
            <returns>
            a session object with a token number
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.LoginAsync(Ellucian.Dmi.Client.ProxyLoginRequest,System.String)">
            <summary>
            Execute a proxy login request as an asynchronous transaction
            </summary>
            <param name="proxyLoginRequest">The proxy login request.</param>
            <param name="personGuid">Optional Person GUID used in Proxy Login</param>
            <returns>
            a session object with a token number
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ProxyLogin(System.String,System.String,System.String)">
            <summary>
            Logs into Colleague using a proxy, and returns a JSON web token.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="userId">The user id.</param>
            <param name="proxyPassword">The proxy password.</param>
            <returns>
            a JSON web token
            </returns>
            <exception cref="T:System.Exception">Login failed: + session.Errors.First().ErrorMessageText</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ProxyLoginAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Logs into Colleague using a proxy as an asynchronous transaction, and returns a JSON web token.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="userId">The user id.</param>
            <param name="proxyPassword">The proxy password.</param>
            <param name="personGuid">Person GUID string to represent person.</param>
            <returns>
            a JSON web token
            </returns>
            <exception cref="T:System.Exception">Login failed: + session.Errors.First().ErrorMessageText</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GenerateSessionFixationToken(System.String,System.String)">
            <summary>
            Generates a random token used to prevent session fixation.
            </summary>
            <param name="securityToken">The colleague security token.</param>
            <param name="controlId">The colleague control id.</param>
            <returns>a random token</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetToken(System.String,System.String)">
            <summary>
            Creates a JSON web token for an existing Colleague session.
            </summary>
            <param name="colleagueSecurityToken">The colleague security token.</param>
            <param name="colleagueControlId">The colleague control id.</param>
            <returns>
            a JSON web token
            </returns>
            <exception cref="T:System.Exception">Couldn't get user ID for  + personId</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetTokenAsync(System.String,System.String)">
            <summary>
            Creates a JSON web token for an existing Colleague session as an asynchronous transaction.
            </summary>
            <param name="colleagueSecurityToken">The colleague security token.</param>
            <param name="colleagueControlId">The colleague control id.</param>
            <returns>
            a JSON web token
            </returns>
            <exception cref="T:System.Exception">Couldn't get user ID for  + personId</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetToken(System.String)">
            <summary>
            Creates a JSON web token for an existing Colleague session.
            </summary>
            <param name="basicCredentials">The basic credentials value (Base64 username + ':' + password).</param>
            <returns>
            a JSON web token
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetTokenAsync(System.String)">
            <summary>
            Creates a JSON web token for an existing Colleague session as an asynchronous transaction.
            </summary>
            <param name="basicCredentials">The basic credentials value (Base64 username + ':' + password).</param>
            <returns>
            a JSON web token
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetOauthProxyTokenAsync(System.String,System.String,System.String)">
            <summary>
            Creates a JSON web token for an existing Colleague session as an asynchronous transaction.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="proxyPassword">The proxy password.</param>
            <param name="personGuid">Person GUID string to represent person.</param>
            <returns>
            A Tuple of string, string containing a JSON web token (JWT) and the username for the person GUID passed in.
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.BuildClaims(Ellucian.Dmi.Client.GetClaimsResponse)">
            <summary>
            Builds a <see cref="T:Ellucian.Web.Security.Claims"/> from a <see cref="T:Ellucian.Dmi.Client.GetClaimsResponse"/> source.
            </summary>
            <param name="claimInfo">The <see cref="T:Ellucian.Dmi.Client.GetClaimsResponse"/> source.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetClaims(System.String,System.String)">
            <summary>
            Retrieve roles and session information for the user of a session,
            identified by the session token ID. Throw ColleagueApiException if
            the response contains error subsets. Turn on logging to find out
            what the errors are.
            </summary>
            <param name="colleagueSecurityToken">The colleague security token.</param>
            <param name="colleagueControlId">The colleague control id.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">Error occurred during retrieval of session info.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetClaimsAsync(System.String,System.String)">
            <summary>
            Retrieve roles and session information for the user of a session as,
            an asynchronous transaction, identified by the session token ID.
            Throw ColleagueApiException if the response contains error subsets.
            Turn on logging to find out what the errors are.
            </summary>
            <param name="colleagueSecurityToken">The colleague security token.</param>
            <param name="colleagueControlId">The colleague control id.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">Error occurred during retrieval of session info.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetClaims(System.String,System.String,System.String)">
            <summary>
            Retrieve roles and session information for the user of a session,
            identified by the session token ID. Throw ColleagueApiException if
            the response contains error subsets. Turn on logging to find out
            what the errors are.
            </summary>
            <param name="colleagueSecurityToken">The colleague security token.</param>
            <param name="colleagueControlId">The colleague control id.</param>
            <param name="basicCredentials">The basic credentials value (Base64 username + ':' + password).</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">Error occurred during retrieval of session info.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.GetClaimsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieve roles and session information for the user of a session as,
            an asynchronous transaction, identified by the session token ID.
            Throw ColleagueApiException if the response contains error subsets.
            Turn on logging to find out what the errors are.
            </summary>
            <param name="colleagueSecurityToken">The colleague security token.</param>
            <param name="colleagueControlId">The colleague control id.</param>
            <param name="basicCredentials">The basic credentials value (Base64 username + ':' + password).</param>
            <param name="personGuid">Optional person guid used when Oauth proxy is being used.</param>
            <returns></returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">Error occurred during retrieval of session info.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.SetProxySubjectAsync(System.String)">
            <summary>
            Set the proxy subject for the current user (the proxy user). The proxy subject's roles will be 
            added to this user's list of roles, and the proxy subject name and permission claims will be added. 
            Over on the Colleague side, the current user's WWW.TOKENS record will be updated with the 
            proxy subject's person ID. A new JWT will be returned to reflect this. 
            Note: if an empty string is passed in for the proxy subject ID, then any previously assigned 
            proxy subject claims will be removed from the session token.
            </summary>
            <param name="ProxySubjectPersonId">The proxy subject person ID. If empty, any previously assigned 
            proxy subject claims will be removed from the session token.</param>
            <returns>
            An updated Json Web Token string for the current user that includes the proxy subject's roles and permissions.
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">Error occurred during retrieval of session info.</exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.AssignProxySubjectToCurrentUserColleagueSessionAsync(System.String,System.String,System.String)">
            <summary>
            Assigns the proxy subject to current user colleague session (the WWW.TOKENS record), provided
            the the proxy user has a valid proxy access for the proxy subject.
            </summary>
            <param name="ProxySubjectPersonId">The proxy subject person ID.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="userId">The user id.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ChangePasswordAsync(System.String,System.String,System.String)">
            <summary>
            Changes the password as an asynchronous transaction.
            </summary>
            <param name="userId">The user id.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ChangePassword(Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest)">
            <summary>
            Execute a change password request.
            </summary>
            <param name="Request">The request.</param>
            <returns>
            A response indicating whether the transaction succeeded
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.ChangePasswordAsync(Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest)">
            <summary>
            Execute a change password request as an asynchronous transaction.
            </summary>
            <param name="Request">The request.</param>
            <returns>
            A response indicating whether the transaction succeeded
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.Logout(System.String)">
            <summary>
            Logs out of Colleague.
            </summary>
            <param name="token">a JSON web token</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.LogoutAsync(System.String)">
            <summary>
            Logs out of Colleague as an asynchronous transaction.
            </summary>
            <param name="token">a JSON web token</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.Logout(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Execute a logout transaction.
            </summary>
            <param name="Session">The session.</param>
            <returns>
            A response indicating whether the transaction succeeded
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.LogoutAsync(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Execute a logout transaction as an asynchronous transaction.
            </summary>
            <param name="Session">The session.</param>
            <returns>
            A response indicating whether the transaction succeeded
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.ColleagueSessionRepository.SyncSessionAsync(System.String,System.String)">
            <summary>
            Performs a CTRQ request which will sync the Colleague web session
            token's idle timeout.
            </summary>
            <param name="securityToken">The session's security token.</param>
            <param name="controlId">The session's control ID.</param>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.DmiSessionManager">
            <summary>
            The DmiSessionManager class provides a single management object for standard DMI session actions. This class handles the DMI transaction,
            response parsing, and data model population.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteLoginTransaction(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Executes the standard DMI login transaction on the Application Server.
            </summary>
            <param name="loginTransaction">Standard DMI Session Login Transaction</param>
            <param name="serverConnection">Application Server connection</param>
            <returns>
            DMI session
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteLoginTransactionAsync(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Executes the standard DMI login transaction on the Application Server as an asynchronous transaction.
            </summary>
            <param name="loginTransaction">Standard DMI Session Login Transaction</param>
            <param name="serverConnection">Application Server connection</param>
            <returns>
            DMI session
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ValidateLoginRequest(Ellucian.Dmi.Client.StandardLoginRequest)">
            <summary>
            Validates a standard DMI login request object. The UserID and Password properties must be specified for a valid request.
            </summary>
            <param name="loginRequest">login request parameters</param>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ValidateLoginRequest(Ellucian.Dmi.Client.ProxyLoginRequest)">
            <summary>
            Validates a standard DMI login request object. The UserID and Password properties must be specified for a valid request.
            </summary>
            <param name="loginRequest">login request parameters</param>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteLogoutTransaction(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Executes the standard DMI login transaction on the Application Server.
            </summary>
            <param name="logoutTransaction">DMI Session Logout Transaction</param>
            <param name="serverConnection">Application Server connection</param>
            <returns>
            confirmation of session logout
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteLogoutTransactionAsync(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Executes the standard DMI login transaction on the Application Server as an asynchronous transaction.
            </summary>
            <param name="logoutTransaction">DMI Session Logout Transaction</param>
            <param name="serverConnection">Application Server connection</param>
            <returns>
            confirmation of session logout
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ValidateLogoutRequest(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Validates a logout request object. The SecurityToken and SenderControlId properties 
            must be specified for a valid request.
            </summary>
            <param name="session">session to be logged out</param>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteChangePasswordTransaction(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Executes the change password transaction on the Application Server.
            </summary>
            <param name="changePasswordTransaction">change password transaction</param>
            <param name="serverConnection">Application Server connection</param>
            <returns>
            password change success or errors
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteChangePasswordTransactionAsync(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Executes the change password transaction on the Application Server as an asynchronous transaction.
            </summary>
            <param name="changePasswordTransaction">change password transaction</param>
            <param name="serverConnection">Application Server connection</param>
            <returns>
            password change success or errors
            </returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ValidateChangePasswordRequest(Ellucian.Data.Colleague.DataContracts.ChangePasswordRequest)">
            <summary>
            Validates a standard DMI login request object. 
            The UserID and Password properties must be specified for a valid request.
            </summary>
            <param name="changePasswordRequest">login request parameters</param>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueApiException">
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ProcessLoginResponse(System.Object[])">
            <summary>
            This method parses the login response and builds a DMI session object.
            </summary>
            <param name="loginResponseObjects">Login DMI Transaction response objects</param>
            <returns>DMI session</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ProcessChangePasswordResponse(System.Object[])">
            <summary>
            This method parses the change password response and captures the success or errors
            </summary>
            <param name="changePasswordResponseObjects">Change Password DMI Transaction response objects</param>
            <returns>DMI session</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ProcessLogoutResponse(System.Object[])">
            <summary>
            This method parses the get session state response and provides confirmation.
            </summary>
            <param name="logoutResponseObjects">Logout DMI Transaction response objects</param>
            <returns>confirmation of session logout</returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteGetClaimsTransaction(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Execute the get claims request (CLMQ)
            </summary>
            <param name="getClaimsTransaction">The get claims transaction.</param>
            <param name="serverConnection">The server connection.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ExecuteGetClaimsTransactionAsync(Ellucian.Dmi.Runtime.DmiTransaction,Ellucian.Colleague.Configuration.IApplicationServerConnection)">
            <summary>
            Execute the get claims request (CLMQ) as an asynchronous transaction
            </summary>
            <param name="getClaimsTransaction">The get claims transaction.</param>
            <param name="serverConnection">The server connection.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.DmiSessionManager.ProcessGetClaimsResponse(System.Object[])">
            <summary>
            This method parses the get claims request and log any errors returned.
            </summary>
            <param name="getClaimsResponseObjects"></param>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.RoleRepository">
            <summary>
            RoleRepository class contains code to manage Colleague roles and the associated permissions that a given
            user may have when accessing Colleague.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.RoleRepository.#ctor(Ellucian.Web.Cache.ICacheProvider,Ellucian.Data.Colleague.IColleagueTransactionFactory,slf4net.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Repositories.RoleRepository"/> class.
            </summary>
            <param name="cacheProvider">Cache provider</param>
            <param name="transactionFactory">Colleague transaction factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Ellucian.Data.Colleague.Repositories.RoleRepository.Roles">
            <summary>
            Gets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.RoleRepository.GetRolesAsync">
            <summary>
            Gets the roles asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.Repositories.UserRepository">
            <summary>
            This class contains methods to retrieve user-related information from Colleague.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.UserRepository.#ctor(Ellucian.Web.Cache.ICacheProvider,Ellucian.Data.Colleague.IColleagueTransactionFactory,slf4net.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Repositories.UserRepository"/> class.
            </summary>
            <param name="cacheProvider">cache provider</param>
            <param name="transactionFactory">colleague transaction factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.UserRepository.GetMatchingUsers(System.String)">
            <summary>
            Returns the users whose login name begins with the specified string.
            </summary>
            <param name="partialLogin">The partial login.</param>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Repositories.UserRepository.GetMatchingUsersAsync(System.String)">
            <summary>
            Asynchronously returns the users whose login name begins with the specified string.
            </summary>
            <param name="partialLogin">The partial login.</param>
            <returns></returns>
        </member>
        <member name="T:Ellucian.Data.Colleague.ColleagueConnectionTestService">
            <summary>
            Service for testing the connection(s) to the Colleague environment
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueConnectionTestService.#ctor(slf4net.ILogger)">
            <summary>
            Constructor for the ColleagueConnectionTestService
            </summary>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueConnectionTestService.TestColleagueConnectionsAsync">
            <summary>
            Test the DMI listener connection(s) from web.config 
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.ColleagueConnectionTestService.TestColleagueConnectionsAsync(Ellucian.Colleague.Configuration.ColleagueSettings)">
            <summary>
            Test the DMI listener connection(s) with ColleagueSettings passed in
            </summary>
        </member>
        <member name="T:Ellucian.Data.Colleague.SimpleDataResponseSubset">
            <summary>
            This is an implementation of IDmiSubset used by the
            ColleagueDataReader to package R.dot strings from the DAFS response and pass to
            the deserializer. This implementation of IDmiSubset is simple and guarantees
            minimum overhead.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.SimpleDataResponseSubset.Arguments">
            <summary>
            The arguments portion of a DMI subset: all fields from the 4th to the penultimate field - that is,
            all but the three field header and the single trailer field - presented as a list of strings.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.SimpleDataResponseSubset.Count">
            <summary>
            The number of fields (including header and trailer) present in the subset.
            This is the content of the second field in the header of a subset.
            Any value less than 4 is an error.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.SimpleDataResponseSubset.MioLevel">
            <summary>
            The Mio level implied in the transaction (usually 0).
            This is the content of the third field in the header of a subset.
            </summary>
        </member>
        <member name="P:Ellucian.Data.Colleague.SimpleDataResponseSubset.SubsetType">
            <summary>
            The name of the subset - must not be null.
            This is the content of the first field in the header and also the
            start of the trailer field which is the subset type with ".END" appended.
            The trailer is automatically updated whenever this property is changed.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.SimpleDataResponseSubset.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.SimpleDataResponseSubset"/> class.
            </summary>
            <param name="subsetType">DMI subset type</param>
            <param name="args">Contents of the DMI subset, minus standard header fields and the set trailer</param>
        </member>
        <member name="M:Ellucian.Data.Colleague.SimpleDataResponseSubset.AsStream">
            <summary>
            This method is not supported.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.SimpleDataResponseSubset.GetBytes">
            <summary>
            This method is not supported.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Ellucian.Data.Colleague.Tracing.EnvisionLogger">
            <summary>
            An EnvisionLogger provides the methods by which a DMI session can
            trigger the startup and shutdown of GRDS logging in the Colleague
            environment on the application server.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Tracing.EnvisionLogger._dmiSession">
            <summary>
            An EnvisionLogger must be associated with a StandardDmiSession.  
            The session provides the security token and control ID needed to execute 
            the TURN.GRDS.ON and TURN.GRDS.OFF web services.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Tracing.EnvisionLogger._txInvoker">
            <summary>
            A Colleague Web Service Manager will be instantiated in the EnvisionLogger's constructor.
            It is used to execute the TURN.GRDS.ON and TURN.GRDS.OFF web services.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Tracing.EnvisionLogger._active">
            <summary>
            initialized to false.  Set to true when GRDS is turned on; false when turned off.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Tracing.EnvisionLogger._token">
            <summary>
            Since the security token effectively identifies the GRDS session in the apphome environment,
            we record what it was when the GRDS session was turned on.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Tracing.EnvisionLogger._logName">
            <summary>
            When a GRDS session is turned on, the user must provide the name of the log file.
            We record it solely to be able to remind the user of the log name he specified.
            </summary>
        </member>
        <member name="F:Ellucian.Data.Colleague.Tracing.EnvisionLogger._setID">
            <summary>
            When a GRDS session is started, the user must provide the ID of the GRAS.REQUEST.SET 
            record to use (see Envision UI form "GRSS").
            We record it solely to be able to remind the user of what he specified.
            </summary>
        </member>
        <member name="M:Ellucian.Data.Colleague.Tracing.EnvisionLogger.Get_active">
            <summary>
            Gets the active logger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Tracing.EnvisionLogger.Get_logName">
            <summary>
            Gets the active log name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Tracing.EnvisionLogger.Get_setID">
            <summary>
            Gets the setID associated to the log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ellucian.Data.Colleague.Tracing.EnvisionLogger.#ctor(Ellucian.Dmi.Client.StandardDmiSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Ellucian.Data.Colleague.Tracing.EnvisionLogger"/> class using
            a StandardDmiSession object.
            </summary>
            <param name="dmiSession">Required.  Must have a SecurityToken</param>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">
            Could not construct EnvisionLogger: null dmiSession used.
            or
            Could not construct EnvisionLogger: dmiSession missing security token.
            or
            Could not construct EnvisionLogger: dmiSession missing sender control ID.
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Tracing.EnvisionLogger.TurnGrdsOn(System.String,System.String)">
            <summary>
            In the apphome environment, turn GRDS logging on for the token
            associated with the current _dmiSession.
            </summary>
            <param name="logName">Required input: Name of the GRDS log file (will be prefixed with "O_" and
            created in the _PH_ directory of the apphome environment)</param>
            <param name="setID">Required input: ID of a pre-existing GRAS.REQUEST.SET record (see
            Envision UI form "GRSS")</param>
            <returns>
            Returns true if all went well
            </returns>
            <exception cref="T:Ellucian.Data.Colleague.Exceptions.ColleagueTransactionException">
            Log name is required to turn GRDS on
            or
            GRAS.REQUEST.SET ID is required to turn GRDS on
            or
            _dmiSession is null
            or
            _dmiSession has no associated token
            or
            GRDS is already active. Log Name= + _logName + , Request set= + _setID
            or
            GRDS is active for a different token.  Log Name= + _logName + , Request set= + _setID
            or
            </exception>
        </member>
        <member name="M:Ellucian.Data.Colleague.Tracing.EnvisionLogger.TurnGrdsOff">
            <summary>
            In the apphome environment, turn GRDS logging off for the token
            associated with the current _dmiSession.
            </summary>
        </member>
    </members>
</doc>
